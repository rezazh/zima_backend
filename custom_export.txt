

====== FILE: templates/chat/admin_dashboard.html ======

{% extends 'base/base.html' %}
{% load static %}

{% block title %}داشبورد پشتیبانی{% endblock %}

{% block extra_css %}
<link rel="stylesheet" href="{% static 'chat/css/chat.css' %}">
<link rel="stylesheet" href="{% static 'chat/css/admin-dashboard.css' %}">
{% endblock %}

{% block content %}
<div class="container-fluid mt-4">
    <div class="row">
        <div class="col-md-12">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h2>داشبورد پشتیبانی</h2>
                <a href="{% url 'chat:chat_list' %}" class="btn btn-outline-primary">
                    <i class="fas fa-comments ml-1"></i> گفتگوهای من
                </a>
            </div>

            <!-- افزودن باکس جستجو -->
            <div class="card mb-4">
                <div class="card-body">
                    <form id="search-form" method="GET" action="{% url 'chat:admin_dashboard' %}">
                        <div class="input-group">
                            <input type="text" class="form-control" id="search-input" name="q" placeholder="جستجو در گفتگوها و پیام‌ها..." value="{{ request.GET.q|default:'' }}">
                            <button class="btn btn-primary" type="submit">
                                <i class="fas fa-search"></i> جستجو
                            </button>
                        </div>
                    </form>
                </div>
            </div>

            <!-- نتایج جستجو -->
            {% if request.GET.q %}
            <div class="card mb-4">
                <div class="card-header bg-light">
                    <h5 class="mb-0">نتایج جستجو برای: "{{ request.GET.q }}"</h5>
                </div>
                <div class="card-body p-0">
                    {% if search_results %}
                        <ul class="list-group list-group-flush">
                            {% for room in search_results %}
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    <div>
                                        <div class="d-flex align-items-center">
                                            <span class="fw-bold">{{ room.name }}</span>
                                            <div class="user-status {% if room.user.online_status.status == 'online' %}online{% else %}offline{% endif %}"
                                                 data-user-id="{{ room.user.id }}"
                                                 title="{% if room.user.online_status.status == 'online' %}آنلاین{% else %}آفلاین{% endif %}">
                                                <span class="status-dot {% if room.user.online_status.status == 'online' %}online{% else %}offline{% endif %}"></span>
                                            </div>
                                            <span class="badge {% if room.status == 'open' %}bg-success{% else %}bg-danger{% endif %} mx-2">
                                                {{ room.get_status_display }}
                                            </span>
                                        </div>
                                        <small class="text-muted">{{ room.user.username }} - {{ room.created_at|date:"j F Y H:i" }}</small>
                                        {% if room.matching_message %}
                                            <div class="search-result-message mt-2">
                                                <small class="text-muted">پیام یافت شده:</small>
                                                <div class="search-highlight p-2 mt-1 bg-light rounded">{{ room.matching_message.content }}</div>
                                            </div>
                                        {% endif %}
                                    </div>
                                    <a href="{% url 'chat:room' room_id=room.id %}" class="btn btn-sm btn-outline-primary">
                                        <i class="fas fa-eye"></i> مشاهده
                                    </a>
                                </li>
                            {% endfor %}
                        </ul>
                    {% else %}
                        <div class="text-center py-4">
                            <p class="text-muted mb-0">هیچ نتیجه‌ای یافت نشد.</p>
                        </div>
                    {% endif %}
                </div>
            </div>
            {% endif %}

            <div class="row">
                <div class="col-md-6">
                    <div class="card mb-4">
                        <div class="card-header bg-danger text-white d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">گفتگوهای بدون پشتیبان</h5>
                            <span class="badge bg-light text-dark">{{ unassigned_rooms.count }}</span>
                        </div>
                        <div class="card-body p-0">
                            {% if unassigned_rooms %}
                                <ul class="list-group list-group-flush">
                                    {% for room in unassigned_rooms %}
                                        <li class="list-group-item d-flex justify-content-between align-items-center">
                                            <div>
                                                <div class="d-flex align-items-center">
                                                    <span class="fw-bold">{{ room.name }}</span>
                                                    <div class="user-status {% if room.user.online_status.status == 'online' %}online{% else %}offline{% endif %}"
                                                         data-user-id="{{ room.user.id }}"
                                                         title="{% if room.user.online_status.status == 'online' %}آنلاین{% else %}آفلاین{% endif %}">
                                                        <span class="status-dot {% if room.user.online_status.status == 'online' %}online{% else %}offline{% endif %}"></span>
                                                    </div>
                                                </div>
                                                <small class="text-muted">{{ room.user.username }} - {{ room.created_at|date:"j F Y H:i" }}</small>
                                            </div>
                                            <button class="btn btn-sm btn-primary assign-room" data-room-id="{{ room.id }}">
                                                <i class="fas fa-user-plus"></i> اختصاص به من
                                            </button>
                                        </li>
                                    {% endfor %}
                                </ul>
                            {% else %}
                                <div class="text-center py-4">
                                    <p class="text-muted mb-0">هیچ گفتگوی بدون پشتیبانی وجود ندارد.</p>
                                </div>
                            {% endif %}
                        </div>
                    </div>

                    <div class="card mb-4">
                        <div class="card-header bg-success text-white d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">گفتگوهای من</h5>
                            <span class="badge bg-light text-dark">{{ my_rooms.count }}</span>
                        </div>
                        <div class="card-body p-0">
                            {% if my_rooms %}
                                <ul class="chat-list">
                                    {% for room in my_rooms %}
                                        <li class="chat-item">
                                            <a href="{% url 'chat:room' room_id=room.id %}" class="text-decoration-none text-dark d-flex w-100 justify-content-between align-items-center">
                                                <div class="chat-item-info">
                                                    <div class="d-flex align-items-center">
                                                        <div class="chat-item-title">
                                                            {{ room.name }}
                                                        </div>
                                                        <div class="user-status {% if room.user.online_status.status == 'online' %}online{% else %}offline{% endif %}"
                                                             data-user-id="{{ room.user.id }}"
                                                             title="{% if room.user.online_status.status == 'online' %}آنلاین{% else %}آفلاین{% endif %}">
                                                            <span class="status-dot {% if room.user.online_status.status == 'online' %}online{% else %}offline{% endif %}"></span>
                                                        </div>
                                                    </div>
                                                    <div class="chat-item-last-message">
                                                        {% if room.messages.last %}
                                                            {% if room.messages.last.sender == request.user %}
                                                                <i class="fas {% if room.messages.last.is_read %}fa-check-double{% else %}fa-check{% endif %} text-muted"></i>
                                                            {% endif %}
                                                            {{ room.messages.last.content|truncatechars:50 }}
                                                        {% else %}
                                                            بدون پیام
                                                        {% endif %}
                                                    </div>
                                                </div>
                                                <div class="chat-item-meta">
                                                    <div class="chat-item-time">
                                                        {{ room.updated_at|date:"H:i" }}
                                                    </div>
                                                    {% if room.unread_count > 0 %}
                                                        <div class="unread-badge">
                                                            {{ room.unread_count }}
                                                        </div>
                                                    {% endif %}
                                                </div>
                                            </a>
                                        </li>
                                    {% endfor %}
                                </ul>
                            {% else %}
                                <div class="text-center py-4">
                                    <p class="text-muted mb-0">هیچ گفتگویی به شما اختصاص داده نشده است.</p>
                                </div>
                            {% endif %}
                        </div>
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="card mb-4">
                        <div class="card-header bg-info text-white d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">گفتگوهای در حال انجام</h5>
                            <span class="badge bg-light text-dark">{{ assigned_rooms.count }}</span>
                        </div>
                        <div class="card-body p-0">
                            {% if assigned_rooms %}
                                <ul class="list-group list-group-flush">
                                    {% for room in assigned_rooms %}
                                        <li class="list-group-item d-flex justify-content-between align-items-center">
                                            <div>
                                                <div class="d-flex align-items-center">
                                                    <span class="fw-bold">{{ room.name }}</span>
                                                    <div class="user-status {% if room.user.online_status.status == 'online' %}online{% else %}offline{% endif %}"
                                                         data-user-id="{{ room.user.id }}"
                                                         title="{% if room.user.online_status.status == 'online' %}آنلاین{% else %}آفلاین{% endif %}">
                                                        <span class="status-dot {% if room.user.online_status.status == 'online' %}online{% else %}offline{% endif %}"></span>
                                                    </div>
                                                </div>
                                                <small class="text-muted">{{ room.user.username }} - پشتیبان: {{ room.agent.username }}</small>
                                            </div>
                                            <a href="{% url 'chat:room' room_id=room.id %}" class="btn btn-sm btn-outline-primary">
                                                <i class="fas fa-eye"></i> مشاهده
                                            </a>
                                        </li>
                                    {% endfor %}
                                </ul>
                            {% else %}
                                <div class="text-center py-4">
                                    <p class="text-muted mb-0">هیچ گفتگوی در حال انجامی وجود ندارد.</p>
                                </div>
                            {% endif %}
                        </div>
                    </div>

                    <div class="card mb-4">
                        <div class="card-header bg-secondary text-white d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">گفتگوهای بسته شده</h5>
                            <div class="d-flex align-items-center">
                                <form id="closed-search-form" class="me-2">
                                    <div class="input-group input-group-sm">
                                        <input type="text" class="form-control form-control-sm" id="closed-search-input" placeholder="جستجو..." value="{{ request.GET.closed_q|default:'' }}" name="closed_q">
                                        <button class="btn btn-sm btn-light" type="submit">
                                            <i class="fas fa-search"></i>
                                        </button>
                                    </div>
                                </form>
                                <span class="badge bg-light text-dark">{{ closed_rooms.count }}</span>
                            </div>
                        </div>
                        <div class="card-body p-0" style="max-height: 300px; overflow-y: auto;">
                            {% if closed_rooms %}
                                <ul class="list-group list-group-flush">
                                    {% for room in closed_rooms %}
                                        <li class="list-group-item d-flex justify-content-between align-items-center">
                                            <div>
                                                <span class="fw-bold">{{ room.name }}</span>
                                                <br>
                                                <small class="text-muted">
                                                    {{ room.user.username }}
                                                    {% if room.agent %}
                                                        - پشتیبان: {{ room.agent.username }}
                                                    {% endif %}
                                                    - بسته شده در: {{ room.closed_at|date:"j F Y H:i" }}
                                                </small>
                                            </div>
                                            <a href="{% url 'chat:room' room_id=room.id %}" class="btn btn-sm btn-outline-secondary">
                                                <i class="fas fa-eye"></i> مشاهده
                                            </a>
                                        </li>
                                    {% endfor %}
                                </ul>
                            {% else %}
                                <div class="text-center py-4">
                                    <p class="text-muted mb-0">هیچ گفتگوی بسته شده‌ای وجود ندارد.</p>
                                </div>
                            {% endif %}
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block extra_js %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    // اختصاص گفتگو به پشتیبان
    document.querySelectorAll('.assign-room').forEach(function(button) {
        button.addEventListener('click', function() {
            const roomId = this.getAttribute('data-room-id');

            if (confirm('آیا از اختصاص این گفتگو به خود اطمینان دارید؟')) {
                fetch(`/chat/admin/assign/${roomId}/`, {
                    method: 'POST',
                    headers: {
                        'X-CSRFToken': getCookie('csrftoken'),
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        window.location.href = data.redirect_url;
                    } else {
                        alert('خطا: ' + data.error);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('خطا در اختصاص گفتگو. لطفاً مجدداً تلاش کنید.');
                });
            }
        });
    });

    // جستجو در گفتگوهای بسته شده
    const closedSearchForm = document.getElementById('closed-search-form');
    if (closedSearchForm) {
        closedSearchForm.addEventListener('submit', function(e) {
            e.preventDefault();
            const searchQuery = document.getElementById('closed-search-input').value.trim();

            // افزودن پارامتر جستجو به URL و حفظ پارامترهای دیگر
            const currentUrl = new URL(window.location.href);
            if (searchQuery) {
                currentUrl.searchParams.set('closed_q', searchQuery);
            } else {
                currentUrl.searchParams.delete('closed_q');
            }

            window.location.href = currentUrl.toString();
        });
    }

    // دریافت مقدار کوکی
    function getCookie(name) {
        let cookieValue = null;
        if (document.cookie && document.cookie !== '') {
            const cookies = document.cookie.split(';');
            for (let i = 0; i < cookies.length; i++) {
                const cookie = cookies[i].trim();
                if (cookie.substring(0, name.length + 1) === (name + '=')) {
                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                    break;
                }
            }
        }
        return cookieValue;
    }
});
</script>
{% endblock %}

====== FILE: templates/chat/chat_room.html ======

{% extends 'base/base.html' %}
{% load static %}

{% block title %}گفتگو با {{ room.name }}{% endblock %}

{% block extra_css %}
<link rel="stylesheet" href="{% static 'chat/css/chat.css' %}">
<style>
    /* استایل اضافی برای اطمینان از عملکرد صحیح */
    .chat-actions {
        min-height: 38px; /* ارتفاع حداقل برای جلوگیری از تغییر اندازه هنگام تغییر دکمه‌ها */
    }

    .notification-container {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 1000;
    }
</style>
{% endblock %}

{% block content %}
<div class="notification-container"></div>
<div class="container mt-4">
    <div class="row">
        <div class="col-md-12">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h2>گفتگو با {{ room.name|cut:"("|cut:")" }}</h2>
                <a href="{% url 'chat:chat_list' %}" class="btn btn-outline-secondary">
                    <i class="fas fa-arrow-right ml-1"></i> بازگشت به لیست گفتگوها
                </a>
            </div>

            <div class="chat-container">
                <div class="chat-header">
                    <div class="d-flex align-items-center">
                        <h3>{{ room.name|cut:"("|cut:")" }}</h3>
                        {% if request.user.is_staff %}
                            <!-- اگر کاربر ادمین است، وضعیت کاربر عادی را نمایش بده -->
                            <div class="user-status {% if room.user.online_status.status == 'online' %}online{% else %}offline{% endif %}"
                                 data-user-id="{{ room.user.id }}"
                                 title="{% if room.user.online_status.status == 'online' %}آنلاین{% else %}آفلاین{% endif %}">
                                <span class="status-dot {% if room.user.online_status.status == 'online' %}online{% else %}offline{% endif %}"></span>
                            </div>
                        {% else %}
                            <!-- اگر کاربر عادی است، وضعیت ادمین/پشتیبان را نمایش بده (اگر پشتیبان وجود داشته باشد) -->
                            {% if room.agent %}
                                <div class="user-status {% if room.agent.online_status.status == 'online' %}online{% else %}offline{% endif %}"
                                     data-user-id="{{ room.agent.id }}"
                                     title="{% if room.agent.online_status.status == 'online' %}آنلاین{% else %}آفلاین{% endif %}">
                                    <span class="status-dot {% if room.agent.online_status.status == 'online' %}online{% else %}offline{% endif %}"></span>
                                </div>
                            {% else %}
                                <div class="user-status offline" title="آفلاین">
                                    <span class="status-dot offline"></span>
                                </div>
                            {% endif %}
                        {% endif %}
                        <span class="badge {% if room.status == 'open' %}bg-success{% else %}bg-danger{% endif %} mx-2" id="room-status">
                            {{ room.get_status_display }}
                        </span>
                    </div>
                    <div class="chat-actions">
                        {% if room.status == 'open' %}
                            <button id="close-room-button" class="btn btn-danger btn-sm">
                                <i class="fas fa-times"></i> بستن گفتگو
                            </button>
                        {% else %}
                            {% if request.user.is_staff or not room.closed_by.is_staff %}
                                <button id="reopen-room-button" class="btn btn-success btn-sm">
                                    <i class="fas fa-redo"></i> بازگشایی گفتگو
                                </button>
                            {% endif %}
                        {% endif %}
                    </div>
                </div>

                <div class="chat-body" id="message-container">
    {% for message in chat_messages %}  <!-- تغییر از messages به chat_messages -->
        <div id="message-{{ message.id }}" class="message {% if message.message_type == 'system' %}system-message{% elif message.sender == request.user %}sent{% else %}received{% endif %} {% if message.is_read %}read{% endif %}">
            <div class="message-content">
                {{ message.content }}
            </div>

            {% if message.file %}
                {% with file_url=message.file.url|lower %}
                    {% if '.jpg' in file_url or '.jpeg' in file_url or '.png' in file_url or '.gif' in file_url %}
                        <div class="message-image">
                            <a href="{{ message.file.url }}" target="_blank">
                                <img src="{{ message.file.url }}" alt="تصویر پیوست" />
                            </a>
                        </div>
                    {% else %}
                        <div class="message-file">
                            <a href="{{ message.file.url }}" target="_blank">
                                <i class="fas fa-file"></i> دانلود فایل
                            </a>
                        </div>
                    {% endif %}
                {% endwith %}
            {% endif %}

            <div class="message-info">
                <span class="message-time">{{ message.created_at|date:"H:i" }} {{ message.created_at|date:"j F" }}</span>

                {% if message.sender == request.user and message.message_type != 'system' %}
                    <span class="read-indicator" title="{% if message.is_read %}خوانده شده{% else %}ارسال شده{% endif %}">
                        <i class="fas {% if message.is_read %}fa-check-double{% else %}fa-check{% endif %}"></i>
                    </span>
                {% endif %}
            </div>
        </div>
    {% endfor %}
</div>


                <div class="typing-indicator" id="typing-indicator"></div>

                <div class="chat-footer">
                    <textarea id="message-input" placeholder="پیام خود را بنویسید..." {% if room.status != 'open' %}disabled{% endif %}></textarea>
                    <button id="file-upload-button" class="btn btn-light" type="button" {% if room.status != 'open' %}disabled{% endif %}>
                        <i class="fas fa-paperclip"></i>
                    </button>
                    <button id="send-button" class="btn btn-primary" type="button" {% if room.status != 'open' %}disabled{% endif %}>
                        <i class="fas fa-paper-plane"></i>
                    </button>
                    <input type="file" id="file-input" style="display: none;">
                </div>
            </div>
        </div>
    </div>
</div>

<!-- فیلدهای مخفی برای استفاده در JavaScript -->
<input type="hidden" id="room-id" value="{{ room.id }}">
<input type="hidden" id="user-id" value="{{ request.user.id }}">
<input type="hidden" id="is-staff" value="{{ request.user.is_staff|yesno:'True,False' }}">
<audio id="notification-sound" src="{% static 'chat/sounds/notification.mp3' %}" preload="auto"></audio>
{% endblock %}

{% block extra_js %}
<script src="{% static 'chat/js/chat.js' %}"></script>
{% endblock %}

====== FILE: templates/chat/start_chat.html ======

{% extends 'base/base.html' %}
{% load static %}

{% block title %}شروع گفتگوی جدید{% endblock %}

{% block content %}
<div class="container mt-4">
    <div class="row">
        <div class="col-md-8 mx-auto">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h3 class="mb-0">شروع گفتگوی جدید</h3>
                </div>
                <div class="card-body">
                    <form method="post">
                        {% csrf_token %}

                        <div class="mb-3">
                            <label for="subject" class="form-label">موضوع</label>
                            <input type="text" class="form-control" id="subject" name="subject" required>
                            <div class="form-text">موضوع گفتگو را به صورت مختصر بنویسید.</div>
                        </div>

                        <div class="mb-3">
                            <label for="message" class="form-label">پیام</label>
                            <textarea class="form-control" id="message" name="message" rows="5" required></textarea>
                            <div class="form-text">توضیحات خود را بنویسید. پشتیبان‌های ما در اسرع وقت به شما پاسخ خواهند داد.</div>
                        </div>

                        <div class="d-flex justify-content-between">
                            <a href="{% url 'chat:chat_list' %}" class="btn btn-outline-secondary">
                                <i class="fas fa-arrow-right ml-1"></i> انصراف
                            </a>
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-paper-plane ml-1"></i> ارسال
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

====== FILE: templates/chat/chat_list.html ======

{% extends 'base/base.html' %}
{% load static %}

{% block title %}لیست گفتگوها{% endblock %}

{% block extra_css %}
<link rel="stylesheet" href="{% static 'chat/css/chat.css' %}">
<link rel="stylesheet" href="{% static 'chat/css/chat-list.css' %}">
<style>
    .notification-container {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 1000;
    }
</style>
{% endblock %}

{% block content %}
<!-- کانتینر اعلان‌ها - اضافه شده در بالای صفحه -->
<div class="notification-container"></div>

<div class="chat-list-container">
    <div class="chat-list-header">
        <h1>گفتگوهای من</h1>
        <div>
            {% if not request.user.is_staff %}
                <a href="{% url 'chat:start' %}" class="btn btn-primary">
                    <i class="fas fa-plus ml-1"></i> گفتگوی جدید
                </a>
            {% else %}
                <a href="{% url 'chat:admin_dashboard' %}" class="btn btn-outline-primary">
                    <i class="fas fa-tachometer-alt ml-1"></i> داشبورد پشتیبانی
                </a>
            {% endif %}
        </div>
    </div>

    <div class="tab-content">
        <div class="tab-pane fade show active" id="all-chats" role="tabpanel">
            {% if rooms %}
                <ul class="chat-list">
                    {% for room in rooms %}
                        <li class="chat-item position-relative">
                            <a href="{% url 'chat:room' room_id=room.id %}" class="d-flex w-100 text-decoration-none">
                                <div class="chat-item-avatar">
                                    {% if room.user.profile_image %}
                                        <img src="{{ room.user.profile_image.url }}" alt="{{ room.user.username }}">
                                    {% else %}
                                        <div class="avatar-placeholder">
                                            {{ room.user.username|first|upper }}
                                        </div>
                                    {% endif %}
                                </div>
                                <div class="chat-item-content">
                                    <div class="chat-item-header">
                                        <h3>{{ room.name|cut:"("|cut:")" }}</h3>
                                        <div class="chat-item-time">
                                            {{ room.updated_at|date:"H:i" }}
                                        </div>
                                    </div>
                                    <div class="d-flex align-items-center">
                                        {% if request.user.is_staff %}
                                            <!-- اگر کاربر ادمین است، وضعیت کاربر عادی را نمایش بده -->
                                            <div class="user-status {% if room.user.online_status.status == 'online' %}online{% else %}offline{% endif %}"
                                                 data-user-id="{{ room.user.id }}"
                                                 title="{% if room.user.online_status.status == 'online' %}آنلاین{% else %}آفلاین{% endif %}">
                                                <span class="status-dot {% if room.user.online_status.status == 'online' %}online{% else %}offline{% endif %}"></span>
                                            </div>
                                        {% else %}
                                            <!-- اگر کاربر عادی است، وضعیت ادمین/پشتیبان را نمایش بده (اگر پشتیبان وجود داشته باشد) -->
                                            {% if room.agent %}
                                                <div class="user-status {% if room.agent.online_status.status == 'online' %}online{% else %}offline{% endif %}"
                                                     data-user-id="{{ room.agent.id }}"
                                                     title="{% if room.agent.online_status.status == 'online' %}آنلاین{% else %}آفلاین{% endif %}">
                                                    <span class="status-dot {% if room.agent.online_status.status == 'online' %}online{% else %}offline{% endif %}"></span>
                                                </div>
                                            {% else %}
                                                <div class="user-status offline" title="آفلاین">
                                                    <span class="status-dot offline"></span>
                                                </div>
                                            {% endif %}
                                        {% endif %}
                                        <span class="status-badge {% if room.status == 'closed' %}closed{% endif %}">
                                            {{ room.get_status_display }}
                                        </span>
                                    </div>
                                    <div class="chat-item-message">
                                        {% if room.messages.last %}
                                            {% if room.messages.last.sender == request.user %}
                                                <i class="fas {% if room.messages.last.is_read %}fa-check-double{% else %}fa-check{% endif %} text-muted"></i>
                                            {% endif %}
                                            {% if room.messages.last.message_type == 'system' %}
                                                <span class="system-message-preview">{{ room.messages.last.content|truncatechars:50 }}</span>
                                            {% else %}
                                                {{ room.messages.last.content|truncatechars:50 }}
                                            {% endif %}
                                        {% else %}
                                            <span class="no-message">بدون پیام</span>
                                        {% endif %}
                                    </div>
                                </div>
                                {% if room.unread_count > 0 %}
                                    <div class="chat-item-badge">
                                        <div class="badge bg-primary">{{ room.unread_count }}</div>
                                    </div>
                                {% endif %}
                            </a>
                            <!-- دکمه حذف گفتگو فقط برای کاربران عادی و گفتگوهای بسته شده -->
                            {% if not request.user.is_staff and room.status == 'closed' %}
                                <button class="btn btn-sm btn-link text-danger delete-chat"
                                        data-room-id="{{ room.id }}"
                                        data-bs-toggle="tooltip"
                                        title="حذف گفتگو">
                                    <i class="fas fa-trash-alt"></i>
                                </button>
                            {% endif %}
                        </li>
                    {% endfor %}
                </ul>
            {% else %}
                <div class="empty-list">
                    <i class="fas fa-comments"></i>
                    <p>هیچ گفتگویی یافت نشد.</p>
                    {% if not request.user.is_staff %}
                        <a href="{% url 'chat:start' %}" class="btn btn-primary">
                            <i class="fas fa-plus ml-1"></i> شروع گفتگوی جدید
                        </a>
                    {% endif %}
                </div>
            {% endif %}
        </div>
    </div>
</div>

<!-- مودال تایید حذف گفتگو -->
<div class="modal fade" id="deleteChatModal" tabindex="-1" aria-labelledby="deleteChatModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="deleteChatModalLabel">حذف گفتگو</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        آیا از حذف این گفتگو اطمینان دارید؟
        <p class="text-muted small">توجه: این گفتگو فقط از لیست شما حذف می‌شود و برای پشتیبانی قابل مشاهده خواهد بود.</p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">انصراف</button>
        <button type="button" class="btn btn-danger" id="confirmDelete">حذف</button>
      </div>
    </div>
  </div>
</div>
{% endblock %}

{% block extra_js %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    // فعال‌سازی تولتیپ‌ها (اگر از Bootstrap 5 استفاده می‌کنید)
    var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
    var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl);
    });

    // متغیر برای نگهداری شناسه اتاق انتخاب شده برای حذف
    let selectedRoomId = null;

    // مودال حذف گفتگو
    const deleteModalElement = document.getElementById('deleteChatModal');
    const deleteModal = new bootstrap.Modal(deleteModalElement);

    // دکمه‌های حذف
    const deleteButtons = document.querySelectorAll('.delete-chat');
    deleteButtons.forEach(button => {
        button.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            selectedRoomId = this.getAttribute('data-room-id');
            deleteModal.show();
        });
    });

    // دکمه تایید حذف در مودال
    document.getElementById('confirmDelete').addEventListener('click', function() {
        if (selectedRoomId) {
            // ارسال درخواست حذف
            fetch(`/chat/hide-room/${selectedRoomId}/`, {
                method: 'POST',
                headers: {
                    'X-CSRFToken': getCookie('csrftoken'),
                    'Content-Type': 'application/json'
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('خطا در ارتباط با سرور');
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    // حذف المان از DOM
                    const chatItem = document.querySelector(`.delete-chat[data-room-id="${selectedRoomId}"]`).closest('.chat-item');
                    chatItem.style.height = chatItem.offsetHeight + 'px';
                    chatItem.style.overflow = 'hidden';

                    setTimeout(() => {
                        chatItem.style.height = '0';
                        chatItem.style.padding = '0';
                        chatItem.style.margin = '0';
                        chatItem.style.opacity = '0';

                        setTimeout(() => {
                            chatItem.remove();

                            // بررسی آیا لیست خالی شده است
                            const remainingItems = document.querySelectorAll('.chat-item');
                            if (remainingItems.length === 0) {
                                const tabPane = document.querySelector('.tab-pane.active');
                                tabPane.innerHTML = `
                                    <div class="empty-list">
                                        <i class="fas fa-comments"></i>
                                        <p>هیچ گفتگویی یافت نشد.</p>
                                        {% if not request.user.is_staff %}
                                        <a href="/chat/start/" class="btn btn-primary">
                                            <i class="fas fa-plus ml-1"></i> شروع گفتگوی جدید
                                        </a>
                                        {% endif %}
                                    </div>
                                `;
                            }
                        }, 300);
                    }, 10);

                    // نمایش پیام موفقیت
                    showNotification('گفتگو با موفقیت حذف شد.', 'success');
                } else {
                    // نمایش خطا
                    showNotification(data.error || 'خطا در حذف گفتگو.', 'danger');
                }
                deleteModal.hide();
            })
            .catch(error => {
                console.error('Error:', error);
                showNotification('خطا در ارتباط با سرور.', 'danger');
                deleteModal.hide();
            });
        }
    });

    // نمایش اعلان
    function showNotification(message, type) {
        // بررسی وجود کانتینر اعلان
        let notificationContainer = document.querySelector('.notification-container');
        if (!notificationContainer) {
            notificationContainer = document.createElement('div');
            notificationContainer.className = 'notification-container';
            notificationContainer.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                z-index: 1000;
            `;
            document.body.appendChild(notificationContainer);
        }

        // ایجاد اعلان
        const notification = document.createElement('div');
        notification.className = `alert alert-${type} alert-dismissible fade show`;
        notification.role = 'alert';
        notification.innerHTML = `
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        `;

        // افزودن اعلان به کانتینر
        notificationContainer.appendChild(notification);

        // حذف خودکار اعلان بعد از 5 ثانیه
        setTimeout(() => {
            notification.classList.remove('show');
            setTimeout(() => {
                notification.remove();
            }, 150);
        }, 5000);
    }

    // دریافت مقدار کوکی CSRF
    function getCookie(name) {
        let cookieValue = null;
        if (document.cookie && document.cookie !== '') {
            const cookies = document.cookie.split(';');
            for (let i = 0; i < cookies.length; i++) {
                const cookie = cookies[i].trim();
                if (cookie.substring(0, name.length + 1) === (name + '=')) {
                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                    break;
                }
            }
        }
        return cookieValue;
    }
});
</script>
{% endblock %}

====== FILE: templates/chat/notifications.html ======

{% extends 'base/base.html' %}
{% load static %}

{% block title %}اعلان‌های من{% endblock %}

{% block extra_css %}
<link rel="stylesheet" href="{% static 'chat/css/notifications.css' %}">
{% endblock %}

{% block content %}
<div class="container mt-4">
    <div class="row">
        <div class="col-md-12">
            <div class="notification-header">
                <h2>اعلان‌های من</h2>
                <button id="mark-all-read" class="btn btn-outline-primary">
                    <i class="fas fa-check-double ml-1"></i> علامت‌گذاری همه به عنوان خوانده شده
                </button>
            </div>

            <div class="notification-container">
                <div id="notification-list">
                    {% if notifications %}
                        {% for notification in notifications %}
                            <div class="notification-item {% if not notification.is_read %}unread{% endif %}" id="notification-{{ notification.id }}">
                                <div class="notification-header">
                                    <h5>{{ notification.title }}</h5>
                                    <span class="notification-time">{{ notification.created_at|date:"j F Y H:i" }}</span>
                                </div>
                                <div class="notification-body">
                                    <p>{{ notification.message }}</p>
                                </div>
                                <div class="notification-footer">
                                    {% if notification.notification_type == 'chat' and notification.data.room_id %}
                                        <a href="{% url 'chat:room' room_id=notification.data.room_id %}" class="btn btn-sm btn-primary">
                                            مشاهده گفتگو
                                        </a>
                                    {% endif %}

                                    {% if not notification.is_read %}
                                        <button class="btn btn-sm btn-secondary mark-read" data-id="{{ notification.id }}">
                                            علامت‌گذاری به عنوان خوانده شده
                                        </button>
                                    {% endif %}
                                </div>
                            </div>
                        {% endfor %}
                    {% else %}
                        <div class="text-center py-5">
                            <i class="fas fa-bell-slash fa-3x text-muted mb-3"></i>
                            <p>هیچ اعلانی یافت نشد.</p>
                        </div>
                    {% endif %}
                </div>
            </div>
        </div>
    </div>
</div>

<input type="hidden" id="user-id" value="{{ request.user.id }}">
<audio id="notification-sound" src="{% static 'chat/sounds/notification.mp3' %}" preload="auto"></audio>

{% endblock %}

{% block extra_js %}
<script src="{% static 'chat/js/notifications.js' %}"></script>
{% endblock %}

====== FILE: templates/chat/partials/pending_chats.html ======

{% if pending_rooms %}
    {% for room in pending_rooms %}
        <div class="chat-item">
            <div class="chat-header">
                <span class="chat-title">{{ room.name|default:"گفتگو" }} در انتظار</span>
                <span class="chat-time">{{ room.created_at|date:"Y/m/d H:i" }}</span>
            </div>
            <div class="chat-user">
                {% if room.user %}
                    {{ room.user.get_full_name|default:room.user.username }}
                {% else %}
                    کاربر ناشناس
                {% endif %}
            </div>
            {% if room.messages.last %}
                <div class="chat-preview">
                    {{ room.messages.last.content|truncatechars:50 }}
                </div>
            {% endif %}
            <div class="chat-actions">
                <a href="{% url 'chat:chat_room' room.name %}" class="btn btn-primary">پاسخ</a>
            </div>
        </div>
    {% endfor %}
{% else %}
    <div class="empty-state">
        چت در انتظاری وجود ندارد.
    </div>
{% endif %}

====== FILE: templates/chat/partials/active_chats.html ======

{% if admin_active_chats %}
    {% for room in admin_active_chats %}
        <div class="chat-item">
            <div class="chat-header">
                <span class="chat-title">{{ room.name|default:"گفتگو" }} فعال</span>
                {% if room.unread_count > 0 %}
                    <span class="badge bg-danger">{{ room.unread_count }}</span>
                {% endif %}
                <span class="chat-time">{{ room.updated_at|date:"Y/m/d H:i" }}</span>
            </div>
            <div class="chat-user">
                {% if room.user %}
                    {{ room.user.get_full_name|default:room.user.username }}
                {% else %}
                    کاربر ناشناس
                {% endif %}
            </div>
            {% if room.messages.last %}
                <div class="chat-preview">
                    {{ room.messages.last.content|truncatechars:50 }}
                </div>
            {% endif %}
            <div class="chat-actions">
                <a href="{% url 'chat:chat_room' room.name %}" class="btn btn-primary">ادامه چت</a>
            </div>
        </div>
    {% endfor %}
{% else %}
    <div class="empty-state">
        شما هیچ چت فعالی ندارید.
    </div>
{% endif %}

====== FILE: templates/chat/partials/user_closed_chats.html ======

{% if user_closed_chats %}
    {% for room in user_closed_chats %}
        <div class="chat-item">
            <div class="chat-header">
                <span class="chat-title">{{ room.name|default:"گفتگو" }} بسته شده توسط کاربر</span>
                <span class="chat-time">{{ room.updated_at|date:"Y/m/d H:i" }}</span>
            </div>
            <div class="chat-user">
                {% if room.user %}
                    {{ room.user.get_full_name|default:room.user.username }}
                {% else %}
                    کاربر ناشناس
                {% endif %}
            </div>
            {% if room.closed_at %}
                <div class="chat-closed-time">
                    بسته شده در: {{ room.closed_at|date:"Y/m/d H:i" }}
                </div>
            {% endif %}
            {% if room.messages.last %}
                <div class="chat-preview">
                    {{ room.messages.last.content|truncatechars:50 }}
                </div>
            {% endif %}
            <div class="chat-actions">
                <a href="{% url 'chat:chat_room' room.name %}" class="btn btn-secondary">مشاهده</a>
            </div>
        </div>
    {% endfor %}
{% else %}
    <div class="empty-state">
        چت بسته شده‌ای توسط کاربران وجود ندارد.
    </div>
{% endif %}

====== FILE: templates/base/base.html ======

<!DOCTYPE html>
<html lang="fa" dir="rtl">
<head>
    {% load static %}
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}فروشگاه زیما{% endblock %}</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.rtl.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        .cart-icon {position: relative; display: inline-block; margin-right: 15px; color: white; font-size: 1.2rem; text-decoration: none;}
        .cart-count {position: absolute; top: -8px; right: -8px; background-color: #dc3545; color: white; border-radius: 50%; width: 18px; height: 18px; font-size: 0.7rem; display: flex; align-items: center; justify-content: center;}
        .cart-icon:hover {color: #f8f9fa;}
        .floating-chat-btn {position: fixed; bottom: 20px; left: 20px; width: 60px; height: 60px; background: linear-gradient(45deg, #007bff, #0056b3); color: white; border-radius: 50%; display: flex; align-items: center; justify-content: center; box-shadow: 0 4px 12px rgba(0,123,255,0.3); cursor: pointer; z-index: 1000; transition: all 0.3s ease;}
        .floating-chat-btn:hover {transform: scale(1.1); box-shadow: 0 6px 16px rgba(0,123,255,0.4);}
        .floating-chat-badge {position: absolute; top: -5px; right: -5px; background: #dc3545; color: white; border-radius: 50%; width: 20px; height: 20px; display: flex; align-items: center; justify-content: center; font-size: 0.8rem;}
        .notification-badge {font-size: 0.7rem; padding: 0.25rem 0.5rem;}
    </style>
    {% block extra_css %}{% endblock %}
</head>
<body>
    <header class="bg-dark text-white py-3">
        <div class="container">
            <div class="row align-items-center">
                <div class="col-md-3">
                    <h1 class="h4 mb-0"><a href="/" class="text-white text-decoration-none">فروشگاه زیما</a></h1>
                </div>
                <div class="col-md-6">
                    <form class="d-flex" action="{% url 'products:search' %}" method="GET">
                    <input class="form-control me-2" type="search" name="q" placeholder="جستجو..." aria-label="Search" value="{{ request.GET.q|default:'' }}">
                    <button class="btn btn-outline-light" type="submit">جستجو</button>
                    </form>
                </div>
                <div class="col-md-3 text-end d-flex align-items-center justify-content-end">
                    <a href="{% url 'cart:summary' %}" class="cart-icon me-3">
                        <i class="fas fa-shopping-cart"></i>
                        <span class="cart-count" id="cart-items-count">
                            {% if user.is_authenticated %}{{ user.cart_items.count }}{% else %}0{% endif %}
                        </span>
                    </a>

                    {% if user.is_authenticated %}
                    <a href="{% url 'chat:notifications' %}" class="cart-icon me-3">
                        <i class="fas fa-bell"></i>
                        <span class="cart-count" id="notification-count" style="display: none;">0</span>
                    </a>

                    <div class="dropdown">
                        <button class="btn btn-outline-light dropdown-toggle" type="button" id="userDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                            {{ user.username }}
                        </button>
                        <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="userDropdown">
                            <li><a class="dropdown-item" href="{% url 'users:profile' %}">پروفایل</a></li>
                            <li><a class="dropdown-item" href="#">سفارشات من</a></li>
                            <li><a class="dropdown-item" href="{% url 'chat:chat_list' %}">
                                <i class="fas fa-comments"></i> چت‌های من
                                <span class="badge bg-danger notification-badge" id="chat-notification-badge" style="display: none;">0</span>
                            </a></li>
                            {% if user.is_staff %}
                                <li><a class="dropdown-item" href="{% url 'admin:index' %}">پنل مدیریت</a></li>
                                <li><a class="dropdown-item" href="{% url 'chat:admin_dashboard' %}">داشبورد چت</a></li>
                            {% endif %}
                            <li><hr class="dropdown-divider"></li>
                            <li><a class="dropdown-item" href="{% url 'users:logout' %}">خروج</a></li>
                        </ul>
                    </div>
                    {% else %}
                        <a href="{% url 'users:login' %}" class="btn btn-outline-light me-2">ورود</a>
                        <a href="{% url 'users:signup' %}" class="btn btn-light">ثبت‌نام</a>
                    {% endif %}
                </div>
            </div>
        </div>
    </header>

    <main class="container my-4">
        {% load i18n %}
        {% if messages %}
        <div class="django-messages">
            {% for message in messages %}
            <div class="alert alert-{{ message.tags }}">{{ message }}</div>
            {% endfor %}
        </div>
        {% endif %}
        {% block content %}{% endblock %}
    </main>

    <footer class="bg-dark text-white py-4 mt-5">
        <div class="container">
            <div class="row">
                <div class="col-md-4">
                    <h5>فروشگاه زیما</h5>
                    <p>فروشگاه آنلاین محصولات با کیفیت</p>
                </div>
                <div class="col-md-4">
                    <h5>لینک‌های مفید</h5>
                    <ul class="list-unstyled">
                        <li><a href="#" class="text-white">درباره ما</a></li>
                        <li><a href="#" class="text-white">تماس با ما</a></li>
                        <li><a href="#" class="text-white">قوانین و مقررات</a></li>
                    </ul>
                </div>
                <div class="col-md-4">
                    <h5>تماس با ما</h5>
                    <address>
                        <p>آدرس: تهران، خیابان ولیعصر</p>
                        <p>تلفن: 021-12345678</p>
                        <p>ایمیل: info@zima.com</p>
                    </address>
                </div>
            </div>
            <hr>
            <div class="text-center">
                <p>&copy; 1404 فروشگاه زیما. تمامی حقوق محفوظ است.</p>
            </div>
        </div>
    </footer>

    {% if user.is_authenticated %}
    <div class="floating-chat-btn" id="floating-chat-btn" title="{% if user.is_staff %}داشبورد چت{% else %}چت‌های من{% endif %}">
        <i class="fas {% if user.is_staff %}fa-headset{% else %}fa-comments{% endif %} fa-lg"></i>
        <span class="floating-chat-badge" id="unread-count" style="display: none;">0</span>
    </div>
    {% endif %}

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    {% if user.is_authenticated %}
    <script>
        // بررسی تعداد پیام‌های خوانده نشده
        fetch('/chat/unread-count/')
            .then(response => response.json())
            .then(data => {
                const count = data.count;
                const unreadBadge = document.getElementById('unread-count');
                const chatBadge = document.getElementById('chat-notification-badge');

                if (count > 0) {
                    if (unreadBadge) {
                        unreadBadge.textContent = count;
                        unreadBadge.style.display = 'flex';
                    }
                    if (chatBadge) {
                        chatBadge.textContent = count;
                        chatBadge.style.display = 'inline-block';
                    }
                }
            })
            .catch(error => console.error('Error:', error));

        // دکمه چت
        document.getElementById('floating-chat-btn')?.addEventListener('click', function() {
            {% if user.is_staff %}
                window.location.href = "{% url 'chat:admin_dashboard' %}";
            {% else %}
                window.location.href = "{% url 'chat:chat_list' %}";
            {% endif %}
        });
    </script>

    <!-- مدیریت وضعیت آنلاین - فقط یک بار -->
    <script src="{% static 'chat/js/online-handler.js' %}"></script>
    {% endif %}

    {% block extra_js %}{% endblock %}
</body>
</html>

====== FILE: static/chat/js/chat.js ======

document.addEventListener('DOMContentLoaded', function() {
    const roomId = document.getElementById('room-id').value;
    const userId = document.getElementById('user-id').value;
    const isStaff = document.getElementById('is-staff').value === 'True';
    const messageContainer = document.getElementById('message-container');
    const messageInput = document.getElementById('message-input');
    const sendButton = document.getElementById('send-button');
    const closeRoomButton = document.getElementById('close-room-button');
    const reopenRoomButton = document.getElementById('reopen-room-button');
    const fileUploadButton = document.getElementById('file-upload-button');
    const fileInput = document.getElementById('file-input');
    const roomStatus = document.getElementById('room-status');
    const typingIndicator = document.getElementById('typing-indicator');
    const notificationSound = document.getElementById('notification-sound');
    const chatActions = document.querySelector('.chat-actions');

    let typingTimeout = null;
    let socket = null;
    let tempFileId = null;
    let tempFilePreview = null;

    console.log('Chat room loaded');
    console.log('Is staff:', isStaff);
    console.log('User ID:', userId);
    console.log('Room elements:', {
        closeButton: closeRoomButton,
        reopenButton: reopenRoomButton,
        messageInput: messageInput,
        sendButton: sendButton
    });

    // اتصال به وب‌سوکت
    function connectWebSocket() {
        const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
        socket = new WebSocket(
            `${wsProtocol}//${window.location.host}/ws/chat/${roomId}/`
        );

        socket.onopen = function(e) {
            console.log('WebSocket connected');

            // علامت‌گذاری پیام‌های خوانده نشده به عنوان خوانده شده
            document.querySelectorAll('.message.received:not(.read)').forEach(function(messageElement) {
                const messageId = messageElement.id.replace('message-', '');
                if (messageId && !messageId.startsWith('system-')) {
                    markMessageAsRead(messageId);
                }
            });
        };

        socket.onmessage = function(e) {
            const data = JSON.parse(e.data);
            console.log('WebSocket message received:', data);

            if (data.type === 'room_status') {
                console.log('Room status update received:', data);
                handleRoomStatusChange(data);
            }
            else if (data.type === 'chat.deleted_by_user') {
                // پردازش پیام حذف گفتگو توسط کاربر
                handleChatDeleted(data);
            }
            else if (data.type === 'chat_message') {
                // دریافت پیام جدید
                appendMessage(data.message);

                // پخش صدای اعلان اگر پیام از کاربر دیگر است
                if (data.message.sender_id !== userId) {
                    notificationSound.play().catch(error => console.error('Error playing notification sound:', error));
                }

                // اسکرول به پایین
                messageContainer.scrollTop = messageContainer.scrollHeight;

                // علامت‌گذاری پیام به عنوان خوانده شده اگر از کاربر دیگر است
                if (data.message.sender_id !== userId && data.message.message_type !== 'system') {
                    markMessageAsRead(data.message.id);
                }
            }
            else if (data.type === 'message_read') {
                // به‌روزرسانی وضعیت خوانده شدن پیام
                const messageElement = document.getElementById('message-' + data.message_id);
                if (messageElement) {
                    const readIndicator = messageElement.querySelector('.read-indicator');
                    if (readIndicator) {
                        readIndicator.innerHTML = '<i class="fas fa-check-double"></i>';
                        readIndicator.setAttribute('title', 'خوانده شده در ' + new Date(data.read_at).toLocaleString('fa-IR'));
                        messageElement.classList.add('read');
                    }
                }
            }
            else if (data.type === 'user_typing') {
                // نمایش وضعیت تایپ کردن کاربر
                if (data.user_id !== userId) {
                    typingIndicator.textContent = data.username + ' در حال تایپ است...';
                    typingIndicator.style.display = data.is_typing ? 'block' : 'none';
                }
            }
            else if (data.type === 'error') {
                // نمایش خطا
                showNotification(data.message, 'danger');
            }
        };

        socket.onclose = function(e) {
            console.log('WebSocket disconnected, trying to reconnect in 2 seconds...');
            setTimeout(function() {
                connectWebSocket();
            }, 2000);
        };

        socket.onerror = function(e) {
            console.error('WebSocket error:', e);
        };
    }

    // مدیریت تغییر وضعیت اتاق
    function handleRoomStatusChange(data) {
        // به‌روزرسانی نشانگر وضعیت
        if (roomStatus) {
            roomStatus.textContent = data.status === 'open' ? 'باز' : 'بسته شده';
            roomStatus.className = `badge ${data.status === 'open' ? 'bg-success' : 'bg-danger'} mx-2`;
        }

        // فعال/غیرفعال کردن ورودی پیام
        if (messageInput) messageInput.disabled = data.status !== 'open';
        if (sendButton) sendButton.disabled = data.status !== 'open';
        if (fileUploadButton) fileUploadButton.disabled = data.status !== 'open';

        // به‌روزرسانی دکمه‌های بستن و بازگشایی
        updateActionButtons(data);

        // اضافه کردن پیام سیستمی به چت
        if (data.message) {
            appendMessage({
                id: 'system-' + Date.now(),
                content: data.message,
                message_type: 'system',
                created_at: new Date().toISOString()
            });

            // اسکرول به پایین
            messageContainer.scrollTop = messageContainer.scrollHeight;
        }

        // نمایش اعلان
        if (data.status === 'closed') {
            const notificationText = data.closed_by_staff ?
                'این گفتگو توسط پشتیبانی بسته شده است.' :
                'این گفتگو توسط کاربر بسته شده است.';

            showNotification(notificationText, 'warning');
        } else if (data.status === 'open' && data.message) {
            showNotification(data.message, 'success');
        }
    }

    // به‌روزرسانی دکمه‌های بستن و بازگشایی
    function updateActionButtons(data) {
        // پاک کردن محتوای قبلی
        if (chatActions) {
            chatActions.innerHTML = '';

            // ایجاد دکمه مناسب بر اساس وضعیت
            if (data.status === 'open') {
                // اتاق باز است، نمایش دکمه بستن
                const closeButton = document.createElement('button');
                closeButton.id = 'close-room-button';
                closeButton.className = 'btn btn-danger btn-sm';
                closeButton.innerHTML = '<i class="fas fa-times"></i> بستن گفتگو';
                closeButton.addEventListener('click', closeRoom);
                chatActions.appendChild(closeButton);
            } else {
                // اتاق بسته است، تصمیم‌گیری برای نمایش دکمه بازگشایی
                let showReopenButton = false;

                // شرایط نمایش دکمه بازگشایی
                if (isStaff) {
                    showReopenButton = true;
                    console.log('Admin can reopen the chat');
                } else if (!data.closed_by_staff) {
                    showReopenButton = true;
                    console.log('User can reopen the chat because it was not closed by admin');
                } else {
                    console.log('User cannot reopen the chat because it was closed by admin');
                }

                if (showReopenButton) {
                    const reopenButton = document.createElement('button');
                    reopenButton.id = 'reopen-room-button';
                    reopenButton.className = 'btn btn-success btn-sm';
                    reopenButton.innerHTML = '<i class="fas fa-redo"></i> بازگشایی گفتگو';
                    reopenButton.addEventListener('click', reopenRoom);
                    chatActions.appendChild(reopenButton);
                }
            }
        }
    }

    // اتصال اولیه به وب‌سوکت
    connectWebSocket();
    function handleChatDeleted(data) {
    // نمایش پیام سیستمی در چت
    const messageContainer = document.getElementById('message-container');
    const systemMessage = document.createElement('div');
    systemMessage.className = 'message system-message';
    systemMessage.innerHTML = `
        <div class="message-content">
            <strong class="text-danger">${data.message}</strong>
        </div>
    `;
    messageContainer.appendChild(systemMessage);
    messageContainer.scrollTop = messageContainer.scrollHeight;

    // غیرفعال کردن ارسال پیام
    const messageInput = document.getElementById('message-input');
    const sendButton = document.getElementById('send-button');
    const fileUploadButton = document.getElementById('file-upload-button');

    messageInput.disabled = true;
    sendButton.disabled = true;
    fileUploadButton.disabled = true;

    messageInput.placeholder = 'این گفتگو توسط کاربر حذف شده است';

    // نمایش اعلان
    showNotification('این گفتگو توسط کاربر حذف شده است', 'warning', 0);
}
    // تابع نمایش اعلان
    function showNotification(message, type, timeout = 5000) {
    // بررسی وجود کانتینر اعلان
    let notificationContainer = document.querySelector('.notification-container');
    if (!notificationContainer) {
        notificationContainer = document.createElement('div');
        notificationContainer.className = 'notification-container';
        document.body.appendChild(notificationContainer);
    }

    // ایجاد اعلان
    const notification = document.createElement('div');
    notification.className = `alert alert-${type} alert-dismissible fade show`;
    notification.role = 'alert';
    notification.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    `;

    // افزودن اعلان به کانتینر
    notificationContainer.appendChild(notification);

    // حذف خودکار اعلان بعد از زمان مشخص شده (اگر timeout صفر باشد، اعلان حذف نمی‌شود)
    if (timeout > 0) {
        setTimeout(() => {
            notification.classList.remove('show');
            setTimeout(() => {
                notification.remove();
            }, 150);
        }, timeout);
    }
}

    // افزودن پیام به صفحه
    function appendMessage(message) {
        const messageDiv = document.createElement('div');
        messageDiv.id = 'message-' + message.id;
        messageDiv.className = 'message';

        // تعیین کلاس پیام بر اساس فرستنده
        if (message.message_type === 'system') {
            messageDiv.className += ' system-message';
        } else if (message.sender_id === userId) {
            messageDiv.className += ' sent';
        } else {
            messageDiv.className += ' received';
        }

        // اگر پیام خوانده شده است، کلاس read را اضافه می‌کنیم
        if (message.is_read) {
            messageDiv.className += ' read';
        }

        // ایجاد محتوای پیام
        let messageContent = `
            <div class="message-content">
                ${message.content}
            </div>
        `;

        // اگر فایل دارد، آن را نمایش می‌دهیم
        if (message.file_url) {
            const fileUrl = message.file_url;
            const fileExtension = fileUrl.split('.').pop().toLowerCase();
            if (['jpg', 'jpeg', 'png', 'gif'].includes(fileExtension)) {
                messageContent += `
                    <div class="message-image">
                        <a href="${fileUrl}" target="_blank">
                            <img src="${fileUrl}" alt="تصویر پیوست" />
                        </a>
                    </div>
                `;
            } else {
                messageContent += `
                    <div class="message-file">
                        <a href="${fileUrl}" target="_blank">
                            <i class="fas fa-file"></i> دانلود فایل
                        </a>
                    </div>
                `;
            }
        }

        // افزودن اطلاعات پیام (زمان، وضعیت خوانده شدن و ...)
        messageContent += `
            <div class="message-info">
                <span class="message-time">${formatDateTime(message.created_at)}</span>
        `;

        // اگر پیام از کاربر فعلی است، نشانگر خوانده شدن را نمایش می‌دهیم
        if (message.sender_id === userId && message.message_type !== 'system') {
            messageContent += `
                <span class="read-indicator" title="${message.is_read ? 'خوانده شده' : 'ارسال شده'}">
                    <i class="fas ${message.is_read ? 'fa-check-double' : 'fa-check'}"></i>
                </span>
            `;
        }

        messageContent += `</div>`;

        // قرار دادن محتوا در المان پیام
        messageDiv.innerHTML = messageContent;

        // افزودن پیام به صفحه
        messageContainer.appendChild(messageDiv);
    }

    // ارسال پیام
    function sendMessage() {
        const message = messageInput.value.trim();

        if (message || tempFileId) {
            // ارسال پیام به سرور
            socket.send(JSON.stringify({
                'type': 'chat_message',
                'message': message,
                'file_id': tempFileId
            }));

            // پاک کردن ورودی پیام
            messageInput.value = '';

            // پاک کردن پیش‌نمایش فایل
            if (tempFilePreview) {
                tempFilePreview.remove();
                tempFilePreview = null;
            }

            // پاک کردن شناسه فایل موقت
            tempFileId = null;

            // متوقف کردن وضعیت تایپ کردن
            sendTypingStatus(false);
        }
    }

    // آپلود فایل
    function uploadFile() {
        fileInput.click();
    }

    // پردازش انتخاب فایل
    function handleFileSelect(e) {
        const file = e.target.files[0];
        if (!file) return;

        // بررسی اندازه فایل (حداکثر 5MB)
        if (file.size > 5 * 1024 * 1024) {
            alert('حداکثر اندازه فایل 5 مگابایت است.');
            return;
        }

        // ایجاد شیء FormData
        const formData = new FormData();
        formData.append('file', file);

        // ارسال فایل به سرور
        fetch('/chat/api/upload-file/', {
            method: 'POST',
            body: formData,
            headers: {
                'X-CSRFToken': getCookie('csrftoken')
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // ذخیره شناسه فایل موقت
                tempFileId = data.file_id;

                // نمایش پیش‌نمایش فایل
                if (tempFilePreview) {
                    tempFilePreview.remove();
                }

                tempFilePreview = document.createElement('div');
                tempFilePreview.className = 'file-preview';

                const fileExtension = data.file_name.split('.').pop().toLowerCase();
                if (['jpg', 'jpeg', 'png', 'gif'].includes(fileExtension)) {
                    tempFilePreview.innerHTML = `
                        <div class="image-preview">
                            <img src="${data.file_url}" alt="${data.file_name}" />
                            <button type="button" class="btn btn-sm btn-danger remove-file">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                    `;
                } else {
                    tempFilePreview.innerHTML = `
                        <div class="file-item">
                            <i class="fas fa-file"></i>
                            <span>${data.file_name}</span>
                            <button type="button" class="btn btn-sm btn-danger remove-file">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                    `;
                }

                // افزودن پیش‌نمایش به صفحه
                const chatFooter = document.querySelector('.chat-footer');
                chatFooter.insertBefore(tempFilePreview, messageInput);

                // افزودن رویداد کلیک برای دکمه حذف
                tempFilePreview.querySelector('.remove-file').addEventListener('click', function() {
                    tempFilePreview.remove();
                    tempFilePreview = null;
                    tempFileId = null;
                });
            } else {
                alert('خطا در آپلود فایل: ' + data.error);
            }
        })
        .catch(error => {
            console.error('Error uploading file:', error);
            alert('خطا در آپلود فایل. لطفاً مجدداً تلاش کنید.');
        });

        // پاک کردن مقدار input فایل
        fileInput.value = '';
    }

    // علامت‌گذاری پیام به عنوان خوانده شده
    function markMessageAsRead(messageId) {
        socket.send(JSON.stringify({
            'type': 'mark_read',
            'message_id': messageId
        }));
    }

    // ارسال وضعیت تایپ کردن
    function sendTypingStatus(isTyping) {
        socket.send(JSON.stringify({
            'type': 'typing',
            'is_typing': isTyping
        }));
    }

    // بستن اتاق گفتگو
    function closeRoom() {
        if (confirm('آیا از بستن این گفتگو اطمینان دارید؟')) {
            socket.send(JSON.stringify({
                'type': 'close_room'
            }));
        }
    }

    // بازگشایی اتاق گفتگو
    function reopenRoom() {
        if (confirm('آیا از بازگشایی این گفتگو اطمینان دارید؟')) {
            socket.send(JSON.stringify({
                'type': 'reopen_room'
            }));
        }
    }

    // فرمت‌بندی تاریخ و زمان
    function formatDateTime(dateTimeStr) {
        const date = new Date(dateTimeStr);
        return date.toLocaleTimeString('fa-IR', { hour: '2-digit', minute: '2-digit' }) + ' ' +
               date.toLocaleDateString('fa-IR', { month: 'short', day: 'numeric' });
    }

    // دریافت مقدار کوکی
    function getCookie(name) {
        let cookieValue = null;
        if (document.cookie && document.cookie !== '') {
            const cookies = document.cookie.split(';');
            for (let i = 0; i < cookies.length; i++) {
                const cookie = cookies[i].trim();
                // آیا این کوکی با نام مورد نظر شروع می‌شود؟
                if (cookie.substring(0, name.length + 1) === (name + '=')) {
                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                    break;
                }
            }
        }
        return cookieValue;
    }

    // رویدادها

    // ارسال پیام با کلیک روی دکمه
    if (sendButton) {
        sendButton.addEventListener('click', sendMessage);
    }

    // ارسال پیام با فشردن Enter
    if (messageInput) {
        messageInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            }
        });

        // ارسال وضعیت تایپ کردن
        messageInput.addEventListener('input', function() {
            clearTimeout(typingTimeout);

            // ارسال وضعیت تایپ کردن
            sendTypingStatus(true);

            // تنظیم تایمر برای پایان وضعیت تایپ کردن
            typingTimeout = setTimeout(function() {
                sendTypingStatus(false);
            }, 3000);
        });
    }

    // آپلود فایل
    if (fileUploadButton) {
        fileUploadButton.addEventListener('click', uploadFile);
    }

    // انتخاب فایل
    if (fileInput) {
        fileInput.addEventListener('change', handleFileSelect);
    }

    // بستن اتاق گفتگو - افزودن رویداد به دکمه‌های موجود
    if (closeRoomButton) {
        closeRoomButton.addEventListener('click', closeRoom);
    }

    // بازگشایی اتاق گفتگو - افزودن رویداد به دکمه‌های موجود
    if (reopenRoomButton) {
        reopenRoomButton.addEventListener('click', reopenRoom);
    }

    // اسکرول به پایین صفحه
    if (messageContainer) {
        messageContainer.scrollTop = messageContainer.scrollHeight;
    }
});

====== FILE: static/chat/js/notifications.js ======

document.addEventListener('DOMContentLoaded', function() {
    const userId = document.getElementById('user-id').value;
    const notificationBadge = document.getElementById('notification-badge');
    const notificationList = document.getElementById('notification-list');
    const notificationSound = document.getElementById('notification-sound');

    let socket = null;

    // اتصال به وب‌سوکت
    function connectWebSocket() {
        const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
        socket = new WebSocket(
            `${wsProtocol}//${window.location.host}/ws/notifications/`
        );

        socket.onopen = function(e) {
            console.log('Notification WebSocket connected');

            // ارسال heartbeat هر 30 ثانیه
            setInterval(function() {
                if (socket.readyState === WebSocket.OPEN) {
                    socket.send(JSON.stringify({
                        'action': 'heartbeat'
                    }));
                }
            }, 30000);
        };

        socket.onmessage = function(e) {
            const data = JSON.parse(e.data);
            console.log('Notification WebSocket message received:', data);

            if (data.type === 'notification') {
                // دریافت اعلان جدید
                const notification = data.notification;

                // به‌روزرسانی تعداد اعلان‌های خوانده نشده
                updateNotificationCount();

                // پخش صدای اعلان
                notificationSound.play().catch(error => console.error('Error playing notification sound:', error));

                // اگر صفحه اعلان‌ها باز است، اعلان جدید را نمایش می‌دهیم
                if (notificationList) {
                    prependNotification(notification);
                }

                // نمایش اعلان مرورگر
                showBrowserNotification(notification);
            }
            else if (data.type === 'unread_count') {
                // به‌روزرسانی تعداد اعلان‌های خوانده نشده
                updateNotificationBadge(data.count);
            }
        };

        socket.onclose = function(e) {
            console.log('Notification WebSocket disconnected, trying to reconnect in 2 seconds...');
            setTimeout(function() {
                connectWebSocket();
            }, 2000);
        };

        socket.onerror = function(e) {
            console.error('Notification WebSocket error:', e);
        };
    }

    // اتصال اولیه به وب‌سوکت
    connectWebSocket();

    // به‌روزرسانی تعداد اعلان‌های خوانده نشده
    function updateNotificationCount() {
        fetch('/chat/unread-count/')
            .then(response => response.json())
            .then(data => {
                updateNotificationBadge(data.count);
            })
            .catch(error => console.error('Error fetching notification count:', error));
    }

    // به‌روزرسانی نشانگر تعداد اعلان‌ها
    function updateNotificationBadge(count) {
        if (notificationBadge) {
            notificationBadge.textContent = count;
            notificationBadge.style.display = count > 0 ? 'inline-block' : 'none';
        }
    }

    // افزودن اعلان جدید به لیست
    function prependNotification(notification) {
        const notificationItem = document.createElement('div');
        notificationItem.className = 'notification-item';
        notificationItem.id = 'notification-' + notification.id;

        if (!notification.is_read) {
            notificationItem.classList.add('unread');
        }

        let notificationContent = `
            <div class="notification-header">
                <h5>${notification.title}</h5>
                <span class="notification-time">${formatDateTime(notification.created_at)}</span>
            </div>
            <div class="notification-body">
                <p>${notification.message}</p>
            </div>
            <div class="notification-footer">
        `;

        // اگر نوع اعلان چت است، دکمه مشاهده گفتگو را نمایش می‌دهیم
        if (notification.notification_type === 'chat' && notification.data && notification.data.room_id) {
            notificationContent += `
                <a href="/chat/room/${notification.data.room_id}/" class="btn btn-sm btn-primary">
                    مشاهده گفتگو
                </a>
            `;
        }

        // دکمه علامت‌گذاری به عنوان خوانده شده
        if (!notification.is_read) {
            notificationContent += `
                <button class="btn btn-sm btn-secondary mark-read" data-id="${notification.id}">
                    علامت‌گذاری به عنوان خوانده شده
                </button>
            `;
        }

        notificationContent += `</div>`;

        notificationItem.innerHTML = notificationContent;

        // افزودن به ابتدای لیست
        notificationList.insertBefore(notificationItem, notificationList.firstChild);

        // افزودن رویداد کلیک برای دکمه علامت‌گذاری
        const markReadButton = notificationItem.querySelector('.mark-read');
        if (markReadButton) {
            markReadButton.addEventListener('click', function() {
                markNotificationAsRead(notification.id);
            });
        }
    }

    // علامت‌گذاری اعلان به عنوان خوانده شده
    function markNotificationAsRead(notificationId) {
        if (socket && socket.readyState === WebSocket.OPEN) {
            socket.send(JSON.stringify({
                'action': 'mark_read',
                'notification_id': notificationId
            }));

            // به‌روزرسانی نمایش اعلان
            const notificationItem = document.getElementById('notification-' + notificationId);
            if (notificationItem) {
                notificationItem.classList.remove('unread');

                const markReadButton = notificationItem.querySelector('.mark-read');
                if (markReadButton) {
                    markReadButton.remove();
                }
            }
        }
    }

    // علامت‌گذاری تمام اعلان‌ها به عنوان خوانده شده
    function markAllNotificationsAsRead() {
        if (socket && socket.readyState === WebSocket.OPEN) {
            socket.send(JSON.stringify({
                'action': 'mark_all_read'
            }));

            // به‌روزرسانی نمایش اعلان‌ها
            document.querySelectorAll('.notification-item.unread').forEach(function(notificationItem) {
                notificationItem.classList.remove('unread');

                const markReadButton = notificationItem.querySelector('.mark-read');
                if (markReadButton) {
                    markReadButton.remove();
                }
            });
        }
    }

    // نمایش اعلان مرورگر
    function showBrowserNotification(notification) {
        // بررسی پشتیبانی از اعلان‌های مرورگر
        if (!('Notification' in window)) {
            return;
        }

        // درخواست مجوز اعلان
        if (Notification.permission === 'granted') {
            createBrowserNotification(notification);
        }
        else if (Notification.permission !== 'denied') {
            Notification.requestPermission().then(function(permission) {
                if (permission === 'granted') {
                    createBrowserNotification(notification);
                }
            });
        }
    }

    // ایجاد اعلان مرورگر
    function createBrowserNotification(notification) {
        const browserNotification = new Notification(notification.title, {
            body: notification.message,
            icon: '/static/chat/img/notification-icon.png'
        });

        browserNotification.onclick = function() {
            window.focus();

            // اگر اعلان مربوط به چت است، به صفحه گفتگو هدایت می‌کنیم
            if (notification.notification_type === 'chat' && notification.data && notification.data.room_id) {
                window.location.href = `/chat/room/${notification.data.room_id}/`;
            } else {
                window.location.href = '/chat/notifications/';
            }

            browserNotification.close();
        };

        // بستن خودکار اعلان پس از 5 ثانیه
        setTimeout(function() {
            browserNotification.close();
        }, 5000);
    }

    // فرمت‌بندی تاریخ و زمان
    function formatDateTime(dateTimeStr) {
        const date = new Date(dateTimeStr);
        return date.toLocaleTimeString('fa-IR', { hour: '2-digit', minute: '2-digit' }) + ' ' +
               date.toLocaleDateString('fa-IR', { month: 'short', day: 'numeric' });
    }

    // رویدادها

    // دکمه علامت‌گذاری تمام اعلان‌ها به عنوان خوانده شده
    const markAllReadButton = document.getElementById('mark-all-read');
    if (markAllReadButton) {
        markAllReadButton.addEventListener('click', markAllNotificationsAsRead);
    }

    // دکمه‌های علامت‌گذاری تکی
    document.querySelectorAll('.mark-read').forEach(function(button) {
        button.addEventListener('click', function() {
            const notificationId = this.getAttribute('data-id');
            markNotificationAsRead(notificationId);
        });
    });

    // به‌روزرسانی اولیه تعداد اعلان‌ها
    updateNotificationCount();
});

====== FILE: static/chat/js/online-handler.js ======

// static/chat/js/online-handler.js
(function() {
    'use strict';

    // جلوگیری از اجرای مکرر
    if (window.ZimaOnlineHandler) {
        console.log('Online handler already initialized');
        return;
    }

    window.ZimaOnlineHandler = {
        socket: null,
        isConnected: false,
        isConnecting: false,
        lastActivity: Date.now(),
        heartbeatInterval: null,

        init: function() {
            console.log('Initializing online handler');
            this.setupBeforeUnload();

            // فقط یک اتصال WebSocket برای وضعیت آنلاین
            setTimeout(() => this.connect(), 3000);
        },

        connect: function() {
            if (this.isConnecting || this.isConnected) {
                return;
            }

            this.isConnecting = true;

            try {
                const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
                const wsUrl = `${wsProtocol}//${window.location.host}/ws/online-status/`;

                this.socket = new WebSocket(wsUrl);

                this.socket.onopen = () => {
                    console.log('Online status connected');
                    this.isConnected = true;
                    this.isConnecting = false;
                    this.sendOnlineStatus();
                    this.startHeartbeat();
                };

                this.socket.onmessage = (event) => {
                    const data = JSON.parse(event.data);
                    if (data.type === 'status_update') {
                        this.updateUserStatus(data.user_id, data.status);
                    } else if (data.type === 'all_statuses') {
                        for (const userId in data.statuses) {
                            this.updateUserStatus(userId, data.statuses[userId]);
                        }
                    }
                };

                this.socket.onclose = () => {
                    console.log('Online status disconnected');
                    this.isConnected = false;
                    this.isConnecting = false;
                    this.stopHeartbeat();
                };

                this.socket.onerror = (error) => {
                    console.error('Online status error:', error);
                    this.isConnecting = false;
                };

            } catch (error) {
                console.error('Error creating online status socket:', error);
                this.isConnecting = false;
            }
        },

        setupBeforeUnload: function() {
            window.addEventListener('beforeunload', () => {
                this.sendOfflineStatus();
            });
        },

        sendOnlineStatus: function() {
            if (this.isConnected && this.socket) {
                this.socket.send(JSON.stringify({
                    type: 'set_status',
                    status: 'online'
                }));
            }
        },

        sendOfflineStatus: function() {
            if (this.isConnected && this.socket) {
                try {
                    this.socket.send(JSON.stringify({
                        type: 'offline'
                    }));
                } catch (e) {
                    console.error('Error sending offline status:', e);
                }
            }
        },

        startHeartbeat: function() {
            this.stopHeartbeat();
            this.heartbeatInterval = setInterval(() => {
                if (this.isConnected && this.socket) {
                    this.socket.send(JSON.stringify({
                        type: 'heartbeat'
                    }));
                }
            }, 120000); // 2 دقیقه
        },

        stopHeartbeat: function() {
            if (this.heartbeatInterval) {
                clearInterval(this.heartbeatInterval);
                this.heartbeatInterval = null;
            }
        },

        updateUserStatus: function(userId, status) {
            const elements = document.querySelectorAll(`.user-status[data-user-id="${userId}"]`);
            elements.forEach(element => {
                element.classList.remove('online', 'offline');
                element.classList.add(status);
                element.setAttribute('title', status === 'online' ? 'آنلاین' : 'آفلاین');

                const statusDot = element.querySelector('.status-dot');
                if (statusDot) {
                    statusDot.classList.remove('online', 'offline');
                    statusDot.classList.add(status);
                }
            });
        }
    };

    // شروع فقط یک بار
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            window.ZimaOnlineHandler.init();
        });
    } else {
        window.ZimaOnlineHandler.init();
    }

})();

====== FILE: static/chat/sounds/js/chat.js ======

document.addEventListener('DOMContentLoaded', function() {
    const roomId = document.getElementById('room-id').value;
    const userId = document.getElementById('user-id').value;
    const isStaff = document.getElementById('is-staff').value === 'True';
    const messageContainer = document.getElementById('message-container');
    const messageInput = document.getElementById('message-input');
    const sendButton = document.getElementById('send-button');
    const closeRoomButton = document.getElementById('close-room-button');
    const reopenRoomButton = document.getElementById('reopen-room-button');
    const fileUploadButton = document.getElementById('file-upload-button');
    const fileInput = document.getElementById('file-input');
    const roomStatus = document.getElementById('room-status');
    const typingIndicator = document.getElementById('typing-indicator');
    const notificationSound = document.getElementById('notification-sound');
    const chatActions = document.querySelector('.chat-actions');

    let typingTimeout = null;
    let socket = null;
    let tempFileId = null;
    let tempFilePreview = null;

    console.log('Chat room loaded');
    console.log('Is staff:', isStaff);
    console.log('User ID:', userId);
    console.log('Room elements:', {
        closeButton: closeRoomButton,
        reopenButton: reopenRoomButton,
        messageInput: messageInput,
        sendButton: sendButton
    });

    // اتصال به وب‌سوکت
    function connectWebSocket() {
        const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
        socket = new WebSocket(
            `${wsProtocol}//${window.location.host}/ws/chat/${roomId}/`
        );

        socket.onopen = function(e) {
            console.log('WebSocket connected');

            // علامت‌گذاری پیام‌های خوانده نشده به عنوان خوانده شده
            document.querySelectorAll('.message.received:not(.read)').forEach(function(messageElement) {
                const messageId = messageElement.id.replace('message-', '');
                if (messageId && !messageId.startsWith('system-')) {
                    markMessageAsRead(messageId);
                }
            });
        };

        socket.onmessage = function(e) {
            const data = JSON.parse(e.data);
            console.log('WebSocket message received:', data);

            if (data.type === 'room_status') {
                console.log('Room status update received:', data);
                handleRoomStatusChange(data);
            }
            else if (data.type === 'chat.deleted_by_user') {
                // پردازش پیام حذف گفتگو توسط کاربر
                handleChatDeleted(data);
            }
            else if (data.type === 'chat_message') {
                // دریافت پیام جدید
                appendMessage(data.message);

                // پخش صدای اعلان اگر پیام از کاربر دیگر است
                if (data.message.sender_id !== userId) {
                    notificationSound.play().catch(error => console.error('Error playing notification sound:', error));
                }

                // اسکرول به پایین
                messageContainer.scrollTop = messageContainer.scrollHeight;

                // علامت‌گذاری پیام به عنوان خوانده شده اگر از کاربر دیگر است
                if (data.message.sender_id !== userId && data.message.message_type !== 'system') {
                    markMessageAsRead(data.message.id);
                }
            }
            else if (data.type === 'message_read') {
                // به‌روزرسانی وضعیت خوانده شدن پیام
                const messageElement = document.getElementById('message-' + data.message_id);
                if (messageElement) {
                    const readIndicator = messageElement.querySelector('.read-indicator');
                    if (readIndicator) {
                        readIndicator.innerHTML = '<i class="fas fa-check-double"></i>';
                        readIndicator.setAttribute('title', 'خوانده شده در ' + new Date(data.read_at).toLocaleString('fa-IR'));
                        messageElement.classList.add('read');
                    }
                }
            }
            else if (data.type === 'user_typing') {
                // نمایش وضعیت تایپ کردن کاربر
                if (data.user_id !== userId) {
                    typingIndicator.textContent = data.username + ' در حال تایپ است...';
                    typingIndicator.style.display = data.is_typing ? 'block' : 'none';
                }
            }
            else if (data.type === 'error') {
                // نمایش خطا
                showNotification(data.message, 'danger');
            }
        };

        socket.onclose = function(e) {
            console.log('WebSocket disconnected, trying to reconnect in 2 seconds...');
            setTimeout(function() {
                connectWebSocket();
            }, 2000);
        };

        socket.onerror = function(e) {
            console.error('WebSocket error:', e);
        };
    }

    // مدیریت تغییر وضعیت اتاق
    function handleRoomStatusChange(data) {
        // به‌روزرسانی نشانگر وضعیت
        if (roomStatus) {
            roomStatus.textContent = data.status === 'open' ? 'باز' : 'بسته شده';
            roomStatus.className = `badge ${data.status === 'open' ? 'bg-success' : 'bg-danger'} mx-2`;
        }

        // فعال/غیرفعال کردن ورودی پیام
        if (messageInput) messageInput.disabled = data.status !== 'open';
        if (sendButton) sendButton.disabled = data.status !== 'open';
        if (fileUploadButton) fileUploadButton.disabled = data.status !== 'open';

        // به‌روزرسانی دکمه‌های بستن و بازگشایی
        updateActionButtons(data);

        // اضافه کردن پیام سیستمی به چت
        if (data.message) {
            appendMessage({
                id: 'system-' + Date.now(),
                content: data.message,
                message_type: 'system',
                created_at: new Date().toISOString()
            });

            // اسکرول به پایین
            messageContainer.scrollTop = messageContainer.scrollHeight;
        }

        // نمایش اعلان
        if (data.status === 'closed') {
            const notificationText = data.closed_by_staff ?
                'این گفتگو توسط پشتیبانی بسته شده است.' :
                'این گفتگو توسط کاربر بسته شده است.';

            showNotification(notificationText, 'warning');
        } else if (data.status === 'open' && data.message) {
            showNotification(data.message, 'success');
        }
    }

    // به‌روزرسانی دکمه‌های بستن و بازگشایی
    function updateActionButtons(data) {
        // پاک کردن محتوای قبلی
        if (chatActions) {
            chatActions.innerHTML = '';

            // ایجاد دکمه مناسب بر اساس وضعیت
            if (data.status === 'open') {
                // اتاق باز است، نمایش دکمه بستن
                const closeButton = document.createElement('button');
                closeButton.id = 'close-room-button';
                closeButton.className = 'btn btn-danger btn-sm';
                closeButton.innerHTML = '<i class="fas fa-times"></i> بستن گفتگو';
                closeButton.addEventListener('click', closeRoom);
                chatActions.appendChild(closeButton);
            } else {
                // اتاق بسته است، تصمیم‌گیری برای نمایش دکمه بازگشایی
                let showReopenButton = false;

                // شرایط نمایش دکمه بازگشایی
                if (isStaff) {
                    showReopenButton = true;
                    console.log('Admin can reopen the chat');
                } else if (!data.closed_by_staff) {
                    showReopenButton = true;
                    console.log('User can reopen the chat because it was not closed by admin');
                } else {
                    console.log('User cannot reopen the chat because it was closed by admin');
                }

                if (showReopenButton) {
                    const reopenButton = document.createElement('button');
                    reopenButton.id = 'reopen-room-button';
                    reopenButton.className = 'btn btn-success btn-sm';
                    reopenButton.innerHTML = '<i class="fas fa-redo"></i> بازگشایی گفتگو';
                    reopenButton.addEventListener('click', reopenRoom);
                    chatActions.appendChild(reopenButton);
                }
            }
        }
    }

    // اتصال اولیه به وب‌سوکت
    connectWebSocket();
    function handleChatDeleted(data) {
    // نمایش پیام سیستمی در چت
    const messageContainer = document.getElementById('message-container');
    const systemMessage = document.createElement('div');
    systemMessage.className = 'message system-message';
    systemMessage.innerHTML = `
        <div class="message-content">
            <strong class="text-danger">${data.message}</strong>
        </div>
    `;
    messageContainer.appendChild(systemMessage);
    messageContainer.scrollTop = messageContainer.scrollHeight;

    // غیرفعال کردن ارسال پیام
    const messageInput = document.getElementById('message-input');
    const sendButton = document.getElementById('send-button');
    const fileUploadButton = document.getElementById('file-upload-button');

    messageInput.disabled = true;
    sendButton.disabled = true;
    fileUploadButton.disabled = true;

    messageInput.placeholder = 'این گفتگو توسط کاربر حذف شده است';

    // نمایش اعلان
    showNotification('این گفتگو توسط کاربر حذف شده است', 'warning', 0);
}
    // تابع نمایش اعلان
    function showNotification(message, type, timeout = 5000) {
    // بررسی وجود کانتینر اعلان
    let notificationContainer = document.querySelector('.notification-container');
    if (!notificationContainer) {
        notificationContainer = document.createElement('div');
        notificationContainer.className = 'notification-container';
        document.body.appendChild(notificationContainer);
    }

    // ایجاد اعلان
    const notification = document.createElement('div');
    notification.className = `alert alert-${type} alert-dismissible fade show`;
    notification.role = 'alert';
    notification.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    `;

    // افزودن اعلان به کانتینر
    notificationContainer.appendChild(notification);

    // حذف خودکار اعلان بعد از زمان مشخص شده (اگر timeout صفر باشد، اعلان حذف نمی‌شود)
    if (timeout > 0) {
        setTimeout(() => {
            notification.classList.remove('show');
            setTimeout(() => {
                notification.remove();
            }, 150);
        }, timeout);
    }
}

    // افزودن پیام به صفحه
    function appendMessage(message) {
        const messageDiv = document.createElement('div');
        messageDiv.id = 'message-' + message.id;
        messageDiv.className = 'message';

        // تعیین کلاس پیام بر اساس فرستنده
        if (message.message_type === 'system') {
            messageDiv.className += ' system-message';
        } else if (message.sender_id === userId) {
            messageDiv.className += ' sent';
        } else {
            messageDiv.className += ' received';
        }

        // اگر پیام خوانده شده است، کلاس read را اضافه می‌کنیم
        if (message.is_read) {
            messageDiv.className += ' read';
        }

        // ایجاد محتوای پیام
        let messageContent = `
            <div class="message-content">
                ${message.content}
            </div>
        `;

        // اگر فایل دارد، آن را نمایش می‌دهیم
        if (message.file_url) {
            const fileUrl = message.file_url;
            const fileExtension = fileUrl.split('.').pop().toLowerCase();
            if (['jpg', 'jpeg', 'png', 'gif'].includes(fileExtension)) {
                messageContent += `
                    <div class="message-image">
                        <a href="${fileUrl}" target="_blank">
                            <img src="${fileUrl}" alt="تصویر پیوست" />
                        </a>
                    </div>
                `;
            } else {
                messageContent += `
                    <div class="message-file">
                        <a href="${fileUrl}" target="_blank">
                            <i class="fas fa-file"></i> دانلود فایل
                        </a>
                    </div>
                `;
            }
        }

        // افزودن اطلاعات پیام (زمان، وضعیت خوانده شدن و ...)
        messageContent += `
            <div class="message-info">
                <span class="message-time">${formatDateTime(message.created_at)}</span>
        `;

        // اگر پیام از کاربر فعلی است، نشانگر خوانده شدن را نمایش می‌دهیم
        if (message.sender_id === userId && message.message_type !== 'system') {
            messageContent += `
                <span class="read-indicator" title="${message.is_read ? 'خوانده شده' : 'ارسال شده'}">
                    <i class="fas ${message.is_read ? 'fa-check-double' : 'fa-check'}"></i>
                </span>
            `;
        }

        messageContent += `</div>`;

        // قرار دادن محتوا در المان پیام
        messageDiv.innerHTML = messageContent;

        // افزودن پیام به صفحه
        messageContainer.appendChild(messageDiv);
    }

    // ارسال پیام
    function sendMessage() {
        const message = messageInput.value.trim();

        if (message || tempFileId) {
            // ارسال پیام به سرور
            socket.send(JSON.stringify({
                'type': 'chat_message',
                'message': message,
                'file_id': tempFileId
            }));

            // پاک کردن ورودی پیام
            messageInput.value = '';

            // پاک کردن پیش‌نمایش فایل
            if (tempFilePreview) {
                tempFilePreview.remove();
                tempFilePreview = null;
            }

            // پاک کردن شناسه فایل موقت
            tempFileId = null;

            // متوقف کردن وضعیت تایپ کردن
            sendTypingStatus(false);
        }
    }

    // آپلود فایل
    function uploadFile() {
        fileInput.click();
    }

    // پردازش انتخاب فایل
    function handleFileSelect(e) {
        const file = e.target.files[0];
        if (!file) return;

        // بررسی اندازه فایل (حداکثر 5MB)
        if (file.size > 5 * 1024 * 1024) {
            alert('حداکثر اندازه فایل 5 مگابایت است.');
            return;
        }

        // ایجاد شیء FormData
        const formData = new FormData();
        formData.append('file', file);

        // ارسال فایل به سرور
        fetch('/chat/api/upload-file/', {
            method: 'POST',
            body: formData,
            headers: {
                'X-CSRFToken': getCookie('csrftoken')
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // ذخیره شناسه فایل موقت
                tempFileId = data.file_id;

                // نمایش پیش‌نمایش فایل
                if (tempFilePreview) {
                    tempFilePreview.remove();
                }

                tempFilePreview = document.createElement('div');
                tempFilePreview.className = 'file-preview';

                const fileExtension = data.file_name.split('.').pop().toLowerCase();
                if (['jpg', 'jpeg', 'png', 'gif'].includes(fileExtension)) {
                    tempFilePreview.innerHTML = `
                        <div class="image-preview">
                            <img src="${data.file_url}" alt="${data.file_name}" />
                            <button type="button" class="btn btn-sm btn-danger remove-file">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                    `;
                } else {
                    tempFilePreview.innerHTML = `
                        <div class="file-item">
                            <i class="fas fa-file"></i>
                            <span>${data.file_name}</span>
                            <button type="button" class="btn btn-sm btn-danger remove-file">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                    `;
                }

                // افزودن پیش‌نمایش به صفحه
                const chatFooter = document.querySelector('.chat-footer');
                chatFooter.insertBefore(tempFilePreview, messageInput);

                // افزودن رویداد کلیک برای دکمه حذف
                tempFilePreview.querySelector('.remove-file').addEventListener('click', function() {
                    tempFilePreview.remove();
                    tempFilePreview = null;
                    tempFileId = null;
                });
            } else {
                alert('خطا در آپلود فایل: ' + data.error);
            }
        })
        .catch(error => {
            console.error('Error uploading file:', error);
            alert('خطا در آپلود فایل. لطفاً مجدداً تلاش کنید.');
        });

        // پاک کردن مقدار input فایل
        fileInput.value = '';
    }

    // علامت‌گذاری پیام به عنوان خوانده شده
    function markMessageAsRead(messageId) {
        socket.send(JSON.stringify({
            'type': 'mark_read',
            'message_id': messageId
        }));
    }

    // ارسال وضعیت تایپ کردن
    function sendTypingStatus(isTyping) {
        socket.send(JSON.stringify({
            'type': 'typing',
            'is_typing': isTyping
        }));
    }

    // بستن اتاق گفتگو
    function closeRoom() {
        if (confirm('آیا از بستن این گفتگو اطمینان دارید؟')) {
            socket.send(JSON.stringify({
                'type': 'close_room'
            }));
        }
    }

    // بازگشایی اتاق گفتگو
    function reopenRoom() {
        if (confirm('آیا از بازگشایی این گفتگو اطمینان دارید؟')) {
            socket.send(JSON.stringify({
                'type': 'reopen_room'
            }));
        }
    }

    // فرمت‌بندی تاریخ و زمان
    function formatDateTime(dateTimeStr) {
        const date = new Date(dateTimeStr);
        return date.toLocaleTimeString('fa-IR', { hour: '2-digit', minute: '2-digit' }) + ' ' +
               date.toLocaleDateString('fa-IR', { month: 'short', day: 'numeric' });
    }

    // دریافت مقدار کوکی
    function getCookie(name) {
        let cookieValue = null;
        if (document.cookie && document.cookie !== '') {
            const cookies = document.cookie.split(';');
            for (let i = 0; i < cookies.length; i++) {
                const cookie = cookies[i].trim();
                // آیا این کوکی با نام مورد نظر شروع می‌شود؟
                if (cookie.substring(0, name.length + 1) === (name + '=')) {
                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                    break;
                }
            }
        }
        return cookieValue;
    }

    // رویدادها

    // ارسال پیام با کلیک روی دکمه
    if (sendButton) {
        sendButton.addEventListener('click', sendMessage);
    }

    // ارسال پیام با فشردن Enter
    if (messageInput) {
        messageInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            }
        });

        // ارسال وضعیت تایپ کردن
        messageInput.addEventListener('input', function() {
            clearTimeout(typingTimeout);

            // ارسال وضعیت تایپ کردن
            sendTypingStatus(true);

            // تنظیم تایمر برای پایان وضعیت تایپ کردن
            typingTimeout = setTimeout(function() {
                sendTypingStatus(false);
            }, 3000);
        });
    }

    // آپلود فایل
    if (fileUploadButton) {
        fileUploadButton.addEventListener('click', uploadFile);
    }

    // انتخاب فایل
    if (fileInput) {
        fileInput.addEventListener('change', handleFileSelect);
    }

    // بستن اتاق گفتگو - افزودن رویداد به دکمه‌های موجود
    if (closeRoomButton) {
        closeRoomButton.addEventListener('click', closeRoom);
    }

    // بازگشایی اتاق گفتگو - افزودن رویداد به دکمه‌های موجود
    if (reopenRoomButton) {
        reopenRoomButton.addEventListener('click', reopenRoom);
    }

    // اسکرول به پایین صفحه
    if (messageContainer) {
        messageContainer.scrollTop = messageContainer.scrollHeight;
    }
});

====== FILE: static/chat/sounds/js/notifications.js ======

document.addEventListener('DOMContentLoaded', function() {
    const userId = document.getElementById('user-id').value;
    const notificationBadge = document.getElementById('notification-badge');
    const notificationList = document.getElementById('notification-list');
    const notificationSound = document.getElementById('notification-sound');

    let socket = null;

    // اتصال به وب‌سوکت
    function connectWebSocket() {
        const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
        socket = new WebSocket(
            `${wsProtocol}//${window.location.host}/ws/notifications/`
        );

        socket.onopen = function(e) {
            console.log('Notification WebSocket connected');

            // ارسال heartbeat هر 30 ثانیه
            setInterval(function() {
                if (socket.readyState === WebSocket.OPEN) {
                    socket.send(JSON.stringify({
                        'action': 'heartbeat'
                    }));
                }
            }, 30000);
        };

        socket.onmessage = function(e) {
            const data = JSON.parse(e.data);
            console.log('Notification WebSocket message received:', data);

            if (data.type === 'notification') {
                // دریافت اعلان جدید
                const notification = data.notification;

                // به‌روزرسانی تعداد اعلان‌های خوانده نشده
                updateNotificationCount();

                // پخش صدای اعلان
                notificationSound.play().catch(error => console.error('Error playing notification sound:', error));

                // اگر صفحه اعلان‌ها باز است، اعلان جدید را نمایش می‌دهیم
                if (notificationList) {
                    prependNotification(notification);
                }

                // نمایش اعلان مرورگر
                showBrowserNotification(notification);
            }
            else if (data.type === 'unread_count') {
                // به‌روزرسانی تعداد اعلان‌های خوانده نشده
                updateNotificationBadge(data.count);
            }
        };

        socket.onclose = function(e) {
            console.log('Notification WebSocket disconnected, trying to reconnect in 2 seconds...');
            setTimeout(function() {
                connectWebSocket();
            }, 2000);
        };

        socket.onerror = function(e) {
            console.error('Notification WebSocket error:', e);
        };
    }

    // اتصال اولیه به وب‌سوکت
    connectWebSocket();

    // به‌روزرسانی تعداد اعلان‌های خوانده نشده
    function updateNotificationCount() {
        fetch('/chat/unread-count/')
            .then(response => response.json())
            .then(data => {
                updateNotificationBadge(data.count);
            })
            .catch(error => console.error('Error fetching notification count:', error));
    }

    // به‌روزرسانی نشانگر تعداد اعلان‌ها
    function updateNotificationBadge(count) {
        if (notificationBadge) {
            notificationBadge.textContent = count;
            notificationBadge.style.display = count > 0 ? 'inline-block' : 'none';
        }
    }

    // افزودن اعلان جدید به لیست
    function prependNotification(notification) {
        const notificationItem = document.createElement('div');
        notificationItem.className = 'notification-item';
        notificationItem.id = 'notification-' + notification.id;

        if (!notification.is_read) {
            notificationItem.classList.add('unread');
        }

        let notificationContent = `
            <div class="notification-header">
                <h5>${notification.title}</h5>
                <span class="notification-time">${formatDateTime(notification.created_at)}</span>
            </div>
            <div class="notification-body">
                <p>${notification.message}</p>
            </div>
            <div class="notification-footer">
        `;

        // اگر نوع اعلان چت است، دکمه مشاهده گفتگو را نمایش می‌دهیم
        if (notification.notification_type === 'chat' && notification.data && notification.data.room_id) {
            notificationContent += `
                <a href="/chat/room/${notification.data.room_id}/" class="btn btn-sm btn-primary">
                    مشاهده گفتگو
                </a>
            `;
        }

        // دکمه علامت‌گذاری به عنوان خوانده شده
        if (!notification.is_read) {
            notificationContent += `
                <button class="btn btn-sm btn-secondary mark-read" data-id="${notification.id}">
                    علامت‌گذاری به عنوان خوانده شده
                </button>
            `;
        }

        notificationContent += `</div>`;

        notificationItem.innerHTML = notificationContent;

        // افزودن به ابتدای لیست
        notificationList.insertBefore(notificationItem, notificationList.firstChild);

        // افزودن رویداد کلیک برای دکمه علامت‌گذاری
        const markReadButton = notificationItem.querySelector('.mark-read');
        if (markReadButton) {
            markReadButton.addEventListener('click', function() {
                markNotificationAsRead(notification.id);
            });
        }
    }

    // علامت‌گذاری اعلان به عنوان خوانده شده
    function markNotificationAsRead(notificationId) {
        if (socket && socket.readyState === WebSocket.OPEN) {
            socket.send(JSON.stringify({
                'action': 'mark_read',
                'notification_id': notificationId
            }));

            // به‌روزرسانی نمایش اعلان
            const notificationItem = document.getElementById('notification-' + notificationId);
            if (notificationItem) {
                notificationItem.classList.remove('unread');

                const markReadButton = notificationItem.querySelector('.mark-read');
                if (markReadButton) {
                    markReadButton.remove();
                }
            }
        }
    }

    // علامت‌گذاری تمام اعلان‌ها به عنوان خوانده شده
    function markAllNotificationsAsRead() {
        if (socket && socket.readyState === WebSocket.OPEN) {
            socket.send(JSON.stringify({
                'action': 'mark_all_read'
            }));

            // به‌روزرسانی نمایش اعلان‌ها
            document.querySelectorAll('.notification-item.unread').forEach(function(notificationItem) {
                notificationItem.classList.remove('unread');

                const markReadButton = notificationItem.querySelector('.mark-read');
                if (markReadButton) {
                    markReadButton.remove();
                }
            });
        }
    }

    // نمایش اعلان مرورگر
    function showBrowserNotification(notification) {
        // بررسی پشتیبانی از اعلان‌های مرورگر
        if (!('Notification' in window)) {
            return;
        }

        // درخواست مجوز اعلان
        if (Notification.permission === 'granted') {
            createBrowserNotification(notification);
        }
        else if (Notification.permission !== 'denied') {
            Notification.requestPermission().then(function(permission) {
                if (permission === 'granted') {
                    createBrowserNotification(notification);
                }
            });
        }
    }

    // ایجاد اعلان مرورگر
    function createBrowserNotification(notification) {
        const browserNotification = new Notification(notification.title, {
            body: notification.message,
            icon: '/static/chat/img/notification-icon.png'
        });

        browserNotification.onclick = function() {
            window.focus();

            // اگر اعلان مربوط به چت است، به صفحه گفتگو هدایت می‌کنیم
            if (notification.notification_type === 'chat' && notification.data && notification.data.room_id) {
                window.location.href = `/chat/room/${notification.data.room_id}/`;
            } else {
                window.location.href = '/chat/notifications/';
            }

            browserNotification.close();
        };

        // بستن خودکار اعلان پس از 5 ثانیه
        setTimeout(function() {
            browserNotification.close();
        }, 5000);
    }

    // فرمت‌بندی تاریخ و زمان
    function formatDateTime(dateTimeStr) {
        const date = new Date(dateTimeStr);
        return date.toLocaleTimeString('fa-IR', { hour: '2-digit', minute: '2-digit' }) + ' ' +
               date.toLocaleDateString('fa-IR', { month: 'short', day: 'numeric' });
    }

    // رویدادها

    // دکمه علامت‌گذاری تمام اعلان‌ها به عنوان خوانده شده
    const markAllReadButton = document.getElementById('mark-all-read');
    if (markAllReadButton) {
        markAllReadButton.addEventListener('click', markAllNotificationsAsRead);
    }

    // دکمه‌های علامت‌گذاری تکی
    document.querySelectorAll('.mark-read').forEach(function(button) {
        button.addEventListener('click', function() {
            const notificationId = this.getAttribute('data-id');
            markNotificationAsRead(notificationId);
        });
    });

    // به‌روزرسانی اولیه تعداد اعلان‌ها
    updateNotificationCount();
});

====== FILE: static/chat/sounds/js/online-handler.js ======

// static/chat/js/online-handler.js
(function() {
    'use strict';

    // جلوگیری از اجرای مکرر
    if (window.ZimaOnlineHandler) {
        console.log('Online handler already initialized');
        return;
    }

    window.ZimaOnlineHandler = {
        socket: null,
        isConnected: false,
        isConnecting: false,
        lastActivity: Date.now(),
        heartbeatInterval: null,

        init: function() {
            console.log('Initializing online handler');
            this.setupBeforeUnload();

            // فقط یک اتصال WebSocket برای وضعیت آنلاین
            setTimeout(() => this.connect(), 3000);
        },

        connect: function() {
            if (this.isConnecting || this.isConnected) {
                return;
            }

            this.isConnecting = true;

            try {
                const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
                const wsUrl = `${wsProtocol}//${window.location.host}/ws/online-status/`;

                this.socket = new WebSocket(wsUrl);

                this.socket.onopen = () => {
                    console.log('Online status connected');
                    this.isConnected = true;
                    this.isConnecting = false;
                    this.sendOnlineStatus();
                    this.startHeartbeat();
                };

                this.socket.onmessage = (event) => {
                    const data = JSON.parse(event.data);
                    if (data.type === 'status_update') {
                        this.updateUserStatus(data.user_id, data.status);
                    } else if (data.type === 'all_statuses') {
                        for (const userId in data.statuses) {
                            this.updateUserStatus(userId, data.statuses[userId]);
                        }
                    }
                };

                this.socket.onclose = () => {
                    console.log('Online status disconnected');
                    this.isConnected = false;
                    this.isConnecting = false;
                    this.stopHeartbeat();
                };

                this.socket.onerror = (error) => {
                    console.error('Online status error:', error);
                    this.isConnecting = false;
                };

            } catch (error) {
                console.error('Error creating online status socket:', error);
                this.isConnecting = false;
            }
        },

        setupBeforeUnload: function() {
            window.addEventListener('beforeunload', () => {
                this.sendOfflineStatus();
            });
        },

        sendOnlineStatus: function() {
            if (this.isConnected && this.socket) {
                this.socket.send(JSON.stringify({
                    type: 'set_status',
                    status: 'online'
                }));
            }
        },

        sendOfflineStatus: function() {
            if (this.isConnected && this.socket) {
                try {
                    this.socket.send(JSON.stringify({
                        type: 'offline'
                    }));
                } catch (e) {
                    console.error('Error sending offline status:', e);
                }
            }
        },

        startHeartbeat: function() {
            this.stopHeartbeat();
            this.heartbeatInterval = setInterval(() => {
                if (this.isConnected && this.socket) {
                    this.socket.send(JSON.stringify({
                        type: 'heartbeat'
                    }));
                }
            }, 120000); // 2 دقیقه
        },

        stopHeartbeat: function() {
            if (this.heartbeatInterval) {
                clearInterval(this.heartbeatInterval);
                this.heartbeatInterval = null;
            }
        },

        updateUserStatus: function(userId, status) {
            const elements = document.querySelectorAll(`.user-status[data-user-id="${userId}"]`);
            elements.forEach(element => {
                element.classList.remove('online', 'offline');
                element.classList.add(status);
                element.setAttribute('title', status === 'online' ? 'آنلاین' : 'آفلاین');

                const statusDot = element.querySelector('.status-dot');
                if (statusDot) {
                    statusDot.classList.remove('online', 'offline');
                    statusDot.classList.add(status);
                }
            });
        }
    };

    // شروع فقط یک بار
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            window.ZimaOnlineHandler.init();
        });
    } else {
        window.ZimaOnlineHandler.init();
    }

})();

====== FILE: static/chat/sounds/css/notifications.css ======

/* استایل‌های اعلان‌ها */

.notification-container {
    margin-top: 20px;
}

.notification-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
}

.notification-header h2 {
    margin: 0;
}

.notification-list {
    list-style: none;
    padding: 0;
    margin: 0;
}

.notification-item {
    padding: 15px;
    border: 1px solid #ddd;
    border-radius: 8px;
    margin-bottom: 15px;
    background-color: #fff;
    transition: background-color 0.2s;
}

.notification-item.unread {
    background-color: #f0f7ff;
    border-right: 4px solid #0d6efd;
}

.notification-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 10px;
}

.notification-header h5 {
    margin: 0;
    font-weight: bold;
}

.notification-time {
    font-size: 0.8rem;
    color: #777;
}

.notification-body {
    margin-bottom: 10px;
}

.notification-body p {
    margin: 0;
    color: #333;
}

.notification-footer {
    display: flex;
    justify-content: flex-end;
    gap: 10px;
}

/* نشانگر تعداد اعلان‌های خوانده نشده */
.notification-badge {
    display: inline-block;
    background-color: #dc3545;
    color: white;
    border-radius: 50%;
    min-width: 20px;
    height: 20px;
    text-align: center;
    line-height: 20px;
    font-size: 0.8rem;
    padding: 0 5px;
    position: absolute;
    top: -8px;
    right: -8px;
}

.notification-icon {
    position: relative;
}

/* ریسپانسیو */
@media (max-width: 768px) {
    .notification-footer {
        flex-direction: column;
        align-items: flex-start;
        gap: 5px;
    }

    .notification-footer .btn {
        width: 100%;
    }
}

====== FILE: static/chat/sounds/css/chat-list.css ======

/* chat-list.css - استایل‌های صفحه لیست گفتگوها */

.chat-list-container {
    max-width: 1000px;
    margin: 20px auto;
    background-color: #ffffff;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    overflow: hidden;
}

.chat-list-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 20px;
    background-color: #f8f9fa;
    border-bottom: 1px solid #e0e0e0;
}

.chat-list-header h1 {
    margin: 0;
    font-size: 24px;
    font-weight: 600;
}

.chat-list-tabs {
    padding: 0;
}

.nav-tabs {
    border-bottom: 1px solid #e0e0e0;
    padding: 0 20px;
}

.nav-tabs .nav-link {
    border: none;
    border-bottom: 2px solid transparent;
    color: #6c757d;
    font-weight: 500;
    padding: 15px 20px;
    transition: color 0.3s, border-color 0.3s;
}

.nav-tabs .nav-link.active {
    color: #007bff;
    border-bottom-color: #007bff;
    background-color: transparent;
}

.nav-tabs .nav-link:hover {
    border-color: transparent;
    color: #007bff;
}

.nav-tabs .badge {
    margin-right: 5px;
}

.tab-content {
    padding: 0;
}

.chat-list {
    list-style: none;
    padding: 0;
    margin: 0;
}

.chat-item {
    display: flex;
    align-items: center;
    padding: 15px 20px;
    border-bottom: 1px solid #f1f3f4;
    transition: background-color 0.3s;
    text-decoration: none;
    color: inherit;
}

.chat-item:hover {
    background-color: #f8f9fa;
}

.chat-item-avatar {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    overflow: hidden;
    margin-left: 15px;
    background-color: #e9ecef;
    display: flex;
    align-items: center;
    justify-content: center;
}

.chat-item-avatar img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.avatar-placeholder {
    font-size: 24px;
    font-weight: bold;
    color: #6c757d;
}

.chat-item-content {
    flex-grow: 1;
    min-width: 0;
}

.chat-item-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 5px;
}

.chat-item-header h3 {
    margin: 0;
    font-size: 16px;
    font-weight: 600;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.chat-item-time {
    font-size: 12px;
    color: #6c757d;
    white-space: nowrap;
}

.chat-item-message {
    font-size: 14px;
    color: #6c757d;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.system-message-preview {
    font-style: italic;
    color: #6c757d;
}

.no-message {
    color: #6c757d;
    font-style: italic;
}

.chat-item-badge {
    margin-right: 10px;
}

.chat-item-badge .badge {
    font-size: 12px;
    padding: 5px 8px;
}

.chat-item-status {
    margin-right: 10px;
}

.status-badge {
    padding: 5px 10px;
    border-radius: 15px;
    font-size: 12px;
    font-weight: 500;
}

.status-badge.closed {
    background-color: #f1f3f4;
    color: #6c757d;
}

.empty-list {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 50px 20px;
    text-align: center;
}

.empty-list i {
    font-size: 48px;
    color: #e0e0e0;
    margin-bottom: 15px;
}

.empty-list p {
    font-size: 16px;
    color: #6c757d;
    margin-bottom: 20px;
}
/* استایل‌های اضافی برای کانتینر اعلان‌ها */
.notification-container {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 1050;
}

/* استایل‌های دکمه حذف گفتگو */
.delete-chat {
    position: absolute;
    left: 15px;
    top: 50%;
    transform: translateY(-50%);
    padding: 5px;
    opacity: 0.7;
    transition: all 0.2s ease;
    z-index: 10;
}

.delete-chat:hover {
    opacity: 1;
    transform: translateY(-50%) scale(1.1);
}

/* اصلاح استایل وضعیت آنلاین/آفلاین */
.user-status {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 20px;
    height: 20px;
    margin-right: 5px;
    position: relative;
    background-color: transparent;
}

.status-dot {
    width: 10px;
    height: 10px;
    border-radius: 50%;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    transition: all 0.3s ease;
}

.status-dot.online {
    background-color: #4CAF50;
    box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.2);
    animation: pulse 2s infinite;
}

.status-dot.offline {
    background-color: #9e9e9e;
    box-shadow: 0 0 0 2px rgba(158, 158, 158, 0.2);
}

@keyframes pulse {
    0% {
        box-shadow: 0 0 0 0 rgba(76, 175, 80, 0.7);
    }
    70% {
        box-shadow: 0 0 0 6px rgba(76, 175, 80, 0);
    }
    100% {
        box-shadow: 0 0 0 0 rgba(76, 175, 80, 0);
    }
}

/* تنظیمات واکنش‌گرایی */
@media (max-width: 768px) {
    .chat-list-container {
        margin: 10px;
        border-radius: 5px;
    }

    .chat-list-header h1 {
        font-size: 20px;
    }

    .chat-item-avatar {
        width: 40px;
        height: 40px;
    }

    .chat-item-header h3 {
        font-size: 14px;
    }
}

====== FILE: static/chat/sounds/css/chat.css ======

/* استایل‌های اصلی چت */

.chat-container {
    display: flex;
    flex-direction: column;
    height: 70vh;
    border: 1px solid #ddd;
    border-radius: 8px;
    overflow: hidden;
    background-color: #fff;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

.chat-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 15px;
    background-color: #f8f9fa;
    border-bottom: 1px solid #ddd;
}

.chat-header h3 {
    margin: 0;
    font-size: 1.2rem;
}

.chat-header .chat-actions {
    display: flex;
    gap: 10px;
}

.chat-body {
    flex-grow: 1;
    overflow-y: auto;
    padding: 15px;
    background-color: #f0f2f5;
}

.chat-footer {
    display: flex;
    padding: 10px;
    background-color: #f8f9fa;
    border-top: 1px solid #ddd;
}

.chat-footer textarea {
    flex-grow: 1;
    border: 1px solid #ddd;
    border-radius: 20px;
    padding: 10px 15px;
    resize: none;
    height: 40px;
    margin-right: 10px;
}

.chat-footer button {
    border-radius: 50%;
    width: 40px;
    height: 40px;
    display: flex;
    justify-content: center;
    align-items: center;
    margin-left: 5px;
}

/* استایل‌های پیام */

.message {
    margin-bottom: 15px;
    max-width: 70%;
    clear: both;
}

.message-content {
    padding: 10px 15px;
    border-radius: 18px;
    position: relative;
    word-wrap: break-word;
}

.message-info {
    font-size: 0.75rem;
    margin-top: 5px;
    color: #777;
    display: flex;
    align-items: center;
}

.message-time {
    margin-right: 5px;
}

.read-indicator {
    margin-right: 5px;
    color: #777;
}

.message.read .read-indicator {
    color: #0d6efd;
}

/* پیام ارسالی */
.message.sent {
    float: left;
    margin-left: 20px;
}

.message.sent .message-content {
    background-color: #dcf8c6;
}

.message.sent .message-info {
    text-align: left;
    justify-content: flex-start;
}

/* پیام دریافتی */
.message.received {
    float: right;
    margin-right: 20px;
}

.message.received .message-content {
    background-color: #fff;
}

.message.received .message-info {
    text-align: right;
    justify-content: flex-end;
}

/* پیام سیستمی */
.message.system-message {
    clear: both;
    float: none;
    margin: 10px auto;
    text-align: center;
    max-width: 100%;
}

.message.system-message .message-content {
    display: inline-block;
    background-color: #f1f1f1;
    color: #666;
    font-style: italic;
    padding: 5px 15px;
    border-radius: 15px;
}

/* تصویر و فایل */
.message-image img {
    max-width: 100%;
    max-height: 200px;
    border-radius: 8px;
    margin-top: 5px;
}

.message-file {
    margin-top: 5px;
}

.message-file a {
    display: flex;
    align-items: center;
    padding: 8px 12px;
    background-color: #f1f1f1;
    border-radius: 5px;
    text-decoration: none;
    color: #333;
}

.message-file a i {
    margin-left: 8px;
}

/* پیش‌نمایش فایل */
.file-preview {
    margin: 10px 0;
}

.image-preview {
    position: relative;
    display: inline-block;
}

.image-preview img {
    max-height: 100px;
    max-width: 200px;
    border-radius: 5px;
}

.file-item {
    display: flex;
    align-items: center;
    padding: 5px 10px;
    background-color: #f1f1f1;
    border-radius: 5px;
    margin-bottom: 5px;
}

.file-item i {
    margin-left: 8px;
}

.remove-file {
    position: absolute;
    top: -5px;
    right: -5px;
    padding: 0;
    width: 20px;
    height: 20px;
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 10px;
}

/* نشانگر تایپ کردن */
.typing-indicator {
    font-style: italic;
    color: #666;
    padding: 5px 10px;
    display: none;
}

/* وضعیت آنلاین */
.user-status {
    display: inline-block;
    width: 20px;
    height: 20px;
    margin-right: 8px;
    margin-left: 8px;
    vertical-align: middle;
    position: relative;
    border-radius: 50%;
    background-color: transparent;
}

.user-status.online {
    background-color: #28a745;
}
.status-dot {
    display: block;
    width: 12px;
    height: 12px;
    border-radius: 50%;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    transition: all 0.3s ease;
}

.status-dot.online {
    background-color: #28a745;
    box-shadow: 0 0 0 2px #fff, 0 0 0 4px rgba(40, 167, 69, 0.3), 0 0 7px rgba(40, 167, 69, 0.5);
    animation: pulse-green 2s infinite;
}

.status-dot.offline {
    background-color: #6c757d;
    box-shadow: 0 0 0 2px #fff, 0 0 0 4px rgba(108, 117, 125, 0.2);
}
@keyframes pulse-green {
    0% {
        box-shadow: 0 0 0 2px #fff, 0 0 0 4px rgba(40, 167, 69, 0.3), 0 0 7px rgba(40, 167, 69, 0.5);
    }
    50% {
        box-shadow: 0 0 0 2px #fff, 0 0 0 4px rgba(40, 167, 69, 0.5), 0 0 10px rgba(40, 167, 69, 0.7);
    }
    100% {
        box-shadow: 0 0 0 2px #fff, 0 0 0 4px rgba(40, 167, 69, 0.3), 0 0 7px rgba(40, 167, 69, 0.5);
    }
}


/* استایل مودال تایید حذف */
.modal-content {
    border-radius: 10px;
    border: none;
}

.modal-header {
    border-bottom: 1px solid #f0f0f0;
}

.modal-footer {
    border-top: 1px solid #f0f0f0;
}

/* استایل کانتینر اعلان */
.notification-container {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 1050;
    max-width: 300px;
}

.notification-container .alert {
    margin-bottom: 10px;
    box-shadow: 0 4px 10px rgba(0,0,0,0.1);
    border-radius: 8px;
    padding: 15px;
}

.notification-container .btn-close {
    font-size: 0.8rem;
}
/* افزودن استایل برای نمایش بهتر در لیست چت */
.chat-list .user-status {
    margin-right: 4px;
    margin-left: 4px;
}

/* افزودن استایل برای نمایش بهتر در هدر چت */
.chat-header .user-status {
    margin-right: 8px;
    margin-left: 8px;
}
.user-status.offline {
    background-color: #dc3545;
}

/* لیست گفتگوها */
.chat-list {
    list-style: none;
    padding: 0;
    margin: 0;
}

.chat-item {
    padding: 15px;
    border-bottom: 1px solid #ddd;
    display: flex;
    justify-content: space-between;
    align-items: center;
    transition: background-color 0.2s;
}

.chat-item:hover {
    background-color: #f8f9fa;
}

.chat-item-info {
    flex-grow: 1;
}

.chat-item-title {
    font-weight: bold;
    margin-bottom: 5px;
}

.chat-item-last-message {
    color: #666;
    font-size: 0.9rem;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    max-width: 300px;
}

.chat-item-meta {
    text-align: right;
    min-width: 70px;
}

.chat-item-time {
    font-size: 0.8rem;
    color: #777;
}

.unread-badge {
    display: inline-block;
    background-color: #0d6efd;
    color: white;
    border-radius: 50%;
    width: 20px;
    height: 20px;
    text-align: center;
    line-height: 20px;
    font-size: 0.8rem;
    margin-top: 5px;
}

/* ریسپانسیو */
@media (max-width: 768px) {
    .message {
        max-width: 85%;
    }

    .chat-item-last-message {
        max-width: 200px;
    }
}

@media (max-width: 576px) {
    .message {
        max-width: 90%;
    }

    .chat-item-last-message {
        max-width: 150px;
    }

    .chat-footer textarea {
        height: 60px;
    }
}

====== FILE: static/chat/sounds/css/admin-dashboard.css ======

/* admin-dashboard.css - استایل‌های داشبورد مدیریت */

.admin-dashboard-container {
    max-width: 1200px;
    margin: 20px auto;
    background-color: #ffffff;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    overflow: hidden;
}

.admin-dashboard-header {
    padding: 20px;
    background-color: #f8f9fa;
    border-bottom: 1px solid #e0e0e0;
}

.admin-dashboard-header h1 {
    margin: 0;
    font-size: 24px;
    font-weight: 600;
}

.admin-stats {
    display: flex;
    flex-wrap: wrap;
    padding: 20px;
    background-color: #ffffff;
    border-bottom: 1px solid #e0e0e0;
}

.stat-card {
    display: flex;
    align-items: center;
    padding: 15px;
    margin: 0 10px 10px 0;
    background-color: #f8f9fa;
    border-radius: 8px;
    width: calc(25% - 10px);
    min-width: 200px;
}

.stat-icon {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    background-color: #e9ecef;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-left: 15px;
}

.stat-icon i {
    font-size: 24px;
    color: #007bff;
}

.stat-content h3 {
    margin: 0;
    font-size: 14px;
    font-weight: 500;
    color: #6c757d;
}

.stat-value {
    font-size: 24px;
    font-weight: 600;
    margin: 5px 0 0;
    color: #212529;
}

.admin-tabs {
    padding: 0;
}

.nav-tabs {
    border-bottom: 1px solid #e0e0e0;
    padding: 0 20px;
}

.nav-tabs .nav-link {
    border: none;
    border-bottom: 2px solid transparent;
    color: #6c757d;
    font-weight: 500;
    padding: 15px 20px;
    transition: color 0.3s, border-color 0.3s;
}

.nav-tabs .nav-link.active {
    color: #007bff;
    border-bottom-color: #007bff;
    background-color: transparent;
}

.nav-tabs .nav-link:hover {
    border-color: transparent;
    color: #007bff;
}

.nav-tabs .badge {
    margin-right: 5px;
}

.tab-content {
    padding: 0;
}

.chat-list {
    list-style: none;
    padding: 0;
    margin: 0;
}

.chat-item {
    display: flex;
    align-items: center;
    padding: 15px 20px;
    border-bottom: 1px solid #f1f3f4;
    transition: background-color 0.3s;
}

a.chat-item {
    text-decoration: none;
    color: inherit;
}

a.chat-item:hover {
    background-color: #f8f9fa;
}

.chat-item-avatar {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    overflow: hidden;
    margin-left: 15px;
    background-color: #e9ecef;
    display: flex;
    align-items: center;
    justify-content: center;
}

.chat-item-avatar img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.avatar-placeholder {
    font-size: 24px;
    font-weight: bold;
    color: #6c757d;
}

.chat-item-content {
    flex-grow: 1;
    min-width: 0;
}

.chat-item-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 5px;
}

.chat-item-header h3 {
    margin: 0;
    font-size: 16px;
    font-weight: 600;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.chat-item-time {
    font-size: 12px;
    color: #6c757d;
    white-space: nowrap;
}

.chat-item-message {
    font-size: 14px;
    color: #6c757d;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.system-message-preview {
    font-style: italic;
    color: #6c757d;
}

.no-message {
    color: #6c757d;
    font-style: italic;
}

.chat-item-badge {
    margin-right: 10px;
}

.chat-item-badge .badge {
    font-size: 12px;
    padding: 5px 8px;
}

.chat-item-actions {
    display: flex;
    margin-right: 10px;
}

.chat-item-actions .btn {
    margin-right: 5px;
}

.empty-list {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 50px 20px;
    text-align: center;
}

.empty-list i {
    font-size: 48px;
    color: #e0e0e0;
    margin-bottom: 15px;
}

.empty-list p {
    font-size: 16px;
    color: #6c757d;
    margin-bottom: 20px;
}

/* تنظیمات واکنش‌گرایی */
@media (max-width: 992px) {
    .stat-card {
        width: calc(50% - 10px);
    }
}

@media (max-width: 768px) {
    .admin-dashboard-container {
        margin: 10px;
        border-radius: 5px;
    }

    .admin-dashboard-header h1 {
        font-size: 20px;
    }

    .stat-card {
        width: 100%;
        margin-right: 0;
    }

    .chat-item-avatar {
        width: 40px;
        height: 40px;
    }

    .chat-item-header h3 {
        font-size: 14px;
    }
}

/* استایل‌های جستجو */
.search-highlight {
    background-color: #f8f9fa;
    border-right: 3px solid #007bff;
    font-size: 13px;
    color: #333;
}

.search-result-message {
    max-width: 90%;
}

#closed-search-form {
    width: 200px;
}

#closed-search-form .input-group {
    border-radius: 20px;
    overflow: hidden;
}

#closed-search-input {
    border-left: none;
    background-color: rgba(255, 255, 255, 0.2);
    color: #fff;
}

#closed-search-input::placeholder {
    color: rgba(255, 255, 255, 0.7);
}

.card-header .input-group-sm .form-control-sm {
    height: calc(1.5em + 0.5rem + 2px);
    padding: 0.25rem 0.5rem;
    font-size: 0.875rem;
    line-height: 1.5;
    border-radius: 0.2rem;
}

.card-header .input-group-sm .btn-sm {
    padding: 0.25rem 0.5rem;
    font-size: 0.875rem;
    line-height: 1.5;
    border-radius: 0.2rem;
}

====== FILE: static/chat/sounds/css/start-chat.css ======

/* start-chat.css - استایل‌های صفحه شروع گفتگو */

.start-chat-container {
    max-width: 800px;
    margin: 40px auto;
    background-color: #ffffff;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    overflow: hidden;
}

.start-chat-header {
    padding: 20px;
    background-color: #f8f9fa;
    border-bottom: 1px solid #e0e0e0;
    text-align: center;
}

.start-chat-header h1 {
    margin: 0;
    font-size: 24px;
    font-weight: 600;
}

.start-chat-content {
    padding: 30px;
}

.start-chat-info {
    display: flex;
    align-items: flex-start;
    margin-bottom: 30px;
    padding: 20px;
    background-color: #f8f9fa;
    border-radius: 8px;
}

.info-icon {
    margin-left: 20px;
    font-size: 24px;
    color: #007bff;
}

.info-text p {
    margin: 0 0 10px;
    font-size: 16px;
    color: #495057;
}

.info-text p:last-child {
    margin-bottom: 0;
}

.start-chat-form {
    text-align: center;
    padding: 20px 0;
}

/* تنظیمات واکنش‌گرایی */
@media (max-width: 768px) {
    .start-chat-container {
        margin: 20px;
        border-radius: 5px;
    }

    .start-chat-header h1 {
        font-size: 20px;
    }

    .start-chat-content {
        padding: 20px;
    }

    .start-chat-info {
        flex-direction: column;
        align-items: center;
        text-align: center;
    }

    .info-icon {
        margin: 0 0 15px;
    }
}

====== FILE: static/chat/css/notifications.css ======

/* استایل‌های اعلان‌ها */

.notification-container {
    margin-top: 20px;
}

.notification-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
}

.notification-header h2 {
    margin: 0;
}

.notification-list {
    list-style: none;
    padding: 0;
    margin: 0;
}

.notification-item {
    padding: 15px;
    border: 1px solid #ddd;
    border-radius: 8px;
    margin-bottom: 15px;
    background-color: #fff;
    transition: background-color 0.2s;
}

.notification-item.unread {
    background-color: #f0f7ff;
    border-right: 4px solid #0d6efd;
}

.notification-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 10px;
}

.notification-header h5 {
    margin: 0;
    font-weight: bold;
}

.notification-time {
    font-size: 0.8rem;
    color: #777;
}

.notification-body {
    margin-bottom: 10px;
}

.notification-body p {
    margin: 0;
    color: #333;
}

.notification-footer {
    display: flex;
    justify-content: flex-end;
    gap: 10px;
}

/* نشانگر تعداد اعلان‌های خوانده نشده */
.notification-badge {
    display: inline-block;
    background-color: #dc3545;
    color: white;
    border-radius: 50%;
    min-width: 20px;
    height: 20px;
    text-align: center;
    line-height: 20px;
    font-size: 0.8rem;
    padding: 0 5px;
    position: absolute;
    top: -8px;
    right: -8px;
}

.notification-icon {
    position: relative;
}

/* ریسپانسیو */
@media (max-width: 768px) {
    .notification-footer {
        flex-direction: column;
        align-items: flex-start;
        gap: 5px;
    }

    .notification-footer .btn {
        width: 100%;
    }
}

====== FILE: static/chat/css/chat-list.css ======

/* chat-list.css - استایل‌های صفحه لیست گفتگوها */

.chat-list-container {
    max-width: 1000px;
    margin: 20px auto;
    background-color: #ffffff;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    overflow: hidden;
}

.chat-list-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 20px;
    background-color: #f8f9fa;
    border-bottom: 1px solid #e0e0e0;
}

.chat-list-header h1 {
    margin: 0;
    font-size: 24px;
    font-weight: 600;
}

.chat-list-tabs {
    padding: 0;
}

.nav-tabs {
    border-bottom: 1px solid #e0e0e0;
    padding: 0 20px;
}

.nav-tabs .nav-link {
    border: none;
    border-bottom: 2px solid transparent;
    color: #6c757d;
    font-weight: 500;
    padding: 15px 20px;
    transition: color 0.3s, border-color 0.3s;
}

.nav-tabs .nav-link.active {
    color: #007bff;
    border-bottom-color: #007bff;
    background-color: transparent;
}

.nav-tabs .nav-link:hover {
    border-color: transparent;
    color: #007bff;
}

.nav-tabs .badge {
    margin-right: 5px;
}

.tab-content {
    padding: 0;
}

.chat-list {
    list-style: none;
    padding: 0;
    margin: 0;
}

.chat-item {
    display: flex;
    align-items: center;
    padding: 15px 20px;
    border-bottom: 1px solid #f1f3f4;
    transition: background-color 0.3s;
    text-decoration: none;
    color: inherit;
}

.chat-item:hover {
    background-color: #f8f9fa;
}

.chat-item-avatar {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    overflow: hidden;
    margin-left: 15px;
    background-color: #e9ecef;
    display: flex;
    align-items: center;
    justify-content: center;
}

.chat-item-avatar img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.avatar-placeholder {
    font-size: 24px;
    font-weight: bold;
    color: #6c757d;
}

.chat-item-content {
    flex-grow: 1;
    min-width: 0;
}

.chat-item-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 5px;
}

.chat-item-header h3 {
    margin: 0;
    font-size: 16px;
    font-weight: 600;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.chat-item-time {
    font-size: 12px;
    color: #6c757d;
    white-space: nowrap;
}

.chat-item-message {
    font-size: 14px;
    color: #6c757d;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.system-message-preview {
    font-style: italic;
    color: #6c757d;
}

.no-message {
    color: #6c757d;
    font-style: italic;
}

.chat-item-badge {
    margin-right: 10px;
}

.chat-item-badge .badge {
    font-size: 12px;
    padding: 5px 8px;
}

.chat-item-status {
    margin-right: 10px;
}

.status-badge {
    padding: 5px 10px;
    border-radius: 15px;
    font-size: 12px;
    font-weight: 500;
}

.status-badge.closed {
    background-color: #f1f3f4;
    color: #6c757d;
}

.empty-list {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 50px 20px;
    text-align: center;
}

.empty-list i {
    font-size: 48px;
    color: #e0e0e0;
    margin-bottom: 15px;
}

.empty-list p {
    font-size: 16px;
    color: #6c757d;
    margin-bottom: 20px;
}
/* استایل‌های اضافی برای کانتینر اعلان‌ها */
.notification-container {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 1050;
}

/* استایل‌های دکمه حذف گفتگو */
.delete-chat {
    position: absolute;
    left: 15px;
    top: 50%;
    transform: translateY(-50%);
    padding: 5px;
    opacity: 0.7;
    transition: all 0.2s ease;
    z-index: 10;
}

.delete-chat:hover {
    opacity: 1;
    transform: translateY(-50%) scale(1.1);
}

/* اصلاح استایل وضعیت آنلاین/آفلاین */
.user-status {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 20px;
    height: 20px;
    margin-right: 5px;
    position: relative;
    background-color: transparent;
}

.status-dot {
    width: 10px;
    height: 10px;
    border-radius: 50%;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    transition: all 0.3s ease;
}

.status-dot.online {
    background-color: #4CAF50;
    box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.2);
    animation: pulse 2s infinite;
}

.status-dot.offline {
    background-color: #9e9e9e;
    box-shadow: 0 0 0 2px rgba(158, 158, 158, 0.2);
}

@keyframes pulse {
    0% {
        box-shadow: 0 0 0 0 rgba(76, 175, 80, 0.7);
    }
    70% {
        box-shadow: 0 0 0 6px rgba(76, 175, 80, 0);
    }
    100% {
        box-shadow: 0 0 0 0 rgba(76, 175, 80, 0);
    }
}

/* تنظیمات واکنش‌گرایی */
@media (max-width: 768px) {
    .chat-list-container {
        margin: 10px;
        border-radius: 5px;
    }

    .chat-list-header h1 {
        font-size: 20px;
    }

    .chat-item-avatar {
        width: 40px;
        height: 40px;
    }

    .chat-item-header h3 {
        font-size: 14px;
    }
}

====== FILE: static/chat/css/chat.css ======

/* استایل‌های اصلی چت */

.chat-container {
    display: flex;
    flex-direction: column;
    height: 70vh;
    border: 1px solid #ddd;
    border-radius: 8px;
    overflow: hidden;
    background-color: #fff;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

.chat-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 15px;
    background-color: #f8f9fa;
    border-bottom: 1px solid #ddd;
}

.chat-header h3 {
    margin: 0;
    font-size: 1.2rem;
}

.chat-header .chat-actions {
    display: flex;
    gap: 10px;
}

.chat-body {
    flex-grow: 1;
    overflow-y: auto;
    padding: 15px;
    background-color: #f0f2f5;
}

.chat-footer {
    display: flex;
    padding: 10px;
    background-color: #f8f9fa;
    border-top: 1px solid #ddd;
}

.chat-footer textarea {
    flex-grow: 1;
    border: 1px solid #ddd;
    border-radius: 20px;
    padding: 10px 15px;
    resize: none;
    height: 40px;
    margin-right: 10px;
}

.chat-footer button {
    border-radius: 50%;
    width: 40px;
    height: 40px;
    display: flex;
    justify-content: center;
    align-items: center;
    margin-left: 5px;
}

/* استایل‌های پیام */

.message {
    margin-bottom: 15px;
    max-width: 70%;
    clear: both;
}

.message-content {
    padding: 10px 15px;
    border-radius: 18px;
    position: relative;
    word-wrap: break-word;
}

.message-info {
    font-size: 0.75rem;
    margin-top: 5px;
    color: #777;
    display: flex;
    align-items: center;
}

.message-time {
    margin-right: 5px;
}

.read-indicator {
    margin-right: 5px;
    color: #777;
}

.message.read .read-indicator {
    color: #0d6efd;
}

/* پیام ارسالی */
.message.sent {
    float: left;
    margin-left: 20px;
}

.message.sent .message-content {
    background-color: #dcf8c6;
}

.message.sent .message-info {
    text-align: left;
    justify-content: flex-start;
}

/* پیام دریافتی */
.message.received {
    float: right;
    margin-right: 20px;
}

.message.received .message-content {
    background-color: #fff;
}

.message.received .message-info {
    text-align: right;
    justify-content: flex-end;
}

/* پیام سیستمی */
.message.system-message {
    clear: both;
    float: none;
    margin: 10px auto;
    text-align: center;
    max-width: 100%;
}

.message.system-message .message-content {
    display: inline-block;
    background-color: #f1f1f1;
    color: #666;
    font-style: italic;
    padding: 5px 15px;
    border-radius: 15px;
}

/* تصویر و فایل */
.message-image img {
    max-width: 100%;
    max-height: 200px;
    border-radius: 8px;
    margin-top: 5px;
}

.message-file {
    margin-top: 5px;
}

.message-file a {
    display: flex;
    align-items: center;
    padding: 8px 12px;
    background-color: #f1f1f1;
    border-radius: 5px;
    text-decoration: none;
    color: #333;
}

.message-file a i {
    margin-left: 8px;
}

/* پیش‌نمایش فایل */
.file-preview {
    margin: 10px 0;
}

.image-preview {
    position: relative;
    display: inline-block;
}

.image-preview img {
    max-height: 100px;
    max-width: 200px;
    border-radius: 5px;
}

.file-item {
    display: flex;
    align-items: center;
    padding: 5px 10px;
    background-color: #f1f1f1;
    border-radius: 5px;
    margin-bottom: 5px;
}

.file-item i {
    margin-left: 8px;
}

.remove-file {
    position: absolute;
    top: -5px;
    right: -5px;
    padding: 0;
    width: 20px;
    height: 20px;
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 10px;
}

/* نشانگر تایپ کردن */
.typing-indicator {
    font-style: italic;
    color: #666;
    padding: 5px 10px;
    display: none;
}

/* وضعیت آنلاین */
.user-status {
    display: inline-block;
    width: 20px;
    height: 20px;
    margin-right: 8px;
    margin-left: 8px;
    vertical-align: middle;
    position: relative;
    border-radius: 50%;
    background-color: transparent;
}

.user-status.online {
    background-color: #28a745;
}
.status-dot {
    display: block;
    width: 12px;
    height: 12px;
    border-radius: 50%;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    transition: all 0.3s ease;
}

.status-dot.online {
    background-color: #28a745;
    box-shadow: 0 0 0 2px #fff, 0 0 0 4px rgba(40, 167, 69, 0.3), 0 0 7px rgba(40, 167, 69, 0.5);
    animation: pulse-green 2s infinite;
}

.status-dot.offline {
    background-color: #6c757d;
    box-shadow: 0 0 0 2px #fff, 0 0 0 4px rgba(108, 117, 125, 0.2);
}
@keyframes pulse-green {
    0% {
        box-shadow: 0 0 0 2px #fff, 0 0 0 4px rgba(40, 167, 69, 0.3), 0 0 7px rgba(40, 167, 69, 0.5);
    }
    50% {
        box-shadow: 0 0 0 2px #fff, 0 0 0 4px rgba(40, 167, 69, 0.5), 0 0 10px rgba(40, 167, 69, 0.7);
    }
    100% {
        box-shadow: 0 0 0 2px #fff, 0 0 0 4px rgba(40, 167, 69, 0.3), 0 0 7px rgba(40, 167, 69, 0.5);
    }
}


/* استایل مودال تایید حذف */
.modal-content {
    border-radius: 10px;
    border: none;
}

.modal-header {
    border-bottom: 1px solid #f0f0f0;
}

.modal-footer {
    border-top: 1px solid #f0f0f0;
}

/* استایل کانتینر اعلان */
.notification-container {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 1050;
    max-width: 300px;
}

.notification-container .alert {
    margin-bottom: 10px;
    box-shadow: 0 4px 10px rgba(0,0,0,0.1);
    border-radius: 8px;
    padding: 15px;
}

.notification-container .btn-close {
    font-size: 0.8rem;
}
/* افزودن استایل برای نمایش بهتر در لیست چت */
.chat-list .user-status {
    margin-right: 4px;
    margin-left: 4px;
}

/* افزودن استایل برای نمایش بهتر در هدر چت */
.chat-header .user-status {
    margin-right: 8px;
    margin-left: 8px;
}
.user-status.offline {
    background-color: #dc3545;
}

/* لیست گفتگوها */
.chat-list {
    list-style: none;
    padding: 0;
    margin: 0;
}

.chat-item {
    padding: 15px;
    border-bottom: 1px solid #ddd;
    display: flex;
    justify-content: space-between;
    align-items: center;
    transition: background-color 0.2s;
}

.chat-item:hover {
    background-color: #f8f9fa;
}

.chat-item-info {
    flex-grow: 1;
}

.chat-item-title {
    font-weight: bold;
    margin-bottom: 5px;
}

.chat-item-last-message {
    color: #666;
    font-size: 0.9rem;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    max-width: 300px;
}

.chat-item-meta {
    text-align: right;
    min-width: 70px;
}

.chat-item-time {
    font-size: 0.8rem;
    color: #777;
}

.unread-badge {
    display: inline-block;
    background-color: #0d6efd;
    color: white;
    border-radius: 50%;
    width: 20px;
    height: 20px;
    text-align: center;
    line-height: 20px;
    font-size: 0.8rem;
    margin-top: 5px;
}

/* ریسپانسیو */
@media (max-width: 768px) {
    .message {
        max-width: 85%;
    }

    .chat-item-last-message {
        max-width: 200px;
    }
}

@media (max-width: 576px) {
    .message {
        max-width: 90%;
    }

    .chat-item-last-message {
        max-width: 150px;
    }

    .chat-footer textarea {
        height: 60px;
    }
}

====== FILE: static/chat/css/admin-dashboard.css ======

/* admin-dashboard.css - استایل‌های داشبورد مدیریت */

.admin-dashboard-container {
    max-width: 1200px;
    margin: 20px auto;
    background-color: #ffffff;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    overflow: hidden;
}

.admin-dashboard-header {
    padding: 20px;
    background-color: #f8f9fa;
    border-bottom: 1px solid #e0e0e0;
}

.admin-dashboard-header h1 {
    margin: 0;
    font-size: 24px;
    font-weight: 600;
}

.admin-stats {
    display: flex;
    flex-wrap: wrap;
    padding: 20px;
    background-color: #ffffff;
    border-bottom: 1px solid #e0e0e0;
}

.stat-card {
    display: flex;
    align-items: center;
    padding: 15px;
    margin: 0 10px 10px 0;
    background-color: #f8f9fa;
    border-radius: 8px;
    width: calc(25% - 10px);
    min-width: 200px;
}

.stat-icon {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    background-color: #e9ecef;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-left: 15px;
}

.stat-icon i {
    font-size: 24px;
    color: #007bff;
}

.stat-content h3 {
    margin: 0;
    font-size: 14px;
    font-weight: 500;
    color: #6c757d;
}

.stat-value {
    font-size: 24px;
    font-weight: 600;
    margin: 5px 0 0;
    color: #212529;
}

.admin-tabs {
    padding: 0;
}

.nav-tabs {
    border-bottom: 1px solid #e0e0e0;
    padding: 0 20px;
}

.nav-tabs .nav-link {
    border: none;
    border-bottom: 2px solid transparent;
    color: #6c757d;
    font-weight: 500;
    padding: 15px 20px;
    transition: color 0.3s, border-color 0.3s;
}

.nav-tabs .nav-link.active {
    color: #007bff;
    border-bottom-color: #007bff;
    background-color: transparent;
}

.nav-tabs .nav-link:hover {
    border-color: transparent;
    color: #007bff;
}

.nav-tabs .badge {
    margin-right: 5px;
}

.tab-content {
    padding: 0;
}

.chat-list {
    list-style: none;
    padding: 0;
    margin: 0;
}

.chat-item {
    display: flex;
    align-items: center;
    padding: 15px 20px;
    border-bottom: 1px solid #f1f3f4;
    transition: background-color 0.3s;
}

a.chat-item {
    text-decoration: none;
    color: inherit;
}

a.chat-item:hover {
    background-color: #f8f9fa;
}

.chat-item-avatar {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    overflow: hidden;
    margin-left: 15px;
    background-color: #e9ecef;
    display: flex;
    align-items: center;
    justify-content: center;
}

.chat-item-avatar img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.avatar-placeholder {
    font-size: 24px;
    font-weight: bold;
    color: #6c757d;
}

.chat-item-content {
    flex-grow: 1;
    min-width: 0;
}

.chat-item-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 5px;
}

.chat-item-header h3 {
    margin: 0;
    font-size: 16px;
    font-weight: 600;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.chat-item-time {
    font-size: 12px;
    color: #6c757d;
    white-space: nowrap;
}

.chat-item-message {
    font-size: 14px;
    color: #6c757d;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.system-message-preview {
    font-style: italic;
    color: #6c757d;
}

.no-message {
    color: #6c757d;
    font-style: italic;
}

.chat-item-badge {
    margin-right: 10px;
}

.chat-item-badge .badge {
    font-size: 12px;
    padding: 5px 8px;
}

.chat-item-actions {
    display: flex;
    margin-right: 10px;
}

.chat-item-actions .btn {
    margin-right: 5px;
}

.empty-list {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 50px 20px;
    text-align: center;
}

.empty-list i {
    font-size: 48px;
    color: #e0e0e0;
    margin-bottom: 15px;
}

.empty-list p {
    font-size: 16px;
    color: #6c757d;
    margin-bottom: 20px;
}

/* تنظیمات واکنش‌گرایی */
@media (max-width: 992px) {
    .stat-card {
        width: calc(50% - 10px);
    }
}

@media (max-width: 768px) {
    .admin-dashboard-container {
        margin: 10px;
        border-radius: 5px;
    }

    .admin-dashboard-header h1 {
        font-size: 20px;
    }

    .stat-card {
        width: 100%;
        margin-right: 0;
    }

    .chat-item-avatar {
        width: 40px;
        height: 40px;
    }

    .chat-item-header h3 {
        font-size: 14px;
    }
}

/* استایل‌های جستجو */
.search-highlight {
    background-color: #f8f9fa;
    border-right: 3px solid #007bff;
    font-size: 13px;
    color: #333;
}

.search-result-message {
    max-width: 90%;
}

#closed-search-form {
    width: 200px;
}

#closed-search-form .input-group {
    border-radius: 20px;
    overflow: hidden;
}

#closed-search-input {
    border-left: none;
    background-color: rgba(255, 255, 255, 0.2);
    color: #fff;
}

#closed-search-input::placeholder {
    color: rgba(255, 255, 255, 0.7);
}

.card-header .input-group-sm .form-control-sm {
    height: calc(1.5em + 0.5rem + 2px);
    padding: 0.25rem 0.5rem;
    font-size: 0.875rem;
    line-height: 1.5;
    border-radius: 0.2rem;
}

.card-header .input-group-sm .btn-sm {
    padding: 0.25rem 0.5rem;
    font-size: 0.875rem;
    line-height: 1.5;
    border-radius: 0.2rem;
}

====== FILE: static/chat/css/start-chat.css ======

/* start-chat.css - استایل‌های صفحه شروع گفتگو */

.start-chat-container {
    max-width: 800px;
    margin: 40px auto;
    background-color: #ffffff;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    overflow: hidden;
}

.start-chat-header {
    padding: 20px;
    background-color: #f8f9fa;
    border-bottom: 1px solid #e0e0e0;
    text-align: center;
}

.start-chat-header h1 {
    margin: 0;
    font-size: 24px;
    font-weight: 600;
}

.start-chat-content {
    padding: 30px;
}

.start-chat-info {
    display: flex;
    align-items: flex-start;
    margin-bottom: 30px;
    padding: 20px;
    background-color: #f8f9fa;
    border-radius: 8px;
}

.info-icon {
    margin-left: 20px;
    font-size: 24px;
    color: #007bff;
}

.info-text p {
    margin: 0 0 10px;
    font-size: 16px;
    color: #495057;
}

.info-text p:last-child {
    margin-bottom: 0;
}

.start-chat-form {
    text-align: center;
    padding: 20px 0;
}

/* تنظیمات واکنش‌گرایی */
@media (max-width: 768px) {
    .start-chat-container {
        margin: 20px;
        border-radius: 5px;
    }

    .start-chat-header h1 {
        font-size: 20px;
    }

    .start-chat-content {
        padding: 20px;
    }

    .start-chat-info {
        flex-direction: column;
        align-items: center;
        text-align: center;
    }

    .info-icon {
        margin: 0 0 15px;
    }
}

====== FILE: chat/consumers.py ======

import json
from channels.generic.websocket import AsyncWebsocketConsumer
from channels.db import database_sync_to_async
from django.utils import timezone
from .models import ChatRoom, ChatMessage, UserStatus, Notification
from django.contrib.auth import get_user_model
import logging

from .services import UserStatusService

User = get_user_model()
logger = logging.getLogger(__name__)


class ChatConsumer(AsyncWebsocketConsumer):
    async def connect(self):
        self.room_id = self.scope['url_route']['kwargs']['room_id']
        self.room_group_name = f'chat_{self.room_id}'
        self.user = self.scope['user']

        # بررسی اینکه آیا کاربر مجاز به دسترسی به این اتاق است
        if not self.user.is_authenticated or not await self.can_access_room():
            await self.close()
            return

        # پیوستن به گروه اتاق
        await self.channel_layer.group_add(
            self.room_group_name,
            self.channel_name
        )

        await self.accept()

        # اعلام آنلاین شدن کاربر به سایر کاربران اتاق
        await self.channel_layer.group_send(
            self.room_group_name,
            {
                'type': 'user_status',
                'user_id': str(self.user.id),
                'status': 'online',
                'username': self.user.username
            }
        )

    async def disconnect(self, close_code):
        # خروج از گروه اتاق
        await self.channel_layer.group_discard(
            self.room_group_name,
            self.channel_name
        )

    async def receive(self, text_data):
        try:
            data = json.loads(text_data)
            message_type = data.get('type', '')

            if message_type == 'chat_message':
                # دریافت پیام چت
                content = data['message']
                file_id = data.get('file_id')

                # ذخیره پیام در دیتابیس
                try:
                    message = await self.save_message(content, file_id)

                    # ارسال پیام به گروه اتاق
                    await self.channel_layer.group_send(
                        self.room_group_name,
                        {
                            'type': 'chat_message',
                            'message': {
                                'id': str(message.id),
                                'content': message.content,
                                'sender_id': str(message.sender.id),
                                'sender_name': message.sender.username,
                                'message_type': message.message_type,
                                'file': message.file.url if message.file else None,
                                'is_read': message.is_read,
                                'created_at': message.created_at.isoformat()
                            }
                        }
                    )
                except Exception as e:
                    # ارسال خطا به کلاینت
                    await self.send(text_data=json.dumps({
                        'type': 'error',
                        'message': str(e)
                    }))

            elif message_type == 'mark_read':
                # علامت‌گذاری پیام به عنوان خوانده شده
                message_id = data['message_id']
                success, read_at = await self.mark_message_read(message_id)

                if success and read_at:
                    # اعلام به گروه اتاق که پیام خوانده شده است
                    await self.channel_layer.group_send(
                        self.room_group_name,
                        {
                            'type': 'message_read',
                            'message_id': message_id,
                            'user_id': str(self.user.id),
                            'read_at': read_at.isoformat()
                        }
                    )

            elif message_type == 'typing':
                # اعلام تایپ کردن کاربر
                is_typing = data['is_typing']

                await self.channel_layer.group_send(
                    self.room_group_name,
                    {
                        'type': 'user_typing',
                        'user_id': str(self.user.id),
                        'username': self.user.username,
                        'is_typing': is_typing
                    }
                )

            elif message_type == 'close_room':
                # بستن اتاق گفتگو
                success = await self.close_room()

                if success:
                    # اعلام به گروه اتاق که گفتگو بسته شده است
                    await self.channel_layer.group_send(
                        self.room_group_name,
                        {
                            'type': 'room_closed',
                            'user_id': str(self.user.id),
                            'is_admin': self.user.is_staff,
                            'closed_at': timezone.now().isoformat()
                        }
                    )

            elif message_type == 'reopen_room':
                # بازگشایی اتاق گفتگو
                success = await self.reopen_room()

                if success:
                    # اعلام به گروه اتاق که گفتگو بازگشایی شده است
                    await self.channel_layer.group_send(
                        self.room_group_name,
                        {
                            'type': 'room_reopened',
                            'user_id': str(self.user.id),
                            'is_admin': self.user.is_staff,
                            'reopened_at': timezone.now().isoformat()
                        }
                    )
        except json.JSONDecodeError:
            await self.send(text_data=json.dumps({
                'type': 'error',
                'message': 'Invalid JSON format'
            }))
        except Exception as e:
            await self.send(text_data=json.dumps({
                'type': 'error',
                'message': str(e)
            }))

    async def get_room(self):
        """
        دریافت اتاق گفتگو از پایگاه داده
        """
        room_id = self.room_id
        try:
            return await database_sync_to_async(ChatRoom.objects.get)(id=room_id)
        except ChatRoom.DoesNotExist:
            raise ValueError(f"اتاق گفتگو با شناسه {room_id} یافت نشد.")

    async def create_system_message(self, content):
        room = await self.get_room()
        message = await database_sync_to_async(ChatMessage.objects.create)(
            room=room,
            content=content,
            message_type='system',
            is_read=True
        )
        return message

    async def chat_deleted_by_user(self, event):
        """اطلاع‌رسانی به کاربر در مورد حذف گفتگو توسط کاربر دیگر"""
        # استفاده از نام کاربر به جای deleted_by
        username = event.get('username', 'کاربر')

        await self.send(text_data=json.dumps({
            'type': 'chat_deleted',
            'room_id': event['room_id'],
            'deleted_by_username': username  # استفاده از نام کاربر
        }))

    async def chat_message(self, event):
        """ارسال پیام چت به کلاینت"""
        await self.send(text_data=json.dumps({
            'type': 'chat_message',
            'message': event['message']
        }))

    async def message_read(self, event):
        """ارسال وضعیت خوانده شدن پیام به کلاینت"""
        await self.send(text_data=json.dumps({
            'type': 'message_read',
            'message_id': event['message_id'],
            'user_id': event['user_id'],
            'read_at': event['read_at']
        }))

    async def user_typing(self, event):
        """ارسال وضعیت تایپ کردن کاربر به کلاینت"""
        await self.send(text_data=json.dumps({
            'type': 'user_typing',
            'user_id': event['user_id'],
            'username': event['username'],
            'is_typing': event['is_typing']
        }))

    async def user_status(self, event):
        """ارسال وضعیت آنلاین/آفلاین کاربر به کلاینت"""
        await self.send(text_data=json.dumps({
            'type': 'user_status',
            'user_id': event['user_id'],
            'status': event['status'],
            'username': event['username']
        }))

    async def room_closed(self, event):
        """ارسال وضعیت بسته شدن اتاق به کلاینت"""
        await self.send(text_data=json.dumps({
            'type': 'room_closed',
            'user_id': event['user_id'],
            'is_admin': event['is_admin'],
            'closed_at': event['closed_at']
        }))

    async def room_reopened(self, event):
        """ارسال وضعیت بازگشایی اتاق به کلاینت"""
        await self.send(text_data=json.dumps({
            'type': 'room_reopened',
            'user_id': event['user_id'],
            'is_admin': event['is_admin'],
            'reopened_at': event['reopened_at']
        }))

    @database_sync_to_async
    def can_access_room(self):
        """بررسی دسترسی کاربر به اتاق گفتگو"""
        try:
            room = ChatRoom.objects.get(id=self.room_id)

            # اگر کاربر پشتیبان است
            if self.user.is_staff:
                return not room.is_deleted_by_agent

            # اگر کاربر عادی است
            return room.user == self.user and not room.is_deleted_by_user
        except ChatRoom.DoesNotExist:
            return False

    @database_sync_to_async
    def save_message(self, content, file_id=None):
        """ذخیره پیام در دیتابیس"""
        room = ChatRoom.objects.get(id=self.room_id)

        # بررسی وضعیت اتاق
        if room.status != 'open':
            raise ValueError("اتاق گفتگو بسته شده است و امکان ارسال پیام وجود ندارد.")

        # ایجاد پیام جدید
        message = ChatMessage.objects.create(
            room=room,
            sender=self.user,
            content=content,
            message_type='text'
        )

        # اگر فایل وجود دارد، آن را به پیام اضافه می‌کنیم
        if file_id:
            from .models import TemporaryFile
            try:
                temp_file = TemporaryFile.objects.get(id=file_id, user=self.user)
                message.file = temp_file.file
                message.save(update_fields=['file'])
                temp_file.delete()  # حذف فایل موقت
            except TemporaryFile.DoesNotExist:
                pass

        return message

    @database_sync_to_async
    def mark_message_read(self, message_id):
        """علامت‌گذاری پیام به عنوان خوانده شده"""
        try:
            message = ChatMessage.objects.get(id=message_id)

            # فقط پیام‌های دریافتی را می‌توان به عنوان خوانده شده علامت‌گذاری کرد
            if message.sender != self.user and not message.is_read:
                message.is_read = True
                message.read_at = timezone.now()
                message.save(update_fields=['is_read', 'read_at'])
                return True, message.read_at

            return False, None
        except ChatMessage.DoesNotExist:
            return False, None

    async def close_room(self):
        """بستن اتاق گفتگو"""
        try:
            room = await self.get_room()

            # تنظیم وضعیت اتاق به بسته شده
            room.status = 'closed'
            room.closed_at = timezone.now()
            room.closed_by = self.user
            await database_sync_to_async(room.save)()

            # ایجاد پیام سیستمی
            message_text = 'این گفتگو توسط پشتیبانی بسته شده است.' if self.user.is_staff else 'این گفتگو توسط کاربر بسته شده است.'
            await self.create_system_message(message_text)

            # ارسال وضعیت جدید به همه کاربران
            await self.channel_layer.group_send(
                self.room_group_name,
                {
                    'type': 'room_status',
                    'status': 'closed',
                    'closed_by_staff': self.user.is_staff,
                    'closed_by_id': str(self.user.id),
                    'message': message_text
                }
            )

        except Exception as e:
            await self.send(text_data=json.dumps({
                'type': 'error',
                'message': f'خطا در بستن اتاق گفتگو: {str(e)}'
            }))
            import traceback
            traceback.print_exc()

    async def reopen_room(self):
        """بازگشایی اتاق گفتگو"""
        try:
            room = await self.get_room()

            # تنظیم وضعیت اتاق به باز
            room.status = 'open'
            room.closed_at = None
            room.closed_by = None
            await database_sync_to_async(room.save)()

            # ایجاد پیام سیستمی
            message_text = 'این گفتگو بازگشایی شده است.'
            await self.create_system_message(message_text)

            # ارسال وضعیت جدید به همه کاربران
            await self.channel_layer.group_send(
                self.room_group_name,
                {
                    'type': 'room_status',
                    'status': 'open',
                    'message': message_text
                }
            )

        except Exception as e:
            await self.send(text_data=json.dumps({
                'type': 'error',
                'message': f'خطا در بازگشایی اتاق گفتگو: {str(e)}'
            }))
            import traceback
            traceback.print_exc()

    async def room_status(self, event):
        """ارسال وضعیت اتاق به کلاینت"""
        try:
            # ایجاد پیام با تمام فیلدهای لازم
            message = {
                'type': 'room_status',
                'status': event['status'],
            }

            # اضافه کردن فیلدهای اختیاری
            for field in ['closed_by_staff', 'closed_by_id', 'message']:
                if field in event:
                    message[field] = event[field]

            # ارسال پیام به کلاینت
            await self.send(text_data=json.dumps(message))

        except Exception as e:
            import traceback
            traceback.print_exc()


# consumers.py
import json
from channels.generic.websocket import AsyncWebsocketConsumer
from channels.db import database_sync_to_async
from django.utils import timezone
from django.contrib.auth import get_user_model
from .models import UserStatus


class OnlineStatusConsumer(AsyncWebsocketConsumer):
    # نگهداری اتصال‌های کاربران (فقط یک اتصال برای هر کاربر)
    user_connections = {}

    async def connect(self):
        """اتصال به وب‌سوکت"""
        self.user = self.scope['user']

        if not self.user.is_authenticated:
            await self.close()
            return

        self.user_id = str(self.user.id)
        self.group_name = "online_status"

        # بررسی و بستن اتصال قبلی
        if self.user_id in self.user_connections:
            old_consumer = self.user_connections[self.user_id]
            try:
                # بستن اتصال قبلی با کد خاص
                await old_consumer.close(code=4000)
                logger.info(f"Closed old connection for user {self.user.username}")
            except Exception as e:
                logger.warning(f"Error closing old connection: {e}")

        # ثبت این اتصال
        self.user_connections[self.user_id] = self

        # پیوستن به گروه
        await self.channel_layer.group_add(
            self.group_name,
            self.channel_name
        )

        # پذیرش اتصال
        await self.accept()

        # تنظیم وضعیت به آنلاین
        await self.update_user_status('online')

        # ارسال وضعیت همه کاربران
        await self.send_all_statuses()

        logger.info(f"User {self.user.username} connected to online status websocket")

    async def disconnect(self, close_code):
        """قطع اتصال از وب‌سوکت"""
        if not hasattr(self, 'user') or not self.user.is_authenticated:
            return

        # حذف این اتصال فقط اگر همان اتصال فعلی باشد
        if (hasattr(self, 'user_id') and
                self.user_id in self.user_connections and
                self.user_connections[self.user_id] == self):

            del self.user_connections[self.user_id]

            # تنظیم وضعیت به آفلاین فقط اگر اتصال جدیدی وجود نداشته باشد
            if close_code != 4000:  # 4000 = بسته شده توسط اتصال جدید
                await self.update_user_status('offline')

        # خروج از گروه
        try:
            await self.channel_layer.group_discard(
                self.group_name,
                self.channel_name
            )
        except Exception as e:
            logger.warning(f"Error leaving group: {e}")

        logger.info(f"User {self.user.username} disconnected from online status websocket")

    async def receive(self, text_data):
        """دریافت پیام از کلاینت"""
        try:
            data = json.loads(text_data)

            if data.get('type') == 'heartbeat':
                await self.update_last_seen()

            elif data.get('type') == 'set_status':
                status = data.get('status', 'online')
                await self.update_user_status(status)

            elif data.get('type') == 'offline':
                await self.update_user_status('offline')
                logger.info(f"User {self.user.username} set to offline")

        except Exception as e:
            logger.error(f"Error in OnlineStatusConsumer.receive: {e}")

    async def online_status_update(self, event):
        """ارسال به‌روزرسانی وضعیت کاربر به کلاینت"""
        try:
            # بررسی وضعیت اتصال قبل از ارسال
            if (hasattr(self, 'channel_name') and
                    hasattr(self, 'user_id') and
                    self.user_id in self.user_connections and
                    self.user_connections[self.user_id] == self):
                await self.send(text_data=json.dumps({
                    'type': 'status_update',
                    'user_id': event['user_id'],
                    'status': event['status']
                }))
        except Exception as e:
            logger.warning(f"Error sending status update: {e}")

    async def update_user_status(self, status):
        """به‌روزرسانی وضعیت کاربر در دیتابیس و ارسال به همه کاربران"""
        try:
            # به‌روزرسانی در دیتابیس
            await self.update_status_in_db(status)

            # ارسال به همه کاربران
            await self.channel_layer.group_send(
                self.group_name,
                {
                    'type': 'online_status_update',
                    'user_id': self.user_id,
                    'status': status
                }
            )

        except Exception as e:
            logger.error(f"Error updating user status: {e}")

    @database_sync_to_async
    def update_status_in_db(self, status):
        """به‌روزرسانی وضعیت کاربر در دیتابیس"""
        try:
            user_status, created = UserStatus.objects.update_or_create(
                user=self.user,
                defaults={
                    'status': status,
                    'last_seen': timezone.now()
                }
            )
            return user_status
        except Exception as e:
            logger.error(f"Error updating status in DB: {e}")
            return None

    @database_sync_to_async
    def update_last_seen(self):
        """به‌روزرسانی زمان آخرین فعالیت کاربر"""
        try:
            user_status, created = UserStatus.objects.update_or_create(
                user=self.user,
                defaults={
                    'last_seen': timezone.now()
                }
            )
            return user_status
        except Exception as e:
            logger.error(f"Error updating last seen: {e}")
            return None

    async def send_all_statuses(self):
        """ارسال وضعیت همه کاربران به کلاینت"""
        try:
            statuses = await self.get_all_statuses()
            await self.send(text_data=json.dumps({
                'type': 'all_statuses',
                'statuses': statuses
            }))
        except Exception as e:
            logger.error(f"Error sending all statuses: {e}")

    @database_sync_to_async
    def get_all_statuses(self):
        """دریافت وضعیت همه کاربران"""
        User = get_user_model()
        statuses = {}

        # دریافت وضعیت کاربران آنلاین از اتصال‌های فعال
        for user_id in self.user_connections.keys():
            statuses[user_id] = 'online'

        # دریافت وضعیت سایر کاربران از دیتابیس
        for user in User.objects.all():
            user_id = str(user.id)
            if user_id not in statuses:
                try:
                    user_status = UserStatus.objects.get(user=user)
                    # اگر کاربر در اتصال‌های فعال نیست، آفلاین است
                    statuses[user_id] = 'offline'
                except UserStatus.DoesNotExist:
                    statuses[user_id] = 'offline'

        return statuses

class NotificationConsumer(AsyncWebsocketConsumer):
    async def connect(self):
        self.user = self.scope['user']

        if not self.user.is_authenticated:
            await self.close()
            return

        self.notification_group_name = f'notifications_{self.user.id}'

        # پیوستن به گروه اعلان‌ها
        await self.channel_layer.group_add(
            self.notification_group_name,
            self.channel_name
        )

        await self.accept()

        # ارسال تعداد اعلان‌های خوانده نشده به کاربر
        unread_count = await self.get_unread_count()
        await self.send(text_data=json.dumps({
            'type': 'unread_count',
            'count': unread_count
        }))

    async def disconnect(self, close_code):
        if not self.user.is_authenticated:
            return

        # خروج از گروه اعلان‌ها
        await self.channel_layer.group_discard(
            self.notification_group_name,
            self.channel_name
        )

    async def receive(self, text_data):
        try:
            data = json.loads(text_data)
            action = data.get('action', '')

            if action == 'mark_read':
                # علامت‌گذاری اعلان به عنوان خوانده شده
                notification_id = data.get('notification_id')
                success = await self.mark_notification_read(notification_id)

                if success:
                    # ارسال تعداد اعلان‌های خوانده نشده به کاربر
                    unread_count = await self.get_unread_count()
                    await self.send(text_data=json.dumps({
                        'type': 'unread_count',
                        'count': unread_count
                    }))

            elif action == 'mark_all_read':
                # علامت‌گذاری تمام اعلان‌ها به عنوان خوانده شده
                success = await self.mark_all_notifications_read()

                if success:
                    # ارسال تعداد اعلان‌های خوانده نشده به کاربر
                    await self.send(text_data=json.dumps({
                        'type': 'unread_count',
                        'count': 0
                    }))

            elif action == 'heartbeat':
                # پاسخ به heartbeat
                await self.send(text_data=json.dumps({
                    'type': 'heartbeat_response',
                    'timestamp': timezone.now().isoformat()
                }))
        except json.JSONDecodeError:
            await self.send(text_data=json.dumps({
                'type': 'error',
                'message': 'Invalid JSON format'
            }))
        except Exception as e:
            await self.send(text_data=json.dumps({
                'type': 'error',
                'message': str(e)
            }))

    async def notification_message(self, event):
        """ارسال اعلان جدید به کلاینت"""
        await self.send(text_data=json.dumps({
            'type': 'notification',
            'notification': event['notification']
        }))

        # به‌روزرسانی تعداد اعلان‌های خوانده نشده
        unread_count = await self.get_unread_count()
        await self.send(text_data=json.dumps({
            'type': 'unread_count',
            'count': unread_count
        }))

    @database_sync_to_async
    def get_unread_count(self):
        """دریافت تعداد اعلان‌های خوانده نشده"""
        if not self.user.is_authenticated:
            return 0

        return Notification.objects.filter(user=self.user, is_read=False).count()

    @database_sync_to_async
    def mark_notification_read(self, notification_id):
        """علامت‌گذاری اعلان به عنوان خوانده شده"""
        try:
            notification = Notification.objects.get(id=notification_id, user=self.user)
            notification.is_read = True
            notification.save(update_fields=['is_read'])
            return True
        except Notification.DoesNotExist:
            return False

    @database_sync_to_async
    def mark_all_notifications_read(self):
        """علامت‌گذاری تمام اعلان‌ها به عنوان خوانده شده"""
        Notification.objects.filter(user=self.user, is_read=False).update(is_read=True)
        return True


====== FILE: chat/middleware.py ======

# chat/middleware.py
import json

from django.contrib.auth.models import AnonymousUser
from django.utils import timezone
from .models import UserStatus
from channels.middleware import BaseMiddleware
from channels.db import database_sync_to_async


class OnlineStatusMiddleware(BaseMiddleware):
    """
    میدلور برای مدیریت وضعیت آنلاین/آفلاین کاربران
    """

    def __init__(self, inner):
        super().__init__(inner)
        self.active_connections = {}  # نگهداری اتصال‌های فعال

    async def __call__(self, scope, receive, send):
        # فقط برای اتصال‌های وب‌سوکت
        if scope['type'] != 'websocket':
            return await self.inner(scope, receive, send)

        # دریافت کاربر
        user = scope.get('user', AnonymousUser())
        if not user.is_authenticated:
            return await self.inner(scope, receive, send)

        connection_id = id(scope)
        user_id = str(user.id)

        # ثبت این اتصال
        if user_id not in self.active_connections:
            self.active_connections[user_id] = set()
        self.active_connections[user_id].add(connection_id)

        # تعریف یک تابع جدید برای دریافت پیام‌ها
        original_receive = receive

        async def wrapped_receive():
            message = await original_receive()

            # پردازش پیام‌های وب‌سوکت
            if message['type'] == 'websocket.receive' and 'text' in message:
                try:
                    data = json.loads(message['text'])

                    # ذخیره شناسه اتصال در scope
                    if 'connection_id' in data:
                        scope['connection_id'] = data['connection_id']
                except:
                    pass

            return message

        # تعریف یک تابع جدید برای ارسال پیام‌ها
        original_send = send

        async def wrapped_send(message):
            # ارسال پیام
            await original_send(message)

            # اگر اتصال بسته شد، این اتصال را از لیست حذف کنید
            if message['type'] == 'websocket.close':
                if user_id in self.active_connections and connection_id in self.active_connections[user_id]:
                    self.active_connections[user_id].remove(connection_id)
                    if not self.active_connections[user_id]:
                        del self.active_connections[user_id]

        # اجرای میدلور داخلی با توابع جدید
        return await self.inner(scope, wrapped_receive, wrapped_send)

class ConnectionLimitMiddleware(BaseMiddleware):
    """
    میدلور برای محدود کردن تعداد اتصال‌های همزمان برای هر کاربر
    """

    def __init__(self, inner):
        super().__init__(inner)
        self.connections = {}  # نگهداری تعداد اتصال‌های هر کاربر

    async def __call__(self, scope, receive, send):
        # فقط برای اتصال‌های وب‌سوکت
        if scope['type'] != 'websocket':
            return await self.inner(scope, receive, send)

        # دریافت کاربر
        user = scope.get('user', None)
        if not user or not user.is_authenticated:
            return await self.inner(scope, receive, send)

        user_id = str(user.id)

        # افزایش تعداد اتصال‌ها
        if user_id not in self.connections:
            self.connections[user_id] = 0
        self.connections[user_id] += 1

        # اجرای میدلور داخلی
        try:
            return await self.inner(scope, receive, send)
        finally:
            # کاهش تعداد اتصال‌ها هنگام قطع اتصال
            if user_id in self.connections:
                self.connections[user_id] -= 1
                if self.connections[user_id] <= 0:
                    del self.connections[user_id]

class UserStatusMiddleware:
    def __init__(self, get_response):
        self.get_response = get_response




    def __call__(self, request):
        response = self.get_response(request)

        # بروزرسانی وضعیت کاربر فقط برای کاربران احراز هویت شده
        if request.user.is_authenticated:
            user_status, created = UserStatus.objects.get_or_create(user=request.user)

            # بروزرسانی زمان آخرین بازدید و تنظیم وضعیت به آنلاین
            user_status.status = 'online'
            user_status.save(update_fields=['status', 'last_seen'])  # last_seen با auto_now=True خودکار بروز می‌شود

        return response

====== FILE: chat/__init__.py ======



====== FILE: chat/admin.py ======

from django.contrib import admin
from .models import ChatRoom, ChatMessage, Notification, UserStatus, TemporaryFile


@admin.register(ChatRoom)
class ChatRoomAdmin(admin.ModelAdmin):
    list_display = ('name', 'user', 'agent', 'status', 'created_at', 'updated_at')
    list_filter = ('status', 'room_type', 'is_deleted_by_user', 'is_deleted_by_agent')
    search_fields = ('name', 'user__username', 'agent__username')
    date_hierarchy = 'created_at'
    readonly_fields = ('id', 'created_at', 'updated_at')


@admin.register(ChatMessage)
class ChatMessageAdmin(admin.ModelAdmin):
    list_display = ('get_short_content', 'room', 'sender', 'message_type', 'is_read', 'created_at')
    list_filter = ('message_type', 'is_read')
    search_fields = ('content', 'room__name', 'sender__username')
    date_hierarchy = 'created_at'
    readonly_fields = ('id', 'created_at')

    def get_short_content(self, obj):
        return obj.content[:50] + '...' if len(obj.content) > 50 else obj.content

    get_short_content.short_description = 'محتوا'


@admin.register(Notification)
class NotificationAdmin(admin.ModelAdmin):
    list_display = ('title', 'user', 'notification_type', 'is_read', 'created_at')
    list_filter = ('notification_type', 'is_read')
    search_fields = ('title', 'message', 'user__username')
    date_hierarchy = 'created_at'
    readonly_fields = ('id', 'created_at')


@admin.register(UserStatus)
class UserStatusAdmin(admin.ModelAdmin):
    list_display = ('user', 'status', 'last_seen')
    list_filter = ('status',)
    search_fields = ('user__username',)
    date_hierarchy = 'last_seen'



@admin.register(TemporaryFile)
class TemporaryFileAdmin(admin.ModelAdmin):
    list_display = ('user', 'file', 'created_at')
    list_filter = ('created_at',)
    search_fields = ('user__username', 'file')
    date_hierarchy = 'created_at'
    readonly_fields = ('id', 'created_at')

====== FILE: chat/signals.py ======

from django.contrib.auth import get_user_model
from django.db.models.signals import post_save, pre_save
from django.dispatch import receiver
from django.utils import timezone
from .models import ChatMessage, ChatRoom, Notification, UserStatus
from channels.layers import get_channel_layer
from asgiref.sync import async_to_sync
import json

# متغیرهای کنترل برای جلوگیری از حلقه بی‌نهایت
updating_room = False
creating_system_message = False
User = get_user_model()



@receiver(post_save, sender=User)
def create_user_status(sender, instance, created, **kwargs):
    """ایجاد وضعیت آنلاین برای کاربران جدید"""
    if created:
        UserStatus.objects.create(user=instance, status='offline')


@receiver(post_save, sender=ChatMessage)
def message_post_save(sender, instance, created, **kwargs):
    """
    به‌روزرسانی زمان آخرین فعالیت اتاق گفتگو پس از ذخیره پیام جدید
    """
    global updating_room

    # اگر در حال به‌روزرسانی اتاق هستیم، از ادامه جلوگیری می‌کنیم
    if updating_room:
        return

    try:
        room = instance.room

        # علامت‌گذاری به‌روزرسانی اتاق
        updating_room = True

        # به‌روزرسانی زمان آخرین فعالیت اتاق
        room.updated_at = timezone.now()
        room.save(update_fields=['updated_at'])
    finally:
        # بازنشانی متغیر
        updating_room = False

    # ارسال اعلان به کاربر مقابل
    if created and instance.sender and instance.message_type != 'system':
        room = instance.room

        # تعیین گیرنده اعلان (کاربر مقابل فرستنده)
        recipient = None
        if instance.sender == room.user and room.agent:
            recipient = room.agent
        elif instance.sender == room.agent and room.user:
            recipient = room.user

        if recipient:
            # ایجاد اعلان
            Notification.objects.create(
                user=recipient,
                title="پیام جدید",
                message=f"پیام جدید از {instance.sender.username}: {instance.content[:50]}{'...' if len(instance.content) > 50 else ''}",
                notification_type="chat",
                data={
                    "room_id": str(room.id),
                    "message_id": str(instance.id)
                }
            )


@receiver(pre_save, sender=ChatRoom)
def room_pre_save(sender, instance, **kwargs):
    """
    ایجاد پیام سیستمی در صورت تغییر وضعیت اتاق گفتگو
    """
    global creating_system_message

    if creating_system_message:
        return

    # بررسی تغییر وضعیت اتاق
    if not instance._state.adding:  # اگر در حال ویرایش است (نه ایجاد جدید)
        try:
            old_instance = ChatRoom.objects.get(pk=instance.pk)

            # تغییر وضعیت از باز به بسته
            if old_instance.status == 'open' and instance.status == 'closed':
                creating_system_message = True

                try:
                    # ایجاد پیام سیستمی با بررسی closed_by
                    message = "این گفتگو توسط پشتیبانی بسته شده است." if instance.closed_by and instance.closed_by.is_staff else "این گفتگو توسط کاربر بسته شده است."
                    ChatMessage.objects.create(
                        room=instance,
                        content=message,
                        message_type="system"
                    )
                finally:
                    creating_system_message = False

            # تغییر وضعیت از بسته به باز
            elif old_instance.status == 'closed' and instance.status == 'open':
                creating_system_message = True

                try:
                    # ایجاد پیام سیستمی
                    message = "این گفتگو توسط پشتیبانی بازگشایی شده است." if instance.closed_by and instance.closed_by.is_staff else "این گفتگو توسط کاربر بازگشایی شده است."
                    ChatMessage.objects.create(
                        room=instance,
                        content=message,
                        message_type="system"
                    )
                finally:
                    creating_system_message = False
        except ChatRoom.DoesNotExist:
            pass  # اتاق جدید است


@receiver(post_save, sender=Notification)
def notification_post_save(sender, instance, created, **kwargs):
    """
    ارسال اعلان جدید به کاربر از طریق WebSocket
    """
    if created:
        # ارسال اعلان به کانال کاربر
        channel_layer = get_channel_layer()

        # تهیه داده‌های اعلان برای ارسال
        notification_data = {
            'type': 'notification_message',
            'notification': {
                'id': str(instance.id),
                'title': instance.title,
                'message': instance.message,
                'notification_type': instance.notification_type,
                'is_read': instance.is_read,
                'created_at': instance.created_at.isoformat(),
                'data': instance.data
            }
        }

        # ارسال به گروه کاربر
        try:
            async_to_sync(channel_layer.group_send)(
                f'notifications_{instance.user.id}',
                notification_data
            )
        except:
            pass  # اگر کاربر آنلاین نباشد، خطا نادیده گرفته می‌شود

====== FILE: chat/utils.py ======

from django.utils import timezone
from channels.layers import get_channel_layer
from asgiref.sync import async_to_sync


def create_system_message(room, content):
    """
    ایجاد یک پیام سیستمی در دیتابیس
    """
    from .models import ChatMessage

    # ایجاد پیام سیستمی بدون فرستنده
    message = ChatMessage.objects.create(
        room=room,
        content=content,
        message_type='system',
        sender=None,  # پیام سیستمی بدون فرستنده
        is_read=True  # پیام‌های سیستمی همیشه خوانده شده محسوب می‌شوند
    )

    # ارسال رویداد به کانال
    try:
        channel_layer = get_channel_layer()
        async_to_sync(channel_layer.group_send)(
            f'chat_{room.id}',
            {
                'type': 'chat_message',
                'message': {
                    'id': str(message.id),
                    'content': message.content,
                    'message_type': message.message_type,
                    'created_at': message.created_at.isoformat(),
                    'is_system': True
                }
            }
        )
    except Exception as e:
        print(f"Error sending system message to channel: {e}")

    return message


def notify_chat_closed_by_user(room):
    """
    اطلاع‌رسانی به ادمین درباره بسته شدن چت توسط کاربر
    """
    if room.admin:
        from .models import Notification

        # ایجاد نوتیفیکیشن برای ادمین
        Notification.objects.create(
            user=room.admin,
            title="بستن چت",
            message=f"کاربر {room.user.username} چت را بسته است.",
            notification_type="chat",
            data={
                'room_id': str(room.id),
                'action': 'closed_by_user'
            },
            is_read=False
        )

        # ارسال نوتیفیکیشن از طریق وب‌سوکت
        try:
            channel_layer = get_channel_layer()
            async_to_sync(channel_layer.group_send)(
                f'notifications_{room.admin.id}',
                {
                    'type': 'notification_message',
                    'title': "بستن چت",
                    'message': f"کاربر {room.user.username} چت را بسته است.",
                    'data': {
                        'room_id': str(room.id),
                        'action': 'closed_by_user'
                    }
                }
            )
        except Exception as e:
            print(f"Error sending notification to admin: {e}")


def notify_chat_closed_by_admin(room):
    """
    اطلاع‌رسانی به کاربر درباره بسته شدن چت توسط ادمین
    """
    if room.user:
        from .models import Notification

        admin_name = room.admin.get_full_name() if room.admin and room.admin.get_full_name() else "پشتیبانی"

        # ایجاد نوتیفیکیشن برای کاربر
        Notification.objects.create(
            user=room.user,
            title="بستن چت",
            message=f"{admin_name} چت را بسته است.",
            notification_type="chat",
            data={
                'room_id': str(room.id),
                'action': 'closed_by_admin'
            },
            is_read=False
        )

        # ارسال نوتیفیکیشن از طریق وب‌سوکت
        try:
            channel_layer = get_channel_layer()
            async_to_sync(channel_layer.group_send)(
                f'notifications_{room.user.id}',
                {
                    'type': 'notification_message',
                    'title': "بستن چت",
                    'message': f"{admin_name} چت را بسته است.",
                    'data': {
                        'room_id': str(room.id),
                        'action': 'closed_by_admin'
                    }
                }
            )
        except Exception as e:
            print(f"Error sending notification to user: {e}")


def notify_chat_reopened(room):
    """
    اطلاع‌رسانی به کاربر درباره بازگشایی چت
    """
    if room.user:
        from .models import Notification

        admin_name = room.admin.get_full_name() if room.admin and room.admin.get_full_name() else "پشتیبانی"

        # ایجاد نوتیفیکیشن برای کاربر
        Notification.objects.create(
            user=room.user,
            title="بازگشایی چت",
            message=f"{admin_name} چت را بازگشایی کرده است.",
            notification_type="chat",
            data={
                'room_id': str(room.id),
                'action': 'reopened'
            },
            is_read=False
        )

        # ارسال نوتیفیکیشن از طریق وب‌سوکت
        try:
            channel_layer = get_channel_layer()
            async_to_sync(channel_layer.group_send)(
                f'notifications_{room.user.id}',
                {
                    'type': 'notification_message',
                    'title': "بازگشایی چت",
                    'message': f"{admin_name} چت را بازگشایی کرده است.",
                    'data': {
                        'room_id': str(room.id),
                        'action': 'reopened'
                    }
                }
            )
        except Exception as e:
            print(f"Error sending notification to user: {e}")

====== FILE: chat/models.py ======

import uuid
from django.db import models
from django.conf import settings
from django.utils import timezone
from django.contrib.postgres.fields import JSONField


class UserStatus(models.Model):
    user = models.OneToOneField(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        related_name='online_status'
    )
    is_online = models.BooleanField(default=False)
    last_activity = models.DateTimeField(null=True, blank=True)
    typing_in_room = models.CharField(max_length=255, null=True, blank=True)


    status = models.CharField(
        max_length=10,
        choices=[('online', 'Online'), ('offline', 'Offline')],
        default='offline'
    )

    last_seen = models.DateTimeField(default=timezone.now)

    class Meta:
        verbose_name = "وضعیت آنلاین کاربر"
        verbose_name_plural = "وضعیت آنلاین کاربران"

    def __str__(self):
        return f"{self.user.username}: {self.get_status_display()}"

    @property
    def is_user_online(self):
        # کاربر در 5 دقیقه گذشته فعالیت داشته باشد، آنلاین در نظر گرفته می‌شود
        if self.status == 'online':
            threshold = timezone.now() - timezone.timedelta(minutes=5)
            return self.last_seen >= threshold
        return False

    def update_status(self):
        """بروزرسانی وضعیت آنلاین بودن کاربر"""
        # بروزرسانی فیلدهای قدیمی برای سازگاری
        self.is_online = self.is_user_online
        self.last_activity = self.last_seen
        self.save(update_fields=['is_online', 'last_activity'])


class ChatRoom(models.Model):
    """
    مدل اتاق گفتگو بین کاربر و پشتیبان
    """
    ROOM_TYPES = [
        ('support', 'پشتیبانی'),
        ('general', 'عمومی'),
    ]

    STATUS_CHOICES = [
        ('open', 'باز'),
        ('closed', 'بسته شده'),
        ('archived', 'آرشیو شده'),
    ]

    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    name = models.CharField(max_length=255, verbose_name="نام گفتگو")
    user = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        related_name="user_chats",
        verbose_name="کاربر"
    )
    agent = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name="agent_chats",
        verbose_name="پشتیبان"
    )
    room_type = models.CharField(
        max_length=20,
        choices=ROOM_TYPES,
        default='support',
        verbose_name="نوع گفتگو"
    )
    status = models.CharField(
        max_length=20,
        choices=STATUS_CHOICES,
        default='open',
        verbose_name="وضعیت"
    )
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="زمان ایجاد")
    updated_at = models.DateTimeField(auto_now=True, verbose_name="آخرین بروزرسانی")
    closed_at = models.DateTimeField(null=True, blank=True, verbose_name="زمان بسته شدن")
    closed_by = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name="closed_chats",
        verbose_name="بسته شده توسط"
    )
    is_deleted_by_user = models.BooleanField(default=False, verbose_name="حذف شده توسط کاربر")
    is_deleted_by_agent = models.BooleanField(default=False, verbose_name="حذف شده توسط پشتیبان")
    hidden_for_users = models.ManyToManyField(
        settings.AUTH_USER_MODEL,
        related_name='hidden_chat_rooms',
        blank=True,
        help_text='کاربرانی که این گفتگو را حذف کرده‌اند و دیگر نمی‌بینند'
    )
    class Meta:
        verbose_name = "اتاق گفتگو"
        verbose_name_plural = "اتاق‌های گفتگو"
        ordering = ['-updated_at']

    def __str__(self):
        return f"{self.name} - {self.user.username}"

    def close(self, user):
        """بستن گفتگو"""
        self.status = 'closed'
        self.closed_at = timezone.now()
        self.closed_by = user
        self.save()

        return True

    def reopen(self, user):
        """بازگشایی گفتگو"""
        if self.status == 'closed':
            self.status = 'open'
            self.closed_at = None
            self.closed_by = None
            self.save()

            return True
        return False

    def archive(self):
        """آرشیو کردن گفتگو"""
        if self.status == 'closed':
            self.status = 'archived'
            self.save()
            return True
        return False

    def mark_deleted_by_user(self):
        """علامت‌گذاری به عنوان حذف شده توسط کاربر"""
        self.is_deleted_by_user = True
        self.save()
        return True

    def mark_deleted_by_agent(self):
        """علامت‌گذاری به عنوان حذف شده توسط پشتیبان"""
        self.is_deleted_by_agent = True
        self.save()
        return True

    @property
    def is_open(self):
        """آیا گفتگو باز است؟"""
        return self.status == 'open'

    @property
    def is_closed(self):
        """آیا گفتگو بسته شده است؟"""
        return self.status == 'closed'

    @property
    def is_archived(self):
        """آیا گفتگو آرشیو شده است؟"""
        return self.status == 'archived'

    @property
    def unread_count_for_user(self):
        """تعداد پیام‌های خوانده نشده برای کاربر"""
        return self.messages.filter(is_read=False, sender=self.agent).count()

    @property
    def unread_count_for_agent(self):
        """تعداد پیام‌های خوانده نشده برای پشتیبان"""
        return self.messages.filter(is_read=False, sender=self.user).count()


class ChatMessage(models.Model):
    """
    مدل پیام گفتگو
    """
    MESSAGE_TYPES = [
        ('text', 'متن'),
        ('image', 'تصویر'),
        ('file', 'فایل'),
        ('system', 'سیستمی'),
    ]

    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    room = models.ForeignKey(ChatRoom, on_delete=models.CASCADE, related_name="messages", verbose_name="اتاق گفتگو")
    sender = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name="sent_messages",
        verbose_name="فرستنده"
    )
    content = models.TextField(verbose_name="متن پیام")
    file = models.FileField(upload_to='chat_files/%Y/%m/%d/', null=True, blank=True, verbose_name="فایل پیوست")
    message_type = models.CharField(
        max_length=10,
        choices=MESSAGE_TYPES,
        default='text',
        verbose_name="نوع پیام"
    )
    is_read = models.BooleanField(default=False, verbose_name="خوانده شده")
    read_at = models.DateTimeField(null=True, blank=True, verbose_name="زمان خوانده شدن")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="زمان ارسال")

    class Meta:
        verbose_name = "پیام گفتگو"
        verbose_name_plural = "پیام‌های گفتگو"
        ordering = ['created_at']

    def __str__(self):
        sender_name = self.sender.username if self.sender else "سیستم"
        return f"{sender_name}: {self.content[:50]}"

    def mark_as_read(self):
        """علامت‌گذاری پیام به عنوان خوانده شده"""
        if not self.is_read:
            self.is_read = True
            self.read_at = timezone.now()
            self.save(update_fields=['is_read', 'read_at'])
            return True
        return False


class Notification(models.Model):
    """
    مدل اعلان‌های سیستم
    """
    NOTIFICATION_TYPES = [
        ('chat', 'گفتگو'),
        ('system', 'سیستمی'),
    ]

    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    user = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        related_name="notifications",
        verbose_name="کاربر"
    )
    title = models.CharField(max_length=255, verbose_name="عنوان")
    message = models.TextField(verbose_name="متن اعلان")
    notification_type = models.CharField(
        max_length=20,
        choices=NOTIFICATION_TYPES,
        default='system',
        verbose_name="نوع اعلان"
    )
    data = models.JSONField(default=dict, blank=True, null=True, verbose_name="داده‌های اضافی")
    is_read = models.BooleanField(default=False, verbose_name="خوانده شده")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="زمان ایجاد")

    class Meta:
        verbose_name = "اعلان"
        verbose_name_plural = "اعلان‌ها"
        ordering = ['-created_at']

    def __str__(self):
        return f"{self.title} - {self.user.username}"

    def mark_as_read(self):
        """علامت‌گذاری اعلان به عنوان خوانده شده"""
        if not self.is_read:
            self.is_read = True
            self.save(update_fields=['is_read'])
            return True
        return False


class TemporaryFile(models.Model):
    """
    مدل فایل موقت برای آپلود فایل‌ها قبل از ارسال پیام
    """
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    user = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        related_name="temp_files",
        verbose_name="کاربر"
    )
    file = models.FileField(upload_to='temp_files/%Y/%m/%d/', verbose_name="فایل")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="زمان آپلود")

    class Meta:
        verbose_name = "فایل موقت"
        verbose_name_plural = "فایل‌های موقت"
        ordering = ['-created_at']

    def __str__(self):
        return f"{self.user.username} - {self.file.name}"

====== FILE: chat/apps.py ======

from django.apps import AppConfig


class ChatConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'chat'

    def ready(self):
        import chat.signals

====== FILE: chat/views.py ======

from asgiref.sync import async_to_sync
from channels.layers import get_channel_layer
from django.shortcuts import render, redirect, get_object_or_404
from django.http import JsonResponse, HttpResponse
from django.contrib.auth.decorators import login_required
from django.views.decorators.http import require_POST, require_GET
from django.views.decorators.csrf import csrf_exempt
from django.utils import timezone
from django.db.models import Q, Count, Max, F
from django.contrib import messages
from django.urls import reverse

from .consumers import User
from .models import ChatRoom, ChatMessage, Notification, UserStatus, TemporaryFile


@login_required
def chat_list(request):
    """
    نمایش لیست گفتگوهای کاربر
    """
    user = request.user

    # دریافت لیست گفتگوها بر اساس نوع کاربر
    if user.is_staff:
        # برای کاربران پشتیبان، تمام گفتگوهای غیر حذف شده
        rooms = ChatRoom.objects.filter(
            Q(is_deleted_by_agent=False)
        ).annotate(
            unread_count=Count('messages', filter=Q(messages__is_read=False, messages__sender=F('user')))
        ).order_by('-updated_at')
    else:
        # برای کاربران عادی، فقط گفتگوهای خودشان
        rooms = ChatRoom.objects.filter(
            user=user,
            is_deleted_by_user=False
        ).annotate(
            unread_count=Count('messages', filter=Q(messages__is_read=False, messages__sender=F('agent')))
        ).order_by('-updated_at')

    context = {
        'rooms': rooms,
    }

    return render(request, 'chat/chat_list.html', context)


def chat_room(request, room_id):
    """
    نمایش صفحه گفتگو
    """
    user = request.user

    # دریافت اتاق گفتگو
    room = get_object_or_404(ChatRoom, id=room_id)

    # بررسی دسترسی کاربر به اتاق
    if user.is_staff:
        if room.is_deleted_by_agent:
            messages.error(request, "این گفتگو حذف شده است.")
            return redirect('chat:chat_list')
    else:
        if room.user != user or room.is_deleted_by_user:
            messages.error(request, "شما به این گفتگو دسترسی ندارید.")
            return redirect('chat:chat_list')

    # دریافت پیام‌های گفتگو
    chat_messages = room.messages.all().order_by('created_at')

    # علامت‌گذاری پیام‌های خوانده نشده به عنوان خوانده شده
    unread_messages = chat_messages.filter(is_read=False).exclude(sender=user)
    for message in unread_messages:
        message.is_read = True
        message.read_at = timezone.now()
        message.save(update_fields=['is_read', 'read_at'])

    context = {
        'room': room,
        'chat_messages': chat_messages,  # تغییر نام متغیر از messages به chat_messages
    }

    return render(request, 'chat/chat_room.html', context)

@login_required
def start_chat(request):
    """
    شروع گفتگوی جدید
    """
    user = request.user

    # کاربران پشتیبان نمی‌توانند گفتگوی جدید ایجاد کنند
    if user.is_staff:
        messages.error(request, "کاربران پشتیبان نمی‌توانند گفتگوی جدید ایجاد کنند.")
        return redirect('chat:chat_list')

    # بررسی وجود گفتگوی باز قبلی
    existing_open_room = ChatRoom.objects.filter(
        user=user,
        status='open',
        is_deleted_by_user=False
    ).first()

    if existing_open_room:
        return redirect('chat:room', room_id=existing_open_room.id)

    if request.method == 'POST':
        subject = request.POST.get('subject', '').strip()
        message = request.POST.get('message', '').strip()

        if not subject or not message:
            messages.error(request, "لطفاً موضوع و پیام خود را وارد کنید.")
            return render(request, 'chat/start_chat.html')

        # ایجاد گفتگوی جدید
        new_room = ChatRoom.objects.create(
            name=subject,
            user=user,
            room_type='support',
            status='open'
        )

        # ایجاد پیام اولیه
        ChatMessage.objects.create(
            room=new_room,
            sender=user,
            content=message,
            message_type='text'
        )

        # ایجاد اعلان برای پشتیبان‌ها
        for admin in User.objects.filter(is_staff=True):
            Notification.objects.create(
                user=admin,
                title="گفتگوی جدید",
                message=f"گفتگوی جدید از {user.username}: {subject}",
                notification_type="chat",
                data={
                    "room_id": str(new_room.id)
                }
            )

        return redirect('chat:room', room_id=new_room.id)

    return render(request, 'chat/start_chat.html')


@login_required
def hide_room(request, room_id):
    """پنهان کردن (حذف نرم) یک گفتگو برای کاربر"""
    if request.method == 'POST':
        try:
            room = ChatRoom.objects.get(id=room_id)

            # بررسی دسترسی کاربر
            if request.user != room.user and not request.user.is_staff:
                return JsonResponse({'success': False, 'error': 'شما اجازه دسترسی به این گفتگو را ندارید'}, status=403)

            # اضافه کردن کاربر به لیست کاربران پنهان کننده
            room.hidden_for_users.add(request.user)

            # علامت‌گذاری به عنوان حذف شده
            if request.user == room.user:
                room.mark_deleted_by_user()
            elif request.user.is_staff:
                room.mark_deleted_by_agent()

            room.save()

            # اطلاع‌رسانی به کاربران دیگر از طریق وب‌سوکت
            channel_layer = get_channel_layer()
            async_to_sync(channel_layer.group_send)(
                f'chat_{room_id}',
                {
                    'type': 'chat_deleted_by_user',
                    'room_id': str(room.id),
                    'username': request.user.username  # ارسال نام کاربر به جای deleted_by
                }
            )

            return JsonResponse({'success': True})
        except ChatRoom.DoesNotExist:
            return JsonResponse({'success': False, 'error': 'گفتگو یافت نشد'}, status=404)

    return JsonResponse({'success': False, 'error': 'درخواست نامعتبر'}, status=400)


@login_required
def admin_dashboard(request):
    """
    داشبورد مدیریت گفتگوها برای پشتیبان‌ها
    """
    user = request.user

    # فقط کاربران پشتیبان می‌توانند به این صفحه دسترسی داشته باشند
    if not user.is_staff:
        messages.error(request, "شما به این صفحه دسترسی ندارید.")
        return redirect('chat:chat_list')

    # گفتگوهای باز بدون پشتیبان
    unassigned_rooms = ChatRoom.objects.filter(
        status='open',
        agent__isnull=True
    ).order_by('-created_at')

    # گفتگوهای باز با پشتیبان
    assigned_rooms = ChatRoom.objects.filter(
        status='open',
        agent__isnull=False
    ).order_by('-updated_at')

    # گفتگوهای بسته شده
    closed_rooms = ChatRoom.objects.filter(
        status='closed'
    ).order_by('-closed_at')

    # گفتگوهای آرشیو شده
    archived_rooms = ChatRoom.objects.filter(
        status='archived'
    ).order_by('-updated_at')

    # گفتگوهای اختصاص داده شده به این پشتیبان
    my_rooms = ChatRoom.objects.filter(
        agent=user,
        status='open',
        is_deleted_by_agent=False
    ).annotate(
        unread_count=Count('messages', filter=Q(messages__is_read=False, messages__sender=F('user')))
    ).order_by('-updated_at')

    context = {
        'unassigned_rooms': unassigned_rooms,
        'assigned_rooms': assigned_rooms,
        'closed_rooms': closed_rooms,
        'archived_rooms': archived_rooms,
        'my_rooms': my_rooms,
    }

    return render(request, 'chat/admin_dashboard.html', context)


@login_required
@require_POST
def assign_room(request, room_id):
    """
    اختصاص دادن گفتگو به پشتیبان
    """
    user = request.user

    # فقط کاربران پشتیبان می‌توانند گفتگو را اختصاص دهند
    if not user.is_staff:
        return JsonResponse({'success': False, 'error': 'شما به این عملیات دسترسی ندارید.'}, status=403)

    room = get_object_or_404(ChatRoom, id=room_id)

    # بررسی وضعیت گفتگو
    if room.status != 'open':
        return JsonResponse({'success': False, 'error': 'این گفتگو قابل اختصاص نیست.'}, status=400)

    # اختصاص دادن گفتگو به پشتیبان
    room.agent = user
    room.save(update_fields=['agent'])

    # ایجاد پیام سیستمی
    ChatMessage.objects.create(
        room=room,
        content=f"پشتیبان {user.username} به گفتگو پیوست.",
        message_type='system'
    )

    return JsonResponse({
        'success': True,
        'redirect_url': reverse('chat:room', args=[room.id])
    })


@login_required
def notifications_view(request):
    """
    نمایش لیست اعلان‌های کاربر
    """
    user = request.user

    # دریافت اعلان‌های کاربر
    notifications = Notification.objects.filter(user=user).order_by('-created_at')

    context = {
        'notifications': notifications,
    }

    return render(request, 'chat/notifications.html', context)


@login_required
@require_POST
def mark_message_read(request, message_id):
    """
    علامت‌گذاری پیام به عنوان خوانده شده
    """
    user = request.user

    message = get_object_or_404(ChatMessage, id=message_id)

    # بررسی دسترسی کاربر به پیام
    room = message.room
    if user.is_staff:
        if room.is_deleted_by_agent:
            return JsonResponse({'success': False, 'error': 'شما به این پیام دسترسی ندارید.'}, status=403)
    else:
        if room.user != user or room.is_deleted_by_user:
            return JsonResponse({'success': False, 'error': 'شما به این پیام دسترسی ندارید.'}, status=403)

    # فقط پیام‌های دریافتی را می‌توان به عنوان خوانده شده علامت‌گذاری کرد
    if message.sender != user and not message.is_read:
        message.is_read = True
        message.read_at = timezone.now()
        message.save(update_fields=['is_read', 'read_at'])

    return JsonResponse({'success': True})


@login_required
@require_POST
def close_room(request, room_id):
    """
    بستن گفتگو
    """
    user = request.user

    room = get_object_or_404(ChatRoom, id=room_id)

    # بررسی دسترسی کاربر به اتاق
    if user.is_staff:
        if room.is_deleted_by_agent:
            return JsonResponse({'success': False, 'error': 'شما به این گفتگو دسترسی ندارید.'}, status=403)
    else:
        if room.user != user or room.is_deleted_by_user:
            return JsonResponse({'success': False, 'error': 'شما به این گفتگو دسترسی ندارید.'}, status=403)

    # بررسی وضعیت اتاق
    if room.status != 'open':
        return JsonResponse({'success': False, 'error': 'این گفتگو قبلاً بسته شده است.'}, status=400)

    # بستن اتاق
    room.close(user)

    return JsonResponse({'success': True})


@login_required
@require_POST
def reopen_room(request, room_id):
    """
    بازگشایی گفتگو
    """
    user = request.user

    room = get_object_or_404(ChatRoom, id=room_id)

    # بررسی دسترسی کاربر به اتاق
    if user.is_staff:
        if room.is_deleted_by_agent:
            return JsonResponse({'success': False, 'error': 'شما به این گفتگو دسترسی ندارید.'}, status=403)
    else:
        if room.user != user or room.is_deleted_by_user:
            return JsonResponse({'success': False, 'error': 'شما به این گفتگو دسترسی ندارید.'}, status=403)

    # بررسی وضعیت اتاق
    if room.status != 'closed':
        return JsonResponse({'success': False, 'error': 'این گفتگو قابل بازگشایی نیست.'}, status=400)

    # بازگشایی اتاق
    success = room.reopen(user)

    if not success:
        return JsonResponse({'success': False, 'error': 'بازگشایی گفتگو با خطا مواجه شد.'}, status=400)

    return JsonResponse({'success': True})


@login_required
@require_POST
def set_online(request):
    """تنظیم وضعیت کاربر به آنلاین"""
    user_status, created = UserStatus.objects.get_or_create(user=request.user)
    user_status.status = 'online'
    user_status.save(update_fields=['status', 'last_seen'])

    return JsonResponse({'success': True})


@login_required
@csrf_exempt
@require_POST
def set_offline(request):
    """تنظیم وضعیت کاربر به آفلاین"""
    user_status, created = UserStatus.objects.get_or_create(user=request.user)
    user_status.status = 'offline'
    user_status.save(update_fields=['status', 'last_seen'])

    return HttpResponse(status=204)


@login_required
@require_GET
def get_unread_count(request):
    """دریافت تعداد پیام‌های خوانده نشده"""
    user = request.user

    # محاسبه تعداد پیام‌های خوانده نشده
    if user.is_staff:
        # برای کاربران پشتیبان، تعداد پیام‌های خوانده نشده در تمام گفتگوهای باز
        count = ChatMessage.objects.filter(
            room__status='open',
            room__is_deleted_by_agent=False,
            is_read=False,
            sender__isnull=False  # پیام‌های سیستمی را نادیده می‌گیریم
        ).exclude(sender=user).count()
    else:
        # برای کاربران عادی، تعداد پیام‌های خوانده نشده در گفتگوهای خودشان
        count = ChatMessage.objects.filter(
            room__user=user,
            room__is_deleted_by_user=False,
            is_read=False,
            sender__isnull=False  # پیام‌های سیستمی را نادیده می‌گیریم
        ).exclude(sender=user).count()

    return JsonResponse({'count': count})


@login_required
@require_POST
def upload_temp_file(request):
    """آپلود فایل موقت"""
    if 'file' not in request.FILES:
        return JsonResponse({'success': False, 'error': 'فایلی انتخاب نشده است.'}, status=400)

    file = request.FILES['file']

    # بررسی اندازه فایل (حداکثر 5MB)
    if file.size > 5 * 1024 * 1024:
        return JsonResponse({'success': False, 'error': 'حداکثر اندازه فایل 5 مگابایت است.'}, status=400)

    # ذخیره فایل موقت
    temp_file = TemporaryFile.objects.create(
        user=request.user,
        file=file
    )

    return JsonResponse({
        'success': True,
        'file_id': str(temp_file.id),
        'file_name': file.name,
        'file_url': temp_file.file.url
    })

def get_rooms_for_user(user):
    """دریافت لیست اتاق‌های گفتگو برای کاربر"""
    if user.is_staff:
        # برای کاربران ادمین، اتاق‌های اختصاص داده شده به آنها را برگردان
        return ChatRoom.objects.filter(agent=user).order_by('-updated_at')
    else:
        # برای کاربران عادی، اتاق‌هایی که آنها ایجاد کرده‌اند یا در آنها مشارکت دارند را برگردان
        # به جز اتاق‌هایی که کاربر آنها را حذف کرده است
        return ChatRoom.objects.filter(
            (Q(user=user) | Q(participants=user)) &
            ~Q(hidden_for_users=user)
        ).distinct().order_by('-updated_at')


def admin_dashboard(request):
    """نمایش داشبورد مدیریت برای پشتیبان‌ها"""
    if not request.user.is_authenticated or not request.user.is_staff:
        return redirect('chat:chat_list')

    # دریافت پارامتر جستجوی کلی
    search_query = request.GET.get('q', '')
    closed_search_query = request.GET.get('closed_q', '')

    # جستجو در تمام گفتگوها
    search_results = None
    if search_query:
        # استفاده از Q objects برای ترکیب شروط جستجو
        from django.db.models import Q

        search_results = ChatRoom.objects.filter(
            Q(name__icontains=search_query) |
            Q(messages__content__icontains=search_query)
        ).distinct()

        # افزودن پیام‌های منطبق با جستجو به هر گفتگو
        for room in search_results:
            matching_messages = room.messages.filter(content__icontains=search_query).order_by('-created_at')
            if matching_messages.exists():
                room.matching_message = matching_messages.first()

    # گفتگوهای بدون پشتیبان
    unassigned_rooms = ChatRoom.objects.filter(agent__isnull=True, status='open')

    # گفتگوهای اختصاص داده شده به این پشتیبان
    my_rooms = ChatRoom.objects.filter(agent=request.user, status='open')

    # گفتگوهای در حال انجام (اختصاص داده شده به سایر پشتیبان‌ها)
    assigned_rooms = ChatRoom.objects.filter(agent__isnull=False, status='open').exclude(agent=request.user)

    # گفتگوهای بسته شده با امکان جستجو
    closed_rooms = ChatRoom.objects.filter(status='closed')

    if closed_search_query:
        # استفاده از Q objects برای جستجو در گفتگوهای بسته شده
        from django.db.models import Q

        closed_rooms = closed_rooms.filter(
            Q(name__icontains=closed_search_query) |
            Q(messages__content__icontains=closed_search_query)
        ).distinct()

    # مرتب‌سازی گفتگوهای بسته شده
    # اگر فیلد closed_at وجود دارد، از آن استفاده کنید، در غیر این صورت از updated_at استفاده کنید
    try:
        closed_rooms = closed_rooms.order_by('-closed_at')
    except:
        closed_rooms = closed_rooms.order_by('-updated_at')

    context = {
        'unassigned_rooms': unassigned_rooms,
        'my_rooms': my_rooms,
        'assigned_rooms': assigned_rooms,
        'closed_rooms': closed_rooms,
        'search_results': search_results,
    }

    return render(request, 'chat/admin_dashboard.html', context)


====== FILE: chat/urls.py ======

from django.urls import path
from . import views

app_name = 'chat'

urlpatterns = [
    # صفحات اصلی چت
    path('', views.chat_list, name='chat_list'),
    path('room/<uuid:room_id>/', views.chat_room, name='room'),
    path('start/', views.start_chat, name='start'),

    # صفحات مدیریت
    path('admin/dashboard/', views.admin_dashboard, name='admin_dashboard'),
    path('admin/assign/<uuid:room_id>/', views.assign_room, name='assign_room'),

    # اعلان‌ها
    path('notifications/', views.notifications_view, name='notifications'),

    # API‌های چت
    path('api/mark-read/<uuid:message_id>/', views.mark_message_read, name='mark_read'),
    path('api/close-room/<uuid:room_id>/', views.close_room, name='close_room'),
    path('api/reopen-room/<uuid:room_id>/', views.reopen_room, name='reopen_room'),
    path('api/upload-file/', views.upload_temp_file, name='upload_file'),

    # API‌های وضعیت آنلاین
    path('set-online/', views.set_online, name='set_online'),
    path('set-offline/', views.set_offline, name='set_offline'),
    path('unread-count/', views.get_unread_count, name='unread_count'),
    path('hide-room/<uuid:room_id>/', views.hide_room, name='hide_room'),

]

====== FILE: chat/tasks.py ======

# tasks.py
from celery import shared_task
from django.utils import timezone
from datetime import timedelta
from .models import UserStatus


@shared_task
def cleanup_stale_online_statuses():
    # کاربرانی که بیش از 5 دقیقه فعالیت نداشته‌اند را آفلاین کنید
    threshold = timezone.now() - timedelta(minutes=5)
    stale_statuses = UserStatus.objects.filter(
        status='online',
        last_seen__lt=threshold
    )

    count = stale_statuses.count()
    stale_statuses.update(status='offline')

    return f"Marked {count} stale online statuses as offline"

====== FILE: chat/tests.py ======

from django.test import TestCase

# Create your tests here.


====== FILE: chat/routing.py ======

from channels.auth import AuthMiddlewareStack
from channels.routing import URLRouter
from channels.sessions import SessionMiddlewareStack
from django.urls import re_path
from . import consumers
from .middleware import ConnectionLimitMiddleware, OnlineStatusMiddleware

websocket_urlpatterns = [
    re_path(r'ws/chat/(?P<room_id>[^/]+)/$', consumers.ChatConsumer.as_asgi()),
    re_path(r'ws/online-status/$', consumers.OnlineStatusConsumer.as_asgi()),
    re_path(r'ws/notifications/$', consumers.NotificationConsumer.as_asgi()),
]




application = OnlineStatusMiddleware(
    AuthMiddlewareStack(
        SessionMiddlewareStack(
            URLRouter(websocket_urlpatterns)
        )
    )
)

====== FILE: chat/services.py ======

# chat/services.py
from django.utils import timezone
from channels.layers import get_channel_layer
from asgiref.sync import async_to_sync
import json

from .models import ChatRoom, ChatMessage, Notification, UserStatus


class UserStatusService:
    """سرویس مدیریت وضعیت آنلاین/آفلاین کاربران"""

    @staticmethod
    def set_user_status(user, status):
        """تنظیم وضعیت کاربر و ارسال به‌روزرسانی به همه کاربران"""
        if not user or not user.is_authenticated:
            return None

        # به‌روزرسانی یا ایجاد وضعیت کاربر در دیتابیس
        user_status, created = UserStatus.objects.update_or_create(
            user=user,
            defaults={
                'status': status,
                'last_seen': timezone.now()
            }
        )

        # ارسال به‌روزرسانی به همه کاربران از طریق وب‌سوکت
        channel_layer = get_channel_layer()
        async_to_sync(channel_layer.group_send)(
            "online_status",
            {
                'type': 'online_status_update',
                'user_id': str(user.id),
                'status': status
            }
        )

        return user_status

    @staticmethod
    def update_last_seen(user):
        """به‌روزرسانی زمان آخرین فعالیت کاربر"""
        if not user or not user.is_authenticated:
            return None

        user_status, created = UserStatus.objects.update_or_create(
            user=user,
            defaults={
                'last_seen': timezone.now()
            }
        )

        return user_status

    @staticmethod
    def get_user_status(user):
        """دریافت وضعیت کاربر"""
        if not user or not user.is_authenticated:
            return 'offline'

        try:
            user_status = UserStatus.objects.get(user=user)
            return user_status.status
        except UserStatus.DoesNotExist:
            return 'offline'

    @staticmethod
    def get_all_online_users():
        """دریافت لیست تمام کاربران آنلاین"""
        threshold = timezone.now() - timezone.timedelta(minutes=5)
        return UserStatus.objects.filter(
            status='online',
            last_seen__gte=threshold
        ).select_related('user')

class ChatService:
    @staticmethod
    def create_room(user, name=None):
        """
        ایجاد اتاق گفتگوی جدید
        """
        if not name:
            name = f"گفتگو با {user.get_full_name() or user.username}"

        room = ChatRoom.objects.create(
            user=user,
            name=name,
            status='open'
        )

        return room

    @staticmethod
    def close_room(room, user):
        """
        بستن اتاق گفتگو
        """
        if room.status != 'open':
            return False

        room.status = 'closed'
        room.closed_at = timezone.now()

        # تعیین کاربری که گفتگو را بسته است
        if user.is_staff:
            room.is_closed_by_admin = True

        room.save()

        # ارسال پیام به کانال وب‌سوکت
        channel_layer = get_channel_layer()
        room_group_name = f'chat_{room.id}'

        message = "این گفتگو توسط پشتیبانی بسته شده است." if user.is_staff else "این گفتگو توسط کاربر بسته شده است."

        async_to_sync(channel_layer.group_send)(
            room_group_name,
            {
                'type': 'chat_message',
                'message': {
                    'type': 'chat_closed',
                    'message': message,
                    'closed_by': user.id,
                    'is_staff': user.is_staff,
                    'closed_at': timezone.now().isoformat()
                }
            }
        )

        return True

    @staticmethod
    def reopen_room(room, user):
        """
        بازگشایی اتاق گفتگو
        """
        if room.status != 'closed':
            return False

        room.status = 'open'
        room.closed_at = None
        room.is_closed_by_admin = False
        room.save()

        # ارسال پیام به کانال وب‌سوکت
        channel_layer = get_channel_layer()
        room_group_name = f'chat_{room.id}'

        message = "این گفتگو بازگشایی شده است."

        async_to_sync(channel_layer.group_send)(
            room_group_name,
            {
                'type': 'chat_message',
                'message': {
                    'type': 'chat_reopened',
                    'message': message,
                    'reopened_by': user.id,
                    'is_staff': user.is_staff,
                    'reopened_at': timezone.now().isoformat()
                }
            }
        )

        return True

    @staticmethod
    def archive_room(room):
        """
        آرشیو کردن اتاق گفتگو
        """
        if room.status != 'closed':
            return False

        room.status = 'archived'
        room.save()

        return True

    @staticmethod
    def create_message(room, sender, content, message_type='text', file=None):
        """
        ایجاد پیام جدید
        """
        message = ChatMessage.objects.create(
            room=room,
            sender=sender,
            content=content,
            message_type=message_type,
            file=file
        )

        # بروزرسانی زمان آخرین فعالیت اتاق
        room.updated_at = timezone.now()
        room.save(update_fields=['updated_at'])

        return message

    @staticmethod
    def create_system_message(room, content):
        """
        ایجاد پیام سیستمی
        """
        message = ChatMessage.objects.create(
            room=room,
            content=content,
            message_type='system'
        )

        # بروزرسانی زمان آخرین فعالیت اتاق
        room.updated_at = timezone.now()
        room.save(update_fields=['updated_at'])

        return message

    @staticmethod
    def mark_message_as_read(message):
        """
        علامت‌گذاری پیام به عنوان خوانده شده
        """
        if not message.is_read:
            message.is_read = True
            message.read_at = timezone.now()
            message.save(update_fields=['is_read', 'read_at'])

            # ارسال پیام به کانال وب‌سوکت
            channel_layer = get_channel_layer()
            room_group_name = f'chat_{message.room.id}'

            async_to_sync(channel_layer.group_send)(
                room_group_name,
                {
                    'type': 'chat_message',
                    'message': {
                        'type': 'message_read',
                        'message_id': str(message.id),
                        'read_at': message.read_at.isoformat()
                    }
                }
            )

            return True

        return False

    @staticmethod
    def assign_agent_to_room(room, agent):
        """
        اختصاص پشتیبان به اتاق گفتگو
        """
        if room.agent:
            return False

        room.agent = agent
        room.save(update_fields=['agent'])

        # ایجاد پیام سیستمی
        ChatService.create_system_message(
            room=room,
            content=f"پشتیبان {agent.get_full_name() or agent.username} به گفتگو پیوست."
        )

        return True


class NotificationService:
    @staticmethod
    def create_notification(user, title, message, notification_type='general', data=None):
        """
        ایجاد اعلان جدید
        """
        notification = Notification.objects.create(
            user=user,
            title=title,
            message=message,
            notification_type=notification_type,
            data=data or {}
        )

        # ارسال اعلان به کانال وب‌سوکت
        channel_layer = get_channel_layer()
        user_group_name = f'notifications_{user.id}'

        async_to_sync(channel_layer.group_send)(
            user_group_name,
            {
                'type': 'notification_message',
                'message': {
                    'type': 'notification',
                    'notification': {
                        'id': str(notification.id),
                        'title': notification.title,
                        'message': notification.message,
                        'type': notification.notification_type,
                        'data': notification.data,
                        'created_at': notification.created_at.isoformat()
                    }
                }
            }
        )

        return notification

    @staticmethod
    def mark_notification_as_read(notification):
        """
        علامت‌گذاری اعلان به عنوان خوانده شده
        """
        if not notification.is_read:
            notification.is_read = True
            notification.save(update_fields=['is_read'])

            # ارسال پیام به کانال وب‌سوکت
            channel_layer = get_channel_layer()
            user_group_name = f'notifications_{notification.user.id}'

            async_to_sync(channel_layer.group_send)(
                user_group_name,
                {
                    'type': 'notification_message',
                    'message': {
                        'type': 'notification_read',
                        'notification_id': str(notification.id)
                    }
                }
            )

            return True

        return False

    @staticmethod
    def mark_all_notifications_as_read(user):
        """
        علامت‌گذاری تمام اعلان‌های کاربر به عنوان خوانده شده
        """
        count = Notification.objects.filter(user=user, is_read=False).update(is_read=True)

        if count > 0:
            # ارسال پیام به کانال وب‌سوکت
            channel_layer = get_channel_layer()
            user_group_name = f'notifications_{user.id}'

            async_to_sync(channel_layer.group_send)(
                user_group_name,
                {
                    'type': 'notification_message',
                    'message': {
                        'type': 'all_notifications_read'
                    }
                }
            )

        return count

====== FILE: chat/migrations/0004_alter_notification_options_and_more.py ======

# Generated by Django 5.1.5 on 2025-08-09 09:27

import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('chat', '0003_alter_notification_options_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='notification',
            options={'ordering': ['-created_at'], 'verbose_name': 'اعلان', 'verbose_name_plural': 'اعلان\u200cها'},
        ),
        migrations.RemoveIndex(
            model_name='chatmessage',
            name='chat_chatme_room_id_c92a4a_idx',
        ),
        migrations.RemoveIndex(
            model_name='chatmessage',
            name='chat_chatme_created_888e17_idx',
        ),
        migrations.RemoveIndex(
            model_name='chatroom',
            name='chat_chatro_user_id_da3ba8_idx',
        ),
        migrations.RemoveIndex(
            model_name='chatroom',
            name='chat_chatro_agent_i_ad5c0c_idx',
        ),
        migrations.RemoveIndex(
            model_name='chatroom',
            name='chat_chatro_updated_79f21c_idx',
        ),
        migrations.RemoveIndex(
            model_name='notification',
            name='chat_notifi_user_id_7c95fc_idx',
        ),
        migrations.RemoveIndex(
            model_name='userstatus',
            name='chat_userst_status_ab9f7a_idx',
        ),
        migrations.RemoveField(
            model_name='userstatus',
            name='active_sessions',
        ),
        migrations.AddField(
            model_name='chatroom',
            name='hidden_for_users',
            field=models.ManyToManyField(blank=True, help_text='کاربرانی که این گفتگو را حذف کرده\u200cاند و دیگر نمی\u200cبینند', related_name='hidden_chat_rooms', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='userstatus',
            name='is_online',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='userstatus',
            name='last_activity',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='userstatus',
            name='typing_in_room',
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
        migrations.AlterField(
            model_name='userstatus',
            name='last_seen',
            field=models.DateTimeField(default=django.utils.timezone.now),
        ),
    ]


====== FILE: chat/migrations/__init__.py ======



====== FILE: chat/migrations/0003_alter_notification_options_and_more.py ======

# Generated by Django 5.1.5 on 2025-08-06 15:37

from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('chat', '0002_alter_chatmessage_options_alter_userstatus_options_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='notification',
            options={'ordering': ['-created_at'], 'verbose_name': 'اعلان', 'verbose_name_plural': 'اعلانها'},
        ),
        migrations.RemoveField(
            model_name='chatroom',
            name='hidden_for_users',
        ),
        migrations.RemoveField(
            model_name='userstatus',
            name='is_online',
        ),
        migrations.RemoveField(
            model_name='userstatus',
            name='last_activity',
        ),
        migrations.RemoveField(
            model_name='userstatus',
            name='typing_in_room',
        ),
        migrations.AddField(
            model_name='userstatus',
            name='active_sessions',
            field=models.IntegerField(default=0),
        ),
        migrations.AlterField(
            model_name='userstatus',
            name='last_seen',
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddIndex(
            model_name='chatmessage',
            index=models.Index(fields=['room', 'is_read', 'sender'], name='chat_chatme_room_id_c92a4a_idx'),
        ),
        migrations.AddIndex(
            model_name='chatmessage',
            index=models.Index(fields=['created_at'], name='chat_chatme_created_888e17_idx'),
        ),
        migrations.AddIndex(
            model_name='chatroom',
            index=models.Index(fields=['user', 'status'], name='chat_chatro_user_id_da3ba8_idx'),
        ),
        migrations.AddIndex(
            model_name='chatroom',
            index=models.Index(fields=['agent', 'status'], name='chat_chatro_agent_i_ad5c0c_idx'),
        ),
        migrations.AddIndex(
            model_name='chatroom',
            index=models.Index(fields=['updated_at'], name='chat_chatro_updated_79f21c_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['user', 'is_read'], name='chat_notifi_user_id_7c95fc_idx'),
        ),
        migrations.AddIndex(
            model_name='userstatus',
            index=models.Index(fields=['status', 'last_seen'], name='chat_userst_status_ab9f7a_idx'),
        ),
    ]


====== FILE: chat/migrations/0002_alter_chatmessage_options_alter_userstatus_options_and_more.py ======

# Generated by Django 5.1.5 on 2025-07-31 08:56

import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('chat', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='chatmessage',
            options={'ordering': ['created_at'], 'verbose_name': 'پیام گفتگو', 'verbose_name_plural': 'پیام\u200cهای گفتگو'},
        ),
        migrations.AlterModelOptions(
            name='userstatus',
            options={'verbose_name': 'وضعیت آنلاین کاربر', 'verbose_name_plural': 'وضعیت آنلاین کاربران'},
        ),
        migrations.RemoveField(
            model_name='chatmessage',
            name='file_name',
        ),
        migrations.RemoveField(
            model_name='chatmessage',
            name='file_size',
        ),
        migrations.RemoveField(
            model_name='chatmessage',
            name='file_type',
        ),
        migrations.AddField(
            model_name='chatroom',
            name='hidden_for_users',
            field=models.ManyToManyField(blank=True, help_text='کاربرانی که این گفتگو را حذف کرده\u200cاند و دیگر نمی\u200cبینند', related_name='hidden_chat_rooms', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='userstatus',
            name='is_online',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='userstatus',
            name='last_activity',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='chatmessage',
            name='content',
            field=models.TextField(verbose_name='متن پیام'),
        ),
        migrations.AlterField(
            model_name='chatmessage',
            name='file',
            field=models.FileField(blank=True, null=True, upload_to='chat_files/%Y/%m/%d/', verbose_name='فایل پیوست'),
        ),
        migrations.AlterField(
            model_name='chatmessage',
            name='message_type',
            field=models.CharField(choices=[('text', 'متن'), ('image', 'تصویر'), ('file', 'فایل'), ('system', 'سیستمی')], default='text', max_length=10, verbose_name='نوع پیام'),
        ),
        migrations.AlterField(
            model_name='chatmessage',
            name='read_at',
            field=models.DateTimeField(blank=True, null=True, verbose_name='زمان خوانده شدن'),
        ),
        migrations.AlterField(
            model_name='notification',
            name='data',
            field=models.JSONField(blank=True, default=dict, null=True, verbose_name='داده\u200cهای اضافی'),
        ),
        migrations.AlterField(
            model_name='notification',
            name='message',
            field=models.TextField(verbose_name='متن اعلان'),
        ),
        migrations.AlterField(
            model_name='notification',
            name='notification_type',
            field=models.CharField(choices=[('chat', 'گفتگو'), ('system', 'سیستمی')], default='system', max_length=20, verbose_name='نوع اعلان'),
        ),
        migrations.AlterField(
            model_name='userstatus',
            name='last_seen',
            field=models.DateTimeField(default=django.utils.timezone.now),
        ),
        migrations.AlterField(
            model_name='userstatus',
            name='status',
            field=models.CharField(choices=[('online', 'Online'), ('offline', 'Offline')], default='offline', max_length=10),
        ),
        migrations.AlterField(
            model_name='userstatus',
            name='typing_in_room',
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
        migrations.AlterField(
            model_name='userstatus',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='online_status', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='TemporaryFile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('file', models.FileField(upload_to='temp_files/%Y/%m/%d/', verbose_name='فایل')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='زمان آپلود')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='temp_files', to=settings.AUTH_USER_MODEL, verbose_name='کاربر')),
            ],
            options={
                'verbose_name': 'فایل موقت',
                'verbose_name_plural': 'فایل\u200cهای موقت',
                'ordering': ['-created_at'],
            },
        ),
    ]


====== FILE: chat/migrations/0001_initial.py ======

# Generated by Django 5.1.5 on 2025-06-11 12:08

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ChatRoom',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, verbose_name='نام گفتگو')),
                ('room_type', models.CharField(choices=[('support', 'پشتیبانی'), ('general', 'عمومی')], default='support', max_length=20, verbose_name='نوع گفتگو')),
                ('status', models.CharField(choices=[('open', 'باز'), ('closed', 'بسته شده'), ('archived', 'آرشیو شده')], default='open', max_length=20, verbose_name='وضعیت')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='زمان ایجاد')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='آخرین بروزرسانی')),
                ('closed_at', models.DateTimeField(blank=True, null=True, verbose_name='زمان بسته شدن')),
                ('is_deleted_by_user', models.BooleanField(default=False, verbose_name='حذف شده توسط کاربر')),
                ('is_deleted_by_agent', models.BooleanField(default=False, verbose_name='حذف شده توسط پشتیبان')),
                ('agent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='agent_chats', to=settings.AUTH_USER_MODEL, verbose_name='پشتیبان')),
                ('closed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='closed_chats', to=settings.AUTH_USER_MODEL, verbose_name='بسته شده توسط')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_chats', to=settings.AUTH_USER_MODEL, verbose_name='کاربر')),
            ],
            options={
                'verbose_name': 'اتاق گفتگو',
                'verbose_name_plural': 'اتاق\u200cهای گفتگو',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='ChatMessage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('content', models.TextField(verbose_name='محتوا')),
                ('message_type', models.CharField(choices=[('text', 'متن'), ('image', 'تصویر'), ('file', 'فایل'), ('system', 'سیستم')], default='text', max_length=10, verbose_name='نوع پیام')),
                ('file', models.FileField(blank=True, null=True, upload_to='chat_files/%Y/%m/%d/', verbose_name='فایل')),
                ('file_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='نام فایل')),
                ('file_size', models.PositiveIntegerField(blank=True, null=True, verbose_name='حجم فایل')),
                ('file_type', models.CharField(blank=True, max_length=100, null=True, verbose_name='نوع فایل')),
                ('is_read', models.BooleanField(default=False, verbose_name='خوانده شده')),
                ('read_at', models.DateTimeField(blank=True, null=True, verbose_name='زمان خواندن')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='زمان ارسال')),
                ('sender', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sent_messages', to=settings.AUTH_USER_MODEL, verbose_name='فرستنده')),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='chat.chatroom', verbose_name='اتاق گفتگو')),
            ],
            options={
                'verbose_name': 'پیام',
                'verbose_name_plural': 'پیام\u200cها',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255, verbose_name='عنوان')),
                ('message', models.TextField(verbose_name='پیام')),
                ('notification_type', models.CharField(choices=[('chat', 'چت'), ('system', 'سیستم')], default='system', max_length=20, verbose_name='نوع اعلان')),
                ('data', models.JSONField(blank=True, default=dict, verbose_name='داده\u200cهای اضافی')),
                ('is_read', models.BooleanField(default=False, verbose_name='خوانده شده')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='زمان ایجاد')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL, verbose_name='کاربر')),
            ],
            options={
                'verbose_name': 'اعلان',
                'verbose_name_plural': 'اعلان\u200cها',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('online', 'آنلاین'), ('away', 'غایب'), ('busy', 'مشغول'), ('offline', 'آفلاین')], default='offline', max_length=20, verbose_name='وضعیت')),
                ('last_seen', models.DateTimeField(auto_now=True, verbose_name='آخرین بازدید')),
                ('typing_in_room', models.UUIDField(blank=True, null=True, verbose_name='در حال تایپ در اتاق')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='chat_status', to=settings.AUTH_USER_MODEL, verbose_name='کاربر')),
            ],
            options={
                'verbose_name': 'وضعیت کاربر',
                'verbose_name_plural': 'وضعیت کاربران',
            },
        ),
    ]

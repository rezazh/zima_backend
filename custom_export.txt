

====== FILE: users/__init__.py ======



====== FILE: users/admin.py ======

from django.contrib import admin
from django.contrib.auth.admin import UserAdmin
from .models import CustomUser, Address, UserActivity, Newsletter


@admin.register(CustomUser)
class CustomUserAdmin(UserAdmin):
    list_display = (
    'username', 'email', 'phone_number', 'first_name', 'last_name', 'is_staff', 'date_joined', 'last_visit')
    list_filter = ('is_staff', 'is_superuser', 'is_active', 'date_joined')
    search_fields = ('username', 'email', 'phone_number', 'first_name', 'last_name')
    fieldsets = UserAdmin.fieldsets + (
        ('اطلاعات تکمیلی', {'fields': ('phone_number', 'national_id', 'birth_date')}),
        ('تنظیمات اطلاع‌رسانی', {'fields': ('receive_sms', 'receive_email')}),
        ('فعالیت', {'fields': ('last_visit',)}),
    )
    add_fieldsets = UserAdmin.add_fieldsets + (
        ('اطلاعات تکمیلی', {'fields': ('email', 'phone_number')}),
    )


@admin.register(Address)
class AddressAdmin(admin.ModelAdmin):
    list_display = ('user', 'title', 'province', 'city', 'is_default', 'created_at')
    list_filter = ('province', 'is_default', 'created_at')
    search_fields = ('user__username', 'receiver_full_name', 'city', 'full_address')
    raw_id_fields = ('user',)
    list_editable = ('is_default',)


@admin.register(UserActivity)
class UserActivityAdmin(admin.ModelAdmin):
    list_display = ('user', 'activity_type', 'ip_address', 'timestamp')
    list_filter = ('activity_type', 'timestamp')
    search_fields = ('user__username', 'ip_address')
    readonly_fields = ('user', 'activity_type', 'ip_address', 'user_agent', 'timestamp', 'details')

    def has_add_permission(self, request):
        return False

    def has_change_permission(self, request, obj=None):
        return False


@admin.register(Newsletter)
class NewsletterAdmin(admin.ModelAdmin):
    list_display = ('email', 'user', 'is_active', 'created_at')
    list_filter = ('is_active', 'created_at')
    search_fields = ('email', 'user__username')
    raw_id_fields = ('user',)
    list_editable = ('is_active',)

====== FILE: users/forms.py ======

from django import forms
from django.contrib.auth.forms import UserCreationForm
from django.core.validators import RegexValidator
from .models import CustomUser


class SignUpForm(UserCreationForm):
    """فرم ثبت‌نام کاربر"""
    phone_number = forms.CharField(
        max_length=11,
        validators=[
            RegexValidator(
                regex=r'^09\d{9}$',
                message='شماره موبایل باید با 09 شروع شده و 11 رقم باشد.'
            )
        ],
        required=True,
        help_text='مثال: 09123456789'
    )

    terms = forms.BooleanField(
        required=True,
        error_messages={'required': 'پذیرش قوانین و مقررات الزامی است.'}
    )

    class Meta:
        model = CustomUser
        fields = ('username', 'email', 'phone_number', 'password1', 'password2')

    def save(self, commit=True):
        user = super().save(commit=False)
        user.phone_number = self.cleaned_data.get('phone_number')

        if commit:
            user.save()
        return user

class LoginForm(forms.Form):
    """فرم ورود کاربر"""
    username = forms.CharField(max_length=150)
    password = forms.CharField(widget=forms.PasswordInput)
    remember = forms.BooleanField(required=False)


class UserProfileForm(forms.ModelForm):
    """فرم ویرایش پروفایل کاربر"""

    class Meta:
        model = CustomUser
        fields = ('email', 'phone_number')

====== FILE: users/models.py ======

from django.db import models
from django.contrib.auth.models import AbstractUser
from django.core.validators import RegexValidator
from django.utils.translation import gettext_lazy as _
from django.conf import settings


class CustomUser(AbstractUser):
    """مدل کاربر سفارشی با فیلدهای اضافی"""
    phone_number = models.CharField(
        max_length=11,
        validators=[
            RegexValidator(
                regex=r'^09\d{9}$',
                message='شماره موبایل باید با 09 شروع شده و 11 رقم باشد.'
            )
        ],
        verbose_name='شماره موبایل',
        unique=True,
        null=True,
        blank=True
    )
    email = models.EmailField(_('email address'), unique=True)
    national_id = models.CharField(
        max_length=10,
        validators=[
            RegexValidator(
                regex=r'^\d{10}$',
                message='کد ملی باید 10 رقم باشد.'
            )
        ],
        verbose_name='کد ملی',
        null=True,
        blank=True
    )
    birth_date = models.DateField(null=True, blank=True, verbose_name='تاریخ تولد')

    # تنظیمات اطلاع‌رسانی
    receive_sms = models.BooleanField(default=True, verbose_name='دریافت پیامک')
    receive_email = models.BooleanField(default=True, verbose_name='دریافت ایمیل')

    # تاریخ عضویت و آخرین بازدید
    date_modified = models.DateTimeField(auto_now=True, verbose_name='تاریخ آخرین بروزرسانی')
    last_visit = models.DateTimeField(null=True, blank=True, verbose_name='آخرین بازدید')

    class Meta:
        verbose_name = 'کاربر'
        verbose_name_plural = 'کاربران'

    def __str__(self):
        return self.username

    def get_full_name(self):
        """نام و نام خانوادگی کاربر"""
        full_name = f"{self.first_name} {self.last_name}".strip()
        return full_name if full_name else self.username

    def has_complete_profile(self):
        """بررسی تکمیل بودن پروفایل کاربر"""
        return bool(self.first_name and self.last_name and self.phone_number and self.email)


class Address(models.Model):
    """مدل آدرس کاربر"""
    PROVINCE_CHOICES = [
        ('تهران', 'تهران'),
        ('اصفهان', 'اصفهان'),
        ('فارس', 'فارس'),
        ('خراسان رضوی', 'خراسان رضوی'),
        ('آذربایجان شرقی', 'آذربایجان شرقی'),
        ('آذربایجان غربی', 'آذربایجان غربی'),
        ('کرمان', 'کرمان'),
        ('خوزستان', 'خوزستان'),
        ('هرمزگان', 'هرمزگان'),
        ('سیستان و بلوچستان', 'سیستان و بلوچستان'),
        ('کردستان', 'کردستان'),
        ('همدان', 'همدان'),
        ('کرمانشاه', 'کرمانشاه'),
        ('گیلان', 'گیلان'),
        ('مازندران', 'مازندران'),
        ('زنجان', 'زنجان'),
        ('گلستان', 'گلستان'),
        ('اردبیل', 'اردبیل'),
        ('قزوین', 'قزوین'),
        ('لرستان', 'لرستان'),
        ('بوشهر', 'بوشهر'),
        ('کهگیلویه و بویراحمد', 'کهگیلویه و بویراحمد'),
        ('مرکزی', 'مرکزی'),
        ('ایلام', 'ایلام'),
        ('چهارمحال و بختیاری', 'چهارمحال و بختیاری'),
        ('یزد', 'یزد'),
        ('قم', 'قم'),
        ('سمنان', 'سمنان'),
        ('البرز', 'البرز'),
        ('خراسان شمالی', 'خراسان شمالی'),
        ('خراسان جنوبی', 'خراسان جنوبی'),
    ]

    user = models.ForeignKey(CustomUser, on_delete=models.CASCADE, related_name='addresses', verbose_name='کاربر')
    title = models.CharField(max_length=100, verbose_name='عنوان آدرس', help_text='مثال: خانه، محل کار و...')
    receiver_full_name = models.CharField(max_length=150, verbose_name='نام و نام خانوادگی گیرنده')
    receiver_phone = models.CharField(
        max_length=11,
        validators=[
            RegexValidator(
                regex=r'^09\d{9}$',
                message='شماره موبایل باید با 09 شروع شده و 11 رقم باشد.'
            )
        ],
        verbose_name='شماره موبایل گیرنده'
    )
    province = models.CharField(max_length=50, choices=PROVINCE_CHOICES, verbose_name='استان')
    city = models.CharField(max_length=50, verbose_name='شهر')
    postal_code = models.CharField(
        max_length=10,
        validators=[
            RegexValidator(
                regex=r'^\d{10}$',
                message='کد پستی باید 10 رقم باشد.'
            )
        ],
        verbose_name='کد پستی'
    )
    full_address = models.TextField(verbose_name='آدرس کامل')
    is_default = models.BooleanField(default=False, verbose_name='آدرس پیش‌فرض')
    created_at = models.DateTimeField(auto_now_add=True, verbose_name='تاریخ ایجاد')
    updated_at = models.DateTimeField(auto_now=True, verbose_name='تاریخ بروزرسانی')

    class Meta:
        verbose_name = 'آدرس'
        verbose_name_plural = 'آدرس‌ها'
        ordering = ['-is_default', '-created_at']

    def __str__(self):
        return f"{self.title} - {self.province}, {self.city}"

    def save(self, *args, **kwargs):
        """اگر این آدرس به عنوان پیش‌فرض انتخاب شده، سایر آدرس‌های کاربر از حالت پیش‌فرض خارج شوند"""
        if self.is_default:
            Address.objects.filter(user=self.user, is_default=True).update(is_default=False)
        super().save(*args, **kwargs)


class UserActivity(models.Model):
    """مدل فعالیت‌های کاربر"""
    ACTIVITY_TYPES = [
        ('login', 'ورود به سیستم'),
        ('logout', 'خروج از سیستم'),
        ('register', 'ثبت‌نام'),
        ('profile_update', 'بروزرسانی پروفایل'),
        ('password_change', 'تغییر رمز عبور'),
        ('order_placed', 'ثبت سفارش'),
        ('review_added', 'ثبت نظر'),
    ]

    user = models.ForeignKey(CustomUser, on_delete=models.CASCADE, related_name='activities', verbose_name='کاربر')
    activity_type = models.CharField(max_length=20, choices=ACTIVITY_TYPES, verbose_name='نوع فعالیت')
    ip_address = models.GenericIPAddressField(null=True, blank=True, verbose_name='آدرس IP')
    user_agent = models.TextField(null=True, blank=True, verbose_name='مرورگر کاربر')
    timestamp = models.DateTimeField(auto_now_add=True, verbose_name='زمان فعالیت')
    details = models.JSONField(null=True, blank=True, verbose_name='جزئیات')

    class Meta:
        verbose_name = 'فعالیت کاربر'
        verbose_name_plural = 'فعالیت‌های کاربران'
        ordering = ['-timestamp']

    def __str__(self):
        return f"{self.user.username} - {self.get_activity_type_display()} - {self.timestamp}"


class Newsletter(models.Model):
    """مدل خبرنامه"""
    email = models.EmailField(unique=True, verbose_name='ایمیل')
    user = models.ForeignKey(CustomUser, on_delete=models.SET_NULL, null=True, blank=True, related_name='newsletters',
                             verbose_name='کاربر')
    is_active = models.BooleanField(default=True, verbose_name='فعال')
    created_at = models.DateTimeField(auto_now_add=True, verbose_name='تاریخ عضویت')

    class Meta:
        verbose_name = 'خبرنامه'
        verbose_name_plural = 'خبرنامه‌ها'
        ordering = ['-created_at']

    def __str__(self):
        return self.email


class Favorite(models.Model):
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='favorites')
    product = models.ForeignKey('products.Product', on_delete=models.CASCADE)
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        unique_together = ('user', 'product')
        verbose_name = 'علاقه‌مندی'
        verbose_name_plural = 'علاقه‌مندی‌ها'
        ordering = ['-created_at']

    def __str__(self):
        return f'{self.user.username} - {self.product.name}'

====== FILE: users/apps.py ======

from django.apps import AppConfig


class UsersConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'users'


====== FILE: users/views.py ======

from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth import login, authenticate, logout
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.views.decorators.csrf import ensure_csrf_cookie
from django.views.decorators.http import require_POST

from .forms import SignUpForm, LoginForm, UserProfileForm
from .models import Address, Favorite
from django.http import JsonResponse  # این خط را به ابتدای فایل اضافه کنید


@ensure_csrf_cookie
def signup(request):
    """ثبت‌نام کاربر جدید"""
    if request.user.is_authenticated:
        return redirect('home')

    if request.method == 'POST':
        form = SignUpForm(request.POST)
        print("Form data:", request.POST)

        if form.is_valid():
            print("Form is valid")
            try:
                user = form.save()
                login(request, user)
                messages.success(request, 'ثبت‌نام با موفقیت انجام شد.')
                return redirect('home')
            except Exception as e:
                print(f"Error saving form: {e}")
                messages.error(request, f'خطا در ثبت نام: {e}')
        else:
            print("Form errors:", form.errors)
            for field, errors in form.errors.items():
                for error in errors:
                    messages.error(request, f"{field}: {error}")
    else:
        form = SignUpForm()

    return render(request, 'users/signup.html', {'form': form})

def login_view(request):
    """ورود کاربر"""
    if request.user.is_authenticated:
        return redirect('home')

    if request.method == 'POST':
        form = LoginForm(request.POST)
        if form.is_valid():
            username = form.cleaned_data['username']
            password = form.cleaned_data['password']
            user = authenticate(username=username, password=password)
            if user is not None:
                login(request, user)
                next_url = request.POST.get('next', 'home')
                return redirect(next_url)
            else:
                messages.error(request, 'نام کاربری یا رمز عبور اشتباه است.')
    else:
        form = LoginForm()

    return render(request, 'users/login.html', {
        'form': form,
        'next': request.GET.get('next', '')
    })


@login_required
def logout_view(request):
    """خروج کاربر"""
    logout(request)
    messages.success(request, 'با موفقیت خارج شدید.')
    return redirect('home')


@login_required
def profile(request):
    """نمایش و ویرایش پروفایل کاربر"""
    if request.method == 'POST':
        form = UserProfileForm(request.POST, instance=request.user)
        if form.is_valid():
            form.save()
            messages.success(request, 'اطلاعات حساب کاربری با موفقیت به‌روزرسانی شد.')
            return redirect('users:profile')
    else:
        form = UserProfileForm(instance=request.user)

    return render(request, 'users/profile.html', {'form': form})


from django.contrib.auth import update_session_auth_hash


@login_required
def change_password(request):
    """تغییر رمز عبور"""
    if request.method == 'POST':
        current_password = request.POST.get('current_password')
        new_password = request.POST.get('new_password')
        confirm_password = request.POST.get('confirm_password')

        # بررسی صحت رمز فعلی
        if not request.user.check_password(current_password):
            messages.error(request, 'رمز عبور فعلی اشتباه است.')
            return redirect('users:change_password')

        # بررسی یکسان بودن رمز جدید و تکرار آن
        if new_password != confirm_password:
            messages.error(request, 'رمز عبور جدید و تکرار آن یکسان نیستند.')
            return redirect('users:change_password')

        # بررسی طول رمز عبور
        if len(new_password) < 8:
            messages.error(request, 'رمز عبور باید حداقل ۸ کاراکتر باشد.')
            return redirect('users:change_password')

        # تغییر رمز عبور
        request.user.set_password(new_password)
        request.user.save()

        # به روزرسانی نشست برای جلوگیری از خروج کاربر
        update_session_auth_hash(request, request.user)

        messages.success(request, 'رمز عبور با موفقیت تغییر یافت.')
        return redirect('users:profile')

    return render(request, 'users/change_password.html')

@login_required
def addresses(request):
    """مدیریت آدرس‌های کاربر"""
    addresses = Address.objects.filter(user=request.user)
    return render(request, 'users/addresses.html', {'addresses': addresses})


@login_required
def add_address(request):
    """افزودن آدرس جدید"""
    if request.method == 'POST':
        full_address = request.POST.get('full_address')
        postal_code = request.POST.get('postal_code')

        Address.objects.create(
            user=request.user,
            full_address=full_address,
            postal_code=postal_code
        )

        messages.success(request, 'آدرس جدید با موفقیت اضافه شد.')

    return redirect('users:addresses')


@login_required
def edit_address(request, address_id):
    """ویرایش آدرس"""
    address = get_object_or_404(Address, id=address_id, user=request.user)

    if request.method == 'POST':
        full_address = request.POST.get('full_address')
        postal_code = request.POST.get('postal_code')

        address.full_address = full_address
        address.postal_code = postal_code
        address.save()

        messages.success(request, 'آدرس با موفقیت ویرایش شد.')

    return redirect('users:addresses')


@login_required
def delete_address(request, address_id):
    """حذف آدرس"""
    address = get_object_or_404(Address, id=address_id, user=request.user)

    if request.method == 'POST':
        address.delete()
        messages.success(request, 'آدرس با موفقیت حذف شد.')

    return redirect('users:addresses')


@login_required
def favorites_view(request):
    """نمایش لیست علاقه‌مندی‌های کاربر"""
    favorites = Favorite.objects.filter(user=request.user).select_related('product')
    return render(request, 'users/favorites.html', {'favorites': favorites})


@login_required
@require_POST
def add_favorite(request, product_id):
    """اضافه کردن محصول به علاقه‌مندی‌ها"""
    try:
        from products.models import Product
        product = Product.objects.get(id=product_id)
        favorite, created = Favorite.objects.get_or_create(
            user=request.user,
            product=product
        )

        if created:
            return JsonResponse({
                'success': True,
                'message': 'محصول به علاقه‌مندی‌ها اضافه شد',
                'action': 'added'
            })
        else:
            return JsonResponse({
                'success': True,
                'message': 'محصول قبلاً در علاقه‌مندی‌ها موجود است',
                'action': 'exists'
            })
    except Product.DoesNotExist:
        return JsonResponse({
            'success': False,
            'message': 'محصول یافت نشد'
        })
    except Exception as e:
        return JsonResponse({
            'success': False,
            'message': 'خطا در افزودن به علاقه‌مندی‌ها'
        })


@login_required
@require_POST
def remove_favorite(request, product_id):
    """حذف محصول از علاقه‌مندی‌ها"""
    try:
        favorite = Favorite.objects.get(
            user=request.user,
            product_id=product_id
        )
        favorite.delete()
        return JsonResponse({
            'success': True,
            'message': 'محصول از علاقه‌مندی‌ها حذف شد'
        })
    except Favorite.DoesNotExist:
        return JsonResponse({
            'success': False,
            'message': 'محصول در علاقه‌مندی‌ها یافت نشد'
        })
    except Exception as e:
        return JsonResponse({
            'success': False,
            'message': 'خطا در حذف از علاقه‌مندی‌ها'
        })

====== FILE: users/urls.py ======

from django.urls import path
from . import views
from django.contrib.auth import views as auth_views
from django.urls import reverse_lazy

app_name = 'users'

urlpatterns = [
    # Authentication URLs
    path('signup/', views.signup, name='signup'),
    path('login/', views.login_view, name='login'),
    path('logout/', views.logout_view, name='logout'),

    # Profile Management URLs
    path('profile/', views.profile, name='profile'),
    path('change-password/', views.change_password, name='change_password'),

    # Address Management URLs
    path('addresses/', views.addresses, name='addresses'),
    path('addresses/add/', views.add_address, name='add_address'),
    path('addresses/<int:address_id>/edit/', views.edit_address, name='edit_address'),
    path('addresses/<int:address_id>/delete/', views.delete_address, name='delete_address'),

    # Favorites URLs
    path('favorites/', views.favorites_view, name='favorites'),
    path('favorites/add/<int:product_id>/', views.add_favorite, name='add_favorite'),
    path('favorites/remove/<int:product_id>/', views.remove_favorite, name='remove_favorite'),

    # Password Reset URLs
    path('password-reset/', auth_views.PasswordResetView.as_view(
        template_name='users/password_reset.html',
        email_template_name='users/password_reset_email.html',
        html_email_template_name='users/password_reset_email.html',  # این خط اضافه شده
        subject_template_name='users/password_reset_subject.txt',
        success_url=reverse_lazy('users:password_reset_done')
    ), name='password_reset'),

    path('password-reset/done/', auth_views.PasswordResetDoneView.as_view(
        template_name='users/password_reset_done.html'
    ), name='password_reset_done'),

    path('password-reset-confirm/<uidb64>/<token>/', auth_views.PasswordResetConfirmView.as_view(
        template_name='users/password_reset_confirm.html',
        success_url=reverse_lazy('users:password_reset_complete')
    ), name='password_reset_confirm'),

    path('password-reset-complete/', auth_views.PasswordResetCompleteView.as_view(
        template_name='users/password_reset_complete.html'
    ), name='password_reset_complete'),
]

====== FILE: users/serializers.py ======

from rest_framework import serializers
from .models import User, Address


class UserSignupSerializer(serializers.ModelSerializer):
    password = serializers.CharField(write_only=True)
    phone_number = serializers.CharField(required=True)

    class Meta:
        model = User
        fields = ['username', 'password', 'email', 'phone_number']

    def validate_email(self, value):
        if User.objects.filter(email=value).exists():
            raise serializers.ValidationError("This email is already registered.")
        return value

    def validate_phone_number(self, value):
        if User.objects.filter(phone_number=value).exists():
            raise serializers.ValidationError("This phone number is already registered.")
        return value

    def create(self, validated_data):
        user = User.objects.create_user(
            username=validated_data['username'],
            password=validated_data['password'],
            email=validated_data.get('email', ''),
            phone_number=validated_data.get('phone_number', '')
        )
        return user

class AddressSerializer(serializers.ModelSerializer):
    class Meta:
        model = Address
        fields = ['id', 'full_address', 'postal_code', 'created_at']
        read_only_fields = ['id', 'created_at']


class UserProfileSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ['username', 'email', 'phone_number']
        read_only_fields = ['username']

====== FILE: users/tests.py ======

from django.test import TestCase

# Create your tests here.


====== FILE: users/templates/users/password_reset_complete.html ======

{% extends 'base/base.html' %}
{% load static %}

{% block title %}تغییر رمز عبور موفقیت‌آمیز | زیما{% endblock %}

{% block content %}
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white text-center py-3">
                    <h4 class="mb-0">تغییر رمز عبور موفقیت‌آمیز</h4>
                </div>
                <div class="card-body p-4">
                    <div class="alert alert-success">
                        <p>رمز عبور شما با موفقیت تغییر یافت.</p>
                        <p>اکنون می‌توانید با رمز عبور جدید وارد شوید.</p>
                    </div>
                    
                    <div class="text-center mt-3">
                        <a href="{% url 'users:login' %}" class="btn btn-primary">ورود به حساب کاربری</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

====== FILE: users/templates/users/password_reset_confirm.html ======

{% extends 'base/base.html' %}
{% load static %}

{% block title %}تنظیم رمز عبور جدید | زیما{% endblock %}

{% block content %}
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white text-center py-3">
                    <h4 class="mb-0">تنظیم رمز عبور جدید</h4>
                </div>
                <div class="card-body p-4">
                    {% if validlink %}
                        <p class="mb-3">لطفاً رمز عبور جدید خود را وارد کنید.</p>
                        
                        <form method="post">
                            {% csrf_token %}
                            
                            {% if form.non_field_errors %}
                                <div class="alert alert-danger">
                                    {% for error in form.non_field_errors %}
                                        {{ error }}
                                    {% endfor %}
                                </div>
                            {% endif %}
                            
                            <div class="mb-3">
                                <label for="id_new_password1" class="form-label">رمز عبور جدید</label>
                                <input type="password" name="new_password1" id="id_new_password1" class="form-control {% if form.new_password1.errors %}is-invalid{% endif %}" required>
                                {% if form.new_password1.errors %}
                                    <div class="invalid-feedback">
                                        {% for error in form.new_password1.errors %}
                                            {{ error }}
                                        {% endfor %}
                                    </div>
                                {% endif %}
                                {% if form.new_password1.help_text %}
                                    <div class="form-text small">
                                        {{ form.new_password1.help_text|safe }}
                                    </div>
                                {% endif %}
                            </div>
                            
                            <div class="mb-3">
                                <label for="id_new_password2" class="form-label">تأیید رمز عبور جدید</label>
                                <input type="password" name="new_password2" id="id_new_password2" class="form-control {% if form.new_password2.errors %}is-invalid{% endif %}" required>
                                {% if form.new_password2.errors %}
                                    <div class="invalid-feedback">
                                        {% for error in form.new_password2.errors %}
                                            {{ error }}
                                        {% endfor %}
                                    </div>
                                {% endif %}
                            </div>
                            
                            <div class="d-grid gap-2">
                                <button type="submit" class="btn btn-primary">تغییر رمز عبور</button>
                            </div>
                        </form>
                    {% else %}
                        <div class="alert alert-danger">
                            <p>لینک بازیابی رمز عبور نامعتبر است یا قبلاً استفاده شده است.</p>
                            <p>لطفاً درخواست بازیابی رمز عبور جدیدی ارسال کنید.</p>
                        </div>
                        
                        <div class="text-center mt-3">
                            <a href="{% url 'users:password_reset' %}" class="btn btn-outline-primary">درخواست بازیابی جدید</a>
                        </div>
                    {% endif %}
                </div>
            </div>
        </div>
    </div>
{% endblock %}

====== FILE: users/templates/users/password_reset_subject.txt ======

بازیابی رمز عبور در سایت زیما


====== FILE: users/templates/users/password_reset.html ======

{% extends 'base/base.html' %}
{% load static %}

{% block title %}بازیابی رمز عبور | زیما{% endblock %}

{% block content %}
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white text-center py-3">
                    <h4 class="mb-0">بازیابی رمز عبور</h4>
                </div>
                <div class="card-body p-4">
                    <p class="mb-3">ایمیل خود را وارد کنید تا لینک بازیابی رمز عبور برای شما ارسال شود.</p>
                    
                    <form method="post">
                        {% csrf_token %}
                        
                        {% if form.non_field_errors %}
                            <div class="alert alert-danger">
                                {% for error in form.non_field_errors %}
                                    {{ error }}
                                {% endfor %}
                            </div>
                        {% endif %}
                        
                        <div class="mb-3">
                            <label for="id_email" class="form-label">ایمیل</label>
                            <input type="email" name="email" id="id_email" class="form-control {% if form.email.errors %}is-invalid{% endif %}" required>
                            {% if form.email.errors %}
                                <div class="invalid-feedback">
                                    {% for error in form.email.errors %}
                                        {{ error }}
                                    {% endfor %}
                                </div>
                            {% endif %}
                        </div>
                        
                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary">ارسال لینک بازیابی</button>
                        </div>
                    </form>
                    
                    <hr>
                    
                    <div class="text-center">
                        <a href="{% url 'users:login' %}" class="btn btn-outline-primary">بازگشت به صفحه ورود</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

====== FILE: users/templates/users/password_reset_email.html ======

{% load i18n %}{% autoescape off %}
{% blocktranslate %}سلام،

شما این ایمیل را دریافت کرده‌اید چون درخواست بازیابی رمز عبور برای حساب کاربری خود در سایت زیما کرده‌اید.

لطفاً روی لینک زیر کلیک کنید تا رمز عبور جدیدی تنظیم کنید:{% endblocktranslate %}

{{ protocol }}://{{ domain }}{% url 'users:password_reset_confirm' uidb64=uid token=token %}

{% translate "نام کاربری شما:" %} {{ user.get_username }}

{% blocktranslate %}با تشکر،
تیم پشتیبانی زیما{% endblocktranslate %}

{% endautoescape %}

====== FILE: users/templates/users/password_reset_done.html ======

{% extends 'base/base.html' %}
{% load static %}

{% block title %}ارسال ایمیل بازیابی | زیما{% endblock %}

{% block content %}
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white text-center py-3">
                    <h4 class="mb-0">ارسال ایمیل بازیابی</h4>
                </div>
                <div class="card-body p-4">
                    <div class="alert alert-success">
                        <p>ایمیل حاوی دستورالعمل‌های بازیابی رمز عبور برای شما ارسال شد.</p>
                        <p>اگر حساب کاربری با ایمیل وارد شده وجود داشته باشد، به زودی ایمیلی دریافت خواهید کرد.</p>
                        <p>لطفاً صندوق ورودی و پوشه اسپم خود را بررسی کنید.</p>
                    </div>
                    
                    <div class="text-center mt-3">
                        <a href="{% url 'users:login' %}" class="btn btn-outline-primary">بازگشت به صفحه ورود</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

====== FILE: users/migrations/__init__.py ======



====== FILE: users/migrations/0002_customuser_is_online.py ======

# Generated by Django 5.1.5 on 2025-06-09 08:58

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('users', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='customuser',
            name='is_online',
            field=models.BooleanField(default=False),
        ),
    ]


====== FILE: users/migrations/0003_remove_customuser_is_online.py ======

# Generated by Django 5.1.5 on 2025-06-09 13:29

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('users', '0002_customuser_is_online'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='customuser',
            name='is_online',
        ),
    ]


====== FILE: users/migrations/0004_favorite.py ======

# Generated by Django 5.1.5 on 2025-09-03 09:29

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ('users', '0003_remove_customuser_is_online'),
        # این خط را حذف کنید یا تغییر دهید
        # ('products', '0007_remove_product_color_codes_remove_product_colors_and_more'),
        ('products', '0006_productinventory_dimensions_productinventory_weight'),  # به جای 0007، از 0006 استفاده کنید
    ]

    operations = [
        migrations.CreateModel(
            name='Favorite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.product')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorites', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'علاقه\u200cمندی',
                'verbose_name_plural': 'علاقه\u200cمندی\u200cها',
                'ordering': ['-created_at'],
                'unique_together': {('user', 'product')},
            },
        ),
    ]


====== FILE: users/migrations/0001_initial.py ======

# Generated by Django 5.1.5 on 2025-05-16 13:09

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone_number', models.CharField(blank=True, max_length=11, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='شماره موبایل باید با 09 شروع شده و 11 رقم باشد.', regex='^09\\d{9}$')], verbose_name='شماره موبایل')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('national_id', models.CharField(blank=True, max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='کد ملی باید 10 رقم باشد.', regex='^\\d{10}$')], verbose_name='کد ملی')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='تاریخ تولد')),
                ('receive_sms', models.BooleanField(default=True, verbose_name='دریافت پیامک')),
                ('receive_email', models.BooleanField(default=True, verbose_name='دریافت ایمیل')),
                ('date_modified', models.DateTimeField(auto_now=True, verbose_name='تاریخ آخرین بروزرسانی')),
                ('last_visit', models.DateTimeField(blank=True, null=True, verbose_name='آخرین بازدید')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'کاربر',
                'verbose_name_plural': 'کاربران',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='مثال: خانه، محل کار و...', max_length=100, verbose_name='عنوان آدرس')),
                ('receiver_full_name', models.CharField(max_length=150, verbose_name='نام و نام خانوادگی گیرنده')),
                ('receiver_phone', models.CharField(max_length=11, validators=[django.core.validators.RegexValidator(message='شماره موبایل باید با 09 شروع شده و 11 رقم باشد.', regex='^09\\d{9}$')], verbose_name='شماره موبایل گیرنده')),
                ('province', models.CharField(choices=[('تهران', 'تهران'), ('اصفهان', 'اصفهان'), ('فارس', 'فارس'), ('خراسان رضوی', 'خراسان رضوی'), ('آذربایجان شرقی', 'آذربایجان شرقی'), ('آذربایجان غربی', 'آذربایجان غربی'), ('کرمان', 'کرمان'), ('خوزستان', 'خوزستان'), ('هرمزگان', 'هرمزگان'), ('سیستان و بلوچستان', 'سیستان و بلوچستان'), ('کردستان', 'کردستان'), ('همدان', 'همدان'), ('کرمانشاه', 'کرمانشاه'), ('گیلان', 'گیلان'), ('مازندران', 'مازندران'), ('زنجان', 'زنجان'), ('گلستان', 'گلستان'), ('اردبیل', 'اردبیل'), ('قزوین', 'قزوین'), ('لرستان', 'لرستان'), ('بوشهر', 'بوشهر'), ('کهگیلویه و بویراحمد', 'کهگیلویه و بویراحمد'), ('مرکزی', 'مرکزی'), ('ایلام', 'ایلام'), ('چهارمحال و بختیاری', 'چهارمحال و بختیاری'), ('یزد', 'یزد'), ('قم', 'قم'), ('سمنان', 'سمنان'), ('البرز', 'البرز'), ('خراسان شمالی', 'خراسان شمالی'), ('خراسان جنوبی', 'خراسان جنوبی')], max_length=50, verbose_name='استان')),
                ('city', models.CharField(max_length=50, verbose_name='شهر')),
                ('postal_code', models.CharField(max_length=10, validators=[django.core.validators.RegexValidator(message='کد پستی باید 10 رقم باشد.', regex='^\\d{10}$')], verbose_name='کد پستی')),
                ('full_address', models.TextField(verbose_name='آدرس کامل')),
                ('is_default', models.BooleanField(default=False, verbose_name='آدرس پیش\u200cفرض')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='تاریخ ایجاد')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='تاریخ بروزرسانی')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='addresses', to=settings.AUTH_USER_MODEL, verbose_name='کاربر')),
            ],
            options={
                'verbose_name': 'آدرس',
                'verbose_name_plural': 'آدرس\u200cها',
                'ordering': ['-is_default', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Newsletter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='ایمیل')),
                ('is_active', models.BooleanField(default=True, verbose_name='فعال')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='تاریخ عضویت')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='newsletters', to=settings.AUTH_USER_MODEL, verbose_name='کاربر')),
            ],
            options={
                'verbose_name': 'خبرنامه',
                'verbose_name_plural': 'خبرنامه\u200cها',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity_type', models.CharField(choices=[('login', 'ورود به سیستم'), ('logout', 'خروج از سیستم'), ('register', 'ثبت\u200cنام'), ('profile_update', 'بروزرسانی پروفایل'), ('password_change', 'تغییر رمز عبور'), ('order_placed', 'ثبت سفارش'), ('review_added', 'ثبت نظر')], max_length=20, verbose_name='نوع فعالیت')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='آدرس IP')),
                ('user_agent', models.TextField(blank=True, null=True, verbose_name='مرورگر کاربر')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='زمان فعالیت')),
                ('details', models.JSONField(blank=True, null=True, verbose_name='جزئیات')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activities', to=settings.AUTH_USER_MODEL, verbose_name='کاربر')),
            ],
            options={
                'verbose_name': 'فعالیت کاربر',
                'verbose_name_plural': 'فعالیت\u200cهای کاربران',
                'ordering': ['-timestamp'],
            },
        ),
    ]


====== FILE: users/management/commands/create_initial_data.py ======

from django.core.management.base import BaseCommand
from users.models import CustomUser
from products.models import Category, Product


class Command(BaseCommand):
    help = 'Creates initial data for the project'

    def handle(self, *args, **kwargs):
        self.stdout.write('Creating initial data...')

        # ایجاد دسته‌بندی‌ها
        cat1 = Category.objects.create(name='لباس مردانه', slug='mens-clothing')
        cat2 = Category.objects.create(name='لباس زنانه', slug='womens-clothing')

        # ایجاد محصولات
        Product.objects.create(
            name='تیشرت مردانه',
            slug='mens-tshirt',
            category=cat1,
            brand='برند نمونه',
            gender='men',
            description='توضیحات محصول',
            price=150000,
            stock=10
        )

        Product.objects.create(
            name='بلوز زنانه',
            slug='womens-blouse',
            category=cat2,
            brand='برند نمونه',
            gender='women',
            description='توضیحات محصول',
            price=180000,
            stock=8
        )

        self.stdout.write(self.style.SUCCESS('Initial data created successfully!'))

====== FILE: cart/__init__.py ======



====== FILE: cart/admin.py ======

from django.contrib import admin
from .models import CartItem, Coupon, WishlistItem

@admin.register(CartItem)
class CartItemAdmin(admin.ModelAdmin):
    list_display = ('user', 'product', 'size', 'color', 'quantity', 'discount', 'get_total_price', 'get_final_price', 'created_at')
    list_filter = ('created_at', 'discount')
    search_fields = ('user__username', 'product__name')
    date_hierarchy = 'created_at'
    raw_id_fields = ('user', 'product')

@admin.register(Coupon)
class CouponAdmin(admin.ModelAdmin):
    list_display = ('code', 'discount_percent', 'valid_from', 'valid_to', 'active', 'created_at')
    list_filter = ('active', 'valid_from', 'valid_to')
    search_fields = ('code', 'description')
    date_hierarchy = 'created_at'
    filter_horizontal = ('users',)

@admin.register(WishlistItem)
class WishlistItemAdmin(admin.ModelAdmin):
    list_display = ('user', 'product', 'created_at')
    list_filter = ('created_at',)
    search_fields = ('user__username', 'product__name')
    date_hierarchy = 'created_at'
    raw_id_fields = ('user', 'product')

====== FILE: cart/forms.py ======

from django import forms

class AddToCartForm(forms.Form):
    """فرم افزودن محصول به سبد خرید"""
    size = forms.CharField(required=True)
    color = forms.CharField(required=True)
    quantity = forms.IntegerField(min_value=1, initial=1)

class CouponForm(forms.Form):
    """فرم اعمال کد تخفیف"""
    code = forms.CharField(max_length=50, required=True)

====== FILE: cart/models.py ======

from django.db import models
from django.conf import settings
from django.utils import timezone
from products.models import Product, ProductInventory


class CartItem(models.Model):
    """مدل آیتم سبد خرید"""
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='cart_items')
    product = models.ForeignKey(Product, on_delete=models.CASCADE)
    size = models.CharField(max_length=10)
    color = models.CharField(max_length=50)
    quantity = models.PositiveIntegerField(default=1)
    discount = models.PositiveIntegerField(default=0)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    inventory = models.ForeignKey(ProductInventory, on_delete=models.SET_NULL, null=True, blank=True)

    class Meta:
        ordering = ['-created_at']
        verbose_name = 'آیتم سبد خرید'
        verbose_name_plural = 'آیتم‌های سبد خرید'
        unique_together = ['user', 'product', 'size', 'color']

    def __str__(self):
        return f"{self.quantity} عدد {self.product.name} ({self.size}, {self.color}) - کاربر: {self.user.username}"

    def get_unit_price(self):
        """قیمت واحد محصول (با احتساب تخفیف محصول)"""
        if self.product.has_discount():
            return self.product.get_discount_price()
        return self.product.price

    def get_original_total_price(self):
        """قیمت کل اصلی (بدون تخفیف)"""
        return self.product.price * self.quantity

    def get_color_object(self):
        """بازگرداندن object رنگ برای نمایش hex_code"""
        try:
            from products.models import Color
            return Color.objects.get(name=self.color)
        except:
            return None

    def get_size_object(self):
        """بازگرداندن object سایز"""
        try:
            from products.models import Size
            return Size.objects.get(name=self.size)
        except:
            return None

    def get_product_discount_amount(self):
        """مبلغ تخفیف محصول"""
        if self.product.has_discount():
            original_price = self.product.price * self.quantity
            discounted_price = self.product.get_discount_price() * self.quantity
            return original_price - discounted_price
        return 0

    def get_total_price(self):
        """قیمت کل آیتم (با احتساب تخفیف محصول، بدون تخفیف کوپن)"""
        return self.get_unit_price() * self.quantity

    def get_coupon_discount_amount(self):
        """مبلغ تخفیف کوپن"""
        if self.discount > 0:
            return (self.get_total_price() * self.discount) / 100
        return 0

    def get_total_discount_amount(self):
        """مجموع تخفیفات (محصول + کوپن)"""
        return self.get_product_discount_amount() + self.get_coupon_discount_amount()

    def get_final_price(self):
        """قیمت نهایی آیتم (با اعمال همه تخفیفات)"""
        return self.get_total_price() - self.get_coupon_discount_amount()

    def get_savings(self):
        """مجموع صرفه‌جویی"""
        return self.get_total_discount_amount()


class Coupon(models.Model):
    """مدل کد تخفیف"""
    code = models.CharField(max_length=50, unique=True, verbose_name='کد تخفیف')
    description = models.TextField(blank=True, null=True, verbose_name='توضیحات')
    discount_percent = models.PositiveIntegerField(verbose_name='درصد تخفیف')
    valid_from = models.DateTimeField(verbose_name='تاریخ شروع اعتبار')
    valid_to = models.DateTimeField(verbose_name='تاریخ پایان اعتبار')
    min_purchase = models.PositiveIntegerField(default=0, verbose_name='حداقل مبلغ خرید')
    max_discount = models.PositiveIntegerField(default=0, verbose_name='حداکثر مبلغ تخفیف')
    users = models.ManyToManyField(settings.AUTH_USER_MODEL, blank=True, related_name='coupons',
                                   verbose_name='کاربران استفاده کننده')
    active = models.BooleanField(default=True, verbose_name='فعال')
    created_at = models.DateTimeField(auto_now_add=True, verbose_name='تاریخ ایجاد')

    class Meta:
        ordering = ['-created_at']
        verbose_name = 'کد تخفیف'
        verbose_name_plural = 'کدهای تخفیف'

    def __str__(self):
        return f"{self.code} - {self.discount_percent}%"

    def is_valid(self):
        """بررسی معتبر بودن کد تخفیف"""
        now = timezone.now()
        return self.active and self.valid_from <= now <= self.valid_to

    def is_valid_for_user(self, user):
        """بررسی اینکه آیا کاربر می‌تواند از این کد تخفیف استفاده کند"""
        # اگر کاربر قبلاً از این کد استفاده کرده باشد
        if self.users.filter(id=user.id).exists():
            return False
        return True

    def calculate_discount(self, total_amount):
        """محاسبه مبلغ تخفیف بر اساس مبلغ کل خرید"""
        if total_amount < self.min_purchase:
            return 0

        discount_amount = (total_amount * self.discount_percent) / 100

        # اعمال محدودیت حداکثر مبلغ تخفیف
        if self.max_discount > 0 and discount_amount > self.max_discount:
            discount_amount = self.max_discount

        return discount_amount


class WishlistItem(models.Model):
    """مدل آیتم لیست علاقه‌مندی‌ها"""
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='wishlist_items')
    product = models.ForeignKey(Product, on_delete=models.CASCADE)
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        ordering = ['-created_at']
        verbose_name = 'آیتم لیست علاقه‌مندی‌ها'
        verbose_name_plural = 'آیتم‌های لیست علاقه‌مندی‌ها'
        unique_together = ['user', 'product']  # هر محصول فقط یکبار در لیست علاقه‌مندی‌های کاربر باشد

    def __str__(self):
        return f"{self.product.name} - کاربر: {self.user.username}"

====== FILE: cart/apps.py ======

from django.apps import AppConfig


class CartConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'cart'


====== FILE: cart/views.py ======

from collections.abc import Sized

from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.http import JsonResponse
from django.views.decorators.http import require_POST
from django.views.decorators.csrf import csrf_protect
import json
from products.models import Product, ProductInventory, Color, Size
from .models import CartItem, Coupon
from django.utils import timezone


@login_required
def cart_summary(request):
    """نمایش سبد خرید - تغییر نام از cart_summary به cart برای همخوانی با template"""
    cart_items = CartItem.objects.filter(user=request.user)

    # محاسبه مجموع قیمت‌ها
    original_subtotal = sum(item.get_original_total_price() for item in cart_items)  # قیمت اصلی
    subtotal = sum(item.get_total_price() for item in cart_items)  # قیمت با تخفیف محصولات
    product_discount = sum(item.get_product_discount_amount() for item in cart_items)  # تخفیف محصولات
    coupon_discount = sum(item.get_coupon_discount_amount() for item in cart_items)  # تخفیف کوپن
    total_discount = product_discount + coupon_discount  # مجموع تخفیفات

    # هزینه حمل و نقل
    shipping_cost = 30000 if subtotal < 300000 and subtotal > 0 else 0

    # قیمت نهایی
    total = subtotal - coupon_discount + shipping_cost

    # محاسبه مبلغ باقی‌مانده برای ارسال رایگان
    free_shipping_remaining = max(0, 300000 - subtotal) if subtotal > 0 and subtotal < 300000 else 0

    # بررسی کوپن اعمال شده
    applied_coupon = None
    if cart_items.exists() and cart_items.first().discount > 0:
        # پیدا کردن کوپن اعمال شده
        try:
            applied_coupon = Coupon.objects.filter(
                discount_percent=cart_items.first().discount,
                users=request.user
            ).first()
        except:
            applied_coupon = None

    cart_total = {
        'total_items': sum(item.quantity for item in cart_items),
        'original_subtotal': original_subtotal,  # قیمت اصلی
        'subtotal': subtotal,  # قیمت با تخفیف محصولات
        'product_discount': product_discount,  # تخفیف محصولات
        'coupon_discount': coupon_discount,  # تخفیف کوپن
        'total_discount': total_discount,  # مجموع تخفیفات
        'shipping_cost': shipping_cost,
        'total': total,  # قیمت نهایی
        'total_savings': total_discount,  # مجموع صرفه‌جویی
        'free_shipping_remaining': free_shipping_remaining,  # مبلغ باقی‌مانده برای ارسال رایگان
        'tax_amount': 0,  # مالیات (در صورت نیاز)
    }

    context = {
        'cart_items': cart_items,
        'cart_total': cart_total,
        'applied_coupon': applied_coupon,
    }

    # تغییر template به cart.html
    return render(request, 'cart/cart.html', context)


@require_POST
@csrf_protect
def add_to_cart(request):
    try:
        data = json.loads(request.body)
        product_id = data.get('product_id')
        quantity = int(data.get('quantity', 1))
        color_id = data.get('color_id')
        size_id = data.get('size_id')
        inventory_id = data.get('inventory_id')

        product = Product.objects.get(id=product_id, is_active=True)

        if not request.user.is_authenticated:
            return JsonResponse(
                {'success': False, 'error': 'لطفاً ابتدا وارد حساب کاربری خود شوید.', 'redirect': '/users/login/'})

        color_name = None
        size_name = None

        if inventory_id:
            inventory = ProductInventory.objects.get(id=inventory_id)
            color_name = inventory.color.name
            size_name = inventory.size.name

            if quantity > inventory.quantity:
                return JsonResponse({'success': False, 'error': 'موجودی کافی نیست.'})
        else:
            if color_id:
                color = Color.objects.get(id=color_id)
                color_name = color.name

            if size_id:
                size = Size.objects.get(id=size_id)
                size_name = size.name

            if quantity > product.stock:
                return JsonResponse({'success': False, 'error': 'موجودی کافی نیست.'})

        cart_item, created = CartItem.objects.get_or_create(
            user=request.user,
            product=product,
            color=color_name,
            size=size_name,
            defaults={'quantity': quantity, 'inventory_id': inventory_id}
        )

        if not created:
            cart_item.quantity += quantity
            cart_item.save()

        cart_items_count = CartItem.objects.filter(user=request.user).count()

        return JsonResponse({
            'success': True,
            'message': 'محصول با موفقیت به سبد خرید اضافه شد.',
            'cart_items_count': cart_items_count
        })

    except Product.DoesNotExist:
        return JsonResponse({'success': False, 'error': 'محصول یافت نشد.'})
    except ProductInventory.DoesNotExist:
        return JsonResponse({'success': False, 'error': 'موجودی با مشخصات انتخاب شده یافت نشد.'})
    except Exception as e:
        return JsonResponse({'success': False, 'error': str(e)})


@login_required
def update_cart(request, item_id):
    cart_item = get_object_or_404(CartItem, id=item_id, user=request.user)

    if request.method == 'POST':
        # بررسی درخواست Ajax برای تغییر مستقیم quantity
        if request.content_type == 'application/json':
            try:
                data = json.loads(request.body)
                action = data.get('action')

                if action == 'set_quantity':
                    new_quantity = int(data.get('quantity', 1))
                    if 1 <= new_quantity <= 10:  # محدودیت quantity
                        # بررسی موجودی
                        max_quantity = cart_item.inventory.quantity if cart_item.inventory else cart_item.product.stock
                        if new_quantity <= max_quantity:
                            cart_item.quantity = new_quantity
                            cart_item.save()
                            return JsonResponse({'success': True})
                        else:
                            return JsonResponse({'success': False, 'error': 'موجودی کافی نیست'})
                    else:
                        return JsonResponse({'success': False, 'error': 'تعداد نامعتبر'})

            except Exception as e:
                return JsonResponse({'success': False, 'error': str(e)})

        # درخواست معمولی form
        action = request.POST.get('action')

        if action == 'increase':
            max_quantity = cart_item.inventory.quantity if cart_item.inventory else cart_item.product.stock
            if cart_item.quantity < max_quantity:
                cart_item.quantity += 1
                cart_item.save()
                messages.success(request, 'تعداد محصول افزایش یافت.')
        elif action == 'decrease':
            if cart_item.quantity > 1:
                cart_item.quantity -= 1
                cart_item.save()
                messages.success(request, 'تعداد محصول کاهش یافت.')
            else:
                cart_item.delete()
                messages.success(request, 'محصول از سبد خرید حذف شد.')

    return redirect('cart:cart')


@login_required
def remove_from_cart(request, item_id):
    cart_item = get_object_or_404(CartItem, id=item_id, user=request.user)

    if request.method == 'POST':
        product_name = cart_item.product.name
        cart_item.delete()
        messages.success(request, f'محصول "{product_name}" از سبد خرید حذف شد.')

    return redirect('cart:cart')


@login_required
def clear_cart(request):
    if request.method == 'POST':
        cart_count = CartItem.objects.filter(user=request.user).count()
        CartItem.objects.filter(user=request.user).delete()
        messages.success(request, f'{cart_count} محصول از سبد خرید حذف شد.')

    return redirect('cart:cart')


@login_required
def apply_coupon(request):
    if request.method == 'POST':
        code = request.POST.get('code', '').strip().upper()

        if not code:
            messages.error(request, 'لطفاً کد تخفیف را وارد کنید.')
            return redirect('cart:cart')

        try:
            coupon = Coupon.objects.get(
                code=code,
                valid_from__lte=timezone.now(),
                valid_to__gte=timezone.now(),
                active=True
            )

            # بررسی استفاده قبلی
            if coupon.users.filter(id=request.user.id).exists():
                messages.error(request, 'شما قبلاً از این کد تخفیف استفاده کرده‌اید.')
                return redirect('cart:cart')

            # بررسی حداقل مبلغ خرید
            cart_items = CartItem.objects.filter(user=request.user)
            if not cart_items.exists():
                messages.error(request, 'سبد خرید شما خالی است.')
                return redirect('cart:cart')

            subtotal = sum(item.get_total_price() for item in cart_items)

            if subtotal < coupon.min_purchase:
                messages.error(request, f'حداقل مبلغ خرید برای این کد تخفیف {coupon.min_purchase:,} تومان است.')
                return redirect('cart:cart')

            # اعمال کد تخفیف به تمام آیتم‌های سبد
            for item in cart_items:
                item.discount = coupon.discount_percent
                item.save()

            coupon.users.add(request.user)
            messages.success(request, f'کد تخفیف {coupon.discount_percent}% با موفقیت اعمال شد.')

        except Coupon.DoesNotExist:
            messages.error(request, 'کد تخفیف نامعتبر یا منقضی شده است.')

    return redirect('cart:cart')


@login_required
def remove_coupon(request):
    """حذف کد تخفیف اعمال شده"""
    if request.method == 'POST':
        cart_items = CartItem.objects.filter(user=request.user)

        if cart_items.exists():
            # حذف تخفیف از تمام آیتم‌ها
            for item in cart_items:
                if item.discount > 0:
                    item.discount = 0
                    item.save()

            messages.success(request, 'کد تخفیف با موفقیت حذف شد.')
        else:
            messages.error(request, 'سبد خرید شما خالی است.')

    return redirect('cart:cart')


@login_required
def save_for_later(request, item_id):
    """ذخیره محصول برای بعد (انتقال به wishlist)"""
    if request.method == 'POST':
        cart_item = get_object_or_404(CartItem, id=item_id, user=request.user)

        try:
            from .models import WishlistItem

            # بررسی اینکه محصول قبلاً در wishlist نباشد
            wishlist_item, created = WishlistItem.objects.get_or_create(
                user=request.user,
                product=cart_item.product
            )

            if created:
                # حذف از سبد خرید
                product_name = cart_item.product.name
                cart_item.delete()

                if request.content_type == 'application/json':
                    return JsonResponse({
                        'success': True,
                        'message': f'محصول "{product_name}" برای بعد ذخیره شد.'
                    })
                else:
                    messages.success(request, f'محصول "{product_name}" برای بعد ذخیره شد.')
            else:
                if request.content_type == 'application/json':
                    return JsonResponse({
                        'success': False,
                        'message': 'این محصول قبلاً در لیست علاقه‌مندی‌های شما موجود است.'
                    })
                else:
                    messages.info(request, 'این محصول قبلاً در لیست علاقه‌مندی‌های شما موجود است.')

        except Exception as e:
            if request.content_type == 'application/json':
                return JsonResponse({
                    'success': False,
                    'message': 'خطا در ذخیره محصول.'
                })
            else:
                messages.error(request, 'خطا در ذخیره محصول.')

    return redirect('cart:cart')

====== FILE: cart/urls.py ======

from django.urls import path
from . import views

app_name = 'cart'

urlpatterns = [
    # تغییر نام route اصلی
    path('', views.cart_summary, name='cart'),  # تغییر از 'summary' به 'cart'
    path('summary/', views.cart_summary, name='summary'),  # نگه داشتن route قدیمی برای سازگاری

    # اضافه کردن توابع جدید
    path('add/', views.add_to_cart, name='add_to_cart'),
    path('add/<int:product_id>/', views.add_to_cart, name='add'),
    path('update/<int:item_id>/', views.update_cart, name='update_cart'),
    path('remove/<int:item_id>/', views.remove_from_cart, name='remove_from_cart'),
    path('clear/', views.clear_cart, name='clear_cart'),
    path('apply-coupon/', views.apply_coupon, name='apply_coupon'),
    path('remove-coupon/', views.remove_coupon, name='remove_coupon'),  # اضافه شده
    path('save-for-later/<int:item_id>/', views.save_for_later, name='save_for_later'),  # اضافه شده
]

====== FILE: cart/tests.py ======

from django.test import TestCase

# Create your tests here.


====== FILE: cart/context_processors.py ======

# cart/context_processors.py
from products.models import Banner


def cart_items_count(request):
    """تعداد آیتم‌های سبد خرید را برمی‌گرداند"""
    if request.user.is_authenticated:
        count = request.user.cart_items.count()
    else:
        count = 0

    return {'cart_items_count': count}

def banners(request):
    """اضافه کردن بنرها به تمام صفحات"""
    return {
        'global_top_banners': Banner.objects.filter(position='home_top', is_active=True).order_by('order'),
        'global_middle_banners': Banner.objects.filter(position='home_middle', is_active=True).order_by('order'),
        'global_bottom_banners': Banner.objects.filter(position='home_bottom', is_active=True).order_by('order'),
    }

====== FILE: cart/migrations/__init__.py ======



====== FILE: cart/migrations/0004_cartitem_inventory.py ======

# Generated by Django 5.1.5 on 2025-05-20 09:18

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cart', '0003_initial'),
        ('products', '0005_alter_size_options_remove_color_code_and_more'),
    ]

    operations = [
        migrations.AddField(
            model_name='cartitem',
            name='inventory',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='products.productinventory'),
        ),
    ]


====== FILE: cart/migrations/0003_initial.py ======

# Generated by Django 5.1.5 on 2025-05-16 13:09

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('cart', '0002_initial'),
        ('products', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name='cartitem',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cart_items', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='coupon',
            name='users',
            field=models.ManyToManyField(blank=True, related_name='coupons', to=settings.AUTH_USER_MODEL, verbose_name='کاربران استفاده کننده'),
        ),
        migrations.AddField(
            model_name='wishlistitem',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.product'),
        ),
        migrations.AddField(
            model_name='wishlistitem',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wishlist_items', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='cartitem',
            unique_together={('user', 'product', 'size', 'color')},
        ),
        migrations.AlterUniqueTogether(
            name='wishlistitem',
            unique_together={('user', 'product')},
        ),
    ]


====== FILE: cart/migrations/0001_initial.py ======

# Generated by Django 5.1.5 on 2025-05-16 13:09

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CartItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('size', models.CharField(max_length=10)),
                ('color', models.CharField(max_length=50)),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('discount', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'آیتم سبد خرید',
                'verbose_name_plural': 'آیتم\u200cهای سبد خرید',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Coupon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=50, unique=True, verbose_name='کد تخفیف')),
                ('description', models.TextField(blank=True, null=True, verbose_name='توضیحات')),
                ('discount_percent', models.PositiveIntegerField(verbose_name='درصد تخفیف')),
                ('valid_from', models.DateTimeField(verbose_name='تاریخ شروع اعتبار')),
                ('valid_to', models.DateTimeField(verbose_name='تاریخ پایان اعتبار')),
                ('min_purchase', models.PositiveIntegerField(default=0, verbose_name='حداقل مبلغ خرید')),
                ('max_discount', models.PositiveIntegerField(default=0, verbose_name='حداکثر مبلغ تخفیف')),
                ('active', models.BooleanField(default=True, verbose_name='فعال')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='تاریخ ایجاد')),
            ],
            options={
                'verbose_name': 'کد تخفیف',
                'verbose_name_plural': 'کدهای تخفیف',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='WishlistItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'آیتم لیست علاقه\u200cمندی\u200cها',
                'verbose_name_plural': 'آیتم\u200cهای لیست علاقه\u200cمندی\u200cها',
                'ordering': ['-created_at'],
            },
        ),
    ]


====== FILE: cart/migrations/0002_initial.py ======

# Generated by Django 5.1.5 on 2025-05-16 13:09

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('cart', '0001_initial'),
        ('products', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='cartitem',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.product'),
        ),
    ]


====== FILE: chat/consumers.py ======

import json
import logging
import asyncio
from channels.generic.websocket import AsyncWebsocketConsumer
from channels.db import database_sync_to_async
from django.utils import timezone
from django.contrib.auth import get_user_model
from .models import ChatRoom, ChatMessage, UserStatus, Notification

User = get_user_model()
logger = logging.getLogger(__name__)
INACTIVITY_TIMEOUT = 300  # 5 دقیقه


# ─────────────── ChatConsumer ───────────────
class ChatConsumer(AsyncWebsocketConsumer):
    async def connect(self):
        self.room_id = self.scope['url_route']['kwargs']['room_id']
        self.room_group_name = f'chat_{self.room_id}'
        self.user = self.scope['user']

        if not self.user.is_authenticated or not await self.can_access_room():
            await self.close()
            return

        await self.channel_layer.group_add(self.room_group_name, self.channel_name)
        await self.accept()

    async def disconnect(self, close_code):
        if hasattr(self, 'room_group_name'):
            await self.channel_layer.group_discard(self.room_group_name, self.channel_name)

    async def receive(self, text_data):
        try:
            data = json.loads(text_data)
            message_type = data.get('type', '')

            if message_type == 'chat_message':
                content = data.get('message', '')
                file_id = data.get('file_id')
                message = await self.save_message(content, file_id)
                # ارسال پیام به اتاق برای نمایش لحظه‌ای
                await self.channel_layer.group_send(
                    self.room_group_name, {
                        'type': 'chat_message',
                        'message': self.serialize_message(message)
                    }
                )
                # ✅ اصلاح: چک کردن وجود receiver قبل از ارسال اعلان
                receiver_id = await self.get_receiver_id(self.room_id)
                if receiver_id:  # فقط اگر گیرنده وجود داشت
                    await self.channel_layer.group_send(
                        f"notifications_{receiver_id}",
                        {
                            'type': 'chat_unread_update',
                            'room_id': str(self.room_id),
                            'count': await self.get_room_unread_count(receiver_id, self.room_id)
                        }
                    )

            elif message_type == 'mark_read':
                message_id = data.get('message_id')
                success, read_at = await self.mark_message_read(message_id)
                if success:
                    # اطلاع برای همه اعضای روم
                    await self.channel_layer.group_send(
                        self.room_group_name, {
                            'type': 'message_read',
                            'message_id': message_id,
                            'user_id': str(self.user.id),
                            'read_at': read_at.isoformat()
                        }
                    )
                    # بروزرسانی unread روم برای فرستنده
                    sender_id = await self.get_message_sender_id(message_id)
                    if sender_id:
                        await self.channel_layer.group_send(
                            f"notifications_{sender_id}",
                            {
                                'type': 'message_read',
                                'room_id': str(self.room_id),
                                'message_id': message_id,
                                'user_id': str(self.user.id),
                                'read_at': read_at.isoformat()
                            }
                        )

            elif message_type == 'close_room':
                room, error = await self.close_room_in_db()
                if error:
                    await self.send(text_data=json.dumps({'type': 'error', 'message': error}))
                else:
                    # به همه کاربران در روم اطلاع بده که وضعیت تغییر کرده
                    await self.channel_layer.group_send(
                        self.room_group_name,
                        {
                            'type': 'room_status_update',
                            'status': 'closed',
                            'message': f"گفتگو توسط {self.user.username} بسته شد.",
                            'closed_by_staff': self.user.is_staff  # ✅ اضافه شده
                        }
                    )

            # ✅ اضافه شده: پردازش بازگشایی گفتگو
            elif message_type == 'reopen_room':
                room, error = await self.reopen_room_in_db()
                if error:
                    await self.send(text_data=json.dumps({'type': 'error', 'message': error}))
                else:
                    # به همه کاربران در روم اطلاع بده که وضعیت تغییر کرده
                    await self.channel_layer.group_send(
                        self.room_group_name,
                        {
                            'type': 'room_status_update',
                            'status': 'open',
                            'message': f"گفتگو توسط {self.user.username} بازگشایی شد.",
                            'closed_by_staff': False  # ✅ اضافه شده
                        }
                    )

            # ✅ اضافه شده: پردازش تایپینگ
            elif message_type == 'typing':
                is_typing = data.get('is_typing', False)
                await self.channel_layer.group_send(
                    self.room_group_name,
                    {
                        'type': 'user_typing',
                        'user_id': str(self.user.id),
                        'username': self.user.username,
                        'is_typing': is_typing
                    }
                )

        except Exception as e:
            logger.exception(e)
            await self.send(text_data=json.dumps({'type': 'error', 'message': str(e)}))

    async def chat_message(self, event):
        await self.send(text_data=json.dumps({
            'type': 'chat_message',
            'message': event['message']
        }))

    async def message_read(self, event):
        await self.send(text_data=json.dumps({'type': 'message_read', **event}))

    # ✅ اضافه شده: هندلر تایپینگ
    async def user_typing(self, event):
        await self.send(text_data=json.dumps({'type': 'user_typing', **event}))

    @database_sync_to_async
    def can_access_room(self):
        try:
            room = ChatRoom.objects.get(id=self.room_id)
            return self.user.is_staff or room.user == self.user or room.agent == self.user
        except ChatRoom.DoesNotExist:
            return False

    @database_sync_to_async
    def save_message(self, content, file_id=None):
        from .models import TemporaryFile  # Import محلی برای جلوگیری از مشکل

        room = ChatRoom.objects.get(id=self.room_id)
        message = ChatMessage.objects.create(
            room=room,
            sender=self.user,
            content=content,
            message_type='text'
        )

        # ✅ اصلاح: پردازش فایل اگر وجود داشته باشد
        if file_id:
            try:
                temp_file = TemporaryFile.objects.get(id=file_id, user=self.user)
                message.file = temp_file.file
                message.save()
                temp_file.delete()  # حذف فایل موقت
            except TemporaryFile.DoesNotExist:
                pass

        return message

    @database_sync_to_async
    def get_receiver_id(self, room_id):
        try:
            room = ChatRoom.objects.select_related('agent', 'user').get(id=room_id)
            # ✅ اصلاح: چک کردن وجود agent قبل از دسترسی
            if room.agent and self.user != room.agent:
                return str(room.agent.id)
            elif room.user and self.user != room.user:
                return str(room.user.id)
            else:
                return None  # اگر هیچ گیرنده‌ای وجود نداشت
        except ChatRoom.DoesNotExist:
            return None

    @database_sync_to_async
    def mark_message_read(self, message_id):
        try:
            msg = ChatMessage.objects.get(id=message_id)
            if msg.sender != self.user and not msg.is_read:
                msg.is_read = True
                msg.read_at = timezone.now()
                msg.save(update_fields=['is_read', 'read_at'])
                return True, msg.read_at
            return False, None
        except ChatMessage.DoesNotExist:
            return False, None

    @database_sync_to_async
    def get_message_sender_id(self, message_id):
        try:
            return ChatMessage.objects.get(id=message_id).sender.id
        except ChatMessage.DoesNotExist:
            return None

    @database_sync_to_async
    def get_room_unread_count(self, user_id, room_id):
        return ChatMessage.objects.filter(room_id=room_id, is_read=False).exclude(sender_id=user_id).count()

    @database_sync_to_async
    def close_room_in_db(self):
        try:
            room = ChatRoom.objects.get(id=self.room_id)
            if not (self.user.is_staff or room.user == self.user):
                return None, "Access Denied"

            room.close(self.user)

            # پیام سیستمی برای بستن چت
            closed_by_username = self.user.username
            message_content = f"گفتگو توسط {closed_by_username} بسته شد."
            ChatMessage.objects.create(room=room, content=message_content, message_type='system')

            return room, None
        except ChatRoom.DoesNotExist:
            return None, "Room not found"

    # ✅ اضافه شده: تابع بازگشایی گفتگو
    @database_sync_to_async
    def reopen_room_in_db(self):
        try:
            room = ChatRoom.objects.get(id=self.room_id)

            # چک کردن مجوز بازگشایی
            can_reopen = False
            if self.user.is_staff:
                can_reopen = True
            elif room.user == self.user and (not room.closed_by or not room.closed_by.is_staff):
                can_reopen = True

            if not can_reopen:
                return None, "شما مجوز بازگشایی این گفتگو را ندارید"

            # بازگشایی گفتگو
            room.status = 'open'
            room.closed_by = None
            room.closed_at = None
            room.save(update_fields=['status', 'closed_by', 'closed_at'])

            # پیام سیستمی برای بازگشایی چت
            reopened_by_username = self.user.username
            message_content = f"گفتگو توسط {reopened_by_username} بازگشایی شد."
            ChatMessage.objects.create(room=room, content=message_content, message_type='system')

            return room, None
        except ChatRoom.DoesNotExist:
            return None, "اتاق گفتگو یافت نشد"

    async def room_status_update(self, event):
        """
        Handles room status updates (e.g., closed, reopened).
        """
        await self.send(text_data=json.dumps({
            'type': 'room_status',
            'status': event['status'],
            'message': event.get('message', ''),
            'closed_by_staff': event.get('closed_by_staff', False)  # ✅ اضافه شده
        }))

    def serialize_message(self, msg):
        return {
            'id': str(msg.id),
            'content': msg.content,
            'sender_id': str(msg.sender.id),
            'sender_name': msg.sender.username,
            'message_type': msg.message_type,
            'file_url': msg.file.url if msg.file else None,
            'is_read': msg.is_read,
            'created_at': msg.created_at.isoformat()
        }


# ─────────────── OnlineStatusConsumer ───────────────
class OnlineStatusConsumer(AsyncWebsocketConsumer):
    user_connections = {}

    async def connect(self):
        self.user = self.scope['user']
        if not self.user.is_authenticated:
            await self.close()
            return

        self.user_id = str(self.user.id)
        self.group_name = "online_status"

        if self.user_id in self.user_connections:
            old_consumer = self.user_connections[self.user_id]
            try:
                await old_consumer.close(code=4000)
            except:
                pass
        self.user_connections[self.user_id] = self

        await self.channel_layer.group_add(self.group_name, self.channel_name)
        await self.accept()
        await self.update_user_status('online')
        await self.send_all_statuses()

        self.check_inactive = asyncio.create_task(self.check_inactivity_loop())

    async def disconnect(self, close_code):
        if hasattr(self, 'check_inactive'):
            self.check_inactive.cancel()

        await self.set_user_offline()
        if hasattr(self, 'user_id') and self.user_id in self.user_connections:
            del self.user_connections[self.user_id]

        if hasattr(self, 'group_name'):
            await self.channel_layer.group_discard(self.group_name, self.channel_name)

    async def receive(self, text_data):
        data = json.loads(text_data)
        if data.get('type') == 'heartbeat':
            await self.update_last_heartbeat()
        elif data.get('type') == 'activity':
            await self.update_last_seen()
        elif data.get('type') == 'set_status':
            await self.update_user_status(data.get('status', 'online'))
        elif data.get('type') == 'offline':
            await self.update_user_status('offline')

    async def check_inactivity_loop(self):
        while True:
            await asyncio.sleep(60)
            user_status = await self.get_user_status_from_db()
            if user_status and (timezone.now() - user_status.last_seen).total_seconds() > INACTIVITY_TIMEOUT:
                await self.update_user_status('offline')

    @database_sync_to_async
    def get_user_status_from_db(self):
        try:
            return UserStatus.objects.get(user=self.user)
        except UserStatus.DoesNotExist:
            return None

    @database_sync_to_async
    def update_last_seen(self):
        return UserStatus.objects.update_or_create(user=self.user, defaults={'last_seen': timezone.now()})

    @database_sync_to_async
    def update_last_heartbeat(self):
        return UserStatus.objects.update_or_create(user=self.user, defaults={'last_heartbeat': timezone.now()})

    @database_sync_to_async
    def set_user_offline(self):
        if hasattr(self, 'user'):
            return UserStatus.objects.filter(user=self.user).update(status='offline')

    @database_sync_to_async
    def update_status_in_db(self, status):
        return UserStatus.objects.update_or_create(user=self.user,
                                                   defaults={'status': status, 'last_seen': timezone.now()})

    async def update_user_status(self, status):
        await self.update_status_in_db(status)
        await self.channel_layer.group_send(
            self.group_name,
            {'type': 'online_status_update', 'user_id': self.user_id, 'status': status}
        )

    async def online_status_update(self, event):
        await self.send(text_data=json.dumps(event))

    async def send_all_statuses(self):
        statuses = await self.get_all_statuses()
        await self.send(text_data=json.dumps({'type': 'all_statuses', 'statuses': statuses}))

    @database_sync_to_async
    def get_all_statuses(self):
        statuses = {uid: 'online' for uid in self.user_connections.keys()}
        for user in User.objects.all():
            uid = str(user.id)
            if uid not in statuses:
                statuses[uid] = 'offline'
        return statuses


# ─────────────── NotificationConsumer ───────────────
class NotificationConsumer(AsyncWebsocketConsumer):
    async def connect(self):
        self.user = self.scope['user']
        if not self.user.is_authenticated:
            await self.close()
            return

        self.group_name = f"notifications_{self.user.id}"
        await self.channel_layer.group_add(self.group_name, self.channel_name)
        await self.accept()
        await self.send_unread_count()

    async def disconnect(self, close_code):
        if hasattr(self, 'group_name'):
            await self.channel_layer.group_discard(self.group_name, self.channel_name)

    async def chat_unread_update(self, event):
        await self.send(text_data=json.dumps({
            'type': 'chat_unread_update',
            'room_id': event['room_id'],
            'count': event['count']
        }))

    async def message_read(self, event):
        await self.send(text_data=json.dumps({
            'type': 'message_read',
            'room_id': event.get('room_id'),
            'message_id': event.get('message_id'),
            'user_id': event.get('user_id'),
            'read_at': event.get('read_at')
        }))

    async def notification_message(self, event):
        await self.send(text_data=json.dumps(event))

    async def unread_count_update(self, event):
        await self.send_unread_count()

    @database_sync_to_async
    def get_unread_count(self):
        return Notification.objects.filter(user=self.user, is_read=False).count()

    async def send_unread_count(self):
        count = await self.get_unread_count()
        await self.send(text_data=json.dumps({
            'type': 'unread_count',
            'count': count
        }))


class AdminDashboardConsumer(AsyncWebsocketConsumer):
    async def connect(self):
        self.user = self.scope['user']
        if self.user.is_authenticated and self.user.is_staff:
            self.group_name = 'admin_dashboard'
            await self.channel_layer.group_add(
                self.group_name,
                self.channel_name
            )
            await self.accept()
        else:
            await self.close()

    async def disconnect(self, close_code):
        if hasattr(self, 'group_name'):
            await self.channel_layer.group_discard(
                self.group_name,
                self.channel_name
            )

    async def dashboard_update(self, event):
        await self.send(text_data=json.dumps({
            'type': event['event_type'],
            'data': event['data']
        }))

====== FILE: chat/middleware.py ======

# chat/middleware.py
import json

from django.contrib.auth.models import AnonymousUser
from django.utils import timezone
from .models import UserStatus
from channels.middleware import BaseMiddleware
from channels.db import database_sync_to_async


class OnlineStatusMiddleware(BaseMiddleware):
    """
    میدلور برای مدیریت وضعیت آنلاین/آفلاین کاربران
    """

    def __init__(self, inner):
        super().__init__(inner)
        self.active_connections = {}  # نگهداری اتصال‌های فعال

    async def __call__(self, scope, receive, send):
        # فقط برای اتصال‌های وب‌سوکت
        if scope['type'] != 'websocket':
            return await self.inner(scope, receive, send)

        # دریافت کاربر
        user = scope.get('user', AnonymousUser())
        if not user.is_authenticated:
            return await self.inner(scope, receive, send)

        connection_id = id(scope)
        user_id = str(user.id)

        # ثبت این اتصال
        if user_id not in self.active_connections:
            self.active_connections[user_id] = set()
        self.active_connections[user_id].add(connection_id)

        # تعریف یک تابع جدید برای دریافت پیام‌ها
        original_receive = receive

        async def wrapped_receive():
            message = await original_receive()

            # پردازش پیام‌های وب‌سوکت
            if message['type'] == 'websocket.receive' and 'text' in message:
                try:
                    data = json.loads(message['text'])

                    # ذخیره شناسه اتصال در scope
                    if 'connection_id' in data:
                        scope['connection_id'] = data['connection_id']
                except:
                    pass

            return message

        # تعریف یک تابع جدید برای ارسال پیام‌ها
        original_send = send

        async def wrapped_send(message):
            # ارسال پیام
            await original_send(message)

            # اگر اتصال بسته شد، این اتصال را از لیست حذف کنید
            if message['type'] == 'websocket.close':
                if user_id in self.active_connections and connection_id in self.active_connections[user_id]:
                    self.active_connections[user_id].remove(connection_id)
                    if not self.active_connections[user_id]:
                        del self.active_connections[user_id]

        # اجرای میدلور داخلی با توابع جدید
        return await self.inner(scope, wrapped_receive, wrapped_send)

class ConnectionLimitMiddleware(BaseMiddleware):
    """
    میدلور برای محدود کردن تعداد اتصال‌های همزمان برای هر کاربر
    """

    def __init__(self, inner):
        super().__init__(inner)
        self.connections = {}  # نگهداری تعداد اتصال‌های هر کاربر

    async def __call__(self, scope, receive, send):
        # فقط برای اتصال‌های وب‌سوکت
        if scope['type'] != 'websocket':
            return await self.inner(scope, receive, send)

        # دریافت کاربر
        user = scope.get('user', None)
        if not user or not user.is_authenticated:
            return await self.inner(scope, receive, send)

        user_id = str(user.id)

        # افزایش تعداد اتصال‌ها
        if user_id not in self.connections:
            self.connections[user_id] = 0
        self.connections[user_id] += 1

        # اجرای میدلور داخلی
        try:
            return await self.inner(scope, receive, send)
        finally:
            # کاهش تعداد اتصال‌ها هنگام قطع اتصال
            if user_id in self.connections:
                self.connections[user_id] -= 1
                if self.connections[user_id] <= 0:
                    del self.connections[user_id]

class UserStatusMiddleware:
    def __init__(self, get_response):
        self.get_response = get_response

    def __call__(self, request):
        response = self.get_response(request)

        # بروزرسانی وضعیت کاربر فقط برای کاربران احراز هویت شده
        if request.user.is_authenticated:
            user_status, created = UserStatus.objects.get_or_create(user=request.user)
            user_status.last_seen = timezone.now()  # فقط به‌روزرسانی زمان
            user_status.save(update_fields=['last_seen'])

        return response



    def __call__(self, request):
        response = self.get_response(request)

        # بروزرسانی وضعیت کاربر فقط برای کاربران احراز هویت شده
        if request.user.is_authenticated:
            user_status, created = UserStatus.objects.get_or_create(user=request.user)

            # بروزرسانی زمان آخرین بازدید و تنظیم وضعیت به آنلاین
            user_status.status = 'online'
            user_status.save(update_fields=['status', 'last_seen'])  # last_seen با auto_now=True خودکار بروز می‌شود

        return response

====== FILE: chat/__init__.py ======



====== FILE: chat/admin.py ======

from django.contrib import admin
from .models import ChatRoom, ChatMessage, Notification, UserStatus, TemporaryFile


@admin.register(ChatRoom)
class ChatRoomAdmin(admin.ModelAdmin):
    list_display = ('name', 'user', 'agent', 'status', 'created_at', 'updated_at')
    list_filter = ('status', 'room_type', 'is_deleted_by_user', 'is_deleted_by_agent')
    search_fields = ('name', 'user__username', 'agent__username')
    date_hierarchy = 'created_at'
    readonly_fields = ('id', 'created_at', 'updated_at')


@admin.register(ChatMessage)
class ChatMessageAdmin(admin.ModelAdmin):
    list_display = ('get_short_content', 'room', 'sender', 'message_type', 'is_read', 'created_at')
    list_filter = ('message_type', 'is_read')
    search_fields = ('content', 'room__name', 'sender__username')
    date_hierarchy = 'created_at'
    readonly_fields = ('id', 'created_at')

    def get_short_content(self, obj):
        return obj.content[:50] + '...' if len(obj.content) > 50 else obj.content

    get_short_content.short_description = 'محتوا'


@admin.register(Notification)
class NotificationAdmin(admin.ModelAdmin):
    list_display = ('title', 'user', 'notification_type', 'is_read', 'created_at')
    list_filter = ('notification_type', 'is_read')
    search_fields = ('title', 'message', 'user__username')
    date_hierarchy = 'created_at'
    readonly_fields = ('id', 'created_at')


@admin.register(UserStatus)
class UserStatusAdmin(admin.ModelAdmin):
    list_display = ('user', 'status', 'last_seen')
    list_filter = ('status',)
    search_fields = ('user__username',)
    date_hierarchy = 'last_seen'



@admin.register(TemporaryFile)
class TemporaryFileAdmin(admin.ModelAdmin):
    list_display = ('user', 'file', 'created_at')
    list_filter = ('created_at',)
    search_fields = ('user__username', 'file')
    date_hierarchy = 'created_at'
    readonly_fields = ('id', 'created_at')

====== FILE: chat/signals.py ======

from django.contrib.auth import get_user_model
from django.db.models.signals import post_save, pre_save
from django.dispatch import receiver
from django.utils import timezone
from .models import ChatMessage, ChatRoom, Notification, UserStatus
from channels.layers import get_channel_layer
from asgiref.sync import async_to_sync
import json

# متغیرهای کنترل برای جلوگیری از حلقه بی‌نهایت
updating_room = False
creating_system_message = False
User = get_user_model()



@receiver(post_save, sender=User)
def create_user_status(sender, instance, created, **kwargs):
    """ایجاد وضعیت آنلاین برای کاربران جدید"""
    if created:
        UserStatus.objects.create(user=instance, status='offline')


@receiver(post_save, sender=ChatMessage)
def message_post_save(sender, instance, created, **kwargs):
    """
    به‌روزرسانی زمان آخرین فعالیت اتاق گفتگو پس از ذخیره پیام جدید
    """
    global updating_room

    # اگر در حال به‌روزرسانی اتاق هستیم، از ادامه جلوگیری می‌کنیم
    if updating_room:
        return

    try:
        room = instance.room

        # علامت‌گذاری به‌روزرسانی اتاق
        updating_room = True

        # به‌روزرسانی زمان آخرین فعالیت اتاق
        room.updated_at = timezone.now()
        room.save(update_fields=['updated_at'])
    finally:
        # بازنشانی متغیر
        updating_room = False

    # ارسال اعلان به کاربر مقابل
    if created and instance.sender and instance.message_type != 'system':
        room = instance.room

        # تعیین گیرنده اعلان (کاربر مقابل فرستنده)
        recipient = None
        if instance.sender == room.user and room.agent:
            recipient = room.agent
        elif instance.sender == room.agent and room.user:
            recipient = room.user

        if recipient:
            # ایجاد اعلان
            Notification.objects.create(
                user=recipient,
                title="پیام جدید",
                message=f"پیام جدید از {instance.sender.username}: {instance.content[:50]}{'...' if len(instance.content) > 50 else ''}",
                notification_type="chat",
                data={
                    "room_id": str(room.id),
                    "message_id": str(instance.id)
                }
            )


@receiver(pre_save, sender=ChatRoom)
def room_pre_save(sender, instance, **kwargs):
    """
    ایجاد پیام سیستمی در صورت تغییر وضعیت اتاق گفتگو
    """
    global creating_system_message

    if creating_system_message:
        return

    # بررسی تغییر وضعیت اتاق
    if not instance._state.adding:  # اگر در حال ویرایش است (نه ایجاد جدید)
        try:
            old_instance = ChatRoom.objects.get(pk=instance.pk)

            # تغییر وضعیت از باز به بسته
            if old_instance.status == 'open' and instance.status == 'closed':
                creating_system_message = True

                try:
                    # ایجاد پیام سیستمی با بررسی closed_by
                    message = "این گفتگو توسط پشتیبانی بسته شده است." if instance.closed_by and instance.closed_by.is_staff else "این گفتگو توسط کاربر بسته شده است."
                    ChatMessage.objects.create(
                        room=instance,
                        content=message,
                        message_type="system"
                    )
                finally:
                    creating_system_message = False

            # تغییر وضعیت از بسته به باز
            elif old_instance.status == 'closed' and instance.status == 'open':
                creating_system_message = True

                try:
                    # ایجاد پیام سیستمی
                    message = "این گفتگو توسط پشتیبانی بازگشایی شده است." if instance.closed_by and instance.closed_by.is_staff else "این گفتگو توسط کاربر بازگشایی شده است."
                    ChatMessage.objects.create(
                        room=instance,
                        content=message,
                        message_type="system"
                    )
                finally:
                    creating_system_message = False
        except ChatRoom.DoesNotExist:
            pass  # اتاق جدید است


@receiver(post_save, sender=Notification)
def notification_post_save(sender, instance, created, **kwargs):
    """
    ارسال اعلان جدید به کاربر از طریق WebSocket
    """
    if created:
        # ارسال اعلان به کانال کاربر
        channel_layer = get_channel_layer()

        # تهیه داده‌های اعلان برای ارسال
        notification_data = {
            'type': 'notification_message',
            'notification': {
                'id': str(instance.id),
                'title': instance.title,
                'message': instance.message,
                'notification_type': instance.notification_type,
                'is_read': instance.is_read,
                'created_at': instance.created_at.isoformat(),
                'data': instance.data
            }
        }

        # ارسال به گروه کاربر
        try:
            async_to_sync(channel_layer.group_send)(
                f'notifications_{instance.user.id}',
                notification_data
            )
        except:
            pass  # اگر کاربر آنلاین نباشد، خطا نادیده گرفته می‌شود

====== FILE: chat/utils.py ======

from django.utils import timezone
from channels.layers import get_channel_layer
from asgiref.sync import async_to_sync


def create_system_message(room, content):
    """
    ایجاد یک پیام سیستمی در دیتابیس
    """
    from .models import ChatMessage

    # ایجاد پیام سیستمی بدون فرستنده
    message = ChatMessage.objects.create(
        room=room,
        content=content,
        message_type='system',
        sender=None,  # پیام سیستمی بدون فرستنده
        is_read=True  # پیام‌های سیستمی همیشه خوانده شده محسوب می‌شوند
    )

    # ارسال رویداد به کانال
    try:
        channel_layer = get_channel_layer()
        async_to_sync(channel_layer.group_send)(
            f'chat_{room.id}',
            {
                'type': 'chat_message',
                'message': {
                    'id': str(message.id),
                    'content': message.content,
                    'message_type': message.message_type,
                    'created_at': message.created_at.isoformat(),
                    'is_system': True
                }
            }
        )
    except Exception as e:
        print(f"Error sending system message to channel: {e}")

    return message


def notify_chat_closed_by_user(room):
    """
    اطلاع‌رسانی به ادمین درباره بسته شدن چت توسط کاربر
    """
    if room.admin:
        from .models import Notification

        # ایجاد نوتیفیکیشن برای ادمین
        Notification.objects.create(
            user=room.admin,
            title="بستن چت",
            message=f"کاربر {room.user.username} چت را بسته است.",
            notification_type="chat",
            data={
                'room_id': str(room.id),
                'action': 'closed_by_user'
            },
            is_read=False
        )

        # ارسال نوتیفیکیشن از طریق وب‌سوکت
        try:
            channel_layer = get_channel_layer()
            async_to_sync(channel_layer.group_send)(
                f'notifications_{room.admin.id}',
                {
                    'type': 'notification_message',
                    'title': "بستن چت",
                    'message': f"کاربر {room.user.username} چت را بسته است.",
                    'data': {
                        'room_id': str(room.id),
                        'action': 'closed_by_user'
                    }
                }
            )
        except Exception as e:
            print(f"Error sending notification to admin: {e}")


def notify_chat_closed_by_admin(room):
    """
    اطلاع‌رسانی به کاربر درباره بسته شدن چت توسط ادمین
    """
    if room.user:
        from .models import Notification

        admin_name = room.admin.get_full_name() if room.admin and room.admin.get_full_name() else "پشتیبانی"

        # ایجاد نوتیفیکیشن برای کاربر
        Notification.objects.create(
            user=room.user,
            title="بستن چت",
            message=f"{admin_name} چت را بسته است.",
            notification_type="chat",
            data={
                'room_id': str(room.id),
                'action': 'closed_by_admin'
            },
            is_read=False
        )

        # ارسال نوتیفیکیشن از طریق وب‌سوکت
        try:
            channel_layer = get_channel_layer()
            async_to_sync(channel_layer.group_send)(
                f'notifications_{room.user.id}',
                {
                    'type': 'notification_message',
                    'title': "بستن چت",
                    'message': f"{admin_name} چت را بسته است.",
                    'data': {
                        'room_id': str(room.id),
                        'action': 'closed_by_admin'
                    }
                }
            )
        except Exception as e:
            print(f"Error sending notification to user: {e}")


def notify_chat_reopened(room):
    """
    اطلاع‌رسانی به کاربر درباره بازگشایی چت
    """
    if room.user:
        from .models import Notification

        admin_name = room.admin.get_full_name() if room.admin and room.admin.get_full_name() else "پشتیبانی"

        # ایجاد نوتیفیکیشن برای کاربر
        Notification.objects.create(
            user=room.user,
            title="بازگشایی چت",
            message=f"{admin_name} چت را بازگشایی کرده است.",
            notification_type="chat",
            data={
                'room_id': str(room.id),
                'action': 'reopened'
            },
            is_read=False
        )

        # ارسال نوتیفیکیشن از طریق وب‌سوکت
        try:
            channel_layer = get_channel_layer()
            async_to_sync(channel_layer.group_send)(
                f'notifications_{room.user.id}',
                {
                    'type': 'notification_message',
                    'title': "بازگشایی چت",
                    'message': f"{admin_name} چت را بازگشایی کرده است.",
                    'data': {
                        'room_id': str(room.id),
                        'action': 'reopened'
                    }
                }
            )
        except Exception as e:
            print(f"Error sending notification to user: {e}")

====== FILE: chat/models.py ======

import uuid
from django.db import models
from django.conf import settings
from django.utils import timezone


class UserStatus(models.Model):
    user = models.OneToOneField(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        related_name='online_status'
    )
    is_online = models.BooleanField(default=False)
    last_activity = models.DateTimeField(null=True, blank=True)
    typing_in_room = models.CharField(max_length=255, null=True, blank=True)
    status = models.CharField(
        max_length=10,
        choices=[('online', 'Online'), ('offline', 'Offline')],
        default='offline'
    )
    last_seen = models.DateTimeField(default=timezone.now)
    last_heartbeat = models.DateTimeField(default=timezone.now)

    class Meta:
        verbose_name = "User Online Status"
        verbose_name_plural = "User Online Statuses"

    def __str__(self):
        return f"{self.user.username}: {self.get_status_display()}"


class ChatRoom(models.Model):
    ROOM_TYPES = [('support', 'Support'), ('general', 'General')]
    STATUS_CHOICES = [('open', 'Open'), ('closed', 'Closed'), ('archived', 'Archived')]

    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    name = models.CharField(max_length=255)
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name="user_chats")
    agent = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, blank=True, related_name="agent_chats")
    room_type = models.CharField(max_length=20, choices=ROOM_TYPES, default='support')
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='open')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    closed_at = models.DateTimeField(null=True, blank=True)
    closed_by = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, blank=True, related_name="closed_chats")
    is_deleted_by_user = models.BooleanField(default=False)
    is_deleted_by_agent = models.BooleanField(default=False)
    hidden_for_users = models.ManyToManyField(settings.AUTH_USER_MODEL, related_name='hidden_chat_rooms', blank=True)

    class Meta:
        ordering = ['-updated_at']
        verbose_name = "Chat Room"
        verbose_name_plural = "Chat Rooms"

    def __str__(self):
        return f"{self.name} - {self.user.username}"

    # ===== RESTORED METHODS START HERE =====
    def close(self, user):
        self.status = 'closed'
        self.closed_at = timezone.now()
        self.closed_by = user
        self.save()
        return True

    def reopen(self, user):
        if self.status == 'closed':
            self.status = 'open'
            self.closed_at = None
            self.closed_by = None
            self.save()
            return True
        return False

    def archive(self):
        if self.status == 'closed':
            self.status = 'archived'
            self.save()
            return True
        return False

    def mark_deleted_by_user(self):
        self.is_deleted_by_user = True
        self.save()
        return True

    def mark_deleted_by_agent(self):
        self.is_deleted_by_agent = True
        self.save()
        return True
    # ===== RESTORED METHODS END HERE =====

    @property
    def is_open(self):
        return self.status == 'open'

    @property
    def is_closed(self):
        return self.status == 'closed'

    @property
    def is_archived(self):
        return self.status == 'archived'

    @property
    def unread_count_for_user(self):
        if self.agent:
            return self.messages.filter(is_read=False, sender=self.agent).count()
        return 0

    @property
    def unread_count_for_agent(self):
        return self.messages.filter(is_read=False, sender=self.user).count()


class ChatMessage(models.Model):
    MESSAGE_TYPES = [('text', 'Text'), ('image', 'Image'), ('file', 'File'), ('system', 'System')]

    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    room = models.ForeignKey(ChatRoom, on_delete=models.CASCADE, related_name="messages")
    sender = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, blank=True, related_name="sent_messages")
    content = models.TextField()
    file = models.FileField(upload_to='chat_files/%Y/%m/%d/', null=True, blank=True)
    message_type = models.CharField(max_length=10, choices=MESSAGE_TYPES, default='text')
    is_read = models.BooleanField(default=False)
    read_at = models.DateTimeField(null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        ordering = ['created_at']
        verbose_name = "Chat Message"
        verbose_name_plural = "Chat Messages"

    def __str__(self):
        sender_name = self.sender.username if self.sender else "System"
        return f"{sender_name}: {self.content[:50]}"

    def mark_as_read(self):
        if not self.is_read:
            self.is_read = True
            self.read_at = timezone.now()
            self.save(update_fields=['is_read', 'read_at'])
            return True
        return False

class Notification(models.Model):

    NOTIFICATION_TYPES = [('chat', 'Chat'), ('system', 'System')]
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name="notifications")
    title = models.CharField(max_length=255)
    message = models.TextField()
    notification_type = models.CharField(max_length=20, choices=NOTIFICATION_TYPES, default='system')
    data = models.JSONField(default=dict, blank=True, null=True)
    is_read = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        ordering = ['-created_at']
        verbose_name = "Notification"
        verbose_name_plural = "Notifications"

    def __str__(self):
        return f"{self.title} - {self.user.username}"


class TemporaryFile(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name="temp_files")
    file = models.FileField(upload_to='temp_files/%Y/%m/%d/')
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        ordering = ['-created_at']
        verbose_name = "Temporary File"
        verbose_name_plural = "Temporary Files"

    def __str__(self):
        return f"{self.user.username} - {self.file.name}"

====== FILE: chat/apps.py ======

from django.apps import AppConfig


class ChatConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'chat'

    def ready(self):
        import chat.signals

====== FILE: chat/views.py ======

from zima import settings

from asgiref.sync import async_to_sync
from django.shortcuts import render, redirect, get_object_or_404
from django.http import JsonResponse, HttpResponse
from django.contrib.auth.decorators import login_required
from django.views.decorators.http import require_POST, require_GET
from django.views.decorators.csrf import csrf_exempt
from django.utils import timezone
from django.db.models import Q, Count, F
from django.contrib import messages
from django.urls import reverse
from channels.layers import get_channel_layer  # مشکل 1 حل شد
from django.contrib.auth import get_user_model
from .models import ChatRoom, ChatMessage, Notification, UserStatus, TemporaryFile



User = get_user_model()  # این خط مدل User را برای استفاده آماده می‌کند

@login_required
def chat_list(request):
    """
    نمایش لیست گفتگوهای کاربر
    """
    user = request.user

    if user.is_staff:
        # برای کاربران پشتیبان، فقط گفتگوهای باز اختصاص داده شده به خودشان
        rooms = ChatRoom.objects.filter(
            agent=user,            status='open',
            is_deleted_by_agent=False
        ).annotate(
            unread_count=Count('messages', filter=Q(messages__is_read=False, messages__sender=F('user')))
        ).order_by('-updated_at')
    else:
        # برای کاربران عادی، فقط گفتگوهای خودشان که حذف نکرده‌اند
        rooms = ChatRoom.objects.filter(            user=user,
            is_deleted_by_user=False
        ).annotate(
            unread_count=Count('messages', filter=Q(messages__is_read=False, messages__sender=F('agent')))
        ).order_by('-updated_at')

    context = {
        'rooms': rooms,
    }

    return render(request, 'chat/chat_list.html', context)


@login_required
def chat_room(request, room_id):
    """
    نمایش صفحه گفتگو و علامت‌گذاری پیام‌ها به عنوان خوانده شده
    """
    user = request.user
    room = get_object_or_404(ChatRoom, id=room_id)

    # بررسی دسترسی کاربر به اتاق    if user.is_staff:
    can_access = False
    if user.is_staff:
        # ادمین به تمام چت‌هایی که توسط خودش حذف نشده دسترسی دارد
        if not room.is_deleted_by_agent:
            can_access = True
    else:
        # کاربر عادی به چت خودش که حذف نکرده دسترسی دارد
        if room.user == user and not room.is_deleted_by_user:
            can_access = True

    if not can_access:
        messages.error(request, "شما به این گفتگو دسترسی ندارید.")
        redirect_url = 'chat:admin_dashboard' if user.is_staff else 'chat:chat_list'
        return redirect(redirect_url)

    chat_messages = room.messages.all().order_by('created_at')

    # ✅ شروع منطق حل مشکل تیک دوم (خوانده شدن آنی)
    unread_messages = chat_messages.filter(is_read=False).exclude(sender=user)
    if unread_messages.exists():
        message_ids_to_update = list(unread_messages.values_list('id', flat=True))

        now = timezone.now()
        # آپدیت گروهی پیام‌ها در دیتابیس
        unread_messages.update(is_read=True, read_at=now)

        channel_layer = get_channel_layer()
        for message_id in message_ids_to_update:
            async_to_sync(channel_layer.group_send)(
                f'chat_{room_id}',
                {
                    'type': 'message_read',
                    'message_id': str(message_id),
                    'user_id': str(user.id),  # کاربری که پیام را خوانده
                    'read_at': now.isoformat()
                }
            )
    # ✅ پایان منطق حل مشکل تیک دوم

    context = {
        'room': room,
        'chat_messages': chat_messages,
    }
    return render(request, 'chat/chat_room.html', context)


@login_required
def start_chat(request):

    user = request.user
    if user.is_staff:
        messages.error(request, "کاربران پشتیبان نمی‌توانند گفتگوی جدید ایجاد کنند.")
        return redirect('chat:admin_dashboard')

    existing_open_room = ChatRoom.objects.filter(user=user, status='open', is_deleted_by_user=False).first()
    if existing_open_room:
        return redirect('chat:room', room_id=existing_open_room.id)

    if request.method == 'POST':
        subject = request.POST.get('subject', '').strip()
        message = request.POST.get('message', '').strip()

        if not subject or not message:
            messages.error(request, "لطفاً موضوع و پیام خود را وارد کنید.")
            return render(request, 'chat/start_chat.html')

        new_room = ChatRoom.objects.create(name=subject, user=user, status='open')
        ChatMessage.objects.create(room=new_room, sender=user, content=message, message_type='text')

        # ایجاد اعلان برای همه پشتیبان‌های فعال
        for admin in User.objects.filter(is_staff=True, is_active=True):
            Notification.objects.create(
                user=admin,
                title="گفتگوی جدید",
                message=f"گفتگوی جدید از {user.username}: {subject}",
                notification_type="chat",
                data={"room_id": str(new_room.id)}
            )

        # ✅ شروع تغییر: ارسال رویداد به داشبورد ادمین
        channel_layer = get_channel_layer()
        async_to_sync(channel_layer.group_send)(
            'admin_dashboard',
            {
                'type': 'dashboard.update',
                'event_type': 'new_chat',
                'data': {
                    'room_id': str(new_room.id),
                    'room_name': new_room.name,
                    'user_id': new_room.user.id,
                    'username': new_room.user.username,
                    'created_at': new_room.created_at.strftime('%Y-%m-%d %H:%M'),
                    'url': reverse('chat:room', args=[new_room.id])
                }
            }
        )
        # ✅ پایان تغییر

        return redirect('chat:room', room_id=new_room.id)

    return render(request, 'chat/start_chat.html')


@login_required
@require_POST
def hide_room(request, room_id):
    """پنهان کردن (حذف نرم) یک گفتگو"""
    try:
        room = ChatRoom.objects.get(id=room_id)

        if request.user != room.user and not request.user.is_staff:
            return JsonResponse({'success': False, 'error': 'شما اجازه دسترسی به این گفتگو را ندارید'}, status=403)

        if request.user == room.user:
            room.is_deleted_by_user = True
        elif request.user.is_staff:
            room.is_deleted_by_agent = True
        room.save()

        # اطلاع‌رسانی به کلاینت‌های دیگر در همان روم
        channel_layer = get_channel_layer()
        async_to_sync(channel_layer.group_send)(
            f'chat_{room_id}',
            {
                'type': 'chat.deleted.by.user',  # این نوع رویداد در chat.js شما هندل می‌شود
                'message': f'این گفتگو توسط {request.user.username} حذف شد.'
            }
        )
        return JsonResponse({'success': True})
    except ChatRoom.DoesNotExist:
        return JsonResponse({'success': False, 'error': 'گفتگو یافت نشد'}, status=404)


@login_required
def admin_dashboard(request):
    """
    داشبورد مدیریت برای پشتیبان‌ها با قابلیت جستجو و نمایش پیام‌های خوانده نشده
    """
    if not request.user.is_staff:
        messages.error(request, "شما به این صفحه دسترسی ندارید.")
        return redirect('chat:chat_list')
    search_query = request.GET.get('q', '')
    closed_search_query = request.GET.get('closed_q', '')

    search_results = None
    if search_query:
        search_results = ChatRoom.objects.filter(
            Q(name__icontains=search_query) |
            Q(user__username__icontains=search_query) |
            Q(messages__content__icontains=search_query)
        ).distinct().order_by('-updated_at')
        for room in search_results:
            matching_messages = room.messages.filter(content__icontains=search_query).order_by('-created_at')
            if matching_messages.exists():
                room.matching_message = matching_messages.first()

    # ✅ شروع منطق حل مشکل اول (شمارش پیام در داشبورد)
    # گفتگوهای بدون پشتیبان
    unassigned_rooms = ChatRoom.objects.filter(agent__isnull=True, status='open').annotate(
        unread_count=Count('messages', filter=Q(messages__is_read=False) & ~Q(messages__sender__is_staff=True))
    ).order_by('-created_at')

    # گفتگوهای اختصاص داده شده به این پشتیبان
    my_rooms = ChatRoom.objects.filter(agent=request.user, status='open', is_deleted_by_agent=False).annotate(
        unread_count=Count('messages', filter=Q(messages__is_read=False, messages__sender=F('user')))    ).order_by('-updated_at')

    # گفتگوهای در حال انجام (اختصاص داده شده به سایر پشتیبان‌ها)
    assigned_rooms = ChatRoom.objects.filter(agent__isnull=False, status='open').exclude(agent=request.user).annotate(
        unread_count=Count('messages', filter=Q(messages__is_read=False) & ~Q(messages__sender__is_staff=True))
    ).order_by('-updated_at')
    # ✅ پایان منطق حل مشکل اول    # گفتگوهای بسته شده با امکان جستجو
    closed_rooms_query = ChatRoom.objects.filter(status='closed')
    if closed_search_query:
        closed_rooms_query = closed_rooms_query.filter(
            Q(name__icontains=closed_search_query) |            Q(user__username__icontains=closed_search_query) |
            Q(messages__content__icontains=closed_search_query)
        ).distinct()
    # نمایش گفتگوهای بسته‌ای که توسط ادمین فعلی حذف نشده‌اند
    closed_rooms = closed_rooms_query.filter(is_deleted_by_agent=False).order_by('-closed_at')

    context = {
        'unassigned_rooms': unassigned_rooms,
        'my_rooms': my_rooms,
        'assigned_rooms': assigned_rooms,
        'closed_rooms': closed_rooms,
        'search_results': search_results,
        'search_query': search_query,
        'closed_search_query': closed_search_query,
    }
    return render(request, 'chat/admin_dashboard.html', context)


@login_required
@require_POST
def assign_room(request, room_id):
    """اختصاص دادن گفتگو به پشتیبان"""
    if not request.user.is_staff:
        return JsonResponse({'success': False, 'error': 'شما به این عملیات دسترسی ندارید.'}, status=403)

    room = get_object_or_404(ChatRoom, id=room_id)
    if room.status != 'open':
        return JsonResponse({'success': False, 'error': 'این گفتگو قابل اختصاص نیست.'}, status=400)

    room.agent = request.user
    room.save(update_fields=['agent'])

    ChatMessage.objects.create(
        room=room,
        content=f"پشتیبان {request.user.username} به گفتگو پیوست.",
        message_type='system'
    )

    # ✅ شروع تغییر: ارسال رویداد به داشبورد ادمین
    channel_layer = get_channel_layer()
    async_to_sync(channel_layer.group_send)(
        'admin_dashboard',
        {
            'type': 'dashboard.update',
            'event_type': 'chat_assigned',
            'data': {
                'room_id': str(room.id),
                'agent_id': request.user.id,
                'agent_name': request.user.username,
                # ارسال اطلاعات کامل برای ساخت آیتم
                'room_name': room.name,
                'user_id': room.user.id,
                'username': room.user.username,
                'updated_at': room.updated_at.strftime('%H:%M'),
                'url': reverse('chat:room', args=[room.id])
            }
        }
    )    # ✅ پایان تغییر

    return JsonResponse({'success': True, 'redirect_url': reverse('chat:room', args=[room.id])})


@login_required
@require_POST
def close_room(request, room_id):
    user = request.user
    room = get_object_or_404(ChatRoom, id=room_id)

    if not (user.is_staff or room.user == user):
        return JsonResponse({'success': False, 'error': 'شما به این گفتگو دسترسی ندارید.'}, status=403)

    if room.status != 'open':
        return JsonResponse({'success': False, 'error': 'این گفتگو قبلاً بسته شده است.'}, status=400)

    room.close(user)

    # ✅ شروع تغییر: ارسال رویداد به داشبورد ادمین
    channel_layer = get_channel_layer()
    async_to_sync(channel_layer.group_send)(
        'admin_dashboard',
        {
            'type': 'dashboard.update',
            'event_type': 'chat_closed',
            'data': {
                'room_id': str(room.id),
                # ارسال اطلاعات کامل برای ساخت آیتم
                'room_name': room.name,
                'user_id': room.user.id,
                'username': room.user.username,
                'agent_name': room.agent.username if room.agent else '',
                'closed_at': room.closed_at.strftime('%Y-%m-%d %H:%M'),
                'url': reverse('chat:room', args=[room.id])
            }        }
    )
    # ✅ پایان تغییر

    # بازگشت به داشبورد برای تجربه کاربری بهتر ادمین
    redirect_url = reverse('chat:admin_dashboard') if user.is_staff else reverse('chat:chat_list')
    return JsonResponse({'success': True, 'redirect_url': redirect_url})


@login_required
@require_POST
def reopen_room(request, room_id):
    """بازگشایی گفتگو"""
    user = request.user
    room = get_object_or_404(ChatRoom, id=room_id)

    if not (user.is_staff or room.user == user):
        return JsonResponse({'success': False, 'error': 'شما به این گفتگو دسترسی ندارید.'}, status=403)

    if room.status != 'closed':
        return JsonResponse({'success': False, 'error': 'این گفتگو قابل بازگشایی نیست.'}, status=400)
    success = room.reopen(user)
    if not success:
        return JsonResponse({'success': False, 'error': 'بازگشایی گفتگو با خطا مواجه شد.'}, status=400)

    return JsonResponse({'success': True})


@login_required
@require_GET
def get_unread_count(request):
    """دریافت تعداد کل پیام‌های خوانده نشده برای کاربر"""
    user = request.user
    count = 0
    if user.is_staff:
        # برای ادمین، همه پیام‌های خوانده‌نشده از طرف کاربران در چت‌های باز
        count = ChatMessage.objects.filter(
            room__status='open',
            room__is_deleted_by_agent=False,
            is_read=False,
            sender__is_staff=False
        ).count()
    else:
        # برای کاربران عادی، پیام‌های خوانده‌نشده از طرف پشتیبان در چت‌های خودشان
        count = ChatMessage.objects.filter(
            room__user=user,
            room__is_deleted_by_user=False,
            is_read=False,
            sender__is_staff=True
        ).count()

    return JsonResponse({'count': count})


# سایر توابع کمکی که نیازی به تغییر نداشتند
@login_required
def notifications_view(request):
    notifications = Notification.objects.filter(user=request.user).order_by('-created_at')
    context = {'notifications': notifications}
    return render(request, 'chat/notifications.html', context)@login_required
@require_POST
def mark_message_read(request, message_id):
    message = get_object_or_404(ChatMessage, id=message_id)
    room = message.room
    user = request.user

    if not (user.is_staff or room.user == user):
        return JsonResponse({'success': False, 'error': 'شما به این پیام دسترسی ندارید.'}, status=403)

    if message.sender != user and not message.is_read:
        message.is_read = True
        message.read_at = timezone.now()
        message.save(update_fields=['is_read', 'read_at'])
    return JsonResponse({'success': True})


@login_required
@require_POST
def set_online(request):
    UserStatus.objects.update_or_create(
        user=request.user,
        defaults={'status': 'online', 'last_seen': timezone.now()}
    )
    return JsonResponse({'success': True})


@login_required
@csrf_exempt
@require_POST
def set_offline(request):
    UserStatus.objects.update_or_create(
        user=request.user,
        defaults={'status': 'offline'}
    )
    return HttpResponse(status=204)


@login_required
@require_POST
def upload_temp_file(request):
    if 'file' not in request.FILES:
        return JsonResponse({'success': False, 'error': 'فایلی انتخاب نشده است.'}, status=400)

    file = request.FILES['file']
    if file.size > 5 * 1024 * 1024:
        return JsonResponse({'success': False, 'error': 'حداکثر اندازه فایل 5 مگابایت است.'}, status=400)

    temp_file = TemporaryFile.objects.create(user=request.user, file=file)
    return JsonResponse({
        'success': True,
        'file_id': str(temp_file.id),
        'file_name': file.name,
        'file_url': temp_file.file.url
    })

====== FILE: chat/urls.py ======

from django.urls import path
from . import views

app_name = 'chat'

urlpatterns = [
    # صفحات اصلی چت
    path('', views.chat_list, name='chat_list'),
    path('room/<uuid:room_id>/', views.chat_room, name='room'),
    path('start/', views.start_chat, name='start'),

    # صفحات مدیریت
    path('admin/dashboard/', views.admin_dashboard, name='admin_dashboard'),
    path('admin/assign/<uuid:room_id>/', views.assign_room, name='assign_room'),

    # اعلان‌ها
    path('notifications/', views.notifications_view, name='notifications'),

    # API‌های چت
    path('api/mark-read/<uuid:message_id>/', views.mark_message_read, name='mark_read'),
    path('api/close-room/<uuid:room_id>/', views.close_room, name='close_room'),
    path('api/reopen-room/<uuid:room_id>/', views.reopen_room, name='reopen_room'),
    path('api/upload-file/', views.upload_temp_file, name='upload_file'),

    # API‌های وضعیت آنلاین
    path('set-online/', views.set_online, name='set_online'),
    path('set-offline/', views.set_offline, name='set_offline'),
    path('unread-count/', views.get_unread_count, name='unread_count'),
    path('hide-room/<uuid:room_id>/', views.hide_room, name='hide_room'),

]

====== FILE: chat/tasks.py ======

from celery import shared_task
from django.utils import timezone
from datetime import timedelta
from .models import UserStatus

# ⏱ مدت زمان بی‌فعال بودن تا آفلاین کردن (به دقیقه)
INACTIVITY_TIMEOUT_MINUTES = 5


@shared_task
def cleanup_stale_online_statuses():
    """
    این تسک هر دقیقه توسط Celery Beat اجرا می‌شود و کاربران بی‌فعال را آفلاین می‌کند.
    شرط:
      - کاربر status='online' باشد
      - آخرین فعالیت واقعی (last_seen) قدیمی‌تر از INACTIVITY_TIMEOUT_MINUTES باشد
    """
    threshold = timezone.now() - timedelta(minutes=INACTIVITY_TIMEOUT_MINUTES)

    # پیدا کردن کاربران بی‌فعال
    stale_statuses = UserStatus.objects.filter(
        status='online',
        last_seen__lt=threshold
    )

    count = stale_statuses.count()

    if count > 0:
        stale_statuses.update(status='offline')
        return f"Marked {count} stale online users as offline"
    else:
        return "No stale online users found"


@shared_task
def force_offline_disconnected_users():
    """
    این تسک برای مواقعی است که کاربر ارتباط وب‌سوکت را قطع کرده اما
    به هر دلیلی وضعیت‌اش در دیتابیس آنلاین باقی مانده
    (بر اساس heartbeat یا داده‌های اضافی می‌توان تغییر داد)
    """
    heartbeat_threshold = timezone.now() - timedelta(seconds=90)  # 1.5 دقیقه بدون پینگ
    stale_statuses = UserStatus.objects.filter(
        status='online',
        last_heartbeat__lt=heartbeat_threshold
    )

    count = stale_statuses.count()

    if count > 0:
        stale_statuses.update(status='offline')
        return f"Forced {count} disconnected users to offline"
    else:
        return "No disconnected users found"

====== FILE: chat/tests.py ======

from django.test import TestCase

# Create your tests here.


====== FILE: chat/routing.py ======

from channels.auth import AuthMiddlewareStack
from channels.routing import URLRouter
from channels.sessions import SessionMiddlewareStack
from django.urls import re_path
from . import consumers
from .middleware import ConnectionLimitMiddleware, OnlineStatusMiddleware

websocket_urlpatterns = [
    re_path(r'ws/chat/(?P<room_id>[^/]+)/$', consumers.ChatConsumer.as_asgi()),
    re_path(r'ws/online-status/$', consumers.OnlineStatusConsumer.as_asgi()),
    re_path(r'ws/notifications/$', consumers.NotificationConsumer.as_asgi()),
    re_path(r'ws/admin/dashboard/$', consumers.AdminDashboardConsumer.as_asgi()),

]




application = OnlineStatusMiddleware(
    AuthMiddlewareStack(
        SessionMiddlewareStack(
            URLRouter(websocket_urlpatterns)
        )
    )
)

====== FILE: chat/services.py ======

# chat/services.py
from django.utils import timezone
from channels.layers import get_channel_layer
from asgiref.sync import async_to_sync
import json

from .models import ChatRoom, ChatMessage, Notification, UserStatus


class UserStatusService:
    """سرویس مدیریت وضعیت آنلاین/آفلاین کاربران"""

    @staticmethod
    def set_user_status(user, status):
        """تنظیم وضعیت کاربر و ارسال به‌روزرسانی به همه کاربران"""
        if not user or not user.is_authenticated:
            return None

        # به‌روزرسانی یا ایجاد وضعیت کاربر در دیتابیس
        user_status, created = UserStatus.objects.update_or_create(
            user=user,
            defaults={
                'status': status,
                'last_seen': timezone.now()
            }
        )

        # ارسال به‌روزرسانی به همه کاربران از طریق وب‌سوکت
        channel_layer = get_channel_layer()
        async_to_sync(channel_layer.group_send)(
            "online_status",
            {
                'type': 'online_status_update',
                'user_id': str(user.id),
                'status': status
            }
        )

        return user_status

    @staticmethod
    def update_last_seen(user):
        """به‌روزرسانی زمان آخرین فعالیت کاربر"""
        if not user or not user.is_authenticated:
            return None

        user_status, created = UserStatus.objects.update_or_create(
            user=user,
            defaults={
                'last_seen': timezone.now()
            }
        )

        return user_status

    @staticmethod
    def get_user_status(user):
        """دریافت وضعیت کاربر"""
        if not user or not user.is_authenticated:
            return 'offline'

        try:
            user_status = UserStatus.objects.get(user=user)
            return user_status.status
        except UserStatus.DoesNotExist:
            return 'offline'

    @staticmethod
    def get_all_online_users():
        """دریافت لیست تمام کاربران آنلاین طی ۵ دقیقه اخیر"""
        threshold = timezone.now() - timezone.timedelta(minutes=5)
        return UserStatus.objects.filter(last_seen__gte=threshold).select_related('user')

class ChatService:
    @staticmethod
    def create_room(user, name=None):
        """
        ایجاد اتاق گفتگوی جدید
        """
        if not name:
            name = f"گفتگو با {user.get_full_name() or user.username}"

        room = ChatRoom.objects.create(
            user=user,
            name=name,
            status='open'
        )

        return room

    @staticmethod
    def close_room(room, user):
        """
        بستن اتاق گفتگو
        """
        if room.status != 'open':
            return False

        room.status = 'closed'
        room.closed_at = timezone.now()

        # تعیین کاربری که گفتگو را بسته است
        if user.is_staff:
            room.is_closed_by_admin = True

        room.save()

        # ارسال پیام به کانال وب‌سوکت
        channel_layer = get_channel_layer()
        room_group_name = f'chat_{room.id}'

        message = "این گفتگو توسط پشتیبانی بسته شده است." if user.is_staff else "این گفتگو توسط کاربر بسته شده است."

        async_to_sync(channel_layer.group_send)(
            room_group_name,
            {
                'type': 'chat_message',
                'message': {
                    'type': 'chat_closed',
                    'message': message,
                    'closed_by': user.id,
                    'is_staff': user.is_staff,
                    'closed_at': timezone.now().isoformat()
                }
            }
        )

        return True

    @staticmethod
    def reopen_room(room, user):
        """
        بازگشایی اتاق گفتگو
        """
        if room.status != 'closed':
            return False

        room.status = 'open'
        room.closed_at = None
        room.is_closed_by_admin = False
        room.save()

        # ارسال پیام به کانال وب‌سوکت
        channel_layer = get_channel_layer()
        room_group_name = f'chat_{room.id}'

        message = "این گفتگو بازگشایی شده است."

        async_to_sync(channel_layer.group_send)(
            room_group_name,
            {
                'type': 'chat_message',
                'message': {
                    'type': 'chat_reopened',
                    'message': message,
                    'reopened_by': user.id,
                    'is_staff': user.is_staff,
                    'reopened_at': timezone.now().isoformat()
                }
            }
        )

        return True

    @staticmethod
    def archive_room(room):
        """
        آرشیو کردن اتاق گفتگو
        """
        if room.status != 'closed':
            return False

        room.status = 'archived'
        room.save()

        return True

    @staticmethod
    def create_message(room, sender, content, message_type='text', file=None):
        """
        ایجاد پیام جدید
        """
        message = ChatMessage.objects.create(
            room=room,
            sender=sender,
            content=content,
            message_type=message_type,
            file=file
        )

        # بروزرسانی زمان آخرین فعالیت اتاق
        room.updated_at = timezone.now()
        room.save(update_fields=['updated_at'])

        return message

    @staticmethod
    def create_system_message(room, content):
        """
        ایجاد پیام سیستمی
        """
        message = ChatMessage.objects.create(
            room=room,
            content=content,
            message_type='system'
        )

        # بروزرسانی زمان آخرین فعالیت اتاق
        room.updated_at = timezone.now()
        room.save(update_fields=['updated_at'])

        return message

    @staticmethod
    def mark_message_as_read(message):
        """
        علامت‌گذاری پیام به عنوان خوانده شده
        """
        if not message.is_read:
            message.is_read = True
            message.read_at = timezone.now()
            message.save(update_fields=['is_read', 'read_at'])

            # ارسال پیام به کانال وب‌سوکت
            channel_layer = get_channel_layer()
            room_group_name = f'chat_{message.room.id}'

            async_to_sync(channel_layer.group_send)(
                room_group_name,
                {
                    'type': 'chat_message',
                    'message': {
                        'type': 'message_read',
                        'message_id': str(message.id),
                        'read_at': message.read_at.isoformat()
                    }
                }
            )

            return True

        return False

    @staticmethod
    def assign_agent_to_room(room, agent):
        """
        اختصاص پشتیبان به اتاق گفتگو
        """
        if room.agent:
            return False

        room.agent = agent
        room.save(update_fields=['agent'])

        # ایجاد پیام سیستمی
        ChatService.create_system_message(
            room=room,
            content=f"پشتیبان {agent.get_full_name() or agent.username} به گفتگو پیوست."
        )

        return True


class NotificationService:
    @staticmethod
    def create_notification(user, title, message, notification_type='general', data=None):
        """
        ایجاد اعلان جدید
        """
        notification = Notification.objects.create(
            user=user,
            title=title,
            message=message,
            notification_type=notification_type,
            data=data or {}
        )

        # ارسال اعلان به کانال وب‌سوکت
        channel_layer = get_channel_layer()
        user_group_name = f'notifications_{user.id}'

        async_to_sync(channel_layer.group_send)(
            user_group_name,
            {
                'type': 'notification_message',
                'message': {
                    'type': 'notification',
                    'notification': {
                        'id': str(notification.id),
                        'title': notification.title,
                        'message': notification.message,
                        'type': notification.notification_type,
                        'data': notification.data,
                        'created_at': notification.created_at.isoformat()
                    }
                }
            }
        )

        return notification

    @staticmethod
    def mark_notification_as_read(notification):
        """
        علامت‌گذاری اعلان به عنوان خوانده شده
        """
        if not notification.is_read:
            notification.is_read = True
            notification.save(update_fields=['is_read'])

            # ارسال پیام به کانال وب‌سوکت
            channel_layer = get_channel_layer()
            user_group_name = f'notifications_{notification.user.id}'

            async_to_sync(channel_layer.group_send)(
                user_group_name,
                {
                    'type': 'notification_message',
                    'message': {
                        'type': 'notification_read',
                        'notification_id': str(notification.id)
                    }
                }
            )

            return True

        return False

    @staticmethod
    def mark_all_notifications_as_read(user):
        """
        علامت‌گذاری تمام اعلان‌های کاربر به عنوان خوانده شده
        """
        count = Notification.objects.filter(user=user, is_read=False).update(is_read=True)

        if count > 0:
            # ارسال پیام به کانال وب‌سوکت
            channel_layer = get_channel_layer()
            user_group_name = f'notifications_{user.id}'

            async_to_sync(channel_layer.group_send)(
                user_group_name,
                {
                    'type': 'notification_message',
                    'message': {
                        'type': 'all_notifications_read'
                    }
                }
            )

        return count

====== FILE: chat/migrations/0004_alter_notification_options_and_more.py ======

# Generated by Django 5.1.5 on 2025-08-09 09:27

import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('chat', '0003_alter_notification_options_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='notification',
            options={'ordering': ['-created_at'], 'verbose_name': 'اعلان', 'verbose_name_plural': 'اعلان\u200cها'},
        ),
        migrations.RemoveIndex(
            model_name='chatmessage',
            name='chat_chatme_room_id_c92a4a_idx',
        ),
        migrations.RemoveIndex(
            model_name='chatmessage',
            name='chat_chatme_created_888e17_idx',
        ),
        migrations.RemoveIndex(
            model_name='chatroom',
            name='chat_chatro_user_id_da3ba8_idx',
        ),
        migrations.RemoveIndex(
            model_name='chatroom',
            name='chat_chatro_agent_i_ad5c0c_idx',
        ),
        migrations.RemoveIndex(
            model_name='chatroom',
            name='chat_chatro_updated_79f21c_idx',
        ),
        migrations.RemoveIndex(
            model_name='notification',
            name='chat_notifi_user_id_7c95fc_idx',
        ),
        migrations.RemoveIndex(
            model_name='userstatus',
            name='chat_userst_status_ab9f7a_idx',
        ),
        migrations.RemoveField(
            model_name='userstatus',
            name='active_sessions',
        ),
        migrations.AddField(
            model_name='chatroom',
            name='hidden_for_users',
            field=models.ManyToManyField(blank=True, help_text='کاربرانی که این گفتگو را حذف کرده\u200cاند و دیگر نمی\u200cبینند', related_name='hidden_chat_rooms', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='userstatus',
            name='is_online',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='userstatus',
            name='last_activity',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='userstatus',
            name='typing_in_room',
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
        migrations.AlterField(
            model_name='userstatus',
            name='last_seen',
            field=models.DateTimeField(default=django.utils.timezone.now),
        ),
    ]


====== FILE: chat/migrations/__init__.py ======



====== FILE: chat/migrations/0007_alter_chatmessage_options_alter_chatroom_options_and_more.py ======

# Generated by Django 5.1.5 on 2025-09-03 09:23

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('chat', '0006_alter_chatmessage_options_alter_chatroom_options_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='chatmessage',
            options={'ordering': ['created_at'], 'verbose_name': 'Chat Message', 'verbose_name_plural': 'Chat Messages'},
        ),
        migrations.AlterModelOptions(
            name='chatroom',
            options={'ordering': ['-updated_at'], 'verbose_name': 'Chat Room', 'verbose_name_plural': 'Chat Rooms'},
        ),
        migrations.AlterModelOptions(
            name='notification',
            options={'ordering': ['-created_at'], 'verbose_name': 'Notification', 'verbose_name_plural': 'Notifications'},
        ),
        migrations.AlterModelOptions(
            name='temporaryfile',
            options={'ordering': ['-created_at'], 'verbose_name': 'Temporary File', 'verbose_name_plural': 'Temporary Files'},
        ),
        migrations.AlterModelOptions(
            name='userstatus',
            options={'verbose_name': 'User Online Status', 'verbose_name_plural': 'User Online Statuses'},
        ),
        migrations.AlterField(
            model_name='notification',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True),
        ),
        migrations.AlterField(
            model_name='notification',
            name='data',
            field=models.JSONField(blank=True, default=dict, null=True),
        ),
        migrations.AlterField(
            model_name='notification',
            name='is_read',
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name='notification',
            name='message',
            field=models.TextField(),
        ),
        migrations.AlterField(
            model_name='notification',
            name='notification_type',
            field=models.CharField(choices=[('chat', 'Chat'), ('system', 'System')], default='system', max_length=20),
        ),
        migrations.AlterField(
            model_name='notification',
            name='title',
            field=models.CharField(max_length=255),
        ),
        migrations.AlterField(
            model_name='notification',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='temporaryfile',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True),
        ),
        migrations.AlterField(
            model_name='temporaryfile',
            name='file',
            field=models.FileField(upload_to='temp_files/%Y/%m/%d/'),
        ),
        migrations.AlterField(
            model_name='temporaryfile',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='temp_files', to=settings.AUTH_USER_MODEL),
        ),
    ]


====== FILE: chat/migrations/0005_userstatus_last_heartbeat.py ======

# Generated by Django 5.1.5 on 2025-08-09 13:15

import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('chat', '0004_alter_notification_options_and_more'),
    ]

    operations = [
        migrations.AddField(
            model_name='userstatus',
            name='last_heartbeat',
            field=models.DateTimeField(default=django.utils.timezone.now),
        ),
    ]


====== FILE: chat/migrations/0003_alter_notification_options_and_more.py ======

# Generated by Django 5.1.5 on 2025-08-06 15:37

from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('chat', '0002_alter_chatmessage_options_alter_userstatus_options_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='notification',
            options={'ordering': ['-created_at'], 'verbose_name': 'اعلان', 'verbose_name_plural': 'اعلانها'},
        ),
        migrations.RemoveField(
            model_name='chatroom',
            name='hidden_for_users',
        ),
        migrations.RemoveField(
            model_name='userstatus',
            name='is_online',
        ),
        migrations.RemoveField(
            model_name='userstatus',
            name='last_activity',
        ),
        migrations.RemoveField(
            model_name='userstatus',
            name='typing_in_room',
        ),
        migrations.AddField(
            model_name='userstatus',
            name='active_sessions',
            field=models.IntegerField(default=0),
        ),
        migrations.AlterField(
            model_name='userstatus',
            name='last_seen',
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddIndex(
            model_name='chatmessage',
            index=models.Index(fields=['room', 'is_read', 'sender'], name='chat_chatme_room_id_c92a4a_idx'),
        ),
        migrations.AddIndex(
            model_name='chatmessage',
            index=models.Index(fields=['created_at'], name='chat_chatme_created_888e17_idx'),
        ),
        migrations.AddIndex(
            model_name='chatroom',
            index=models.Index(fields=['user', 'status'], name='chat_chatro_user_id_da3ba8_idx'),
        ),
        migrations.AddIndex(
            model_name='chatroom',
            index=models.Index(fields=['agent', 'status'], name='chat_chatro_agent_i_ad5c0c_idx'),
        ),
        migrations.AddIndex(
            model_name='chatroom',
            index=models.Index(fields=['updated_at'], name='chat_chatro_updated_79f21c_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['user', 'is_read'], name='chat_notifi_user_id_7c95fc_idx'),
        ),
        migrations.AddIndex(
            model_name='userstatus',
            index=models.Index(fields=['status', 'last_seen'], name='chat_userst_status_ab9f7a_idx'),
        ),
    ]


====== FILE: chat/migrations/0002_alter_chatmessage_options_alter_userstatus_options_and_more.py ======

# Generated by Django 5.1.5 on 2025-07-31 08:56

import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('chat', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='chatmessage',
            options={'ordering': ['created_at'], 'verbose_name': 'پیام گفتگو', 'verbose_name_plural': 'پیام\u200cهای گفتگو'},
        ),
        migrations.AlterModelOptions(
            name='userstatus',
            options={'verbose_name': 'وضعیت آنلاین کاربر', 'verbose_name_plural': 'وضعیت آنلاین کاربران'},
        ),
        migrations.RemoveField(
            model_name='chatmessage',
            name='file_name',
        ),
        migrations.RemoveField(
            model_name='chatmessage',
            name='file_size',
        ),
        migrations.RemoveField(
            model_name='chatmessage',
            name='file_type',
        ),
        migrations.AddField(
            model_name='chatroom',
            name='hidden_for_users',
            field=models.ManyToManyField(blank=True, help_text='کاربرانی که این گفتگو را حذف کرده\u200cاند و دیگر نمی\u200cبینند', related_name='hidden_chat_rooms', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='userstatus',
            name='is_online',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='userstatus',
            name='last_activity',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='chatmessage',
            name='content',
            field=models.TextField(verbose_name='متن پیام'),
        ),
        migrations.AlterField(
            model_name='chatmessage',
            name='file',
            field=models.FileField(blank=True, null=True, upload_to='chat_files/%Y/%m/%d/', verbose_name='فایل پیوست'),
        ),
        migrations.AlterField(
            model_name='chatmessage',
            name='message_type',
            field=models.CharField(choices=[('text', 'متن'), ('image', 'تصویر'), ('file', 'فایل'), ('system', 'سیستمی')], default='text', max_length=10, verbose_name='نوع پیام'),
        ),
        migrations.AlterField(
            model_name='chatmessage',
            name='read_at',
            field=models.DateTimeField(blank=True, null=True, verbose_name='زمان خوانده شدن'),
        ),
        migrations.AlterField(
            model_name='notification',
            name='data',
            field=models.JSONField(blank=True, default=dict, null=True, verbose_name='داده\u200cهای اضافی'),
        ),
        migrations.AlterField(
            model_name='notification',
            name='message',
            field=models.TextField(verbose_name='متن اعلان'),
        ),
        migrations.AlterField(
            model_name='notification',
            name='notification_type',
            field=models.CharField(choices=[('chat', 'گفتگو'), ('system', 'سیستمی')], default='system', max_length=20, verbose_name='نوع اعلان'),
        ),
        migrations.AlterField(
            model_name='userstatus',
            name='last_seen',
            field=models.DateTimeField(default=django.utils.timezone.now),
        ),
        migrations.AlterField(
            model_name='userstatus',
            name='status',
            field=models.CharField(choices=[('online', 'Online'), ('offline', 'Offline')], default='offline', max_length=10),
        ),
        migrations.AlterField(
            model_name='userstatus',
            name='typing_in_room',
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
        migrations.AlterField(
            model_name='userstatus',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='online_status', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='TemporaryFile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('file', models.FileField(upload_to='temp_files/%Y/%m/%d/', verbose_name='فایل')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='زمان آپلود')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='temp_files', to=settings.AUTH_USER_MODEL, verbose_name='کاربر')),
            ],
            options={
                'verbose_name': 'فایل موقت',
                'verbose_name_plural': 'فایل\u200cهای موقت',
                'ordering': ['-created_at'],
            },
        ),
    ]


====== FILE: chat/migrations/0001_initial.py ======

# Generated by Django 5.1.5 on 2025-06-11 12:08

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ChatRoom',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, verbose_name='نام گفتگو')),
                ('room_type', models.CharField(choices=[('support', 'پشتیبانی'), ('general', 'عمومی')], default='support', max_length=20, verbose_name='نوع گفتگو')),
                ('status', models.CharField(choices=[('open', 'باز'), ('closed', 'بسته شده'), ('archived', 'آرشیو شده')], default='open', max_length=20, verbose_name='وضعیت')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='زمان ایجاد')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='آخرین بروزرسانی')),
                ('closed_at', models.DateTimeField(blank=True, null=True, verbose_name='زمان بسته شدن')),
                ('is_deleted_by_user', models.BooleanField(default=False, verbose_name='حذف شده توسط کاربر')),
                ('is_deleted_by_agent', models.BooleanField(default=False, verbose_name='حذف شده توسط پشتیبان')),
                ('agent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='agent_chats', to=settings.AUTH_USER_MODEL, verbose_name='پشتیبان')),
                ('closed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='closed_chats', to=settings.AUTH_USER_MODEL, verbose_name='بسته شده توسط')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_chats', to=settings.AUTH_USER_MODEL, verbose_name='کاربر')),
            ],
            options={
                'verbose_name': 'اتاق گفتگو',
                'verbose_name_plural': 'اتاق\u200cهای گفتگو',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='ChatMessage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('content', models.TextField(verbose_name='محتوا')),
                ('message_type', models.CharField(choices=[('text', 'متن'), ('image', 'تصویر'), ('file', 'فایل'), ('system', 'سیستم')], default='text', max_length=10, verbose_name='نوع پیام')),
                ('file', models.FileField(blank=True, null=True, upload_to='chat_files/%Y/%m/%d/', verbose_name='فایل')),
                ('file_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='نام فایل')),
                ('file_size', models.PositiveIntegerField(blank=True, null=True, verbose_name='حجم فایل')),
                ('file_type', models.CharField(blank=True, max_length=100, null=True, verbose_name='نوع فایل')),
                ('is_read', models.BooleanField(default=False, verbose_name='خوانده شده')),
                ('read_at', models.DateTimeField(blank=True, null=True, verbose_name='زمان خواندن')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='زمان ارسال')),
                ('sender', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sent_messages', to=settings.AUTH_USER_MODEL, verbose_name='فرستنده')),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='chat.chatroom', verbose_name='اتاق گفتگو')),
            ],
            options={
                'verbose_name': 'پیام',
                'verbose_name_plural': 'پیام\u200cها',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255, verbose_name='عنوان')),
                ('message', models.TextField(verbose_name='پیام')),
                ('notification_type', models.CharField(choices=[('chat', 'چت'), ('system', 'سیستم')], default='system', max_length=20, verbose_name='نوع اعلان')),
                ('data', models.JSONField(blank=True, default=dict, verbose_name='داده\u200cهای اضافی')),
                ('is_read', models.BooleanField(default=False, verbose_name='خوانده شده')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='زمان ایجاد')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL, verbose_name='کاربر')),
            ],
            options={
                'verbose_name': 'اعلان',
                'verbose_name_plural': 'اعلان\u200cها',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('online', 'آنلاین'), ('away', 'غایب'), ('busy', 'مشغول'), ('offline', 'آفلاین')], default='offline', max_length=20, verbose_name='وضعیت')),
                ('last_seen', models.DateTimeField(auto_now=True, verbose_name='آخرین بازدید')),
                ('typing_in_room', models.UUIDField(blank=True, null=True, verbose_name='در حال تایپ در اتاق')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='chat_status', to=settings.AUTH_USER_MODEL, verbose_name='کاربر')),
            ],
            options={
                'verbose_name': 'وضعیت کاربر',
                'verbose_name_plural': 'وضعیت کاربران',
            },
        ),
    ]


====== FILE: chat/migrations/0006_alter_chatmessage_options_alter_chatroom_options_and_more.py ======

# Generated by Django 5.1.5 on 2025-08-13 13:44

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('chat', '0005_userstatus_last_heartbeat'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='chatmessage',
            options={'ordering': ['created_at']},
        ),
        migrations.AlterModelOptions(
            name='chatroom',
            options={'ordering': ['-updated_at']},
        ),
        migrations.AlterField(
            model_name='chatmessage',
            name='content',
            field=models.TextField(),
        ),
        migrations.AlterField(
            model_name='chatmessage',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True),
        ),
        migrations.AlterField(
            model_name='chatmessage',
            name='file',
            field=models.FileField(blank=True, null=True, upload_to='chat_files/%Y/%m/%d/'),
        ),
        migrations.AlterField(
            model_name='chatmessage',
            name='is_read',
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name='chatmessage',
            name='message_type',
            field=models.CharField(choices=[('text', 'Text'), ('image', 'Image'), ('file', 'File'), ('system', 'System')], default='text', max_length=10),
        ),
        migrations.AlterField(
            model_name='chatmessage',
            name='read_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='chatmessage',
            name='room',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='chat.chatroom'),
        ),
        migrations.AlterField(
            model_name='chatmessage',
            name='sender',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sent_messages', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='chatroom',
            name='agent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='agent_chats', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='chatroom',
            name='closed_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='chatroom',
            name='closed_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='closed_chats', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='chatroom',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True),
        ),
        migrations.AlterField(
            model_name='chatroom',
            name='hidden_for_users',
            field=models.ManyToManyField(blank=True, related_name='hidden_chat_rooms', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='chatroom',
            name='is_deleted_by_agent',
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name='chatroom',
            name='is_deleted_by_user',
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name='chatroom',
            name='name',
            field=models.CharField(max_length=255),
        ),
        migrations.AlterField(
            model_name='chatroom',
            name='room_type',
            field=models.CharField(choices=[('support', 'Support'), ('general', 'General')], default='support', max_length=20),
        ),
        migrations.AlterField(
            model_name='chatroom',
            name='status',
            field=models.CharField(choices=[('open', 'Open'), ('closed', 'Closed'), ('archived', 'Archived')], default='open', max_length=20),
        ),
        migrations.AlterField(
            model_name='chatroom',
            name='updated_at',
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AlterField(
            model_name='chatroom',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_chats', to=settings.AUTH_USER_MODEL),
        ),
    ]


====== FILE: middleware/middleware.py ======

import logging
import time
import json
from django.utils.deprecation import MiddlewareMixin

# لاگر مخصوص درخواست‌ها
request_logger = logging.getLogger('django.request')


class RequestLogMiddleware(MiddlewareMixin):
    """میدلور برای لاگ کردن درخواست‌ها و پاسخ‌ها"""

    def process_request(self, request):
        # ذخیره زمان شروع درخواست
        request.start_time = time.time()

        # لاگ کردن درخواست
        request_data = {
            'method': request.method,
            'path': request.path,
            'user': str(request.user),
            'ip': self.get_client_ip(request)
        }

        # لاگ کردن پارامترهای GET
        if request.GET:
            request_data['GET'] = dict(request.GET)

        # لاگ کردن پارامترهای POST (بدون اطلاعات حساس)
        if request.method == 'POST' and not request.path.startswith('/admin/'):
            try:
                body = request.POST.dict()
                # حذف اطلاعات حساس
                if 'password' in body:
                    body['password'] = '********'
                request_data['POST'] = body
            except:
                pass

        # لاگ کردن با سطح INFO
        request_logger.info(f"REQUEST_RECEIVED: {json.dumps(request_data)}")
        return None

    def process_response(self, request, response):
        # محاسبه زمان پردازش
        if hasattr(request, 'start_time'):
            duration = time.time() - request.start_time

            # اطلاعات پاسخ
            response_data = {
                'method': request.method,
                'path': request.path,
                'status': response.status_code,
                'duration': f"{duration:.3f}s",
                'user': str(request.user)
            }

            # لاگ کردن با سطح مناسب بر اساس کد وضعیت
            if 200 <= response.status_code < 300:
                request_logger.info(f"RESPONSE_SUCCESS: {json.dumps(response_data)}")
            elif 300 <= response.status_code < 400:
                request_logger.info(f"RESPONSE_REDIRECT: {json.dumps(response_data)}")
            elif 400 <= response.status_code < 500:
                request_logger.warning(f"RESPONSE_CLIENT_ERROR: {json.dumps(response_data)}")
            else:
                request_logger.error(f"RESPONSE_SERVER_ERROR: {json.dumps(response_data)}")

        return response

    def get_client_ip(self, request):
        x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')
        if x_forwarded_for:
            ip = x_forwarded_for.split(',')[0]
        else:
            ip = request.META.get('REMOTE_ADDR')
        return ip

====== FILE: orders/__init__.py ======



====== FILE: orders/admin.py ======

from django.contrib import admin
from .models import Order, OrderItem, Payment, Shipment


class OrderItemInline(admin.TabularInline):
    model = OrderItem
    extra = 0
    readonly_fields = (
        'product', 'quantity', 'price', 'discount', 'size', 'color', 'get_total_price', 'get_discount_amount',
        'get_final_price'
    )
    can_delete = False

    def has_add_permission(self, request, obj=None):
        return False


class PaymentInline(admin.TabularInline):
    model = Payment
    extra = 0
    readonly_fields = ('amount', 'status', 'gateway', 'transaction_id', 'reference_id', 'created_at')
    can_delete = False

    def has_add_permission(self, request, obj=None):
        return False


class ShipmentInline(admin.TabularInline):
    model = Shipment
    extra = 0
    readonly_fields = ('status', 'carrier', 'tracking_code', 'shipping_date', 'delivery_date', 'created_at')
    can_delete = False

    def has_add_permission(self, request, obj=None):
        return False


@admin.register(Order)
class OrderAdmin(admin.ModelAdmin):
    list_display = ('id', 'user', 'status', 'total_price', 'payment_method', 'created_at')
    list_filter = ('status', 'payment_method', 'shipping_method', 'created_at')
    search_fields = ('id', 'user__username', 'user__email', 'tracking_code', 'transaction_id')
    readonly_fields = ('created_at', 'updated_at')
    raw_id_fields = ('user', 'address')
    inlines = [OrderItemInline, PaymentInline, ShipmentInline]
    fieldsets = (
        ('اطلاعات اصلی', {
            'fields': ('user', 'address', 'status', 'tracking_code')
        }),
        ('اطلاعات مالی', {
            'fields': (
                'subtotal', 'discount', 'shipping_cost', 'total_price', 'payment_method', 'transaction_id', 'payment_date'
            )
        }),
        ('اطلاعات ارسال', {
            'fields': ('shipping_method', 'shipping_date', 'delivery_date')
        }),
        ('توضیحات', {
            'fields': ('description', 'admin_note')
        }),
        ('اطلاعات سیستمی', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )

    def get_readonly_fields(self, request, obj=None):
        readonly_fields = list(self.readonly_fields)
        if obj:  # اگر در حال ویرایش یک سفارش موجود هستیم
            readonly_fields.extend(['user', 'subtotal', 'total_price'])
        return readonly_fields


@admin.register(Payment)
class PaymentAdmin(admin.ModelAdmin):
    list_display = ('order', 'amount', 'status', 'gateway', 'transaction_id', 'created_at')
    list_filter = ('status', 'gateway', 'created_at')
    search_fields = ('order__id', 'transaction_id', 'reference_id')
    raw_id_fields = ('order',)
    readonly_fields = ('created_at', 'updated_at')


@admin.register(Shipment)
class ShipmentAdmin(admin.ModelAdmin):
    list_display = ('order', 'status', 'carrier', 'tracking_code', 'shipping_date', 'delivery_date')
    list_filter = ('status', 'carrier', 'shipping_date', 'delivery_date')
    search_fields = ('order__id', 'tracking_code')
    raw_id_fields = ('order',)
    readonly_fields = ('created_at', 'updated_at')

====== FILE: orders/models.py ======

from django.db import models
from django.conf import settings
from products.models import Product
from users.models import Address


class Order(models.Model):
    """مدل سفارش"""
    STATUS_CHOICES = [
        ('pending', 'در انتظار پرداخت'),
        ('paid', 'پرداخت شده'),
        ('processing', 'در حال پردازش'),
        ('shipped', 'ارسال شده'),
        ('delivered', 'تحویل داده شده'),
        ('cancelled', 'لغو شده'),
        ('refunded', 'مسترد شده'),
    ]

    SHIPPING_CHOICES = [
        ('standard', 'ارسال عادی'),
        ('express', 'ارسال سریع'),
    ]

    PAYMENT_CHOICES = [
        ('online', 'پرداخت آنلاین'),
        ('cash', 'پرداخت در محل'),
    ]

    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='orders',
                             verbose_name='کاربر')
    address = models.ForeignKey(Address, on_delete=models.PROTECT, related_name='orders', verbose_name='آدرس تحویل')

    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending', verbose_name='وضعیت سفارش')
    shipping_method = models.CharField(max_length=20, choices=SHIPPING_CHOICES, default='standard',
                                       verbose_name='روش ارسال')
    payment_method = models.CharField(max_length=20, choices=PAYMENT_CHOICES, default='online',
                                      verbose_name='روش پرداخت')

    subtotal = models.PositiveIntegerField(verbose_name='مجموع قیمت محصولات')
    discount = models.PositiveIntegerField(default=0, verbose_name='تخفیف')
    shipping_cost = models.PositiveIntegerField(default=0, verbose_name='هزینه ارسال')
    total_price = models.PositiveIntegerField(verbose_name='مبلغ کل')

    tracking_code = models.CharField(max_length=50, blank=True, null=True, verbose_name='کد پیگیری')
    transaction_id = models.CharField(max_length=100, blank=True, null=True, verbose_name='شناسه تراکنش')

    description = models.TextField(blank=True, verbose_name='توضیحات سفارش')
    admin_note = models.TextField(blank=True, verbose_name='یادداشت مدیر')

    created_at = models.DateTimeField(auto_now_add=True, verbose_name='تاریخ ایجاد')
    updated_at = models.DateTimeField(auto_now=True, verbose_name='تاریخ بروزرسانی')
    payment_date = models.DateTimeField(null=True, blank=True, verbose_name='تاریخ پرداخت')
    shipping_date = models.DateTimeField(null=True, blank=True, verbose_name='تاریخ ارسال')
    delivery_date = models.DateTimeField(null=True, blank=True, verbose_name='تاریخ تحویل')

    class Meta:
        verbose_name = 'سفارش'
        verbose_name_plural = 'سفارش‌ها'
        ordering = ['-created_at']

    def __str__(self):
        return f"سفارش #{self.id} - {self.user.username}"

    def get_total_items(self):
        """تعداد کل آیتم‌های سفارش"""
        return sum(item.quantity for item in self.items.all())

    def is_paid(self):
        """آیا سفارش پرداخت شده است"""
        return self.status in ['paid', 'processing', 'shipped', 'delivered']

    def can_cancel(self):
        """آیا امکان لغو سفارش وجود دارد"""
        return self.status in ['pending', 'paid', 'processing']


class OrderItem(models.Model):
    """مدل آیتم‌های سفارش"""
    order = models.ForeignKey(Order, on_delete=models.CASCADE, related_name='items', verbose_name='سفارش')
    product = models.ForeignKey(Product, on_delete=models.PROTECT, related_name='order_items', verbose_name='محصول')

    quantity = models.PositiveIntegerField(default=1, verbose_name='تعداد')
    price = models.PositiveIntegerField(verbose_name='قیمت واحد')
    discount = models.PositiveIntegerField(default=0, verbose_name='درصد تخفیف')

    size = models.CharField(max_length=10, verbose_name='سایز')
    color = models.CharField(max_length=50, verbose_name='رنگ')

    class Meta:
        verbose_name = 'آیتم سفارش'
        verbose_name_plural = 'آیتم‌های سفارش'

    def __str__(self):
        return f"{self.quantity} عدد {self.product.name} - سفارش #{self.order.id}"

    def get_total_price(self):
        """محاسبه قیمت کل آیتم (بدون اعمال تخفیف)"""
        return self.price * self.quantity

    def get_discount_amount(self):
        """محاسبه مبلغ تخفیف"""
        if self.discount > 0:
            return (self.price * self.quantity * self.discount) / 100
        return 0

    def get_final_price(self):
        """محاسبه قیمت نهایی آیتم (با اعمال تخفیف)"""
        return self.get_total_price() - self.get_discount_amount()


class Payment(models.Model):
    """مدل پرداخت‌های سفارش"""
    STATUS_CHOICES = [
        ('pending', 'در انتظار پرداخت'),
        ('successful', 'موفق'),
        ('failed', 'ناموفق'),
        ('refunded', 'مسترد شده'),
    ]

    order = models.ForeignKey(Order, on_delete=models.CASCADE, related_name='payments', verbose_name='سفارش')
    amount = models.PositiveIntegerField(verbose_name='مبلغ پرداختی')
    transaction_id = models.CharField(max_length=100, blank=True, null=True, verbose_name='شناسه تراکنش')
    reference_id = models.CharField(max_length=100, blank=True, null=True, verbose_name='شناسه مرجع')

    gateway = models.CharField(max_length=50, verbose_name='درگاه پرداخت')
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending', verbose_name='وضعیت پرداخت')

    created_at = models.DateTimeField(auto_now_add=True, verbose_name='تاریخ ایجاد')
    updated_at = models.DateTimeField(auto_now=True, verbose_name='تاریخ بروزرسانی')

    class Meta:
        verbose_name = 'پرداخت'
        verbose_name_plural = 'پرداخت‌ها'
        ordering = ['-created_at']

    def __str__(self):
        return f"پرداخت {self.amount} تومان - سفارش #{self.order.id}"


class Shipment(models.Model):
    """مدل اطلاعات ارسال سفارش"""
    STATUS_CHOICES = [
        ('processing', 'در حال آماده‌سازی'),
        ('shipped', 'ارسال شده'),
        ('delivered', 'تحویل داده شده'),
        ('returned', 'مرجوع شده'),
    ]

    order = models.ForeignKey(Order, on_delete=models.CASCADE, related_name='shipments', verbose_name='سفارش')
    tracking_code = models.CharField(max_length=50, blank=True, null=True, verbose_name='کد پیگیری')
    carrier = models.CharField(max_length=100, verbose_name='شرکت حمل و نقل')
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='processing', verbose_name='وضعیت ارسال')

    shipping_date = models.DateTimeField(null=True, blank=True, verbose_name='تاریخ ارسال')
    estimated_delivery = models.DateTimeField(null=True, blank=True, verbose_name='تاریخ تخمینی تحویل')
    delivery_date = models.DateTimeField(null=True, blank=True, verbose_name='تاریخ تحویل')

    created_at = models.DateTimeField(auto_now_add=True, verbose_name='تاریخ ایجاد')
    updated_at = models.DateTimeField(auto_now=True, verbose_name='تاریخ بروزرسانی')

    class Meta:
        verbose_name = 'اطلاعات ارسال'
        verbose_name_plural = 'اطلاعات ارسال‌ها'
        ordering = ['-created_at']

    def __str__(self):
        return f"ارسال سفارش #{self.order.id} - {self.get_status_display()}"

====== FILE: orders/apps.py ======

from django.apps import AppConfig


class OrdersConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'orders'


====== FILE: orders/views.py ======

from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.utils import timezone
from cart.models import CartItem
from users.models import Address
from .models import Order, OrderItem
from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from django.http import JsonResponse
from django.views.decorators.http import require_POST
from django.contrib import messages
from .models import Order, OrderItem

# @login_required
# def checkout(request):
#     """صفحه تکمیل سفارش"""
#     cart_items = CartItem.objects.filter(user=request.user)
#     addresses = Address.objects.filter(user=request.user)
#
#     # بررسی خالی نبودن سبد خرید
#     if not cart_items.exists():
#         messages.error(request, 'سبد خرید شما خالی است.')
#         return redirect('cart:summary')
#
#     # محاسبه مجموع قیمت‌ها
#     subtotal = sum(item.get_total_price() for item in cart_items)
#     discount = sum(item.get_discount_amount() for item in cart_items)
#
#     # محاسبه هزینه ارسال
#     shipping_cost = 30000 if subtotal < 300000 else 0
#
#     # محاسبه مبلغ نهایی
#     total = subtotal - discount + shipping_cost
#
#     cart_total = {
#         'total_items': sum(item.quantity for item in cart_items),
#         'subtotal': subtotal,
#         'discount': discount,
#         'shipping_cost': shipping_cost,
#         'total': total
#     }
#
#     if request.method == 'POST':
#         # دریافت اطلاعات سفارش
#         address_id = request.POST.get('address_id')
#         shipping_method = request.POST.get('shipping_method')
#         payment_method = request.POST.get('payment_method')
#         description = request.POST.get('description', '')
#
#         # بررسی انتخاب آدرس
#         if not address_id:
#             messages.error(request, 'لطفاً یک آدرس انتخاب کنید.')
#             return redirect('orders:checkout')
#
#         address = get_object_or_404(Address, id=address_id, user=request.user)
#
#         # محاسبه هزینه ارسال بر اساس روش ارسال
#         if shipping_method == 'express':
#             shipping_cost = 50000
#         else:  # standard
#             shipping_cost = 30000 if subtotal < 300000 else 0
#
#         # ایجاد سفارش جدید
#         order = Order.objects.create(
#             user=request.user,
#             address=address,
#             shipping_method=shipping_method,
#             payment_method=payment_method,
#             description=description,
#             subtotal=subtotal,
#             discount=discount,
#             shipping_cost=shipping_cost,
#             total_price=subtotal - discount + shipping_cost
#         )
#
#         # ایجاد آیتم‌های سفارش
#         for cart_item in cart_items:
#             OrderItem.objects.create(
#                 order=order,
#                 product=cart_item.product,
#                 size=cart_item.size,
#                 color=cart_item.color,
#                 quantity=cart_item.quantity,
#                 price=cart_item.product.price,
#                 discount=cart_item.discount
#             )
#
#         # خالی کردن سبد خرید
#         cart_items.delete()
#
#         # هدایت به صفحه پرداخت یا تأیید سفارش
#         if payment_method == 'online':
#             return redirect('orders:payment', order_id=order.id)
#         else:  # cash
#             order.status = 'confirmed'
#             order.save()
#             messages.success(request, 'سفارش شما با موفقیت ثبت شد.')
#             return redirect('orders:confirmation', order_id=order.id)
#
#     context = {
#         'cart_items': cart_items,
#         'cart_total': cart_total,
#         'addresses': addresses,
#     }
#
#     return render(request, 'orders/checkout.html', context)
#
#
# @login_required
# def payment(request, order_id):
#     """صفحه پرداخت"""
#     order = get_object_or_404(Order, id=order_id, user=request.user)
#
#     # اگر سفارش قبلاً پرداخت شده باشد
#     if order.status != 'pending':
#         messages.warning(request, 'این سفارش قبلاً پرداخت شده است.')
#         return redirect('orders:list')
#
#     # در اینجا اتصال به درگاه پرداخت انجام می‌شود
#     # ...
#
#     # برای نمونه، فرض می‌کنیم پرداخت موفق بوده است
#     if request.method == 'POST':
#         order.status = 'paid'
#         order.payment_date = timezone.now()
#         order.save()
#
#         messages.success(request, 'پرداخت با موفقیت انجام شد.')
#         return redirect('orders:confirmation', order_id=order.id)
#
#     return render(request, 'orders/payment.html', {'order': order})
#
#
# @login_required
# def order_confirmation(request, order_id):
#     """صفحه تأیید سفارش"""
#     order = get_object_or_404(Order, id=order_id, user=request.user)
#     return render(request, 'orders/confirmation.html', {'order': order})
#
#
# @login_required
# def order_list(request):
#     """لیست سفارشات کاربر"""
#     orders = Order.objects.filter(user=request.user).order_by('-created_at')
#     return render(request, 'orders/list.html', {'orders': orders})
#
#
# @login_required
# def order_detail(request, order_id):
#     """جزئیات سفارش"""
#     order = get_object_or_404(Order, id=order_id, user=request.user)
#     return render(request, 'orders/detail.html', {'order': order})


@login_required
def order_list(request):
    orders = Order.objects.filter(user=request.user).prefetch_related('items__product')
    return render(request, 'orders/list.html', {'orders': orders})

@login_required
def order_detail(request, order_id):
    order = get_object_or_404(Order, id=order_id, user=request.user)
    return render(request, 'orders/detail.html', {'order': order})

@login_required
@require_POST
def cancel_order(request, order_id):
    try:
        order = Order.objects.get(id=order_id, user=request.user)
        if order.status == 'pending':
            order.status = 'cancelled'
            order.save()
            return JsonResponse({'success': True})
        else:
            return JsonResponse({'success': False, 'message': 'این سفارش قابل لغو نیست'})
    except Order.DoesNotExist:
        return JsonResponse({'success': False, 'message': 'سفارش یافت نشد'})

@login_required
@require_POST
def reorder(request, order_id):
    try:
        order = Order.objects.get(id=order_id, user=request.user)
        # اینجا منطق افزودن مجدد آیتم‌ها به سبد خرید
        # فعلاً فقط پیام موفقیت برمی‌گردانیم
        return JsonResponse({'success': True})
    except Order.DoesNotExist:
        return JsonResponse({'success': False, 'message': 'سفارش یافت نشد'})

====== FILE: orders/urls.py ======

from django.urls import path
from . import views

app_name = 'orders'

urlpatterns = [
    path('', views.order_list, name='list'),
    path('<int:order_id>/', views.order_detail, name='detail'),
    path('cancel/<int:order_id>/', views.cancel_order, name='cancel'),
    path('reorder/<int:order_id>/', views.reorder, name='reorder'),
]

====== FILE: orders/tasks.py ======

from django.utils.timezone import now

from cart.models import CartItem


def delete_expired_cart_items():
    expired_items = CartItem.objects.filter(expires_at__lt=now())
    expired_items.delete()

====== FILE: orders/serializers.py ======

from rest_framework import serializers
from .models import Order, CartItem


class OrderSerializer(serializers.ModelSerializer):
    class Meta:
        model = Order
        fields = '__all__'


class CartItemSerializer(serializers.ModelSerializer):
    total_price = serializers.ReadOnlyField()

    class Meta:
        model = CartItem
        fields = ['id', 'user', 'product', 'quantity', 'total_price']

====== FILE: orders/tests.py ======

from django.test import TestCase

# Create your tests here.


====== FILE: orders/migrations/__init__.py ======



====== FILE: orders/migrations/0001_initial.py ======

# Generated by Django 5.1.5 on 2025-05-20 07:44

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('products', '0004_color_size_product_inventory_and_more'),
        ('users', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'در انتظار پرداخت'), ('paid', 'پرداخت شده'), ('processing', 'در حال پردازش'), ('shipped', 'ارسال شده'), ('delivered', 'تحویل داده شده'), ('cancelled', 'لغو شده'), ('refunded', 'مسترد شده')], default='pending', max_length=20, verbose_name='وضعیت سفارش')),
                ('shipping_method', models.CharField(choices=[('standard', 'ارسال عادی'), ('express', 'ارسال سریع')], default='standard', max_length=20, verbose_name='روش ارسال')),
                ('payment_method', models.CharField(choices=[('online', 'پرداخت آنلاین'), ('cash', 'پرداخت در محل')], default='online', max_length=20, verbose_name='روش پرداخت')),
                ('subtotal', models.PositiveIntegerField(verbose_name='مجموع قیمت محصولات')),
                ('discount', models.PositiveIntegerField(default=0, verbose_name='تخفیف')),
                ('shipping_cost', models.PositiveIntegerField(default=0, verbose_name='هزینه ارسال')),
                ('total_price', models.PositiveIntegerField(verbose_name='مبلغ کل')),
                ('tracking_code', models.CharField(blank=True, max_length=50, null=True, verbose_name='کد پیگیری')),
                ('transaction_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='شناسه تراکنش')),
                ('description', models.TextField(blank=True, verbose_name='توضیحات سفارش')),
                ('admin_note', models.TextField(blank=True, verbose_name='یادداشت مدیر')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='تاریخ ایجاد')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='تاریخ بروزرسانی')),
                ('payment_date', models.DateTimeField(blank=True, null=True, verbose_name='تاریخ پرداخت')),
                ('shipping_date', models.DateTimeField(blank=True, null=True, verbose_name='تاریخ ارسال')),
                ('delivery_date', models.DateTimeField(blank=True, null=True, verbose_name='تاریخ تحویل')),
                ('address', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='orders', to='users.address', verbose_name='آدرس تحویل')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to=settings.AUTH_USER_MODEL, verbose_name='کاربر')),
            ],
            options={
                'verbose_name': 'سفارش',
                'verbose_name_plural': 'سفارش\u200cها',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1, verbose_name='تعداد')),
                ('price', models.PositiveIntegerField(verbose_name='قیمت واحد')),
                ('discount', models.PositiveIntegerField(default=0, verbose_name='درصد تخفیف')),
                ('size', models.CharField(max_length=10, verbose_name='سایز')),
                ('color', models.CharField(max_length=50, verbose_name='رنگ')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='orders.order', verbose_name='سفارش')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='order_items', to='products.product', verbose_name='محصول')),
            ],
            options={
                'verbose_name': 'آیتم سفارش',
                'verbose_name_plural': 'آیتم\u200cهای سفارش',
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.PositiveIntegerField(verbose_name='مبلغ پرداختی')),
                ('transaction_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='شناسه تراکنش')),
                ('reference_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='شناسه مرجع')),
                ('gateway', models.CharField(max_length=50, verbose_name='درگاه پرداخت')),
                ('status', models.CharField(choices=[('pending', 'در انتظار پرداخت'), ('successful', 'موفق'), ('failed', 'ناموفق'), ('refunded', 'مسترد شده')], default='pending', max_length=20, verbose_name='وضعیت پرداخت')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='تاریخ ایجاد')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='تاریخ بروزرسانی')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='orders.order', verbose_name='سفارش')),
            ],
            options={
                'verbose_name': 'پرداخت',
                'verbose_name_plural': 'پرداخت\u200cها',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Shipment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tracking_code', models.CharField(blank=True, max_length=50, null=True, verbose_name='کد پیگیری')),
                ('carrier', models.CharField(max_length=100, verbose_name='شرکت حمل و نقل')),
                ('status', models.CharField(choices=[('processing', 'در حال آماده\u200cسازی'), ('shipped', 'ارسال شده'), ('delivered', 'تحویل داده شده'), ('returned', 'مرجوع شده')], default='processing', max_length=20, verbose_name='وضعیت ارسال')),
                ('shipping_date', models.DateTimeField(blank=True, null=True, verbose_name='تاریخ ارسال')),
                ('estimated_delivery', models.DateTimeField(blank=True, null=True, verbose_name='تاریخ تخمینی تحویل')),
                ('delivery_date', models.DateTimeField(blank=True, null=True, verbose_name='تاریخ تحویل')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='تاریخ ایجاد')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='تاریخ بروزرسانی')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shipments', to='orders.order', verbose_name='سفارش')),
            ],
            options={
                'verbose_name': 'اطلاعات ارسال',
                'verbose_name_plural': 'اطلاعات ارسال\u200cها',
                'ordering': ['-created_at'],
            },
        ),
    ]


====== FILE: pages/__init__.py ======



====== FILE: pages/admin.py ======

# در فایل pages/admin.py
from django.contrib import admin
from django.utils.html import format_html
from .models import Slider

from django.contrib import admin
from django.utils.html import format_html
from .models import Slider


@admin.register(Slider)
class SliderAdmin(admin.ModelAdmin):
    list_display = ('title', 'thumbnail', 'is_active', 'order')
    list_filter = ('is_active',)
    search_fields = ('title', 'subtitle')
    readonly_fields = ('preview_image',)

    fieldsets = (
        ('اطلاعات اصلی', {
            'fields': ('title', 'subtitle', 'link')
        }),
        ('تصویر', {
            'fields': ('image', 'preview_image'),
            'description': 'برای بهترین نتیجه، تصویری با نسبت 16:9 (مثلاً 1920×1080) و کیفیت بالا آپلود کنید.'
        }),
        ('تنظیمات نمایش', {
            'fields': ('order', 'is_active')
        }),
    )

    def thumbnail(self, obj):
        if obj.image:
            return format_html('<img src="{}" width="100" style="max-height: 60px; width: auto;" />', obj.image.url)
        return "بدون تصویر"

    thumbnail.short_description = "تصویر"

    def preview_image(self, obj):
        if obj.image:
            # نمایش تصویر با اندازه واقعی و مقیاس مناسب (بدون برش)
            return format_html('''
                <div style="margin-top: 10px; margin-bottom: 10px;">
                    <img src="{}" style="max-width: 100%; max-height: 400px; width: auto; height: auto;" />
                    <p style="margin-top: 5px; color: #666;">ابعاد تصویر: {}x{} پیکسل</p>
                </div>
            ''', obj.image.url, obj.image.width, obj.image.height)
        return "تصویری انتخاب نشده است."

    preview_image.short_description = "پیش‌نمایش تصویر (اندازه واقعی)"

====== FILE: pages/models.py ======

from django.db import models
from django.utils.translation import gettext_lazy as _
from PIL import Image
import os


class Slider(models.Model):
    title = models.CharField(_('عنوان'), max_length=200)
    subtitle = models.CharField(_('زیرعنوان'), max_length=300, blank=True)
    image = models.ImageField(
        _('تصویر'),
        upload_to='sliders/',
        help_text=_('فرمت‌های مجاز: JPG, JPEG, PNG, GIF, WebP')
    )
    link = models.URLField(_('لینک'), blank=True)
    is_active = models.BooleanField(_('فعال'), default=True)
    order = models.PositiveIntegerField(_('ترتیب'), default=0)
    created_at = models.DateTimeField(_('تاریخ ایجاد'), auto_now_add=True)
    updated_at = models.DateTimeField(_('تاریخ بروزرسانی'), auto_now=True)

    class Meta:
        verbose_name = _('اسلایدر')
        verbose_name_plural = _('اسلایدرها')
        ordering = ['order', '-created_at']

    def __str__(self):
        return self.title

    def save(self, *args, **kwargs):
        super().save(*args, **kwargs)

        if self.image:
            img_path = self.image.path
            img = Image.open(img_path)

            width, height = img.size
            target_ratio = 16 / 9
            current_ratio = width / height

            if current_ratio > target_ratio:  # تصویر عریض‌تر از نسبت هدف
                new_height = height
                new_width = int(height * target_ratio)
                new_img = Image.new('RGB', (new_width, new_height), (0, 0, 0))
                paste_x = (new_width - width) // 2
                new_img.paste(img, (paste_x, 0))
            elif current_ratio < target_ratio:  # تصویر بلندتر از نسبت هدف
                new_width = width
                new_height = int(width / target_ratio)
                new_img = Image.new('RGB', (new_width, new_height), (0, 0, 0))
                paste_y = (new_height - height) // 2
                new_img.paste(img, (0, paste_y))
            else:
                new_img = img

            new_img.save(img_path, quality=95, optimize=True)

====== FILE: pages/apps.py ======

from django.apps import AppConfig


class PagesConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'pages'


====== FILE: pages/views.py ======

from django.shortcuts import render
from django.shortcuts import render
from .models import Slider
from products.models import Product, Banner, Category


def home(request):
    sliders = Slider.objects.filter(is_active=True).order_by('order')

    main_categories = {
        'mens': Category.objects.filter(slug='mens-clothing').first(),
        'womens': Category.objects.filter(slug='womens-clothing').first(),
        'boys': Category.objects.filter(slug='boys-clothing').first(),
        'girls': Category.objects.filter(slug='girls-clothing').first(),
    }
    featured_products = Product.objects.filter(is_active=True, is_featured=True).order_by('-created_at')[:8]

    new_products = Product.objects.filter(is_active=True).order_by('-created_at')[:8]

    top_banners = Banner.objects.filter(is_active=True, position='home_top').order_by('order')
    middle_banners = Banner.objects.filter(is_active=True, position='home_middle').order_by('order')
    bottom_banners = Banner.objects.filter(is_active=True, position='home_bottom').order_by('order')
    sidebar_banners = Banner.objects.filter(is_active=True, position='sidebar').order_by('order')  # اضافه شد

    context = {
        'sliders': sliders,
        'featured_products': featured_products,
        'new_products': new_products,
        'top_banners': top_banners,
        'middle_banners': middle_banners,
        'bottom_banners': bottom_banners,
        'sidebar_banners': sidebar_banners,  # اضافه شد
        'main_categories': main_categories,
    }
    return render(request, 'pages/home.html', context)


def about(request):
    """صفحه درباره ما"""
    return render(request, 'pages/about.html')


def contact(request):
    """صفحه تماس با ما"""
    return render(request, 'pages/contact.html')


def faq(request):
    """صفحه سوالات متداول"""
    return render(request, 'pages/faq.html')


def privacy(request):
    """صفحه حریم خصوصی"""
    return render(request, 'pages/privacy.html')


def terms(request):
    """صفحه قوانین و مقررات"""
    return render(request, 'pages/terms.html')


def shipping(request):
    """صفحه شیوه‌های ارسال"""
    return render(request, 'pages/shipping.html')


def returns(request):
    """صفحه شرایط بازگشت کالا"""
    return render(request, 'pages/returns.html')


def newsletter(request):
    """عضویت در خبرنامه"""
    if request.method == 'POST':
        email = request.POST.get('email')
        from django.contrib import messages
        messages.success(request, 'ایمیل شما با موفقیت در خبرنامه ثبت شد.')

    from django.shortcuts import redirect
    return redirect(request.META.get('HTTP_REFERER', 'home'))

====== FILE: pages/urls.py ======

from django.urls import path
from . import views

app_name = 'pages'

urlpatterns = [
    path('', views.home, name='home'),
    path('about/', views.about, name='about'),
    path('contact/', views.contact, name='contact'),
    path('faq/', views.faq, name='faq'),
    path('terms/', views.terms, name='terms'),
    path('newsletter/', views.newsletter, name='newsletter'),
    path('privacy/', views.privacy, name='privacy'),
    path('returns/', views.returns, name='returns'),

    path('shipping/', views.shipping, name='shipping'),
]


====== FILE: pages/tests.py ======

from django.test import TestCase

# Create your tests here.


====== FILE: pages/migrations/__init__.py ======



====== FILE: pages/migrations/0001_initial.py ======

# Generated by Django 5.1.5 on 2025-05-17 09:09

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Slider',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='عنوان')),
                ('subtitle', models.CharField(blank=True, max_length=300, verbose_name='زیرعنوان')),
                ('image', models.ImageField(help_text='فرمت\u200cهای مجاز: JPG, JPEG, PNG, GIF, WebP', upload_to='sliders/', verbose_name='تصویر')),
                ('link', models.URLField(blank=True, verbose_name='لینک')),
                ('is_active', models.BooleanField(default=True, verbose_name='فعال')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='ترتیب')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='تاریخ ایجاد')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='تاریخ بروزرسانی')),
            ],
            options={
                'verbose_name': 'اسلایدر',
                'verbose_name_plural': 'اسلایدرها',
                'ordering': ['order', '-created_at'],
            },
        ),
    ]


====== FILE: products/__init__.py ======



====== FILE: products/admin.py ======

from django.contrib import admin
from django.utils.html import format_html
from .models import Category, Product, ProductImage, Tag, Review, ProductInventory, Color, Size, ProductFeature, Banner


class ProductImageInline(admin.TabularInline):
    model = ProductImage
    extra = 1
    fields = ('image', 'alt_text', 'is_main', 'display_image')
    readonly_fields = ('display_image',)

    def display_image(self, obj):
        if obj.image:
            return format_html('<img src="{}" width="100" />', obj.image.url)
        return "بدون تصویر"

    display_image.short_description = "پیش‌نمایش"


class ProductInventoryInline(admin.TabularInline):
    model = ProductInventory
    extra = 1
    fields = ('color', 'size', 'quantity')


class ProductFeatureInline(admin.TabularInline):
    model = ProductFeature
    extra = 1
    fields = ('name', 'value')


@admin.register(Product)
class ProductAdmin(admin.ModelAdmin):
    list_display = (
        'display_image', 'name', 'category', 'price', 'get_discount_price',
        'total_stock', 'is_active', 'is_featured', 'created_at'
    )
    list_filter = ('is_active', 'is_featured', 'category', 'brand', 'gender', 'created_at')
    search_fields = ('name', 'description', 'brand')
    prepopulated_fields = {'slug': ('name',)}
    list_editable = ('is_active', 'is_featured')
    inlines = [ProductImageInline, ProductFeatureInline, ProductInventoryInline]

    fieldsets = (
        ('اطلاعات اصلی', {
            'fields': ('name', 'slug', 'category', 'brand', 'gender', 'is_active', 'is_featured')
        }),
        ('توضیحات', {
            'fields': ('description', 'short_description')
        }),
        ('قیمت‌گذاری', {
            'fields': ('price', 'discount_percent')
        }),
        ('ویژگی‌های فیزیکی', {
            'fields': ('weight',)
        }),
        ('مشخصات فیزیکی', {
            'fields': ('dimensions',),
            'description': 'ابعاد محصول را وارد کنید. مثال: عرض شانه: 45 سانتی‌متر، قد: 70 سانتی‌متر'
        }),
        ('سئو', {
            'fields': ('meta_title', 'meta_description', 'meta_keywords'),
            'classes': ('collapse',)
        }),
    )

    def get_discount_price(self, obj):
        return obj.get_discount_price()

    get_discount_price.short_description = "قیمت با تخفیف"

    def total_stock(self, obj):
        return obj.total_stock

    total_stock.short_description = "موجودی کل"

    def display_image(self, obj):
        main_image = obj.get_main_image()
        if main_image and main_image.image:
            return format_html('<img src="{}" width="50" height="50" style="object-fit: cover;" />',
                               main_image.image.url)
        return "بدون تصویر"

    display_image.short_description = "تصویر"


@admin.register(Category)
class CategoryAdmin(admin.ModelAdmin):
    list_display = ('display_image', 'name', 'parent', 'is_active', 'get_products_count')
    list_filter = ('is_active', 'parent')
    search_fields = ('name', 'description')
    prepopulated_fields = {'slug': ('name',)}

    def get_products_count(self, obj):
        return obj.get_products_count

    get_products_count.short_description = "تعداد محصولات"

    def display_image(self, obj):
        if obj.image:
            return format_html('<img src="{}" width="50" height="50" style="object-fit: cover;" />', obj.image.url)
        return "بدون تصویر"

    display_image.short_description = "تصویر"


@admin.register(ProductImage)
class ProductImageAdmin(admin.ModelAdmin):
    list_display = ('product', 'display_image', 'is_main', 'alt_text')
    list_filter = ('is_main', 'product')
    search_fields = ('product__name', 'alt_text')

    def display_image(self, obj):
        if obj.image:
            return format_html('<img src="{}" width="100" />', obj.image.url)
        return "بدون تصویر"

    display_image.short_description = "پیش‌نمایش"


@admin.register(Review)
class ReviewAdmin(admin.ModelAdmin):
    list_display = ('product', 'user', 'rating', 'created_at', 'is_approved')
    list_filter = ('is_approved', 'rating', 'created_at')
    search_fields = ('product__name', 'user__username', 'comment')
    list_editable = ('is_approved',)


@admin.register(Color)
class ColorAdmin(admin.ModelAdmin):
    list_display = ['name', 'color_preview']
    search_fields = ['name']
    ordering = ['name']

    def color_preview(self, obj):
        return format_html(
            '<div style="width: 25px; height: 25px; background-color: {}; border-radius: 50%; border: 1px solid #ccc;"></div>',
            obj.hex_code,
        )
    color_preview.short_description = 'پیش‌نمایش'

@admin.register(Size)
class SizeAdmin(admin.ModelAdmin):
    list_display = ['name', 'id']
    search_fields = ['name']
    ordering = ['name']


@admin.register(ProductInventory)
class ProductInventoryAdmin(admin.ModelAdmin):
    list_display = ('product', 'color', 'size', 'quantity', 'weight', 'dimensions')
    list_filter = ('product', 'color', 'size')
    search_fields = ('product__name', 'color__name', 'size__name')

    fieldsets = (
        ('اطلاعات اصلی', {
            'fields': ('product', 'color', 'size', 'quantity')
        }),
        ('مشخصات فیزیکی', {
            'fields': ('weight', 'dimensions'),
            'classes': ('collapse',),
            'description': 'مشخصات فیزیکی مختص این سایز و رنگ را وارد کنید.'
        }),
    )


@admin.register(Tag)
class TagAdmin(admin.ModelAdmin):
    list_display = ('name', 'slug')
    search_fields = ('name',)
    prepopulated_fields = {'slug': ('name',)}
    filter_horizontal = ('products',)


@admin.register(Banner)
class BannerAdmin(admin.ModelAdmin):
    list_display = ('display_image', 'title', 'position', 'order', 'is_active')
    list_filter = ('position', 'is_active')
    search_fields = ('title', 'subtitle')
    list_editable = ('is_active', 'order')

    def display_image(self, obj):
        if obj.image:
            return format_html('<img src="{}" width="50" height="50" style="object-fit: cover;" />', obj.image.url)
        return "بدون تصویر"

    display_image.short_description = "تصویر"


@admin.register(ProductFeature)
class ProductFeatureAdmin(admin.ModelAdmin):
    list_display = ('product', 'name', 'value')
    list_filter = ('product',)
    search_fields = ('product__name', 'name', 'value')

====== FILE: products/forms.py ======

from django import forms
from .models import Review

class ReviewForm(forms.ModelForm):
    """فرم ثبت نظر برای محصول"""
    class Meta:
        model = Review
        fields = ('rating', 'comment')
        widgets = {
            'comment': forms.Textarea(attrs={'rows': 3}),
        }

====== FILE: products/models.py ======

from django.db import models
from django.db.models import Sum
from django.utils.text import slugify
from django.conf import settings
from django.core.validators import MinValueValidator, MaxValueValidator
from django.utils.translation import gettext_lazy as _
import uuid
import os


def get_product_image_path(instance, filename):
    ext = filename.split('.')[-1].lower()
    filename = f"{uuid.uuid4()}.{ext}"
    return os.path.join('products', str(instance.product.id), filename)


def get_category_image_path(instance, filename):
    ext = filename.split('.')[-1].lower()
    filename = f"{uuid.uuid4()}.{ext}"
    return os.path.join('categories', filename)


class Category(models.Model):
    name = models.CharField(max_length=100, verbose_name='نام دسته‌بندی')
    slug = models.SlugField(max_length=120, unique=True, verbose_name='اسلاگ')
    parent = models.ForeignKey('self', on_delete=models.CASCADE, null=True, blank=True,
                               related_name='children', verbose_name='دسته‌بندی والد')
    description = models.TextField(blank=True, verbose_name='توضیحات')
    image = models.ImageField(
        upload_to=get_category_image_path,
        blank=True,
        verbose_name='تصویر',
        help_text=_('فرمت‌های مجاز: JPG, JPEG, PNG, GIF, WebP')
    )
    is_active = models.BooleanField(default=True, verbose_name='فعال')
    created_at = models.DateTimeField(auto_now_add=True, verbose_name='تاریخ ایجاد')
    updated_at = models.DateTimeField(auto_now=True, verbose_name='تاریخ بروزرسانی')

    class Meta:
        verbose_name = 'دسته‌بندی'
        verbose_name_plural = 'دسته‌بندی‌ها'
        ordering = ['name']

    def __str__(self):
        full_path = [self.name]
        parent = self.parent

        while parent is not None:
            full_path.append(parent.name)
            parent = parent.parent

        return ' > '.join(full_path[::-1])

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.name)
        super().save(*args, **kwargs)

    def get_absolute_url(self):
        from django.urls import reverse
        return reverse('products:product_detail', kwargs={'slug': self.slug})

    def get_all_sizes(self):
        product_ids = self.products.filter(is_active=True).values_list('id', flat=True)
        return Size.objects.filter(
            productinventory__product_id__in=product_ids,
            productinventory__quantity__gt=0
        ).distinct().order_by('name')

    def get_all_colors(self):
        product_ids = self.products.filter(is_active=True).values_list('id', flat=True)
        return Color.objects.filter(
            productinventory__product_id__in=product_ids,
            productinventory__quantity__gt=0
        ).distinct().order_by('name')

    @property
    def get_products_count(self):
        return self.products.filter(is_active=True).count()



class Product(models.Model):
    """مدل محصولات"""
    GENDER_CHOICES = [
        ('men', 'مردانه'),
        ('women', 'زنانه'),
        ('unisex', 'یونیسکس'),
    ]

    name = models.CharField(max_length=200, verbose_name='نام محصول')
    slug = models.SlugField(max_length=220, unique=True, verbose_name='اسلاگ')
    category = models.ForeignKey(Category, on_delete=models.CASCADE, related_name='products', verbose_name='دسته‌بندی')
    brand = models.CharField(max_length=100, verbose_name='برند')
    gender = models.CharField(max_length=10, choices=GENDER_CHOICES, verbose_name='جنسیت')

    description = models.TextField(verbose_name='توضیحات')
    short_description = models.TextField(blank=True, verbose_name='توضیحات کوتاه')

    price = models.PositiveIntegerField(verbose_name='قیمت (تومان)')
    discount_percent = models.PositiveIntegerField(default=0, validators=[MaxValueValidator(100)],
                                                   verbose_name='درصد تخفیف')

    # stock = models.PositiveIntegerField(default=0, verbose_name='موجودی')
    is_active = models.BooleanField(default=True, verbose_name='فعال')
    is_featured = models.BooleanField(default=False, verbose_name='محصول ویژه')

    sizes = models.JSONField(default=list, verbose_name='سایزها',
                             help_text='به صورت آرایه‌ای از سایزها مانند ["S", "M", "L"]')
    colors = models.JSONField(default=list, verbose_name='رنگ‌ها',
                              help_text='به صورت آرایه‌ای از رنگ‌ها مانند ["سفید", "مشکی", "آبی"]')
    color_codes = models.JSONField(default=list, verbose_name='کد رنگ‌ها',
                                   help_text='به صورت آرایه‌ای از کدهای رنگ مانند ["#FFFFFF", "#000000", "#0000FF"]')

    inventory = models.JSONField(default=dict, verbose_name='موجودی بر اساس رنگ و سایز',
                                 help_text='دیکشنری از موجودی هر ترکیب رنگ و سایز مانند {"S-سفید": 10, "M-سفید": 5}')

    price_adjustments = models.JSONField(default=dict, verbose_name='تغییرات قیمت',
                                         help_text='دیکشنری از تغییرات قیمت مانند {"S": 0, "M": 10000, "L": 20000}')

    weight = models.PositiveIntegerField(default=0, verbose_name='وزن (گرم)')
    dimensions = models.CharField(max_length=100, blank=True, verbose_name='ابعاد',
                                  help_text='مثال: 30x20x10 سانتی‌متر')

    meta_title = models.CharField(max_length=200, blank=True, verbose_name='عنوان متا')
    meta_description = models.TextField(blank=True, verbose_name='توضیحات متا')
    meta_keywords = models.CharField(max_length=300, blank=True, verbose_name='کلمات کلیدی متا')

    created_at = models.DateTimeField(auto_now_add=True, verbose_name='تاریخ ایجاد')
    updated_at = models.DateTimeField(auto_now=True, verbose_name='تاریخ بروزرسانی')

    total_sales = models.PositiveIntegerField(default=0, verbose_name='تعداد فروش')

    class Meta:
        verbose_name = 'محصول'
        verbose_name_plural = 'محصولات'
        ordering = ['-created_at']

    def __str__(self):
        return self.name

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.name)
        if not self.meta_title:
            self.meta_title = self.name
        if not self.meta_description:
            self.meta_description = self.short_description or self.description[:160]
        super().save(*args, **kwargs)

    def get_absolute_url(self):
        from django.urls import reverse
        return reverse('products:detail', kwargs={'product_id': self.id})

    def get_display_price(self):
        """قیمت نمایشی محصول (با احتساب تخفیف)"""
        return self.get_discount_price()

    def get_available_sizes_display(self):
        """نمایش سایزهای موجود به صورت رشته"""
        sizes = self.get_available_sizes()
        return '-'.join([size.name for size in sizes]) if sizes else 'ناموجود'

    @property
    def is_new(self):
        """بررسی اینکه محصول جدید است یا نه (کمتر از 30 روز)"""
        from django.utils import timezone
        from datetime import timedelta
        return self.created_at >= timezone.now() - timedelta(days=30)


    def get_discount_price(self):
        if self.discount_percent > 0:
            discount_amount = (self.price * self.discount_percent) / 100
            return int(self.price - discount_amount)
        return self.price

    def get_available_colors(self):
        from django.db.models import Q
        return Color.objects.filter(
            Q(productinventory__product=self) &
            Q(productinventory__quantity__gt=0)
        ).distinct()

    def get_available_sizes(self):
        from django.db.models import Q
        return Size.objects.filter(
            Q(productinventory__product=self) &
            Q(productinventory__quantity__gt=0)
        ).distinct()

    def get_inventory_for_color_size(self, color_id, size_id):
        try:
            return self.inventories.get(color_id=color_id, size_id=size_id)
        except ProductInventory.DoesNotExist:
            return None

    def get_price(self):
        return self.get_discount_price()

    def has_discount(self):
        return self.discount_percent > 0

    def in_stock(self):
        return self.is_in_stock

    def get_stock_for_variant(self, size, color):
        key = f"{size}-{color}"
        return self.inventory.get(key, 0)

    def get_price_for_size(self, size):
        base_price = self.get_discount_price()
        adjustment = self.price_adjustments.get(size, 0)
        return base_price + adjustment

    def get_color_info(self):
        result = []
        for i, color in enumerate(self.colors):
            code = self.color_codes[i] if i < len(self.color_codes) else "#000000"
            result.append({
                'name': color,
                'code': code
            })
        return result

    def get_main_image(self):
        main_image = self.images.filter(is_main=True).first()
        if main_image:
            return main_image
        return self.images.first()  # اگر تصویر اصلی نداشت، اولین تصویر را برگردان

    @property
    def total_stock(self):
        """موجودی کل محصول را از جمع موجودی‌های ProductInventory محاسبه می‌کند"""
        stock_sum = self.inventories.aggregate(total=Sum('quantity'))['total']
        return stock_sum or 0

    @property
    def is_in_stock(self):
        """بررسی می‌کند که آیا محصول بر اساس موجودی‌های رنگ و سایز، موجود است یا خیر"""
        return self.total_stock > 0

    def get_average_rating(self):
        from django.db.models import Avg
        avg_rating = self.reviews.aggregate(avg=Avg('rating'))['avg']
        return round(avg_rating, 1) if avg_rating else 0

    def get_rating_count(self):
        return self.reviews.count()


class ProductImage(models.Model):
    product = models.ForeignKey(Product, on_delete=models.CASCADE, related_name='images', verbose_name='محصول')
    image = models.ImageField(
        upload_to=get_product_image_path,
        verbose_name='تصویر',
        help_text=_('فرمت‌های مجاز: JPG, JPEG, PNG, GIF, WebP')
    )
    alt_text = models.CharField(max_length=200, blank=True, verbose_name='متن جایگزین')
    is_main = models.BooleanField(default=False, verbose_name='تصویر اصلی')
    created_at = models.DateTimeField(auto_now_add=True, verbose_name='تاریخ ایجاد')

    class Meta:
        verbose_name = 'تصویر محصول'
        verbose_name_plural = 'تصاویر محصول'
        ordering = ['-is_main', 'created_at']

    def __str__(self):
        return f"تصویر {self.product.name} - {self.id}"

    def save(self, *args, **kwargs):
        if not self.alt_text:
            self.alt_text = self.product.name

        if self.is_main:
            ProductImage.objects.filter(product=self.product, is_main=True).update(is_main=False)

        super().save(*args, **kwargs)


class ProductFeature(models.Model):
    product = models.ForeignKey(Product, on_delete=models.CASCADE, related_name='features', verbose_name='محصول')
    name = models.CharField(max_length=100, verbose_name='نام ویژگی')
    value = models.CharField(max_length=255, verbose_name='مقدار ویژگی')

    class Meta:
        verbose_name = 'ویژگی محصول'
        verbose_name_plural = 'ویژگی‌های محصول'
        unique_together = ['product', 'name']

    def __str__(self):
        return f"{self.name}: {self.value}"


class Review(models.Model):
    product = models.ForeignKey(Product, on_delete=models.CASCADE, related_name='reviews', verbose_name='محصول')
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='reviews',
                             verbose_name='کاربر')
    rating = models.PositiveSmallIntegerField(validators=[MinValueValidator(1), MaxValueValidator(5)],
                                              verbose_name='امتیاز')
    comment = models.TextField(verbose_name='نظر')
    created_at = models.DateTimeField(auto_now_add=True, verbose_name='تاریخ ثبت')
    updated_at = models.DateTimeField(auto_now=True, verbose_name='تاریخ بروزرسانی')
    is_approved = models.BooleanField(default=False, verbose_name='تایید شده')

    class Meta:
        verbose_name = 'نظر'
        verbose_name_plural = 'نظرات'
        ordering = ['-created_at']
        unique_together = ['product', 'user']  # هر کاربر فقط یک نظر می‌تواند برای هر محصول ثبت کند

    def __str__(self):
        return f"{self.user.username} - {self.product.name} - {self.rating} ستاره"


class Tag(models.Model):
    name = models.CharField(max_length=100, unique=True, verbose_name='نام تگ')
    slug = models.SlugField(max_length=120, unique=True, verbose_name='اسلاگ')
    products = models.ManyToManyField(Product, related_name='tags', blank=True, verbose_name='محصولات')

    class Meta:
        verbose_name = 'تگ'
        verbose_name_plural = 'تگ‌ها'
        ordering = ['name']

    def __str__(self):
        return self.name

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.name)
        super().save(*args, **kwargs)

    def get_absolute_url(self):
        from django.urls import reverse
        return reverse('products:tag', kwargs={'tag_slug': self.slug})


class Banner(models.Model):
    POSITION_CHOICES = [
        ('home_slider', 'اسلایدر صفحه اصلی'),
        ('home_top', 'بالای صفحه اصلی'),
        ('home_middle', 'وسط صفحه اصلی'),
        ('home_bottom', 'پایین صفحه اصلی'),
        ('category_top', 'بالای صفحه دسته‌بندی'),
        ('sidebar', 'ستون کناری'),
    ]

    title = models.CharField(max_length=200, verbose_name='عنوان')
    subtitle = models.CharField(max_length=300, blank=True, verbose_name='زیرعنوان')
    image = models.ImageField(
        upload_to='banners/',
        verbose_name='تصویر',
        help_text=_('فرمت‌های مجاز: JPG, JPEG, PNG, GIF, WebP')
    )
    url = models.URLField(verbose_name='لینک')
    position = models.CharField(max_length=20, choices=POSITION_CHOICES, verbose_name='موقعیت')
    order = models.PositiveSmallIntegerField(default=0, verbose_name='ترتیب نمایش')
    is_active = models.BooleanField(default=True, verbose_name='فعال')
    start_date = models.DateTimeField(null=True, blank=True, verbose_name='تاریخ شروع نمایش')
    end_date = models.DateTimeField(null=True, blank=True, verbose_name='تاریخ پایان نمایش')
    created_at = models.DateTimeField(auto_now_add=True, verbose_name='تاریخ ایجاد')
    updated_at = models.DateTimeField(auto_now=True, verbose_name='تاریخ بروزرسانی')

    class Meta:
        verbose_name = 'بنر تبلیغاتی'
        verbose_name_plural = 'بنرهای تبلیغاتی'
        ordering = ['position', 'order', '-created_at']

    def __str__(self):
        return f"{self.title} - {self.get_position_display()}"

    def is_visible(self):
        from django.utils import timezone
        now = timezone.now()

        if not self.is_active:
            return False

        if self.start_date and self.start_date > now:
            return False

        if self.end_date and self.end_date < now:
            return False

        return True


class Color(models.Model):
    name = models.CharField(max_length=50, verbose_name='نام رنگ')

    @property
    def hex_code(self):
        """
        نام رنگ را به کد هگزادسیمال تبدیل می‌کند.
        این دیکشنری کامل شده بر اساس لیست ارسالی شماست.
        """
        color_map = {
            # خنثی
            'سفید': '#FFFFFF', 'مشکی': '#000000', 'خاکستری': '#808080', 'نقره‌ای': '#C0C0C0', 'کرم': '#FFFDD0',
            'بژ': '#F5F5DC', 'طوسی': '#808080', 'دودی': '#696969', 'زغالی': '#36454F', 'استخوانی': '#F9F6EE',
            'شیری': '#FDFFF5',

            # قرمز
            'قرمز': '#FF0000', 'زرشکی': '#8B0000', 'سرخابی': '#FC0FC0', 'لاکی': '#D21404', 'آجری': '#B22222',
            'سرخ': '#E30022', 'قرمز آتشین': '#FF4500', 'قرمز گیلاسی': '#D2042D', 'عنابی': '#722F37',
            'کالباسی': '#F08080', 'قرمز توت فرنگی': '#FC5A8D', 'جگری': '#800020', 'آلبالویی': '#8B0000',
            'قرمز گوجه‌ای': '#FF6347', 'شرابی': '#722F37',

            # صورتی
            'صورتی': '#FFC0CB', 'گلبهی': '#FFDAB9', 'صورتی کم‌رنگ': '#FFB6C1', 'صورتی تیره': '#FF69B4',
            'صورتی فوشیا': '#FF00FF', 'رز': '#FF007F', 'گلی': '#FFB5C5', 'صورتی پررنگ': '#DE3163',
            'صورتی چرک': '#D8A7B1', 'رزگلد': '#B76E79', 'صورتی پاستلی': '#F8C8DC', 'مرجانی': '#FF7F50',

            # نارنجی
            'نارنجی': '#FFA500', 'هلویی': '#FFE5B4', 'نارنجی تیره': '#FF8C00', 'نارنجی روشن': '#FFD580',
            'کهربایی': '#FFBF00', 'پرتقالی': '#FCA510', 'زردآلویی': '#FBCEB1', 'مسی': '#B87333',
            'نارنجی پرتقالی': '#FF7518', 'گل‌بهی': '#FFDAB9',

            # زرد
            'زرد': '#FFFF00', 'طلایی': '#FFD700', 'لیمویی': '#ADFF2F', 'زرد کم‌رنگ': '#FFFFE0',
            'زرد آفتابی': '#FFC72C', 'زرد کانولا': '#FFEF00', 'نباتی': '#F5DEB3', 'زرد لیمو': '#FFF44F',
            'زرد کره‌ای': '#FFFD74', 'برنزی': '#CD7F32', 'خردلی': '#FFDB58', 'زرد قناری': '#FFFF99',
            'کاهی': '#E8DEB5', 'نخودی': '#F2DDA4',

            # سبز
            'سبز': '#008000', 'سبز لجنی': '#556B2F', 'سبز یشمی': '#00A86B', 'سبز زیتونی': '#808000',
            'سبز تیره': '#006400', 'سبز روشن': '#90EE90', 'سبز جنگلی': '#228B22', 'سبز دریایی': '#2E8B57',
            'سبز چمنی': '#7CFC00', 'سبز فسفری': '#7FFF00', 'سبز نعنایی': '#98FF98', 'سبز کاج': '#01796F',
            'سبز پسته‌ای': '#93C572', 'سبز ارتشی': '#4B5320', 'سبزآبی': '#008080', 'سبز زمردی': '#50C878',
            'سبز سیدی': '#32CD32', 'سبز خزه‌ای': '#8A9A5B',

            # آبی
            'آبی': '#0000FF', 'آبی آسمانی': '#87CEEB', 'آبی نفتی': '#000080', 'فیروزه‌ای': '#40E0D0',
            'آبی روشن': '#ADD8E6', 'آبی تیره': '#00008B', 'آبی دریایی': '#000080', 'آبی یخی': '#99FFFF',
            'آبی الکتریک': '#7DF9FF', 'آبی کبالت': '#0047AB', 'سرمه‌ای': '#000080', 'لاجوردی': '#4169E1',
            'آبی پودری': '#B0E0E6', 'آبی کاربنی': '#0047AB', 'آبی درباری': '#4169E1', 'آبی پاستلی': '#A7C7E7',
            'کله غازی': '#008080', 'نیلی': '#5A4FCF',

            # بنفش
            'بنفش': '#8A2BE2', 'یاسی': '#C8A2C8', 'ارغوانی': '#9932CC', 'بنفش تیره': '#301934',
            'بنفش روشن': '#E6E6FA', 'بادمجانی': '#483D8B', 'ماژنتا': '#FF00FF', 'بنفش شاهی': '#800080',
            'بنفش پاستلی': '#B1A2C7', 'ویولت': '#8F00FF',

            # قهوه‌ای
            'قهوه‌ای': '#A52A2A', 'شکلاتی': '#D2691E', 'قهوه‌ای تیره': '#654321', 'قهوه‌ای روشن': '#C4A484',
            'خاکی': '#C2B280', 'کاراملی': '#C68E17', 'قهوه‌ای سوخته': '#3B2F2F', 'عسلی': '#D4AF37',
            'گندمی': '#F5DEB3', 'شنی': '#C2B280', 'زعفرانی': '#F4C430', 'حنایی': '#AB274F',
            'خرمایی': '#5C4033', 'نسکافه‌ای': '#826644', 'دارچینی': '#D2691E',

            # سایر
            'صدفی': '#FAF0E6', 'مروارید': '#E2DFD2', 'فیروزه': '#30D5C8',
            'پسته‌ای': '#93C572', 'بادامی': '#EED9C4', 'گردویی': '#725C42',
            'انار': '#C0362C', 'انگوری': '#6F2DA8', 'توتی': '#5A1F3C', 'نارگیلی': '#965A3E',
            'خاکستری موشی': '#9E9E9E', 'خاکستری نقره‌ای': '#C0C0C0',
        }
        return color_map.get(self.name, '#CCCCCC')  # رنگ پیش‌فرض برای موارد یافت نشده


    class Meta:
        verbose_name = 'رنگ'
        verbose_name_plural = 'رنگ‌ها'

    def __str__(self):
        return self.name


class Size(models.Model):
    name = models.CharField(max_length=20, verbose_name='نام سایز')

    class Meta:
        verbose_name = 'سایز'
        verbose_name_plural = 'سایزها'

    def __str__(self):
        return self.name


class ProductInventory(models.Model):
    product = models.ForeignKey(Product, on_delete=models.CASCADE, related_name='inventories', verbose_name='محصول')
    color = models.ForeignKey(Color, on_delete=models.CASCADE, verbose_name='رنگ')
    size = models.ForeignKey(Size, on_delete=models.CASCADE, verbose_name='سایز')
    quantity = models.PositiveIntegerField(default=0, verbose_name='موجودی')
    weight = models.PositiveIntegerField(default=0, help_text="وزن به گرم")
    dimensions = models.CharField(max_length=100, blank=True, help_text="ابعاد (مثال: 30x40x10)")

    class Meta:
        verbose_name = 'موجودی محصول'
        verbose_name_plural = 'موجودی محصولات'
        unique_together = ('product', 'color', 'size')

    def __str__(self):
        return f"{self.product.name} - {self.color.name} - {self.size.name} ({self.quantity})"

    def to_dict(self):
        return {
            'id': self.id,
            'product_id': self.product_id,
            'color_id': self.color_id,
            'color_name': self.color.name,
            'size_id': self.size_id,
            'size_name': self.size.name,
            'quantity': self.quantity
        }

====== FILE: products/apps.py ======

from django.apps import AppConfig


class ProductsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'products'


====== FILE: products/views.py ======

from django.shortcuts import render, get_object_or_404, redirect
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
from django.db.models import Q, Avg, Count, Min, Max, Value, BooleanField
from django.http import JsonResponse
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_POST
import json

from cart.models import WishlistItem
from .models import Product, Category, Color, Size, ProductInventory, ProductImage, Review


def _apply_filters_and_sort(request, products_queryset):
    """اعمال فیلترها و مرتب‌سازی بر روی کوئری محصولات"""
    query = request.GET.get('q', '')
    categories_ids = request.GET.getlist('categories')
    sizes_ids = request.GET.getlist('sizes')
    colors_ids = request.GET.getlist('colors')
    min_price = request.GET.get('min_price')
    max_price = request.GET.get('max_price')
    sort_by = request.GET.get('sort', 'newest')
    brands = request.GET.getlist('brand')

    if query:
        products_queryset = products_queryset.filter(
            Q(name__icontains=query) | Q(description__icontains=query) |
            Q(category__name__icontains=query) |
            Q(brand__icontains=brands)
        ).distinct()

    if categories_ids:
        products_queryset = products_queryset.filter(category__id__in=categories_ids).distinct()

    if sizes_ids:
        products_queryset = products_queryset.filter(inventories__size__id__in=sizes_ids).distinct()
    if colors_ids:
        products_queryset = products_queryset.filter(inventories__color__id__in=colors_ids).distinct()

    if min_price:
        try:
            min_price = float(min_price)
            products_queryset = products_queryset.filter(price__gte=min_price)
        except ValueError:
            pass

    if max_price:
        try:
            max_price = float(max_price)
            products_queryset = products_queryset.filter(price__lte=max_price)
        except ValueError:
            pass

    if brands:
        products_queryset = products_queryset.filter(brand__in=brands)

    # مرتب‌سازی
    if sort_by == 'newest':
        products_queryset = products_queryset.order_by('-created_at')
    elif sort_by == 'popular':
        products_queryset = products_queryset.annotate(sales_count=Count('total_sales')).order_by('-total_sales')
    elif sort_by == 'price_low':
        products_queryset = products_queryset.order_by('price')
    elif sort_by == 'price_high':
        products_queryset = products_queryset.order_by('-price')
    elif sort_by == 'rating':
        products_queryset = products_queryset.annotate(avg_rating=Avg('reviews__rating')).order_by('-avg_rating')
    elif sort_by == 'discount':
        products_queryset = products_queryset.filter(discount_percent__gt=0).order_by('-discount_percent')

    return products_queryset, {
        'q': query,
        'categories': categories_ids,
        'sizes': sizes_ids,
        'colors': colors_ids,
        'min_price': min_price,
        'max_price': max_price,
        'brand': brands,
        'sort': sort_by,
    }


def product_list(request):
    """لیست همه محصولات"""
    products_queryset = Product.objects.filter(is_active=True).prefetch_related('images', 'inventories__color',
                                                                                'inventories__size')

    if request.user.is_authenticated:
        products_queryset = products_queryset.annotate(
            is_favorited=Count('wishlistitem', filter=Q(wishlistitem__user=request.user))
        )
    else:
        products_queryset = products_queryset.annotate(is_favorited=Value(0, output_field=BooleanField()))

    products_queryset, current_filters = _apply_filters_and_sort(request, products_queryset)

    # صفحه‌بندی
    paginator = Paginator(products_queryset, 9)
    page_number = request.GET.get('page')
    try:
        products = paginator.page(page_number)
    except PageNotAnInteger:
        products = paginator.page(1)
    except EmptyPage:
        products = paginator.page(paginator.num_pages)

    # دسته‌بندی‌ها
    all_categories = Category.objects.annotate(product_count=Count('products')).filter(product_count__gt=0)

    available_inventory = ProductInventory.objects.filter(
        product__in=products_queryset,
        quantity__gt=0
    )
    available_color_ids = available_inventory.values_list('color_id', flat=True).distinct()
    available_size_ids = available_inventory.values_list('size_id', flat=True).distinct()

    # دریافت آبجکت‌های رنگ و سایز موجود
    all_colors = Color.objects.filter(id__in=available_color_ids).order_by('name')
    all_sizes = Size.objects.filter(id__in=available_size_ids).order_by('name')

    all_brands = products_queryset.values_list('brand', flat=True).distinct().order_by('brand')

    # محدوده قیمت
    price_range_qs = Product.objects.filter(is_active=True)
    min_overall_price = price_range_qs.aggregate(min_price=Min('price'))['min_price']
    max_overall_price = price_range_qs.aggregate(max_price=Max('price'))['max_price']

    price_range = {
        'min_price': min_overall_price if min_overall_price is not None else 0,
        'max_price': max_overall_price if max_overall_price is not None else 10000000,
    }

    context = {
        'page_title': 'همه محصولات',
        'products': products,
        'results_count': products_queryset.count(),
        'all_categories': all_categories,
        'all_sizes': all_sizes,
        'all_colors': all_colors,
        'all_brands': all_brands,
        'price_range': price_range,
        'current_filters': current_filters,
    }
    return render(request, 'products/product_list.html', context)


def category_list(request, category_slug):
    """لیست محصولات یک دسته‌بندی خاص"""
    category = get_object_or_404(Category, slug=category_slug)
    products_queryset = Product.objects.filter(is_active=True).filter(
        Q(category=category) | Q(category__parent=category)
    ).prefetch_related('images')

    if request.user.is_authenticated:
        products_queryset = products_queryset.annotate(
            is_favorited=Count('wishlistitem', filter=Q(wishlistitem__user=request.user))
        )
    else:
        products_queryset = products_queryset.annotate(is_favorited=Value(0, output_field=BooleanField()))

    products_queryset, current_filters = _apply_filters_and_sort(request, products_queryset)

    # صفحه‌بندی
    paginator = Paginator(products_queryset, 9)
    page_number = request.GET.get('page')
    try:
        products = paginator.page(page_number)
    except PageNotAnInteger:
        products = paginator.page(1)
    except EmptyPage:
        products = paginator.page(paginator.num_pages)

    # زیردسته‌ها
    subcategories = category.children.annotate(product_count=Count('products')).filter(product_count__gt=0)

    available_inventory = ProductInventory.objects.filter(
        product__in=products_queryset,
        quantity__gt=0
    )
    available_color_ids = available_inventory.values_list('color_id', flat=True).distinct()
    available_size_ids = available_inventory.values_list('size_id', flat=True).distinct()

    # دریافت آبجکت‌های رنگ و سایز موجود
    all_colors = Color.objects.filter(id__in=available_color_ids).order_by('name')
    all_sizes = Size.objects.filter(id__in=available_size_ids).order_by('name')

    all_brands = products_queryset.values_list('brand', flat=True).distinct().order_by('brand')

    # محدوده قیمت برای این دسته‌بندی
    price_range_qs = Product.objects.filter(is_active=True, category=category)
    min_overall_price = price_range_qs.aggregate(min_price=Min('price'))['min_price']
    max_overall_price = price_range_qs.aggregate(max_price=Max('price'))['max_price']
    price_range = {
        'min_price': min_overall_price if min_overall_price is not None else 0,
        'max_price': max_overall_price if max_overall_price is not None else 10000000,
    }

    context = {
        'page_title': category.name,
        'products': products,
        'category': category,
        'subcategories': subcategories,
        'results_count': products_queryset.count(),
        'all_sizes': all_sizes,
        'all_colors': all_colors,
        'all_brands': all_brands,
        'price_range': price_range,
        'current_filters': current_filters,
    }
    return render(request, 'products/category_detail.html', context)


def search_results(request):
    """نتایج جستجو"""
    products_queryset = Product.objects.filter(is_active=True).prefetch_related('images')

    if request.user.is_authenticated:
        products_queryset = products_queryset.annotate(
            is_favorited=Count('wishlistitem', filter=Q(wishlistitem__user=request.user))
        )
    else:
        products_queryset = products_queryset.annotate(is_favorited=Value(0, output_field=BooleanField()))

    products_queryset, current_filters = _apply_filters_and_sort(request, products_queryset)
    query = request.GET.get('q', '')

    # صفحه‌بندی
    paginator = Paginator(products_queryset, 9)
    page_number = request.GET.get('page')
    try:
        products = paginator.page(page_number)
    except PageNotAnInteger:
        products = paginator.page(1)
    except EmptyPage:
        products = paginator.page(paginator.num_pages)

    # دسته‌بندی‌ها
    all_categories = Category.objects.annotate(product_count=Count('products')).filter(product_count__gt=0)

    available_inventory = ProductInventory.objects.filter(
        product__in=products_queryset,
        quantity__gt=0
    )
    available_color_ids = available_inventory.values_list('color_id', flat=True).distinct()
    available_size_ids = available_inventory.values_list('size_id', flat=True).distinct()

    # دریافت آبجکت‌های رنگ و سایز موجود
    all_colors = Color.objects.filter(id__in=available_color_ids).order_by('name')
    all_sizes = Size.objects.filter(id__in=available_size_ids).order_by('name')

    all_brands = products_queryset.values_list('brand', flat=True).distinct().order_by('brand')

    # محدوده قیمت
    price_range_qs = Product.objects.filter(is_active=True)
    min_overall_price = price_range_qs.aggregate(min_price=Min('price'))['min_price']
    max_overall_price = price_range_qs.aggregate(max_price=Max('price'))['max_price']
    price_range = {
        'min_price': min_overall_price if min_overall_price is not None else 0,
        'max_price': max_overall_price if max_overall_price is not None else 10000000,
    }

    context = {
        'page_title': f'نتایج جستجو برای: "{query}"',
        'query': query,
        'products': products,
        'results_count': products_queryset.count(),
        'all_categories': all_categories,
        'all_sizes': all_sizes,
        'all_colors': all_colors,
        'all_brands': all_brands,
        'price_range': price_range,
        'current_filters': current_filters,
    }
    return render(request, 'products/search_results.html', context)


def product_detail(request, product_id):
    """نمایش جزئیات محصول"""
    product = get_object_or_404(Product, id=product_id, is_active=True)

    # دریافت موجودی‌های محصول با رنگ و سایز
    inventories = ProductInventory.objects.filter(
        product=product,
        quantity__gt=0
    ).select_related('color', 'size')

    # محاسبه کل موجودی
    total_stock = sum(inv.quantity for inv in inventories)

    # دریافت رنگ‌ها و سایزهای موجود
    available_colors = Color.objects.filter(
        id__in=inventories.values_list('color_id', flat=True).distinct()
    ).distinct()

    available_sizes = Size.objects.filter(
        id__in=inventories.values_list('size_id', flat=True).distinct()
    ).distinct()

    # ایجاد mapping برای JavaScript
    inventory_mapping = {}
    for inv in inventories:
        color_id = str(inv.color.id) if inv.color else 'null'
        size_id = str(inv.size.id) if inv.size else 'null'

        if color_id not in inventory_mapping:
            inventory_mapping[color_id] = {}

        inventory_mapping[color_id][size_id] = {
            'quantity': inv.quantity,
            'size_name': inv.size.name if inv.size else '',
            'color_name': inv.color.name if inv.color else ''
        }

    # محصولات مشابه
    related_products = Product.objects.filter(
        category=product.category,
        is_active=True
    ).exclude(id=product.id)[:8]

    # اگر محصولات مشابه کم بود، از دسته‌های مرتبط هم بگیر
    if related_products.count() < 4:
        related_products = Product.objects.filter(
            Q(category=product.category) | Q(brand=product.brand),
            is_active=True
        ).exclude(id=product.id)[:8]

    # بررسی اینکه کاربر این محصول را خریداری کرده یا نه
    has_purchased = False
    if request.user.is_authenticated:
        # فرض می‌کنیم مدل Order و OrderItem دارید
        # has_purchased = OrderItem.objects.filter(
        #     order__user=request.user,
        #     product=product,
        #     order__status='completed'
        # ).exists()
        pass

    context = {
        'product': product,
        'related_products': related_products,
        'available_colors': available_colors,
        'available_sizes': available_sizes,
        'total_stock': total_stock,
        'inventory_mapping': json.dumps(inventory_mapping),
        'has_purchased': has_purchased,
    }

    return render(request, 'products/product_detail.html', context)


@require_POST
def add_review(request, product_id):
    """افزودن نظر به محصول"""
    if not request.user.is_authenticated:
        return JsonResponse({
            'success': False,
            'message': 'برای ثبت نظر ابتدا وارد حساب کاربری خود شوید.',
            'redirect': '/accounts/login/'
        })

    product = get_object_or_404(Product, id=product_id)

    # بررسی اینکه کاربر این محصول را خریداری کرده یا نه
    # has_purchased = OrderItem.objects.filter(
    #     order__user=request.user,
    #     product=product,
    #     order__status='completed'
    # ).exists()

    # فعلاً این بررسی را غیرفعال می‌کنیم
    has_purchased = True

    if not has_purchased:
        return JsonResponse({
            'success': False,
            'message': 'فقط کاربرانی که این محصول را خریداری کرده‌اند می‌توانند نظر ثبت کنند.'
        })

    try:
        rating = int(request.POST.get('rating', 5))
        comment = request.POST.get('comment', '')

        if not comment.strip():
            return JsonResponse({
                'success': False,
                'message': 'لطفاً متن نظر خود را وارد کنید.'
            })

        # بررسی اینکه کاربر قبلاً نظر داده یا نه
        existing_review, created = Review.objects.get_or_create(
            product=product,
            user=request.user,
            defaults={'rating': rating, 'comment': comment}
        )

        if not created:
            existing_review.rating = rating
            existing_review.comment = comment
            existing_review.save()
            message = 'نظر شما با موفقیت به‌روزرسانی شد.'
        else:
            message = 'نظر شما با موفقیت ثبت شد.'

        return JsonResponse({
            'success': True,
            'message': message
        })

    except Exception as e:
        return JsonResponse({
            'success': False,
            'message': 'خطا در ثبت نظر. لطفاً دوباره تلاش کنید.'
        })


def quick_view_product(request, product_id):
    """نمایش سریع محصول"""
    product = get_object_or_404(Product, id=product_id)
    if request.user.is_authenticated:
        product.is_favorited = WishlistItem.objects.filter(user=request.user, product=product).exists()
    else:
        product.is_favorited = False

    context = {
        'product': product,
    }
    return render(request, 'products/quick_view_modal_content.html', context)


@require_POST
@csrf_exempt
def toggle_wishlist(request):
    """اضافه/حذف محصول از علاقه‌مندی‌ها"""
    if not request.user.is_authenticated:
        return JsonResponse({
            'success': False,
            'message': 'برای این عمل باید وارد شوید'
        })

    try:
        data = json.loads(request.body)
        product_id = data.get('product_id')
        product = get_object_or_404(Product, id=product_id)

        wishlist_item, created = WishlistItem.objects.get_or_create(
            user=request.user,
            product=product
        )

        if not created:
            wishlist_item.delete()
            is_favorited = False
        else:
            is_favorited = True

        return JsonResponse({
            'success': True,
            'is_favorited': is_favorited
        })

    except Exception as e:
        return JsonResponse({
            'success': False,
            'message': 'خطا در عملیات'
        })


@require_POST
def add_to_cart(request):
    """افزودن محصول به سبد خرید"""
    if not request.user.is_authenticated:
        return JsonResponse({
            'success': False,
            'message': 'برای افزودن به سبد خرید ابتدا وارد حساب کاربری خود شوید.',
            'redirect': '/accounts/login/'
        })

    try:
        data = json.loads(request.body)
        product_id = data.get('product_id')
        quantity = int(data.get('quantity', 1))
        color_id = data.get('color_id')
        size_id = data.get('size_id')

        product = get_object_or_404(Product, id=product_id)

        # بررسی موجودی
        inventory = ProductInventory.objects.filter(
            product=product,
            color_id=color_id if color_id else None,
            size_id=size_id if size_id else None,
            quantity__gte=quantity
        ).first()

        if not inventory:
            return JsonResponse({
                'success': False,
                'message': 'موجودی کافی برای این ترکیب رنگ و سایز وجود ندارد.'
            })

        # افزودن به سبد خرید (منطق سبد خرید شما)
        cart = request.session.get('cart', {})
        cart_key = f"{product_id}_{color_id}_{size_id}"

        if cart_key in cart:
            cart[cart_key]['quantity'] += quantity
        else:
            cart[cart_key] = {
                'product_id': product_id,
                'color_id': color_id,
                'size_id': size_id,
                'quantity': quantity,
                'price': float(product.get_display_price()),
            }

        request.session['cart'] = cart
        request.session.modified = True

        # محاسبه تعداد کل آیتم‌های سبد خرید
        cart_items_count = sum(item.get('quantity', 0) for item in cart.values())

        return JsonResponse({
            'success': True,
            'message': 'محصول با موفقیت به سبد خرید اضافه شد.',
            'cart_items_count': cart_items_count
        })

    except Exception as e:
        return JsonResponse({
            'success': False,
            'message': f'خطا در افزودن به سبد خرید: {str(e)}'
        })

====== FILE: products/urls.py ======

from django.urls import path
from . import views

app_name = 'products'

urlpatterns = [
 # لیست همه محصولات - نام‌های مختلف برای سازگاری
 path('', views.product_list, name='list'),
 path('', views.product_list, name='product_list'),

 # نتایج جستجو
 path('search/', views.search_results, name='search'),

 # لیست محصولات بر اساس دسته‌بندی
 path('category/<slug:category_slug>/', views.category_list, name='category_list'),

 # افزودن/حذف محصول از علاقه‌مندی‌ها
 path('toggle-wishlist/', views.toggle_wishlist, name='toggle_wishlist'),
 # path('get-inventory/<int:product_id>/', views.get_inventory_data, name='get_inventory'),

 # افزودن محصول به سبد خرید
 path('add-to-cart/', views.add_to_cart, name='add_to_cart'),

 # افزودن نظر
 path('add-review/<int:product_id>/', views.add_review, name='add_review'),

 # Quick View محصول
 path('<int:product_id>/quick-view/', views.quick_view_product, name='quick_view'),

 # جزئیات یک محصول خاص - نام‌های مختلف برای سازگاری
 path('<int:product_id>/', views.product_detail, name='detail'),
 path('<int:product_id>/', views.product_detail, name='product_detail'),

    # ⚠️ توجه: توابع زیر در آخرین کد views.py که من برای شما فرستادم، تعریف نشده‌اند.
    # اگر این توابع را در views.py خود ندارید، باید آن‌ها را پیاده‌سازی کنید
    # تا از خطای "AttributeError" جلوگیری شود.
    # path('men/', views.men_products, name='men'),
    # path('women/', views.women_products, name='women'),
    # path('featured/', views.featured_products, name='featured'),
    # path('latest/', views.latest_products, name='latest'),
    # path('<int:product_id>/add-review/', views.add_review, name='add_review'),
]

====== FILE: products/serializers.py ======

# serializers.py
from rest_framework import serializers
# serializers.pyfrom rest_framework import serializers
from .models import Product, Review, Category, ProductImage

# ==========================================
#  Supporting Serializers
# ==========================================

class ReviewSerializer(serializers.ModelSerializer):
    """Serializer for product reviews."""
    # اضافه کردن نام کاربر (اگر مدل User شما فیلد مناسبی دارد)
    # user_name = serializers.CharField(source='user.get_full_name', read_only=True) # مثال    class Meta:
    model = Review
    fields = [
        'id', 'user', #'user_name',
        'product', 'rating', 'comment', 'created_at'
    ]
    read_only_fields = ['user', 'created_at', 'product'] # معمولا product هم read_only است


class CategorySerializer(serializers.ModelSerializer):
    """Serializer for product categories."""
    class Meta:
        model = Category
        fields = ['id', 'name', 'description', 'slug', 'created_at']
        # Slug معمولا خودکار ساخته می‌شود یا اختیاری است
        extra_kwargs = {
            'slug': {'required': False, 'read_only': True} # اگر خودکار ساخته می‌شود
        }


class ProductImageSerializer(serializers.ModelSerializer):
    image_url = serializers.SerializerMethodField()

    class Meta:
        model = ProductImage
        fields = ['id', 'image_url', 'is_primary', 'image'] # image اصلی را هم نگه می‌داریم (برای مدیریت شاید)
        read_only_fields = ['id', 'image_url']

    def get_image_url(self, obj):
        """Builds the absolute URL for the gallery image."""
        request = self.context.get('request')
        if obj.image and hasattr(obj.image, 'url') and request:
            # استفاده از obj.image.url برای دریافت مسیر نسبی
            # و سپس ساخت URL کامل
            return request.build_absolute_uri(obj.image.url)
        # اگر تصویری نیست یا درخواستی وجود ندارد، null برگردان
        return None

# ==========================================
#  Main Product Serializers
# ==========================================

class BaseProductSerializer(serializers.ModelSerializer):
    """
    Base serializer containing common methods for handling
    colors, sizes, stock, discount price, and image URLs.
    """
    # --- Serializer Method Fields for calculated/formatted data ---
    colors = serializers.SerializerMethodField(method_name='get_colors_list')
    sizes = serializers.SerializerMethodField(method_name='get_sizes_list')
    discount_price = serializers.SerializerMethodField(read_only=True)
    in_stock = serializers.SerializerMethodField(read_only=True)
    image_url = serializers.SerializerMethodField(method_name='get_main_image_url') # برای URL تصویر اصلی

    # --- Helper Methods (used by SerializerMethodFields) ---
    def get_colors_list(self, obj):
        """Converts comma-separated string 'colors' field to a list of strings."""
        if obj.colors and isinstance(obj.colors, str):
            # حذف فضای خالی و موارد خالی بعد از split
            return [color.strip() for color in obj.colors.split(',') if color.strip()]
            return [] # Return empty list if no colors or not a string

    def get_sizes_list(self, obj):
        """Converts comma-separated string 'sizes' field to a list of strings."""
        if obj.sizes and isinstance(obj.sizes, str):
            return [size.strip() for size in obj.sizes.split(',') if size.strip()]
        return []

    def get_discount_price(self, obj):
        """        Calculates the final price after applying the discount.
        Returns the original price if no valid discount exists.
        Ensures the output is always a float.
        """
        try:
            # اطمینان از اینکه قیمت‌ها عددی هستند قبل از محاسبه
            original_price = float(obj.price) if obj.price is not None else 0.0
            # فرض: obj.discount مقدار تخفیف است (نه درصد)
            discount_amount = float(obj.discount) if obj.discount is not None else 0.0

            # اعمال تخفیف فقط اگر معتبر باشد
            if 0 < discount_amount < original_price:
                return original_price - discount_amount
            # در غیر این صورت، قیمت اصلی را برگردان
            return original_price
        except (ValueError, TypeError):
            # اگر تبدیل نوع یا محاسبه با خطا مواجه شد، قیمت اصلی را برگردان
            return float(obj.price) if obj.price is not None else 0.0

    def get_in_stock(self, obj):
        """Checks if the product stock is greater than 0."""
        return obj.stock is not None and obj.stock > 0

    def get_main_image_url(self, obj):
        """Builds the absolute URL for the main product image."""
        request = self.context.get('request')
        # بررسی وجود تصویر و داشتن attribute 'url' (برای FileField/ImageField)
        if obj.image and hasattr(obj.image, 'url') and request:
            return request.build_absolute_uri(obj.image.url)
        return None # یا URL تصویر پیش‌فرض: return request.build_absolute_uri('/static/placeholder.png')

    # --- Representation Override for final type checks ---
    def to_representation(self, instance):
        """Ensures price fields are floats in the final output."""
        representation = super().to_representation(instance)

        # اطمینان از اینکه قیمت اصلی به float تبدیل شده
        if representation.get('price') is not None:
            try:
                representation['price'] = float(representation['price'])
            except (ValueError, TypeError):
                 # اگر قیمت اصلی نامعتبر است، آن را 0 یا None قرار بده
                representation['price'] = 0.0
        else:
             representation['price'] = 0.0 # یا None

        # discount_price قبلاً در get_discount_price به float تبدیل شده،
        # اما برای اطمینان اگر None بود، برابر قیمت اصلی قرار می‌دهیم
        if representation.get('discount_price') is None:             representation['discount_price'] = representation['price']

        # اگر فیلد 'discount' (مقدار تخفیف) را هم ارسال می‌کنید:
        if 'discount' in representation and representation.get('discount') is not None:
             try:
                 representation['discount'] = float(representation['discount'])
             except (ValueError, TypeError):
                 representation['discount'] = 0.0
        elif 'discount' in representation:
             representation['discount'] = 0.0 # یا None

        return representation


class ProductSerializer(BaseProductSerializer):
     """
     Serializer for the Product LIST view.
     Sends only the fields needed by ProductCard.js.
     Inherits common methods from BaseProductSerializer.
     """
     # فیلد مستقیم از مدل (فقط خواندنی برای لیست)
     category_name = serializers.CharField(source='category.name', read_only=True) # تعریف فیلد

     class Meta:
         model = Product
         # لیست دقیق فیلدهایی که ProductCard.js نیاز دارد:
         fields = [
         'id', # Number (برای لینک و key)
         'name', # String
         'brand', # String (اختیاری)
         'image_url', # String (URL کامل تصویر اصلی)
         'price', # Number (قیمت اصلی)
         'discount_price', # Number (قیمت نهایی با تخفیف)
         'colors', # Array of Strings (لیست نام رنگ‌ها)
         'sizes', # Array of Strings (لیست نام سایزها)
         'in_stock', # Boolean
         'category_name', # <<<--- اضافه شد / از کامنت خارج شد
         ]
         # read_only_fields = fields # این خط اختیاری است، چون همه فیلدها در fields هستند

class ProductDetailSerializer(BaseProductSerializer):
    """
    Serializer for the Product DETAIL view.
    Includes more fields like description, gallery, reviews, etc.
    Inherits common methods from BaseProductSerializer.
    """    # فیلدهای مرتبط با استفاده از سریالایزرهای دیگر
    # برای گالری، از source استفاده می‌کنیم که به related_name یا نام فیلد در مدل اشاره دارد
    # فرض می‌کنیم related_name در ProductImage ForeignKey به Product، برابر 'gallery_images' است
    gallery = ProductImageSerializer(many=True, read_only=True, source='gallery_images') # <<< نام source را با مدل خود تطبیق دهید
    reviews = ReviewSerializer(many=True, read_only=True)
    category_name = serializers.CharField(source='category.name', read_only=True)

    class Meta:
        model = Product
        # لیست فیلدها برای صفحه جزئیات محصول
        fields = [
            'id',
            'category', # ID دسته بندی اصلی
            'category_name',
            'name',
            'description',      # توضیحات کامل محصول
            'price',            # قیمت اصلی (Number)
            'discount',         # مقدار تخفیف (Number - اختیاری، اگر می‌خواهید نمایش دهید)
            'discount_price',   # قیمت نهایی (Number)
            'stock',            # تعداد موجودی (Number)
            'in_stock',         # وضعیت موجودی (Boolean)
            'brand',
            'image_url',        # URL تصویر اصلی
            'gallery',          # لیست تصاویر گالری (از ProductImageSerializer)
            'attributes',       # اگر فیلد JSON یا مشابه دارید
            'is_featured',            'created_at',
            'updated_at',
            'colors',           # لیست رنگ‌ها (Array of Strings)
            'sizes',            # لیست سایزها (Array of Strings)
            'reviews'           # لیست نظرات
        ]        # read_only_fields = [...] # در صورت نیاز فیلدهای فقط خواندنی را مشخص کنید

    # نیازی به بازنویسی to_representation نیست چون از BaseProductSerializer ارث‌بری می‌شود
    # و متدهای get_... هم ارث‌بری می‌شوند.








====== FILE: products/tests.py ======

from django.test import TestCase

# Create your tests here.


====== FILE: products/migrations/0004_color_size_product_inventory_and_more.py ======

# Generated by Django 5.1.5 on 2025-05-17 12:48

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('products', '0003_alter_banner_image_alter_category_image_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Color',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='نام رنگ')),
                ('code', models.CharField(help_text='مثال: #FF5733', max_length=10, verbose_name='کد رنگ')),
            ],
            options={
                'verbose_name': 'رنگ',
                'verbose_name_plural': 'رنگ\u200cها',
            },
        ),
        migrations.CreateModel(
            name='Size',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, verbose_name='نام سایز')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='ترتیب')),
            ],
            options={
                'verbose_name': 'سایز',
                'verbose_name_plural': 'سایزها',
                'ordering': ['order', 'name'],
            },
        ),
        migrations.AddField(
            model_name='product',
            name='inventory',
            field=models.JSONField(default=dict, help_text='دیکشنری از موجودی هر ترکیب رنگ و سایز مانند {"S-سفید": 10, "M-سفید": 5}', verbose_name='موجودی بر اساس رنگ و سایز'),
        ),
        migrations.AddField(
            model_name='product',
            name='price_adjustments',
            field=models.JSONField(default=dict, help_text='دیکشنری از تغییرات قیمت مانند {"S": 0, "M": 10000, "L": 20000}', verbose_name='تغییرات قیمت'),
        ),
    ]


====== FILE: products/migrations/0009_remove_product_color_codes_remove_product_colors_and_more.py ======

# Generated by Django 5.1.5 on 2025-09-03 12:05

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('products', '0008_remove_color_hex_code_field_product_color_codes_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.RemoveField(
            model_name='product',
            name='color_codes',
        ),
        migrations.RemoveField(
            model_name='product',
            name='colors',
        ),
        migrations.RemoveField(
            model_name='product',
            name='inventory',
        ),
        migrations.RemoveField(
            model_name='product',
            name='price_adjustments',
        ),
        migrations.RemoveField(
            model_name='product',
            name='sizes',
        ),
        migrations.AddField(
            model_name='color',
            name='hex_code_field',
            field=models.CharField(blank=True, default='#CCCCCC', help_text='مثال: #RRGGBB. اگر خالی باشد، از نام رنگ برای تعیین کد هگز استفاده می\u200cشود.', max_length=7, verbose_name='کد هگزادسیمال (اختیاری)'),
        ),
        migrations.CreateModel(
            name='ProductQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField(verbose_name='متن سوال')),
                ('answer_text', models.TextField(blank=True, null=True, verbose_name='متن پاسخ')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='تاریخ سوال')),
                ('answered_at', models.DateTimeField(blank=True, null=True, verbose_name='تاریخ پاسخ')),
                ('is_answered', models.BooleanField(default=False, verbose_name='پاسخ داده شده')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='products.product', verbose_name='محصول')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to=settings.AUTH_USER_MODEL, verbose_name='کاربر')),
            ],
            options={
                'verbose_name': 'سوال محصول',
                'verbose_name_plural': 'سوالات محصول',
                'ordering': ['-created_at'],
            },
        ),
    ]


====== FILE: products/migrations/0007_remove_product_color_codes_remove_product_colors_and_more.py ======

# Generated by Django 5.1.5 on 2025-09-03 09:29

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('products', '0006_productinventory_dimensions_productinventory_weight'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.RemoveField(
            model_name='product',
            name='color_codes',
        ),
        migrations.RemoveField(
            model_name='product',
            name='colors',
        ),
        migrations.RemoveField(
            model_name='product',
            name='inventory',
        ),
        migrations.RemoveField(
            model_name='product',
            name='price_adjustments',
        ),
        migrations.RemoveField(
            model_name='product',
            name='sizes',
        ),
        migrations.RemoveField(
            model_name='product',
            name='stock',
        ),
        migrations.AddField(
            model_name='color',
            name='hex_code_field',
            field=models.CharField(blank=True, default='#CCCCCC', help_text='مثال: #RRGGBB. اگر خالی باشد، از نام رنگ برای تعیین کد هگز استفاده می\u200cشود.', max_length=7, verbose_name='کد هگزادسیمال (اختیاری)'),
        ),
        migrations.CreateModel(
            name='ProductQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField(verbose_name='متن سوال')),
                ('answer_text', models.TextField(blank=True, null=True, verbose_name='متن پاسخ')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='تاریخ سوال')),
                ('answered_at', models.DateTimeField(blank=True, null=True, verbose_name='تاریخ پاسخ')),
                ('is_answered', models.BooleanField(default=False, verbose_name='پاسخ داده شده')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='products.product', verbose_name='محصول')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to=settings.AUTH_USER_MODEL, verbose_name='کاربر')),
            ],
            options={
                'verbose_name': 'سوال محصول',
                'verbose_name_plural': 'سوالات محصول',
                'ordering': ['-created_at'],
            },
        ),
    ]


====== FILE: products/migrations/0006_productinventory_dimensions_productinventory_weight.py ======

# Generated by Django 5.1.5 on 2025-05-20 11:31

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('products', '0005_alter_size_options_remove_color_code_and_more'),
    ]

    operations = [
        migrations.AddField(
            model_name='productinventory',
            name='dimensions',
            field=models.CharField(blank=True, help_text='ابعاد (مثال: 30x40x10)', max_length=100),
        ),
        migrations.AddField(
            model_name='productinventory',
            name='weight',
            field=models.PositiveIntegerField(default=0, help_text='وزن به گرم'),
        ),
    ]


====== FILE: products/migrations/__init__.py ======



====== FILE: products/migrations/0003_alter_banner_image_alter_category_image_and_more.py ======

# Generated by Django 5.1.5 on 2025-05-17 09:09

import products.models
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('products', '0002_initial'),
    ]

    operations = [
        migrations.AlterField(
            model_name='banner',
            name='image',
            field=models.ImageField(help_text='فرمت\u200cهای مجاز: JPG, JPEG, PNG, GIF, WebP', upload_to='banners/', verbose_name='تصویر'),
        ),
        migrations.AlterField(
            model_name='category',
            name='image',
            field=models.ImageField(blank=True, help_text='فرمت\u200cهای مجاز: JPG, JPEG, PNG, GIF, WebP', upload_to=products.models.get_category_image_path, verbose_name='تصویر'),
        ),
        migrations.AlterField(
            model_name='productimage',
            name='image',
            field=models.ImageField(help_text='فرمت\u200cهای مجاز: JPG, JPEG, PNG, GIF, WebP', upload_to=products.models.get_product_image_path, verbose_name='تصویر'),
        ),
    ]


====== FILE: products/migrations/0010_remove_color_hex_code_field_product_color_codes_and_more.py ======

# Generated by Django 5.1.5 on 2025-09-03 13:14

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('products', '0009_remove_product_color_codes_remove_product_colors_and_more'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='color',
            name='hex_code_field',
        ),
        migrations.AddField(
            model_name='product',
            name='color_codes',
            field=models.JSONField(default=list, help_text='به صورت آرایه\u200cای از کدهای رنگ مانند ["#FFFFFF", "#000000", "#0000FF"]', verbose_name='کد رنگ\u200cها'),
        ),
        migrations.AddField(
            model_name='product',
            name='colors',
            field=models.JSONField(default=list, help_text='به صورت آرایه\u200cای از رنگ\u200cها مانند ["سفید", "مشکی", "آبی"]', verbose_name='رنگ\u200cها'),
        ),
        migrations.AddField(
            model_name='product',
            name='inventory',
            field=models.JSONField(default=dict, help_text='دیکشنری از موجودی هر ترکیب رنگ و سایز مانند {"S-سفید": 10, "M-سفید": 5}', verbose_name='موجودی بر اساس رنگ و سایز'),
        ),
        migrations.AddField(
            model_name='product',
            name='price_adjustments',
            field=models.JSONField(default=dict, help_text='دیکشنری از تغییرات قیمت مانند {"S": 0, "M": 10000, "L": 20000}', verbose_name='تغییرات قیمت'),
        ),
        migrations.AddField(
            model_name='product',
            name='sizes',
            field=models.JSONField(default=list, help_text='به صورت آرایه\u200cای از سایزها مانند ["S", "M", "L"]', verbose_name='سایزها'),
        ),
        migrations.DeleteModel(
            name='ProductQuestion',
        ),
    ]


====== FILE: products/migrations/0008_remove_color_hex_code_field_product_color_codes_and_more.py ======

# Generated by Django 5.1.5 on 2025-09-03 11:36

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('products', '0007_remove_product_color_codes_remove_product_colors_and_more'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='color',
            name='hex_code_field',
        ),
        migrations.AddField(
            model_name='product',
            name='color_codes',
            field=models.JSONField(default=list, help_text='به صورت آرایه\u200cای از کدهای رنگ مانند ["#FFFFFF", "#000000", "#0000FF"]', verbose_name='کد رنگ\u200cها'),
        ),
        migrations.AddField(
            model_name='product',
            name='colors',
            field=models.JSONField(default=list, help_text='به صورت آرایه\u200cای از رنگ\u200cها مانند ["سفید", "مشکی", "آبی"]', verbose_name='رنگ\u200cها'),
        ),
        migrations.AddField(
            model_name='product',
            name='inventory',
            field=models.JSONField(default=dict, help_text='دیکشنری از موجودی هر ترکیب رنگ و سایز مانند {"S-سفید": 10, "M-سفید": 5}', verbose_name='موجودی بر اساس رنگ و سایز'),
        ),
        migrations.AddField(
            model_name='product',
            name='price_adjustments',
            field=models.JSONField(default=dict, help_text='دیکشنری از تغییرات قیمت مانند {"S": 0, "M": 10000, "L": 20000}', verbose_name='تغییرات قیمت'),
        ),
        migrations.AddField(
            model_name='product',
            name='sizes',
            field=models.JSONField(default=list, help_text='به صورت آرایه\u200cای از سایزها مانند ["S", "M", "L"]', verbose_name='سایزها'),
        ),
        migrations.DeleteModel(
            name='ProductQuestion',
        ),
    ]


====== FILE: products/migrations/0005_alter_size_options_remove_color_code_and_more.py ======

# Generated by Django 5.1.5 on 2025-05-20 08:48

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('products', '0004_color_size_product_inventory_and_more'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='size',
            options={'verbose_name': 'سایز', 'verbose_name_plural': 'سایزها'},
        ),
        migrations.RemoveField(
            model_name='color',
            name='code',
        ),
        migrations.RemoveField(
            model_name='size',
            name='order',
        ),
        migrations.CreateModel(
            name='ProductInventory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=0, verbose_name='موجودی')),
                ('color', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.color', verbose_name='رنگ')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventories', to='products.product', verbose_name='محصول')),
                ('size', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.size', verbose_name='سایز')),
            ],
            options={
                'verbose_name': 'موجودی محصول',
                'verbose_name_plural': 'موجودی محصولات',
                'unique_together': {('product', 'color', 'size')},
            },
        ),
    ]


====== FILE: products/migrations/0001_initial.py ======

# Generated by Django 5.1.5 on 2025-05-16 13:09

import django.core.validators
import django.db.models.deletion
import products.models
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Banner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='عنوان')),
                ('subtitle', models.CharField(blank=True, max_length=300, verbose_name='زیرعنوان')),
                ('image', models.ImageField(upload_to='banners/', verbose_name='تصویر')),
                ('url', models.URLField(verbose_name='لینک')),
                ('position', models.CharField(choices=[('home_slider', 'اسلایدر صفحه اصلی'), ('home_top', 'بالای صفحه اصلی'), ('home_middle', 'وسط صفحه اصلی'), ('home_bottom', 'پایین صفحه اصلی'), ('category_top', 'بالای صفحه دسته\u200cبندی'), ('sidebar', 'ستون کناری')], max_length=20, verbose_name='موقعیت')),
                ('order', models.PositiveSmallIntegerField(default=0, verbose_name='ترتیب نمایش')),
                ('is_active', models.BooleanField(default=True, verbose_name='فعال')),
                ('start_date', models.DateTimeField(blank=True, null=True, verbose_name='تاریخ شروع نمایش')),
                ('end_date', models.DateTimeField(blank=True, null=True, verbose_name='تاریخ پایان نمایش')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='تاریخ ایجاد')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='تاریخ بروزرسانی')),
            ],
            options={
                'verbose_name': 'بنر تبلیغاتی',
                'verbose_name_plural': 'بنرهای تبلیغاتی',
                'ordering': ['position', 'order', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='نام تگ')),
                ('slug', models.SlugField(max_length=120, unique=True, verbose_name='اسلاگ')),
            ],
            options={
                'verbose_name': 'تگ',
                'verbose_name_plural': 'تگ\u200cها',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='نام دسته\u200cبندی')),
                ('slug', models.SlugField(max_length=120, unique=True, verbose_name='اسلاگ')),
                ('description', models.TextField(blank=True, verbose_name='توضیحات')),
                ('image', models.ImageField(blank=True, upload_to=products.models.get_category_image_path, verbose_name='تصویر')),
                ('is_active', models.BooleanField(default=True, verbose_name='فعال')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='تاریخ ایجاد')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='تاریخ بروزرسانی')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='products.category', verbose_name='دسته\u200cبندی والد')),
            ],
            options={
                'verbose_name': 'دسته\u200cبندی',
                'verbose_name_plural': 'دسته\u200cبندی\u200cها',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='نام محصول')),
                ('slug', models.SlugField(max_length=220, unique=True, verbose_name='اسلاگ')),
                ('brand', models.CharField(max_length=100, verbose_name='برند')),
                ('gender', models.CharField(choices=[('men', 'مردانه'), ('women', 'زنانه'), ('unisex', 'یونیسکس')], max_length=10, verbose_name='جنسیت')),
                ('description', models.TextField(verbose_name='توضیحات')),
                ('short_description', models.TextField(blank=True, verbose_name='توضیحات کوتاه')),
                ('price', models.PositiveIntegerField(verbose_name='قیمت (تومان)')),
                ('discount_percent', models.PositiveIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(100)], verbose_name='درصد تخفیف')),
                ('stock', models.PositiveIntegerField(default=0, verbose_name='موجودی')),
                ('is_active', models.BooleanField(default=True, verbose_name='فعال')),
                ('is_featured', models.BooleanField(default=False, verbose_name='محصول ویژه')),
                ('sizes', models.JSONField(default=list, help_text='به صورت آرایه\u200cای از سایزها مانند ["S", "M", "L"]', verbose_name='سایزها')),
                ('colors', models.JSONField(default=list, help_text='به صورت آرایه\u200cای از رنگ\u200cها مانند ["سفید", "مشکی", "آبی"]', verbose_name='رنگ\u200cها')),
                ('color_codes', models.JSONField(default=list, help_text='به صورت آرایه\u200cای از کدهای رنگ مانند ["#FFFFFF", "#000000", "#0000FF"]', verbose_name='کد رنگ\u200cها')),
                ('weight', models.PositiveIntegerField(default=0, verbose_name='وزن (گرم)')),
                ('dimensions', models.CharField(blank=True, help_text='مثال: 30x20x10 سانتی\u200cمتر', max_length=100, verbose_name='ابعاد')),
                ('meta_title', models.CharField(blank=True, max_length=200, verbose_name='عنوان متا')),
                ('meta_description', models.TextField(blank=True, verbose_name='توضیحات متا')),
                ('meta_keywords', models.CharField(blank=True, max_length=300, verbose_name='کلمات کلیدی متا')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='تاریخ ایجاد')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='تاریخ بروزرسانی')),
                ('total_sales', models.PositiveIntegerField(default=0, verbose_name='تعداد فروش')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to='products.category', verbose_name='دسته\u200cبندی')),
            ],
            options={
                'verbose_name': 'محصول',
                'verbose_name_plural': 'محصولات',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProductFeature',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='نام ویژگی')),
                ('value', models.CharField(max_length=255, verbose_name='مقدار ویژگی')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='features', to='products.product', verbose_name='محصول')),
            ],
            options={
                'verbose_name': 'ویژگی محصول',
                'verbose_name_plural': 'ویژگی\u200cهای محصول',
            },
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to=products.models.get_product_image_path, verbose_name='تصویر')),
                ('alt_text', models.CharField(blank=True, max_length=200, verbose_name='متن جایگزین')),
                ('is_main', models.BooleanField(default=False, verbose_name='تصویر اصلی')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='تاریخ ایجاد')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='products.product', verbose_name='محصول')),
            ],
            options={
                'verbose_name': 'تصویر محصول',
                'verbose_name_plural': 'تصاویر محصول',
                'ordering': ['-is_main', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='امتیاز')),
                ('comment', models.TextField(verbose_name='نظر')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='تاریخ ثبت')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='تاریخ بروزرسانی')),
                ('is_approved', models.BooleanField(default=False, verbose_name='تایید شده')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='products.product', verbose_name='محصول')),
            ],
            options={
                'verbose_name': 'نظر',
                'verbose_name_plural': 'نظرات',
                'ordering': ['-created_at'],
            },
        ),
    ]


====== FILE: products/migrations/0002_initial.py ======

# Generated by Django 5.1.5 on 2025-05-16 13:09

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('products', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name='review',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to=settings.AUTH_USER_MODEL, verbose_name='کاربر'),
        ),
        migrations.AddField(
            model_name='tag',
            name='products',
            field=models.ManyToManyField(blank=True, related_name='tags', to='products.product', verbose_name='محصولات'),
        ),
        migrations.AlterUniqueTogether(
            name='productfeature',
            unique_together={('product', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='review',
            unique_together={('product', 'user')},
        ),
    ]


====== FILE: products/templatetags/__init__.py ======



====== FILE: products/templatetags/product_filters.py ======

# FILE: products/templatetags/product_filters.py
from django import template
from django.http.request import QueryDict

register = template.Library()

@register.simple_tag(takes_context=True)
def url_replace(context, **kwargs):
    """
    Replaces current GET parameters with new ones provided in kwargs.
    Useful for pagination and sorting.
    Example: {% url_replace page=products.next_page_number sort='price_low' %}
    """
    query = context['request'].GET.copy()
    for key, value in kwargs.items():
        if value is None:
            if key in query:
                del query[key]
        else:
            query[key] = value
    return query.urlencode()

@register.filter
def get_item(dictionary, key):
    """
    Allows accessing dictionary items by key in Django templates.
    Example: {{ my_dict|get_item:key_variable }}
    """
    return dictionary.get(key)

@register.filter
def is_string(value):
    return isinstance(value, str)

@register.filter
def is_number(value):
    return isinstance(value, (int, float))

@register.filter
def is_list(value):
    return isinstance(value, list)

@register.filter
def is_queryset(value):
    from django.db.models.query import QuerySet
    return isinstance(value, QuerySet)

====== FILE: products/management/commands/add_colors.py ======

from django.core.management.base import BaseCommand
from products.models import Color


class Command(BaseCommand):
    help = 'Add a comprehensive list of Iranian and common colors to the database'

    def handle(self, *args, **options):
        iranian_colors = [
            # رنگ‌های اصلی و خنثی
            'سفید', 'مشکی', 'خاکستری', 'طوسی', 'نقره‌ای', 'دودی', 'زغالی',
            'کرم', 'بژ', 'استخوانی', 'شیری', 'نباتی',

            # خانواده قرمز
            'قرمز', 'زرشکی', 'شرابی', 'عنابی', 'جگری', 'لاکی', 'مرجانی', 'آلبالویی',
            'سرخابی', 'قرمز گوجه‌ای', 'قرمز آتشین', 'قرمز گیلاسی',

            # خانواده صورتی
            'صورتی', 'گلبهی', 'کالباسی', 'صورتی چرک', 'رزگلد', 'صورتی پاستلی',

            # خانواده نارنجی
            'نارنجی', 'آجری', 'نارنجی پرتقالی', 'گل‌بهی', 'هلویی', 'مسی', 'کهربایی',

            # خانواده زرد
            'زرد', 'طلایی', 'لیمویی', 'خردلی', 'زرد قناری', 'کاهی', 'نخودی',

            # خانواده سبز
            'سبز', 'سبز یشمی', 'سبز زیتونی', 'سبز لجنی', 'سبز ارتشی', 'سبزآبی',
            'سبز چمنی', 'سبز پسته‌ای', 'سبز نعنایی', 'سبز زمردی', 'سبز سیدی', 'سبز خزه‌ای',

            # خانواده آبی
            'آبی', 'آبی آسمانی', 'آبی نفتی', 'آبی کاربنی', 'سرمه‌ای', 'فیروزه‌ای', 'لاجوردی',
            'آبی درباری', 'آبی پاستلی', 'کله غازی', 'نیلی',

            # خانواده بنفش
            'بنفش', 'یاسی', 'ارغوانی', 'بادمجانی', 'بنفش پاستلی', 'ویولت',

            # خانواده قهوه‌ای
            'قهوه‌ای', 'شکلاتی', 'نسکافه‌ای', 'خاکی', 'برنزی', 'دارچینی', 'عسلی', 'کاراملی',
        ]

        created_count = 0
        for color_name in iranian_colors:
            _, created = Color.objects.get_or_create(name=color_name)
            if created:
                created_count += 1
                self.stdout.write(self.style.SUCCESS(f'رنگ "{color_name}" با موفقیت اضافه شد.'))

        self.stdout.write(self.style.SUCCESS(f'\nعملیات با موفقیت انجام شد. {created_count} رنگ جدید به دیتابیس اضافه شد.'))

====== FILE: static/chat/js/chat.js ======

document.addEventListener('DOMContentLoaded', function() {
    const roomId = document.getElementById('room-id').value;
    const userId = document.getElementById('user-id').value;
    const isStaff = document.getElementById('is-staff').value === 'True';
    const messageContainer = document.getElementById('message-container');
    const messageInput = document.getElementById('message-input');
    const sendButton = document.getElementById('send-button');
    const closeRoomButton = document.getElementById('close-room-button');
    const reopenRoomButton = document.getElementById('reopen-room-button');
    const fileUploadButton = document.getElementById('file-upload-button');
    const fileInput = document.getElementById('file-input');
    const roomStatus = document.getElementById('room-status');
    const typingIndicator = document.getElementById('typing-indicator');
    const notificationSound = document.getElementById('notification-sound');
    const chatActions = document.querySelector('.chat-actions');

    let typingTimeout = null;
    let socket = null;
    let tempFileId = null;
    let tempFilePreview = null;

    console.log('Chat room loaded');
    console.log('Is staff:', isStaff);
    console.log('User ID:', userId);

    // اتصال به وب‌سوکت
    function connectWebSocket() {
        const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
        socket = new WebSocket(
            `${wsProtocol}//${window.location.host}/ws/chat/${roomId}/`
        );

        socket.onopen = function(e) {
            console.log('WebSocket connected');

            // علامت‌گذاری پیام‌های خوانده نشده به عنوان خوانده شده
            document.querySelectorAll('.message.received:not(.read)').forEach(function(messageElement) {
                const messageId = messageElement.id.replace('message-', '');
                if (messageId && !messageId.startsWith('system-')) {
                    markMessageAsRead(messageId);
                }
            });
        };

        socket.onmessage = function(e) {
            const data = JSON.parse(e.data);
            console.log('WebSocket message received:', data);

            if (data.type === 'room_status') {
                console.log('Room status update received:', data);
                handleRoomStatusChange(data);
            }
            else if (data.type === 'chat.deleted_by_user') {
                handleChatDeleted(data);
            }
            else if (data.type === 'chat_message') {
                appendMessage(data.message);

                if (data.message.sender_id !== userId) {
                    notificationSound.play().catch(error => console.error('Error playing notification sound:', error));
                }

                messageContainer.scrollTop = messageContainer.scrollHeight;

                if (data.message.sender_id !== userId && data.message.message_type !== 'system') {
                    markMessageAsRead(data.message.id);
                }
            }
            else if (data.type === 'message_read') {
                const messageElement = document.getElementById('message-' + data.message_id);
                if (messageElement) {
                    const readIndicator = messageElement.querySelector('.read-indicator');
                    if (readIndicator) {
                        readIndicator.innerHTML = '<i class="fas fa-check-double"></i>';
                        readIndicator.setAttribute('title', 'خوانده شده در ' + new Date(data.read_at).toLocaleString('fa-IR'));
                        messageElement.classList.add('read');
                    }
                }
            }
            else if (data.type === 'user_typing') {
                if (data.user_id !== userId) {
                    if (data.is_typing) {
                        typingIndicator.textContent = data.username + ' در حال تایپ است...';
                        typingIndicator.style.display = 'block';
                    } else {
                        typingIndicator.style.display = 'none';
                    }
                }
            }
            else if (data.type === 'error') {
                showNotification(data.message, 'danger');
            }
        };

        socket.onclose = function(e) {
            console.log('WebSocket disconnected, trying to reconnect in 2 seconds...');
            setTimeout(function() {
                connectWebSocket();
            }, 2000);
        };

        socket.onerror = function(e) {
            console.error('WebSocket error:', e);
        };
    }

    // مدیریت تغییر وضعیت اتاق
    function handleRoomStatusChange(data) {
        console.log('Handling room status change:', data);

        // به‌روزرسانی نشانگر وضعیت
        if (roomStatus) {
            roomStatus.textContent = data.status === 'open' ? 'باز' : 'بسته شده';
            roomStatus.className = `badge ${data.status === 'open' ? 'bg-success' : 'bg-danger'} mx-2`;
        }

        // فعال/غیرفعال کردن ورودی پیام
        if (messageInput) messageInput.disabled = data.status !== 'open';
        if (sendButton) sendButton.disabled = data.status !== 'open';
        if (fileUploadButton) fileUploadButton.disabled = data.status !== 'open';

        // به‌روزرسانی دکمه‌های بستن و بازگشایی
        updateActionButtons(data);

        // اضافه کردن پیام سیستمی به چت
        if (data.message) {
            appendMessage({
                id: 'system-' + Date.now(),
                content: data.message,
                message_type: 'system',
                created_at: new Date().toISOString()
            });

            messageContainer.scrollTop = messageContainer.scrollHeight;
        }

        // نمایش اعلان
        if (data.status === 'closed') {
            const notificationText = data.closed_by_staff ?
                'این گفتگو توسط پشتیبانی بسته شده است.' :
                'این گفتگو توسط کاربر بسته شده است.';

            showNotification(notificationText, 'warning');
        } else if (data.status === 'open' && data.message) {
            showNotification(data.message, 'success');
        }
    }

    // به‌روزرسانی دکمه‌های بستن و بازگشایی
    function updateActionButtons(data) {
        console.log('Updating action buttons for status:', data.status, 'closed_by_staff:', data.closed_by_staff);

        if (chatActions) {
            chatActions.innerHTML = '';

            if (data.status === 'open') {
                // اتاق باز است، نمایش دکمه بستن
                const closeButton = document.createElement('button');
                closeButton.id = 'close-room-button';
                closeButton.className = 'btn btn-danger btn-sm';
                closeButton.innerHTML = '<i class="fas fa-times"></i> بستن گفتگو';
                closeButton.addEventListener('click', closeRoom);
                chatActions.appendChild(closeButton);
            } else {
                // اتاق بسته است، تصمیم‌گیری برای نمایش دکمه بازگشایی
                let showReopenButton = false;

                if (isStaff) {
                    showReopenButton = true;
                    console.log('Admin can reopen the chat');
                } else if (!data.closed_by_staff) {
                    showReopenButton = true;
                    console.log('User can reopen the chat because it was not closed by admin');
                } else {
                    console.log('User cannot reopen the chat because it was closed by admin');
                }

                if (showReopenButton) {
                    const reopenButton = document.createElement('button');
                    reopenButton.id = 'reopen-room-button';
                    reopenButton.className = 'btn btn-success btn-sm';
                    reopenButton.innerHTML = '<i class="fas fa-redo"></i> بازگشایی گفتگو';
                    reopenButton.addEventListener('click', reopenRoom);
                    chatActions.appendChild(reopenButton);
                }
            }
        }
    }

    // اتصال اولیه به وب‌سوکت
    connectWebSocket();

    function handleChatDeleted(data) {
        const systemMessage = document.createElement('div');
        systemMessage.className = 'message system-message';
        systemMessage.innerHTML = `
            <div class="message-content">
                <strong class="text-danger">${data.message}</strong>
            </div>
        `;
        messageContainer.appendChild(systemMessage);
        messageContainer.scrollTop = messageContainer.scrollHeight;

        if (messageInput) messageInput.disabled = true;
        if (sendButton) sendButton.disabled = true;
        if (fileUploadButton) fileUploadButton.disabled = true;

        if (messageInput) messageInput.placeholder = 'این گفتگو توسط کاربر حذف شده است';

        showNotification('این گفتگو توسط کاربر حذف شده است', 'warning', 0);
    }

    // تابع نمایش اعلان
    function showNotification(message, type, timeout = 5000) {
        let notificationContainer = document.querySelector('.notification-container');
        if (!notificationContainer) {
            notificationContainer = document.createElement('div');
            notificationContainer.className = 'notification-container';
            document.body.appendChild(notificationContainer);
        }

        const notification = document.createElement('div');
        notification.className = `alert alert-${type} alert-dismissible fade show`;
        notification.role = 'alert';
        notification.innerHTML = `
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        `;

        notificationContainer.appendChild(notification);

        if (timeout > 0) {
            setTimeout(() => {
                notification.classList.remove('show');
                setTimeout(() => {
                    notification.remove();
                }, 150);
            }, timeout);
        }
    }

    // افزودن پیام به صفحه
    function appendMessage(message) {
        const messageDiv = document.createElement('div');
        messageDiv.id = 'message-' + message.id;
        messageDiv.className = 'message';

        if (message.message_type === 'system') {
            messageDiv.className += ' system-message';
        } else if (message.sender_id === userId) {
            messageDiv.className += ' sent';
        } else {
            messageDiv.className += ' received';
        }

        if (message.is_read) {
            messageDiv.className += ' read';
        }

        let messageContent = `
            <div class="message-content">
                ${message.content}
            </div>
        `;

        // ✅ اصلاح: نمایش فایل
        if (message.file_url) {
            const fileUrl = message.file_url;
            const fileExtension = fileUrl.split('.').pop().toLowerCase();
            if (['jpg', 'jpeg', 'png', 'gif'].includes(fileExtension)) {
                messageContent += `
                    <div class="message-image">
                        <a href="${fileUrl}" target="_blank">
                            <img src="${fileUrl}" alt="تصویر پیوست" />
                        </a>
                    </div>
                `;
            } else {
                messageContent += `
                    <div class="message-file">
                        <a href="${fileUrl}" target="_blank">
                            <i class="fas fa-file"></i> دانلود فایل
                        </a>
                    </div>
                `;
            }
        }

        messageContent += `
            <div class="message-info">
                <span class="message-time">${formatDateTime(message.created_at)}</span>
        `;

        if (message.sender_id === userId && message.message_type !== 'system') {
            messageContent += `
                <span class="read-indicator" title="${message.is_read ? 'خوانده شده' : 'ارسال شده'}">
                    <i class="fas ${message.is_read ? 'fa-check-double' : 'fa-check'}"></i>
                </span>
            `;
        }

        messageContent += `</div>`;
        messageDiv.innerHTML = messageContent;
        messageContainer.appendChild(messageDiv);
    }

    // ارسال پیام
    function sendMessage() {
        const message = messageInput.value.trim();

        if (message || tempFileId) {
            socket.send(JSON.stringify({
                'type': 'chat_message',
                'message': message,
                'file_id': tempFileId
            }));

            messageInput.value = '';

            if (tempFilePreview) {
                tempFilePreview.remove();
                tempFilePreview = null;
            }

            tempFileId = null;
            sendTypingStatus(false);
        }
    }

    // آپلود فایل
    function uploadFile() {
        fileInput.click();
    }

    // ✅ اصلاح: پردازش انتخاب فایل
    function handleFileSelect(e) {
        const file = e.target.files[0];
        if (!file) return;

        if (file.size > 5 * 1024 * 1024) {
            showNotification('حداکثر اندازه فایل 5 مگابایت است.', 'danger');
            return;
        }

        const formData = new FormData();
        formData.append('file', file);

        // نمایش لودینگ
        if (fileUploadButton) {
            fileUploadButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
            fileUploadButton.disabled = true;
        }

        fetch('/chat/api/upload-file/', {
            method: 'POST',
            body: formData,
            headers: {
                'X-CSRFToken': getCookie('csrftoken')
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                tempFileId = data.file_id;

                if (tempFilePreview) {
                    tempFilePreview.remove();
                }

                tempFilePreview = document.createElement('div');
                tempFilePreview.className = 'file-preview';

                const fileExtension = data.file_name.split('.').pop().toLowerCase();
                if (['jpg', 'jpeg', 'png', 'gif'].includes(fileExtension)) {
                    tempFilePreview.innerHTML = `
                        <div class="image-preview">
                            <img src="${data.file_url}" alt="${data.file_name}" />
                            <button type="button" class="btn btn-sm btn-danger remove-file">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                    `;
                } else {
                    tempFilePreview.innerHTML = `
                        <div class="file-item">
                            <i class="fas fa-file"></i>
                            <span>${data.file_name}</span>
                            <button type="button" class="btn btn-sm btn-danger remove-file">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                    `;
                }

                const chatFooter = document.querySelector('.chat-footer');
                chatFooter.insertBefore(tempFilePreview, messageInput);

                tempFilePreview.querySelector('.remove-file').addEventListener('click', function() {
                    tempFilePreview.remove();
                    tempFilePreview = null;
                    tempFileId = null;
                });

                showNotification('فایل با موفقیت آپلود شد', 'success');
            } else {
                showNotification('خطا در آپلود فایل: ' + data.error, 'danger');
            }
        })
        .catch(error => {
            console.error('Error uploading file:', error);
            showNotification('خطا در آپلود فایل. لطفاً مجدداً تلاش کنید.', 'danger');
        })
        .finally(() => {
            // بازگردانی دکمه به حالت عادی
            if (fileUploadButton) {
                fileUploadButton.innerHTML = '<i class="fas fa-paperclip"></i>';
                fileUploadButton.disabled = false;
            }
        });

        fileInput.value = '';
    }

    // علامت‌گذاری پیام به عنوان خوانده شده
    function markMessageAsRead(messageId) {
        if (socket && socket.readyState === WebSocket.OPEN) {
            socket.send(JSON.stringify({
                'type': 'mark_read',
                'message_id': messageId
            }));
        }
    }

    // ارسال وضعیت تایپ کردن
    function sendTypingStatus(isTyping) {
        if (socket && socket.readyState === WebSocket.OPEN) {
            socket.send(JSON.stringify({
                'type': 'typing',
                'is_typing': isTyping
            }));
        }
    }

    // بستن اتاق گفتگو
    function closeRoom() {
        if (confirm('آیا از بستن این گفتگو اطمینان دارید؟')) {
            if (socket && socket.readyState === WebSocket.OPEN) {
                socket.send(JSON.stringify({
                    'type': 'close_room'
                }));
            }
        }
    }

    // ✅ اصلاح: بازگشایی اتاق گفتگو
    function reopenRoom() {
        if (confirm('آیا از بازگشایی این گفتگو اطمینان دارید؟')) {
            if (socket && socket.readyState === WebSocket.OPEN) {
                socket.send(JSON.stringify({
                    'type': 'reopen_room'
                }));
            } else {
                // اگر WebSocket متصل نیست، از API استفاده کن
                fetch(`/chat/api/reopen-room/${roomId}/`, {
                    method: 'POST',
                    headers: {
                        'X-CSRFToken': getCookie('csrftoken'),
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        location.reload();
                    } else {
                        showNotification('خطا در بازگشایی گفتگو: ' + (data.error || 'خطای ناشناخته'), 'danger');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showNotification('خطا در ارتباط با سرور', 'danger');
                });
            }
        }
    }

    // فرمت‌بندی تاریخ و زمان
    function formatDateTime(dateTimeStr) {
        const date = new Date(dateTimeStr);
        return date.toLocaleTimeString('fa-IR', { hour: '2-digit', minute: '2-digit' }) + ' ' +
               date.toLocaleDateString('fa-IR', { month: 'short', day: 'numeric' });
    }

    // دریافت مقدار کوکی
    function getCookie(name) {
        let cookieValue = null;
        if (document.cookie && document.cookie !== '') {
            const cookies = document.cookie.split(';');
            for (let i = 0; i < cookies.length; i++) {
                const cookie = cookies[i].trim();
                if (cookie.substring(0, name.length + 1) === (name + '=')) {
                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                    break;
                }
            }
        }
        return cookieValue;
    }

    // رویدادها
    if (sendButton) {
        sendButton.addEventListener('click', sendMessage);
    }

    if (messageInput) {
        messageInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            }
        });

        messageInput.addEventListener('input', function() {
            clearTimeout(typingTimeout);
            sendTypingStatus(true);
            typingTimeout = setTimeout(function() {
                sendTypingStatus(false);
            }, 3000);
        });
    }

    if (fileUploadButton) {
        fileUploadButton.addEventListener('click', uploadFile);
    }

    if (fileInput) {
        fileInput.addEventListener('change', handleFileSelect);
    }

    if (closeRoomButton) {
        closeRoomButton.addEventListener('click', closeRoom);
    }

    if (reopenRoomButton) {
        reopenRoomButton.addEventListener('click', reopenRoom);
    }

    if (messageContainer) {
        messageContainer.scrollTop = messageContainer.scrollHeight;
    }
});

====== FILE: static/chat/js/admin-dashboard.js ======

document.addEventListener('DOMContentLoaded', function() {
    const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
    const socket = new WebSocket(
        `${wsProtocol}//${window.location.host}/ws/admin/dashboard/`
    );

    socket.onopen = function(e) {
        console.log('Admin Dashboard WebSocket connected');
    };

    socket.onclose = function(e) {
        console.error('Admin Dashboard WebSocket disconnected. Reconnecting in 5s...');
        setTimeout(() => {
            window.location.reload(); // ساده‌ترین راه برای اتصال مجدد
        }, 5000);
    };

    socket.onmessage = function(e) {
        const event = JSON.parse(e.data);        const eventType = event.type;
        const data = event.data;

        console.log('Dashboard event received:', event);

        if (eventType === 'new_chat') {
            handleNewChat(data);
        } else if (eventType === 'chat_assigned') {
            handleChatAssigned(data);
        } else if (eventType === 'chat_closed') {
            handleChatClosed(data);        }
    };

    function handleNewChat(data) {
        const unassignedList = document.getElementById('unassigned-rooms-list');
        const unassignedCounter = document.getElementById('unassigned-counter');
        const noUnassignedPlaceholder = document.getElementById('no-unassigned-placeholder');

        if (noUnassignedPlaceholder) {
            noUnassignedPlaceholder.style.display = 'none';
        }
        if (unassignedList) {
            unassignedList.style.display = '';
        }

        const newChatItemHTML = `
            <li class="list-group-item d-flex justify-content-between align-items-center" data-room-id="${data.room_id}">
                <a href="${data.url}" class="text-decoration-none text-dark flex-grow-1">
                    <div class="d-flex align-items-center">
                        <span class="fw-bold">${data.room_name}</span>
                        <div class="user-status online" data-user-id="${data.user_id}"><span class="status-dot online"></span></div>
                        <div class="chat-item-badge ms-auto">
                            <div class="badge bg-primary unread-room-badge" data-room-id="${data.room_id}" style="display:none;">0</div>
                        </div>
                    </div>
                    <small class="text-muted">${data.username} - ${data.created_at}</small>
                </a>
                <button class="btn btn-sm btn-primary assign-room ms-2" data-room-id="${data.room_id}">
                    <i class="fas fa-user-plus"></i>
                </button>
            </li>`;

        unassignedList.insertAdjacentHTML('afterbegin', newChatItemHTML);
        unassignedCounter.textContent = parseInt(unassignedCounter.textContent) + 1;
    }

    function handleChatAssigned(data) {
        // از لیست "بدون پشتیبان" حذف کن
        const itemToRemove = document.querySelector(`#unassigned-rooms-list li[data-room-id="${data.room_id}"]`);
        if (itemToRemove) {
            itemToRemove.remove();
            const unassignedCounter = document.getElementById('unassigned-counter');
            unassignedCounter.textContent = Math.max(0, parseInt(unassignedCounter.textContent) - 1);
        }

        // به لیست "گفتگوهای من" اضافه کن
        const myRoomsList = document.getElementById('my-rooms-list');
        const myRoomsCounter = document.getElementById('my-rooms-counter');
        const noMyRoomsPlaceholder = document.getElementById('no-my-rooms-placeholder');

        if (noMyRoomsPlaceholder) {
            noMyRoomsPlaceholder.style.display = 'none';
        }
        if (myRoomsList) {
            myRoomsList.style.display = '';
        }

        const newMyChatItemHTML = `
            <li class="chat-item" data-room-id="${data.room_id}">
                <a href="${data.url}" class="text-decoration-none text-dark d-flex w-100 justify-content-between align-items-center">
                    <div class="chat-item-info">
                        <div class="d-flex align-items-center">
                            <div class="chat-item-title">${data.room_name}</div>
                            <div class="user-status online" data-user-id="${data.user_id}"><span class="status-dot online"></span></div>
                        </div>
                        <div class="chat-item-last-message">اختصاص داده شد</div>
                    </div>
                    <div class="chat-item-meta">
                        <div class="chat-item-time">${data.updated_at}</div>                        <div class="chat-item-badge">
                            <div class="badge bg-primary unread-room-badge" data-room-id="${data.room_id}" style="display:none;">0</div>
                        </div>
                    </div>
                </a>
            </li>`;

        myRoomsList.insertAdjacentHTML('afterbegin', newMyChatItemHTML);
        myRoomsCounter.textContent = parseInt(myRoomsCounter.textContent) + 1;
    }

    function handleChatClosed(data) {
        // از هر لیستی که در آن قرار دارد حذف کن
        const roomItem = document.querySelector(`li[data-room-id="${data.room_id}"]`);
        if (roomItem) {
            const parentList = roomItem.parentElement;
            let counterId = '';
            if (parentList.id === 'unassigned-rooms-list') counterId = 'unassigned-counter';
            else if (parentList.id === 'my-rooms-list') counterId = 'my-rooms-counter';
            else if (parentList.id === 'assigned-rooms-list') counterId = 'assigned-counter';

            roomItem.remove();
            if (counterId) {
                const counter = document.getElementById(counterId);
                counter.textContent = Math.max(0, parseInt(counter.textContent) - 1);
            }
        }

        // به لیست بسته شده اضافه کن
        const closedList = document.getElementById('closed-rooms-list');
        const closedCounter = document.getElementById('closed-counter');
        const noClosedPlaceholder = document.getElementById('no-closed-placeholder');
        if (noClosedPlaceholder) noClosedPlaceholder.style.display = 'none';
        if (closedList) closedList.style.display = '';

        const newClosedItemHTML = `
            <li class="list-group-item d-flex justify-content-between align-items-center" data-room-id="${data.room_id}">
                <div>
                    <span class="fw-bold">${data.room_name}</span><br>
                    <small class="text-muted">
                        ${data.username} - پشتیبان: ${data.agent_name} - بسته شده در: ${data.closed_at}
                    </small>
                </div>
                <a href="${data.url}" class="btn btn-sm btn-outline-secondary"><i class="fas fa-eye"></i> مشاهده</a>
            </li>`;

        closedList.insertAdjacentHTML('afterbegin', newClosedItemHTML);
        closedCounter.textContent = parseInt(closedCounter.textContent) + 1;
    }
});

====== FILE: static/chat/js/notifications.js ======

document.addEventListener('DOMContentLoaded', function() {
    const userId = document.getElementById('user-id') ? document.getElementById('user-id').value : null;
    const notificationBadge = document.getElementById('notification-badge');
    const notificationList = document.getElementById('notification-list');
    const notificationSound = document.getElementById('notification-sound');

    const chatUnreadBadge = document.getElementById('unread-count');
    const chatHeaderBadge = document.getElementById('chat-notification-badge');

    let socket = null;

    function updateGlobalChatBadges(count) {
        const intCount = parseInt(count, 10);
        if (intCount > 0) {
            if (chatUnreadBadge) {
                chatUnreadBadge.textContent = intCount;                chatUnreadBadge.style.display = 'flex';
            }
            if (chatHeaderBadge) {
                chatHeaderBadge.textContent = intCount;
                chatHeaderBadge.style.display = 'inline-block';
            }
        } else {
            if (chatUnreadBadge) {
                chatUnreadBadge.style.display = 'none';
            }
            if (chatHeaderBadge) {                chatHeaderBadge.style.display = 'none';
            }
        }
    }

    fetch('/chat/unread-count/')
        .then(response => response.json())
        .then(data => {
            updateGlobalChatBadges(data.count);
        })
        .catch(error => console.error('Error fetching initial unread count:', error));

    function connectWebSocket() {
        const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
        socket = new WebSocket(
            `${wsProtocol}//${window.location.host}/ws/notifications/`
        );

        socket.onopen = function(e) {
            console.log('Notification WebSocket connected');
            setInterval(function() {
                if (socket.readyState === WebSocket.OPEN) {
                    socket.send(JSON.stringify({
                        'action': 'heartbeat'
                    }));
                }
            }, 30000);
        };

        socket.onmessage = function(e) {
            const data = JSON.parse(e.data);
            console.log('Notification WebSocket message received:', data);

            if (data.type === 'notification') {
                const notification = data.notification;
                updateNotificationCount();
                if(notificationSound) {
                    notificationSound.play().catch(error => console.error('Error playing notification sound:', error));
                }
                if (notificationList) {
                    prependNotification(notification);
                }
                showBrowserNotification(notification);
            }
            else if (data.type === 'unread_count') {                updateNotificationBadge(data.count);
            }
            else if (data.type === 'unread_count_update') {
                updateGlobalChatBadges(data.count);
            }
            else if (data.type === 'chat_unread_update') {
                const badges = document.querySelectorAll(`.unread-room-badge[data-room-id="${data.room_id}"]`);
                badges.forEach(badge => {
                    badge.textContent = data.count;
                    badge.style.display = (data.count > 0) ? 'inline-block' : 'none';
                });
            }
            else if (data.type === 'message_read') {
                const roomItems = document.querySelectorAll(`.chat-item a[href$="/${data.room_id}/"]`);
                roomItems.forEach(item => {                    const icon = item.querySelector('.chat-item-message i');
                    if (icon) {
                        icon.classList.remove('fa-check');
                        icon.classList.add('fa-check-double');
                    }
                });
            }
        };

        socket.onclose = function(e) {
            console.log('Notification WebSocket disconnected, trying to reconnect in 2 seconds...');
            setTimeout(function() {                connectWebSocket();
            }, 2000);
        };

        socket.onerror = function(e) {
            console.error('Notification WebSocket error:', e);
        };
    }

    connectWebSocket();

    function updateNotificationCount() {
        fetch('/chat/unread-count/')
            .then(response => response.json())
            .then(data => {
                updateNotificationBadge(data.count);            })
            .catch(error => console.error('Error fetching notification count:', error));
    }    function updateNotificationBadge(count) {
        if (notificationBadge) {
            notificationBadge.textContent = count;
            notificationBadge.style.display = count > 0 ? 'inline-block' : 'none';
        }
    }

    function prependNotification(notification) {
        const notificationItem = document.createElement('div');
        notificationItem.className = 'notification-item';
        notificationItem.id = 'notification-' + notification.id;

        if (!notification.is_read) {
            notificationItem.classList.add('unread');
        }

        let notificationContent = `
            <div class="notification-header">
                <h5>${notification.title}</h5>
                <span class="notification-time">${formatDateTime(notification.created_at)}</span>
            </div>
            <div class="notification-body">
                <p>${notification.message}</p>
            </div>
            <div class="notification-footer">
        `;

        if (notification.notification_type === 'chat' && notification.data && notification.data.room_id) {
            notificationContent += `
                <a href="/chat/room/${notification.data.room_id}/" class="btn btn-sm btn-primary">
                    مشاهده گفتگو
                </a>
            `;
        }

        if (!notification.is_read) {
            notificationContent += `
                <button class="btn btn-sm btn-secondary mark-read" data-id="${notification.id}">
                    علامت‌گذاری به عنوان خوانده شده
                </button>
            `;
        }

        notificationContent += `</div>`;

        notificationItem.innerHTML = notificationContent;
        notificationList.insertBefore(notificationItem, notificationList.firstChild);

        const markReadButton = notificationItem.querySelector('.mark-read');
        if (markReadButton) {            markReadButton.addEventListener('click', function() {
                markNotificationAsRead(notification.id);
            });        }
    }

    function markNotificationAsRead(notificationId) {
        if (socket && socket.readyState === WebSocket.OPEN) {
            socket.send(JSON.stringify({
                'action': 'mark_read',
                'notification_id': notificationId
            }));

            const notificationItem = document.getElementById('notification-' + notificationId);
            if (notificationItem) {
                notificationItem.classList.remove('unread');
                const markReadButton = notificationItem.querySelector('.mark-read');
                if (markReadButton) {
                    markReadButton.remove();
                }
            }
        }
    }

    function markAllNotificationsAsRead() {
        if (socket && socket.readyState === WebSocket.OPEN) {
            socket.send(JSON.stringify({
                'action': 'mark_all_read'            }));
            document.querySelectorAll('.notification-item.unread').forEach(function(notificationItem) {
                notificationItem.classList.remove('unread');
                const markReadButton = notificationItem.querySelector('.mark-read');
                if (markReadButton) {
                    markReadButton.remove();
                }
            });
        }
    }

    function showBrowserNotification(notification) {
        if (!('Notification' in window)) return;
        if (Notification.permission === 'granted') {
            createBrowserNotification(notification);
        } else if (Notification.permission !== 'denied') {
            Notification.requestPermission().then(function(permission) {
                if (permission === 'granted') {
                    createBrowserNotification(notification);
                }            });
        }
    }

    function createBrowserNotification(notification) {
        const browserNotification = new Notification(notification.title, {
            body: notification.message,
            icon: '/static/chat/img/notification-icon.png'
        });
        browserNotification.onclick = function() {
            window.focus();
            if (notification.notification_type === 'chat' && notification.data && notification.data.room_id) {
                window.location.href = `/chat/room/${notification.data.room_id}/`;
            } else {
                window.location.href = '/chat/notifications/';
            }            browserNotification.close();
        };
        setTimeout(function() {
            browserNotification.close();        }, 5000);
    }

    function formatDateTime(dateTimeStr) {
        const date = new Date(dateTimeStr);
        return date.toLocaleTimeString('fa-IR', { hour: '2-digit', minute: '2-digit' }) + ' ' +
               date.toLocaleDateString('fa-IR', { month: 'short', day: 'numeric' });
    }

    const markAllReadButton = document.getElementById('mark-all-read');
    if (markAllReadButton) {        markAllReadButton.addEventListener('click', markAllNotificationsAsRead);
    }

    document.querySelectorAll('.mark-read').forEach(function(button) {
        button.addEventListener('click', function() {            const notificationId = this.getAttribute('data-id');
            markNotificationAsRead(notificationId);        });
    });

    updateNotificationCount();
});

====== FILE: static/chat/js/online-handler.js ======

(function() {
    'use strict';

    if (window.ZimaOnlineHandler) return;

    window.ZimaOnlineHandler = {
        socket: null,
        isConnected: false,
        isConnecting: false,
        heartbeatInterval: null,
        heartbeatDelay: 60000,
        reconnectDelay: 3000,

        init: function() {
            this.setupBeforeUnload();
            this.setupActivityListeners();
            setTimeout(() => this.connect(), this.reconnectDelay);
        },

        connect: function() {
            if (this.isConnecting || this.isConnected) return;

            this.isConnecting = true;
            try {
                const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
                const wsUrl = `${wsProtocol}//${window.location.host}/ws/online-status/`;
                this.socket = new WebSocket(wsUrl);

                this.socket.onopen = () => {
                    this.isConnected = true;
                    this.isConnecting = false;
                    this.sendOnlineStatus();
                    this.startHeartbeat();
                };

                this.socket.onmessage = (event) => {
                    try {
                        const data = JSON.parse(event.data);
                        if (data.type === 'online_status_update') {
                            this.updateUserStatus(data.user_id, data.status);
                        } else if (data.type === 'all_statuses') {
                            for (const uid in data.statuses) {
                                this.updateUserStatus(uid, data.statuses[uid]);
                            }
                        }
                    } catch (err) {}
                };

                this.socket.onclose = () => {
                    this.isConnected = false;
                    this.isConnecting = false;
                    this.stopHeartbeat();
                    setTimeout(() => this.connect(), this.reconnectDelay);
                };

                this.socket.onerror = () => {
                    this.isConnecting = false;
                };

            } catch (error) {
                this.isConnecting = false;
            }
        },

        setupBeforeUnload: function() {
            window.addEventListener('beforeunload', () => {
                this.sendOfflineStatus();
            });
        },

        setupActivityListeners: function() {
            document.addEventListener('mousemove', () => this.sendHeartbeatNow());
            document.addEventListener('keydown', () => this.sendHeartbeatNow());
        },

        sendOnlineStatus: function() {
            if (this.isConnected && this.socket) {
                this.socket.send(JSON.stringify({
                    type: 'set_status',
                    status: 'online'
                }));
            }
        },

        sendOfflineStatus: function() {
            if (this.isConnected && this.socket && this.socket.readyState === WebSocket.OPEN) {
                try {
                    this.socket.send(JSON.stringify({ type: 'offline' }));
                } catch {}
            }
        },

        startHeartbeat: function() {
            this.stopHeartbeat();
            this.heartbeatInterval = setInterval(() => {
                this.sendHeartbeatNow();
            }, this.heartbeatDelay);
        },

        stopHeartbeat: function() {
            if (this.heartbeatInterval) {
                clearInterval(this.heartbeatInterval);
                this.heartbeatInterval = null;
            }
        },

        sendHeartbeatNow: function() {
            if (this.isConnected && this.socket && this.socket.readyState === WebSocket.OPEN) {
                this.socket.send(JSON.stringify({ type: 'heartbeat' }));
            }
        },

        updateUserStatus: function(userId, status) {
            const elements = document.querySelectorAll(`.user-status[data-user-id="${userId}"]`);
            elements.forEach(element => {
                element.classList.remove('online', 'offline');
                element.classList.add(status);
                element.setAttribute('title', status === 'online' ? 'آنلاین' : 'آفلاین');
                const dot = element.querySelector('.status-dot');
                if (dot) {
                    dot.classList.remove('online', 'offline');
                    dot.classList.add(status);
                }
            });
        }
    };

    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            window.ZimaOnlineHandler.init();
        });
    } else {
        window.ZimaOnlineHandler.init();
    }
})();

====== FILE: static/chat/sounds/js/chat.js ======

document.addEventListener('DOMContentLoaded', function() {
    const roomId = document.getElementById('room-id').value;
    const userId = document.getElementById('user-id').value;
    const isStaff = document.getElementById('is-staff').value === 'True';
    const messageContainer = document.getElementById('message-container');
    const messageInput = document.getElementById('message-input');
    const sendButton = document.getElementById('send-button');
    const closeRoomButton = document.getElementById('close-room-button');
    const reopenRoomButton = document.getElementById('reopen-room-button');
    const fileUploadButton = document.getElementById('file-upload-button');
    const fileInput = document.getElementById('file-input');
    const roomStatus = document.getElementById('room-status');
    const typingIndicator = document.getElementById('typing-indicator');
    const notificationSound = document.getElementById('notification-sound');
    const chatActions = document.querySelector('.chat-actions');

    let typingTimeout = null;
    let socket = null;
    let tempFileId = null;
    let tempFilePreview = null;

    console.log('Chat room loaded');
    console.log('Is staff:', isStaff);
    console.log('User ID:', userId);
    console.log('Room elements:', {
        closeButton: closeRoomButton,
        reopenButton: reopenRoomButton,
        messageInput: messageInput,
        sendButton: sendButton
    });

    // اتصال به وب‌سوکت
    function connectWebSocket() {
        const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
        socket = new WebSocket(
            `${wsProtocol}//${window.location.host}/ws/chat/${roomId}/`
        );

        socket.onopen = function(e) {
            console.log('WebSocket connected');

            // علامت‌گذاری پیام‌های خوانده نشده به عنوان خوانده شده
            document.querySelectorAll('.message.received:not(.read)').forEach(function(messageElement) {
                const messageId = messageElement.id.replace('message-', '');
                if (messageId && !messageId.startsWith('system-')) {
                    markMessageAsRead(messageId);
                }
            });
        };

        socket.onmessage = function(e) {
            const data = JSON.parse(e.data);
            console.log('WebSocket message received:', data);

            if (data.type === 'room_status') {
                console.log('Room status update received:', data);
                handleRoomStatusChange(data);
            }
            else if (data.type === 'chat.deleted_by_user') {
                // پردازش پیام حذف گفتگو توسط کاربر
                handleChatDeleted(data);
            }
            else if (data.type === 'chat_message') {
                // دریافت پیام جدید
                appendMessage(data.message);

                // پخش صدای اعلان اگر پیام از کاربر دیگر است
                if (data.message.sender_id !== userId) {
                    notificationSound.play().catch(error => console.error('Error playing notification sound:', error));
                }

                // اسکرول به پایین
                messageContainer.scrollTop = messageContainer.scrollHeight;

                // علامت‌گذاری پیام به عنوان خوانده شده اگر از کاربر دیگر است
                if (data.message.sender_id !== userId && data.message.message_type !== 'system') {
                    markMessageAsRead(data.message.id);
                }
            }
            else if (data.type === 'message_read') {
                // به‌روزرسانی وضعیت خوانده شدن پیام
                const messageElement = document.getElementById('message-' + data.message_id);
                if (messageElement) {
                    const readIndicator = messageElement.querySelector('.read-indicator');
                    if (readIndicator) {
                        readIndicator.innerHTML = '<i class="fas fa-check-double"></i>';
                        readIndicator.setAttribute('title', 'خوانده شده در ' + new Date(data.read_at).toLocaleString('fa-IR'));
                        messageElement.classList.add('read');
                    }
                }
            }
            else if (data.type === 'user_typing') {
                // نمایش وضعیت تایپ کردن کاربر
                if (data.user_id !== userId) {
                    typingIndicator.textContent = data.username + ' در حال تایپ است...';
                    typingIndicator.style.display = data.is_typing ? 'block' : 'none';
                }
            }
            else if (data.type === 'error') {
                // نمایش خطا
                showNotification(data.message, 'danger');
            }
        };

        socket.onclose = function(e) {
            console.log('WebSocket disconnected, trying to reconnect in 2 seconds...');
            setTimeout(function() {
                connectWebSocket();
            }, 2000);
        };

        socket.onerror = function(e) {
            console.error('WebSocket error:', e);
        };
    }

    // مدیریت تغییر وضعیت اتاق
    function handleRoomStatusChange(data) {
        // به‌روزرسانی نشانگر وضعیت
        if (roomStatus) {
            roomStatus.textContent = data.status === 'open' ? 'باز' : 'بسته شده';
            roomStatus.className = `badge ${data.status === 'open' ? 'bg-success' : 'bg-danger'} mx-2`;
        }

        // فعال/غیرفعال کردن ورودی پیام
        if (messageInput) messageInput.disabled = data.status !== 'open';
        if (sendButton) sendButton.disabled = data.status !== 'open';
        if (fileUploadButton) fileUploadButton.disabled = data.status !== 'open';

        // به‌روزرسانی دکمه‌های بستن و بازگشایی
        updateActionButtons(data);

        // اضافه کردن پیام سیستمی به چت
        if (data.message) {
            appendMessage({
                id: 'system-' + Date.now(),
                content: data.message,
                message_type: 'system',
                created_at: new Date().toISOString()
            });

            // اسکرول به پایین
            messageContainer.scrollTop = messageContainer.scrollHeight;
        }

        // نمایش اعلان
        if (data.status === 'closed') {
            const notificationText = data.closed_by_staff ?
                'این گفتگو توسط پشتیبانی بسته شده است.' :
                'این گفتگو توسط کاربر بسته شده است.';

            showNotification(notificationText, 'warning');
        } else if (data.status === 'open' && data.message) {
            showNotification(data.message, 'success');
        }
    }

    // به‌روزرسانی دکمه‌های بستن و بازگشایی
    function updateActionButtons(data) {
        // پاک کردن محتوای قبلی
        if (chatActions) {
            chatActions.innerHTML = '';

            // ایجاد دکمه مناسب بر اساس وضعیت
            if (data.status === 'open') {
                // اتاق باز است، نمایش دکمه بستن
                const closeButton = document.createElement('button');
                closeButton.id = 'close-room-button';
                closeButton.className = 'btn btn-danger btn-sm';
                closeButton.innerHTML = '<i class="fas fa-times"></i> بستن گفتگو';
                closeButton.addEventListener('click', closeRoom);
                chatActions.appendChild(closeButton);
            } else {
                // اتاق بسته است، تصمیم‌گیری برای نمایش دکمه بازگشایی
                let showReopenButton = false;

                // شرایط نمایش دکمه بازگشایی
                if (isStaff) {
                    showReopenButton = true;
                    console.log('Admin can reopen the chat');
                } else if (!data.closed_by_staff) {
                    showReopenButton = true;
                    console.log('User can reopen the chat because it was not closed by admin');
                } else {
                    console.log('User cannot reopen the chat because it was closed by admin');
                }

                if (showReopenButton) {
                    const reopenButton = document.createElement('button');
                    reopenButton.id = 'reopen-room-button';
                    reopenButton.className = 'btn btn-success btn-sm';
                    reopenButton.innerHTML = '<i class="fas fa-redo"></i> بازگشایی گفتگو';
                    reopenButton.addEventListener('click', reopenRoom);
                    chatActions.appendChild(reopenButton);
                }
            }
        }
    }

    // اتصال اولیه به وب‌سوکت
    connectWebSocket();
    function handleChatDeleted(data) {
    // نمایش پیام سیستمی در چت
    const messageContainer = document.getElementById('message-container');
    const systemMessage = document.createElement('div');
    systemMessage.className = 'message system-message';
    systemMessage.innerHTML = `
        <div class="message-content">
            <strong class="text-danger">${data.message}</strong>
        </div>
    `;
    messageContainer.appendChild(systemMessage);
    messageContainer.scrollTop = messageContainer.scrollHeight;

    // غیرفعال کردن ارسال پیام
    const messageInput = document.getElementById('message-input');
    const sendButton = document.getElementById('send-button');
    const fileUploadButton = document.getElementById('file-upload-button');

    messageInput.disabled = true;
    sendButton.disabled = true;
    fileUploadButton.disabled = true;

    messageInput.placeholder = 'این گفتگو توسط کاربر حذف شده است';

    // نمایش اعلان
    showNotification('این گفتگو توسط کاربر حذف شده است', 'warning', 0);
}
    // تابع نمایش اعلان
    function showNotification(message, type, timeout = 5000) {
    // بررسی وجود کانتینر اعلان
    let notificationContainer = document.querySelector('.notification-container');
    if (!notificationContainer) {
        notificationContainer = document.createElement('div');
        notificationContainer.className = 'notification-container';
        document.body.appendChild(notificationContainer);
    }

    // ایجاد اعلان
    const notification = document.createElement('div');
    notification.className = `alert alert-${type} alert-dismissible fade show`;
    notification.role = 'alert';
    notification.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    `;

    // افزودن اعلان به کانتینر
    notificationContainer.appendChild(notification);

    // حذف خودکار اعلان بعد از زمان مشخص شده (اگر timeout صفر باشد، اعلان حذف نمی‌شود)
    if (timeout > 0) {
        setTimeout(() => {
            notification.classList.remove('show');
            setTimeout(() => {
                notification.remove();
            }, 150);
        }, timeout);
    }
}

    // افزودن پیام به صفحه
    function appendMessage(message) {
        const messageDiv = document.createElement('div');
        messageDiv.id = 'message-' + message.id;
        messageDiv.className = 'message';

        // تعیین کلاس پیام بر اساس فرستنده
        if (message.message_type === 'system') {
            messageDiv.className += ' system-message';
        } else if (message.sender_id === userId) {
            messageDiv.className += ' sent';
        } else {
            messageDiv.className += ' received';
        }

        // اگر پیام خوانده شده است، کلاس read را اضافه می‌کنیم
        if (message.is_read) {
            messageDiv.className += ' read';
        }

        // ایجاد محتوای پیام
        let messageContent = `
            <div class="message-content">
                ${message.content}
            </div>
        `;

        // اگر فایل دارد، آن را نمایش می‌دهیم
        if (message.file_url) {
            const fileUrl = message.file_url;
            const fileExtension = fileUrl.split('.').pop().toLowerCase();
            if (['jpg', 'jpeg', 'png', 'gif'].includes(fileExtension)) {
                messageContent += `
                    <div class="message-image">
                        <a href="${fileUrl}" target="_blank">
                            <img src="${fileUrl}" alt="تصویر پیوست" />
                        </a>
                    </div>
                `;
            } else {
                messageContent += `
                    <div class="message-file">
                        <a href="${fileUrl}" target="_blank">
                            <i class="fas fa-file"></i> دانلود فایل
                        </a>
                    </div>
                `;
            }
        }

        // افزودن اطلاعات پیام (زمان، وضعیت خوانده شدن و ...)
        messageContent += `
            <div class="message-info">
                <span class="message-time">${formatDateTime(message.created_at)}</span>
        `;

        // اگر پیام از کاربر فعلی است، نشانگر خوانده شدن را نمایش می‌دهیم
        if (message.sender_id === userId && message.message_type !== 'system') {
            messageContent += `
                <span class="read-indicator" title="${message.is_read ? 'خوانده شده' : 'ارسال شده'}">
                    <i class="fas ${message.is_read ? 'fa-check-double' : 'fa-check'}"></i>
                </span>
            `;
        }

        messageContent += `</div>`;

        // قرار دادن محتوا در المان پیام
        messageDiv.innerHTML = messageContent;

        // افزودن پیام به صفحه
        messageContainer.appendChild(messageDiv);
    }

    // ارسال پیام
    function sendMessage() {
        const message = messageInput.value.trim();

        if (message || tempFileId) {
            // ارسال پیام به سرور
            socket.send(JSON.stringify({
                'type': 'chat_message',
                'message': message,
                'file_id': tempFileId
            }));

            // پاک کردن ورودی پیام
            messageInput.value = '';

            // پاک کردن پیش‌نمایش فایل
            if (tempFilePreview) {
                tempFilePreview.remove();
                tempFilePreview = null;
            }

            // پاک کردن شناسه فایل موقت
            tempFileId = null;

            // متوقف کردن وضعیت تایپ کردن
            sendTypingStatus(false);
        }
    }

    // آپلود فایل
    function uploadFile() {
        fileInput.click();
    }

    // پردازش انتخاب فایل
    function handleFileSelect(e) {
        const file = e.target.files[0];
        if (!file) return;

        // بررسی اندازه فایل (حداکثر 5MB)
        if (file.size > 5 * 1024 * 1024) {
            alert('حداکثر اندازه فایل 5 مگابایت است.');
            return;
        }

        // ایجاد شیء FormData
        const formData = new FormData();
        formData.append('file', file);

        // ارسال فایل به سرور
        fetch('/chat/api/upload-file/', {
            method: 'POST',
            body: formData,
            headers: {
                'X-CSRFToken': getCookie('csrftoken')
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // ذخیره شناسه فایل موقت
                tempFileId = data.file_id;

                // نمایش پیش‌نمایش فایل
                if (tempFilePreview) {
                    tempFilePreview.remove();
                }

                tempFilePreview = document.createElement('div');
                tempFilePreview.className = 'file-preview';

                const fileExtension = data.file_name.split('.').pop().toLowerCase();
                if (['jpg', 'jpeg', 'png', 'gif'].includes(fileExtension)) {
                    tempFilePreview.innerHTML = `
                        <div class="image-preview">
                            <img src="${data.file_url}" alt="${data.file_name}" />
                            <button type="button" class="btn btn-sm btn-danger remove-file">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                    `;
                } else {
                    tempFilePreview.innerHTML = `
                        <div class="file-item">
                            <i class="fas fa-file"></i>
                            <span>${data.file_name}</span>
                            <button type="button" class="btn btn-sm btn-danger remove-file">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                    `;
                }

                // افزودن پیش‌نمایش به صفحه
                const chatFooter = document.querySelector('.chat-footer');
                chatFooter.insertBefore(tempFilePreview, messageInput);

                // افزودن رویداد کلیک برای دکمه حذف
                tempFilePreview.querySelector('.remove-file').addEventListener('click', function() {
                    tempFilePreview.remove();
                    tempFilePreview = null;
                    tempFileId = null;
                });
            } else {
                alert('خطا در آپلود فایل: ' + data.error);
            }
        })
        .catch(error => {
            console.error('Error uploading file:', error);
            alert('خطا در آپلود فایل. لطفاً مجدداً تلاش کنید.');
        });

        // پاک کردن مقدار input فایل
        fileInput.value = '';
    }

    // علامت‌گذاری پیام به عنوان خوانده شده
    function markMessageAsRead(messageId) {
        socket.send(JSON.stringify({
            'type': 'mark_read',
            'message_id': messageId
        }));
    }

    // ارسال وضعیت تایپ کردن
    function sendTypingStatus(isTyping) {
        socket.send(JSON.stringify({
            'type': 'typing',
            'is_typing': isTyping
        }));
    }

    // بستن اتاق گفتگو
    function closeRoom() {
        if (confirm('آیا از بستن این گفتگو اطمینان دارید؟')) {
            socket.send(JSON.stringify({
                'type': 'close_room'
            }));
        }
    }

    // بازگشایی اتاق گفتگو
    function reopenRoom() {
        if (confirm('آیا از بازگشایی این گفتگو اطمینان دارید؟')) {
            socket.send(JSON.stringify({
                'type': 'reopen_room'
            }));
        }
    }

    // فرمت‌بندی تاریخ و زمان
    function formatDateTime(dateTimeStr) {
        const date = new Date(dateTimeStr);
        return date.toLocaleTimeString('fa-IR', { hour: '2-digit', minute: '2-digit' }) + ' ' +
               date.toLocaleDateString('fa-IR', { month: 'short', day: 'numeric' });
    }

    // دریافت مقدار کوکی
    function getCookie(name) {
        let cookieValue = null;
        if (document.cookie && document.cookie !== '') {
            const cookies = document.cookie.split(';');
            for (let i = 0; i < cookies.length; i++) {
                const cookie = cookies[i].trim();
                // آیا این کوکی با نام مورد نظر شروع می‌شود؟
                if (cookie.substring(0, name.length + 1) === (name + '=')) {
                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                    break;
                }
            }
        }
        return cookieValue;
    }

    // رویدادها

    // ارسال پیام با کلیک روی دکمه
    if (sendButton) {
        sendButton.addEventListener('click', sendMessage);
    }

    // ارسال پیام با فشردن Enter
    if (messageInput) {
        messageInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            }
        });

        // ارسال وضعیت تایپ کردن
        messageInput.addEventListener('input', function() {
            clearTimeout(typingTimeout);

            // ارسال وضعیت تایپ کردن
            sendTypingStatus(true);

            // تنظیم تایمر برای پایان وضعیت تایپ کردن
            typingTimeout = setTimeout(function() {
                sendTypingStatus(false);
            }, 3000);
        });
    }

    // آپلود فایل
    if (fileUploadButton) {
        fileUploadButton.addEventListener('click', uploadFile);
    }

    // انتخاب فایل
    if (fileInput) {
        fileInput.addEventListener('change', handleFileSelect);
    }

    // بستن اتاق گفتگو - افزودن رویداد به دکمه‌های موجود
    if (closeRoomButton) {
        closeRoomButton.addEventListener('click', closeRoom);
    }

    // بازگشایی اتاق گفتگو - افزودن رویداد به دکمه‌های موجود
    if (reopenRoomButton) {
        reopenRoomButton.addEventListener('click', reopenRoom);
    }

    // اسکرول به پایین صفحه
    if (messageContainer) {
        messageContainer.scrollTop = messageContainer.scrollHeight;
    }
});

====== FILE: static/chat/sounds/js/notifications.js ======

document.addEventListener('DOMContentLoaded', function() {
    const userId = document.getElementById('user-id').value;
    const notificationBadge = document.getElementById('notification-badge');
    const notificationList = document.getElementById('notification-list');
    const notificationSound = document.getElementById('notification-sound');

    let socket = null;

    // اتصال به وب‌سوکت
    function connectWebSocket() {
        const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
        socket = new WebSocket(
            `${wsProtocol}//${window.location.host}/ws/notifications/`
        );

        socket.onopen = function(e) {
            console.log('Notification WebSocket connected');

            // ارسال heartbeat هر 30 ثانیه
            setInterval(function() {
                if (socket.readyState === WebSocket.OPEN) {
                    socket.send(JSON.stringify({
                        'action': 'heartbeat'
                    }));
                }
            }, 30000);
        };

        socket.onmessage = function(e) {
            const data = JSON.parse(e.data);
            console.log('Notification WebSocket message received:', data);

            if (data.type === 'notification') {
                // دریافت اعلان جدید
                const notification = data.notification;

                // به‌روزرسانی تعداد اعلان‌های خوانده نشده
                updateNotificationCount();

                // پخش صدای اعلان
                notificationSound.play().catch(error => console.error('Error playing notification sound:', error));

                // اگر صفحه اعلان‌ها باز است، اعلان جدید را نمایش می‌دهیم
                if (notificationList) {
                    prependNotification(notification);
                }

                // نمایش اعلان مرورگر
                showBrowserNotification(notification);
            }
            else if (data.type === 'unread_count') {
                // به‌روزرسانی تعداد اعلان‌های خوانده نشده
                updateNotificationBadge(data.count);
            }
        };

        socket.onclose = function(e) {
            console.log('Notification WebSocket disconnected, trying to reconnect in 2 seconds...');
            setTimeout(function() {
                connectWebSocket();
            }, 2000);
        };

        socket.onerror = function(e) {
            console.error('Notification WebSocket error:', e);
        };
    }

    // اتصال اولیه به وب‌سوکت
    connectWebSocket();

    // به‌روزرسانی تعداد اعلان‌های خوانده نشده
    function updateNotificationCount() {
        fetch('/chat/unread-count/')
            .then(response => response.json())
            .then(data => {
                updateNotificationBadge(data.count);
            })
            .catch(error => console.error('Error fetching notification count:', error));
    }

    // به‌روزرسانی نشانگر تعداد اعلان‌ها
    function updateNotificationBadge(count) {
        if (notificationBadge) {
            notificationBadge.textContent = count;
            notificationBadge.style.display = count > 0 ? 'inline-block' : 'none';
        }
    }

    // افزودن اعلان جدید به لیست
    function prependNotification(notification) {
        const notificationItem = document.createElement('div');
        notificationItem.className = 'notification-item';
        notificationItem.id = 'notification-' + notification.id;

        if (!notification.is_read) {
            notificationItem.classList.add('unread');
        }

        let notificationContent = `
            <div class="notification-header">
                <h5>${notification.title}</h5>
                <span class="notification-time">${formatDateTime(notification.created_at)}</span>
            </div>
            <div class="notification-body">
                <p>${notification.message}</p>
            </div>
            <div class="notification-footer">
        `;

        // اگر نوع اعلان چت است، دکمه مشاهده گفتگو را نمایش می‌دهیم
        if (notification.notification_type === 'chat' && notification.data && notification.data.room_id) {
            notificationContent += `
                <a href="/chat/room/${notification.data.room_id}/" class="btn btn-sm btn-primary">
                    مشاهده گفتگو
                </a>
            `;
        }

        // دکمه علامت‌گذاری به عنوان خوانده شده
        if (!notification.is_read) {
            notificationContent += `
                <button class="btn btn-sm btn-secondary mark-read" data-id="${notification.id}">
                    علامت‌گذاری به عنوان خوانده شده
                </button>
            `;
        }

        notificationContent += `</div>`;

        notificationItem.innerHTML = notificationContent;

        // افزودن به ابتدای لیست
        notificationList.insertBefore(notificationItem, notificationList.firstChild);

        // افزودن رویداد کلیک برای دکمه علامت‌گذاری
        const markReadButton = notificationItem.querySelector('.mark-read');
        if (markReadButton) {
            markReadButton.addEventListener('click', function() {
                markNotificationAsRead(notification.id);
            });
        }
    }

    // علامت‌گذاری اعلان به عنوان خوانده شده
    function markNotificationAsRead(notificationId) {
        if (socket && socket.readyState === WebSocket.OPEN) {
            socket.send(JSON.stringify({
                'action': 'mark_read',
                'notification_id': notificationId
            }));

            // به‌روزرسانی نمایش اعلان
            const notificationItem = document.getElementById('notification-' + notificationId);
            if (notificationItem) {
                notificationItem.classList.remove('unread');

                const markReadButton = notificationItem.querySelector('.mark-read');
                if (markReadButton) {
                    markReadButton.remove();
                }
            }
        }
    }

    // علامت‌گذاری تمام اعلان‌ها به عنوان خوانده شده
    function markAllNotificationsAsRead() {
        if (socket && socket.readyState === WebSocket.OPEN) {
            socket.send(JSON.stringify({
                'action': 'mark_all_read'
            }));

            // به‌روزرسانی نمایش اعلان‌ها
            document.querySelectorAll('.notification-item.unread').forEach(function(notificationItem) {
                notificationItem.classList.remove('unread');

                const markReadButton = notificationItem.querySelector('.mark-read');
                if (markReadButton) {
                    markReadButton.remove();
                }
            });
        }
    }

    // نمایش اعلان مرورگر
    function showBrowserNotification(notification) {
        // بررسی پشتیبانی از اعلان‌های مرورگر
        if (!('Notification' in window)) {
            return;
        }

        // درخواست مجوز اعلان
        if (Notification.permission === 'granted') {
            createBrowserNotification(notification);
        }
        else if (Notification.permission !== 'denied') {
            Notification.requestPermission().then(function(permission) {
                if (permission === 'granted') {
                    createBrowserNotification(notification);
                }
            });
        }
    }

    // ایجاد اعلان مرورگر
    function createBrowserNotification(notification) {
        const browserNotification = new Notification(notification.title, {
            body: notification.message,
            icon: '/static/chat/img/notification-icon.png'
        });

        browserNotification.onclick = function() {
            window.focus();

            // اگر اعلان مربوط به چت است، به صفحه گفتگو هدایت می‌کنیم
            if (notification.notification_type === 'chat' && notification.data && notification.data.room_id) {
                window.location.href = `/chat/room/${notification.data.room_id}/`;
            } else {
                window.location.href = '/chat/notifications/';
            }

            browserNotification.close();
        };

        // بستن خودکار اعلان پس از 5 ثانیه
        setTimeout(function() {
            browserNotification.close();
        }, 5000);
    }

    // فرمت‌بندی تاریخ و زمان
    function formatDateTime(dateTimeStr) {
        const date = new Date(dateTimeStr);
        return date.toLocaleTimeString('fa-IR', { hour: '2-digit', minute: '2-digit' }) + ' ' +
               date.toLocaleDateString('fa-IR', { month: 'short', day: 'numeric' });
    }

    // رویدادها

    // دکمه علامت‌گذاری تمام اعلان‌ها به عنوان خوانده شده
    const markAllReadButton = document.getElementById('mark-all-read');
    if (markAllReadButton) {
        markAllReadButton.addEventListener('click', markAllNotificationsAsRead);
    }

    // دکمه‌های علامت‌گذاری تکی
    document.querySelectorAll('.mark-read').forEach(function(button) {
        button.addEventListener('click', function() {
            const notificationId = this.getAttribute('data-id');
            markNotificationAsRead(notificationId);
        });
    });

    // به‌روزرسانی اولیه تعداد اعلان‌ها
    updateNotificationCount();
});

====== FILE: static/chat/sounds/js/online-handler.js ======

// static/chat/js/online-handler.js
(function() {
    'use strict';

    // جلوگیری از اجرای مکرر
    if (window.ZimaOnlineHandler) {
        console.log('Online handler already initialized');
        return;
    }

    window.ZimaOnlineHandler = {
        socket: null,
        isConnected: false,
        isConnecting: false,
        lastActivity: Date.now(),
        heartbeatInterval: null,

        init: function() {
            console.log('Initializing online handler');
            this.setupBeforeUnload();

            // فقط یک اتصال WebSocket برای وضعیت آنلاین
            setTimeout(() => this.connect(), 3000);
        },

        connect: function() {
            if (this.isConnecting || this.isConnected) {
                return;
            }

            this.isConnecting = true;

            try {
                const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
                const wsUrl = `${wsProtocol}//${window.location.host}/ws/online-status/`;

                this.socket = new WebSocket(wsUrl);

                this.socket.onopen = () => {
                    console.log('Online status connected');
                    this.isConnected = true;
                    this.isConnecting = false;
                    this.sendOnlineStatus();
                    this.startHeartbeat();
                };

                this.socket.onmessage = (event) => {
                    const data = JSON.parse(event.data);
                    if (data.type === 'status_update') {
                        this.updateUserStatus(data.user_id, data.status);
                    } else if (data.type === 'all_statuses') {
                        for (const userId in data.statuses) {
                            this.updateUserStatus(userId, data.statuses[userId]);
                        }
                    }
                };

                this.socket.onclose = () => {
                    console.log('Online status disconnected');
                    this.isConnected = false;
                    this.isConnecting = false;
                    this.stopHeartbeat();
                };

                this.socket.onerror = (error) => {
                    console.error('Online status error:', error);
                    this.isConnecting = false;
                };

            } catch (error) {
                console.error('Error creating online status socket:', error);
                this.isConnecting = false;
            }
        },

        setupBeforeUnload: function() {
            window.addEventListener('beforeunload', () => {
                this.sendOfflineStatus();
            });
        },

        sendOnlineStatus: function() {
            if (this.isConnected && this.socket) {
                this.socket.send(JSON.stringify({
                    type: 'set_status',
                    status: 'online'
                }));
            }
        },

        sendOfflineStatus: function() {
            if (this.isConnected && this.socket) {
                try {
                    this.socket.send(JSON.stringify({
                        type: 'offline'
                    }));
                } catch (e) {
                    console.error('Error sending offline status:', e);
                }
            }
        },

        startHeartbeat: function() {
            this.stopHeartbeat();
            this.heartbeatInterval = setInterval(() => {
                if (this.isConnected && this.socket) {
                    this.socket.send(JSON.stringify({
                        type: 'heartbeat'
                    }));
                }
            }, 120000); // 2 دقیقه
        },

        stopHeartbeat: function() {
            if (this.heartbeatInterval) {
                clearInterval(this.heartbeatInterval);
                this.heartbeatInterval = null;
            }
        },

        updateUserStatus: function(userId, status) {
            const elements = document.querySelectorAll(`.user-status[data-user-id="${userId}"]`);
            elements.forEach(element => {
                element.classList.remove('online', 'offline');
                element.classList.add(status);
                element.setAttribute('title', status === 'online' ? 'آنلاین' : 'آفلاین');

                const statusDot = element.querySelector('.status-dot');
                if (statusDot) {
                    statusDot.classList.remove('online', 'offline');
                    statusDot.classList.add(status);
                }
            });
        }
    };

    // شروع فقط یک بار
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            window.ZimaOnlineHandler.init();
        });
    } else {
        window.ZimaOnlineHandler.init();
    }

})();

====== FILE: static/chat/sounds/css/notifications.css ======

/* استایل‌های اعلان‌ها */

.notification-container {
    margin-top: 20px;
}

.notification-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
}

.notification-header h2 {
    margin: 0;
}

.notification-list {
    list-style: none;
    padding: 0;
    margin: 0;
}

.notification-item {
    padding: 15px;
    border: 1px solid #ddd;
    border-radius: 8px;
    margin-bottom: 15px;
    background-color: #fff;
    transition: background-color 0.2s;
}

.notification-item.unread {
    background-color: #f0f7ff;
    border-right: 4px solid #0d6efd;
}

.notification-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 10px;
}

.notification-header h5 {
    margin: 0;
    font-weight: bold;
}

.notification-time {
    font-size: 0.8rem;
    color: #777;
}

.notification-body {
    margin-bottom: 10px;
}

.notification-body p {
    margin: 0;
    color: #333;
}

.notification-footer {
    display: flex;
    justify-content: flex-end;
    gap: 10px;
}

/* نشانگر تعداد اعلان‌های خوانده نشده */
.notification-badge {
    display: inline-block;
    background-color: #dc3545;
    color: white;
    border-radius: 50%;
    min-width: 20px;
    height: 20px;
    text-align: center;
    line-height: 20px;
    font-size: 0.8rem;
    padding: 0 5px;
    position: absolute;
    top: -8px;
    right: -8px;
}

.notification-icon {
    position: relative;
}

/* ریسپانسیو */
@media (max-width: 768px) {
    .notification-footer {
        flex-direction: column;
        align-items: flex-start;
        gap: 5px;
    }

    .notification-footer .btn {
        width: 100%;
    }
}

====== FILE: static/chat/sounds/css/chat-list.css ======

/* chat-list.css - استایل‌های صفحه لیست گفتگوها */

.chat-list-container {
    max-width: 1000px;
    margin: 20px auto;
    background-color: #ffffff;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    overflow: hidden;
}

.chat-list-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 20px;
    background-color: #f8f9fa;
    border-bottom: 1px solid #e0e0e0;
}

.chat-list-header h1 {
    margin: 0;
    font-size: 24px;
    font-weight: 600;
}

.chat-list-tabs {
    padding: 0;
}

.nav-tabs {
    border-bottom: 1px solid #e0e0e0;
    padding: 0 20px;
}

.nav-tabs .nav-link {
    border: none;
    border-bottom: 2px solid transparent;
    color: #6c757d;
    font-weight: 500;
    padding: 15px 20px;
    transition: color 0.3s, border-color 0.3s;
}

.nav-tabs .nav-link.active {
    color: #007bff;
    border-bottom-color: #007bff;
    background-color: transparent;
}

.nav-tabs .nav-link:hover {
    border-color: transparent;
    color: #007bff;
}

.nav-tabs .badge {
    margin-right: 5px;
}

.tab-content {
    padding: 0;
}

.chat-list {
    list-style: none;
    padding: 0;
    margin: 0;
}

.chat-item {
    display: flex;
    align-items: center;
    padding: 15px 20px;
    border-bottom: 1px solid #f1f3f4;
    transition: background-color 0.3s;
    text-decoration: none;
    color: inherit;
}

.chat-item:hover {
    background-color: #f8f9fa;
}

.chat-item-avatar {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    overflow: hidden;
    margin-left: 15px;
    background-color: #e9ecef;
    display: flex;
    align-items: center;
    justify-content: center;
}

.chat-item-avatar img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.avatar-placeholder {
    font-size: 24px;
    font-weight: bold;
    color: #6c757d;
}

.chat-item-content {
    flex-grow: 1;
    min-width: 0;
}

.chat-item-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 5px;
}

.chat-item-header h3 {
    margin: 0;
    font-size: 16px;
    font-weight: 600;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.chat-item-time {
    font-size: 12px;
    color: #6c757d;
    white-space: nowrap;
}

.chat-item-message {
    font-size: 14px;
    color: #6c757d;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.system-message-preview {
    font-style: italic;
    color: #6c757d;
}

.no-message {
    color: #6c757d;
    font-style: italic;
}

.chat-item-badge {
    margin-right: 10px;
}

.chat-item-badge .badge {
    font-size: 12px;
    padding: 5px 8px;
}

.chat-item-status {
    margin-right: 10px;
}

.status-badge {
    padding: 5px 10px;
    border-radius: 15px;
    font-size: 12px;
    font-weight: 500;
}

.status-badge.closed {
    background-color: #f1f3f4;
    color: #6c757d;
}

.empty-list {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 50px 20px;
    text-align: center;
}

.empty-list i {
    font-size: 48px;
    color: #e0e0e0;
    margin-bottom: 15px;
}

.empty-list p {
    font-size: 16px;
    color: #6c757d;
    margin-bottom: 20px;
}
/* استایل‌های اضافی برای کانتینر اعلان‌ها */
.notification-container {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 1050;
}

/* استایل‌های دکمه حذف گفتگو */
.delete-chat {
    position: absolute;
    left: 15px;
    top: 50%;
    transform: translateY(-50%);
    padding: 5px;
    opacity: 0.7;
    transition: all 0.2s ease;
    z-index: 10;
}

.delete-chat:hover {
    opacity: 1;
    transform: translateY(-50%) scale(1.1);
}

/* اصلاح استایل وضعیت آنلاین/آفلاین */
.user-status {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 20px;
    height: 20px;
    margin-right: 5px;
    position: relative;
    background-color: transparent;
}

.status-dot {
    width: 10px;
    height: 10px;
    border-radius: 50%;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    transition: all 0.3s ease;
}

.status-dot.online {
    background-color: #4CAF50;
    box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.2);
    animation: pulse 2s infinite;
}

.status-dot.offline {
    background-color: #9e9e9e;
    box-shadow: 0 0 0 2px rgba(158, 158, 158, 0.2);
}

@keyframes pulse {
    0% {
        box-shadow: 0 0 0 0 rgba(76, 175, 80, 0.7);
    }
    70% {
        box-shadow: 0 0 0 6px rgba(76, 175, 80, 0);
    }
    100% {
        box-shadow: 0 0 0 0 rgba(76, 175, 80, 0);
    }
}

/* تنظیمات واکنش‌گرایی */
@media (max-width: 768px) {
    .chat-list-container {
        margin: 10px;
        border-radius: 5px;
    }

    .chat-list-header h1 {
        font-size: 20px;
    }

    .chat-item-avatar {
        width: 40px;
        height: 40px;
    }

    .chat-item-header h3 {
        font-size: 14px;
    }
}

====== FILE: static/chat/sounds/css/chat.css ======

/* استایل‌های اصلی چت */

.chat-container {
    display: flex;
    flex-direction: column;
    height: 70vh;
    border: 1px solid #ddd;
    border-radius: 8px;
    overflow: hidden;
    background-color: #fff;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

.chat-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 15px;
    background-color: #f8f9fa;
    border-bottom: 1px solid #ddd;
}

.chat-header h3 {
    margin: 0;
    font-size: 1.2rem;
}

.chat-header .chat-actions {
    display: flex;
    gap: 10px;
}

.chat-body {
    flex-grow: 1;
    overflow-y: auto;
    padding: 15px;
    background-color: #f0f2f5;
}

.chat-footer {
    display: flex;
    padding: 10px;
    background-color: #f8f9fa;
    border-top: 1px solid #ddd;
}

.chat-footer textarea {
    flex-grow: 1;
    border: 1px solid #ddd;
    border-radius: 20px;
    padding: 10px 15px;
    resize: none;
    height: 40px;
    margin-right: 10px;
}

.chat-footer button {
    border-radius: 50%;
    width: 40px;
    height: 40px;
    display: flex;
    justify-content: center;
    align-items: center;
    margin-left: 5px;
}

/* استایل‌های پیام */

.message {
    margin-bottom: 15px;
    max-width: 70%;
    clear: both;
}

.message-content {
    padding: 10px 15px;
    border-radius: 18px;
    position: relative;
    word-wrap: break-word;
}

.message-info {
    font-size: 0.75rem;
    margin-top: 5px;
    color: #777;
    display: flex;
    align-items: center;
}

.message-time {
    margin-right: 5px;
}

.read-indicator {
    margin-right: 5px;
    color: #777;
}

.message.read .read-indicator {
    color: #0d6efd;
}

/* پیام ارسالی */
.message.sent {
    float: left;
    margin-left: 20px;
}

.message.sent .message-content {
    background-color: #dcf8c6;
}

.message.sent .message-info {
    text-align: left;
    justify-content: flex-start;
}

/* پیام دریافتی */
.message.received {
    float: right;
    margin-right: 20px;
}

.message.received .message-content {
    background-color: #fff;
}

.message.received .message-info {
    text-align: right;
    justify-content: flex-end;
}

/* پیام سیستمی */
.message.system-message {
    clear: both;
    float: none;
    margin: 10px auto;
    text-align: center;
    max-width: 100%;
}

.message.system-message .message-content {
    display: inline-block;
    background-color: #f1f1f1;
    color: #666;
    font-style: italic;
    padding: 5px 15px;
    border-radius: 15px;
}

/* تصویر و فایل */
.message-image img {
    max-width: 100%;
    max-height: 200px;
    border-radius: 8px;
    margin-top: 5px;
}

.message-file {
    margin-top: 5px;
}

.message-file a {
    display: flex;
    align-items: center;
    padding: 8px 12px;
    background-color: #f1f1f1;
    border-radius: 5px;
    text-decoration: none;
    color: #333;
}

.message-file a i {
    margin-left: 8px;
}

/* پیش‌نمایش فایل */
.file-preview {
    margin: 10px 0;
}

.image-preview {
    position: relative;
    display: inline-block;
}

.image-preview img {
    max-height: 100px;
    max-width: 200px;
    border-radius: 5px;
}

.file-item {
    display: flex;
    align-items: center;
    padding: 5px 10px;
    background-color: #f1f1f1;
    border-radius: 5px;
    margin-bottom: 5px;
}

.file-item i {
    margin-left: 8px;
}

.remove-file {
    position: absolute;
    top: -5px;
    right: -5px;
    padding: 0;
    width: 20px;
    height: 20px;
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 10px;
}

/* نشانگر تایپ کردن */
.typing-indicator {
    font-style: italic;
    color: #666;
    padding: 5px 10px;
    display: none;
}

/* وضعیت آنلاین */
.user-status {
    display: inline-block;
    width: 20px;
    height: 20px;
    margin-right: 8px;
    margin-left: 8px;
    vertical-align: middle;
    position: relative;
    border-radius: 50%;
    background-color: transparent;
}

.user-status.online {
    background-color: #28a745;
}
.status-dot {
    display: block;
    width: 12px;
    height: 12px;
    border-radius: 50%;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    transition: all 0.3s ease;
}

.status-dot.online {
    background-color: #28a745;
    box-shadow: 0 0 0 2px #fff, 0 0 0 4px rgba(40, 167, 69, 0.3), 0 0 7px rgba(40, 167, 69, 0.5);
    animation: pulse-green 2s infinite;
}

.status-dot.offline {
    background-color: #6c757d;
    box-shadow: 0 0 0 2px #fff, 0 0 0 4px rgba(108, 117, 125, 0.2);
}
@keyframes pulse-green {
    0% {
        box-shadow: 0 0 0 2px #fff, 0 0 0 4px rgba(40, 167, 69, 0.3), 0 0 7px rgba(40, 167, 69, 0.5);
    }
    50% {
        box-shadow: 0 0 0 2px #fff, 0 0 0 4px rgba(40, 167, 69, 0.5), 0 0 10px rgba(40, 167, 69, 0.7);
    }
    100% {
        box-shadow: 0 0 0 2px #fff, 0 0 0 4px rgba(40, 167, 69, 0.3), 0 0 7px rgba(40, 167, 69, 0.5);
    }
}


/* استایل مودال تایید حذف */
.modal-content {
    border-radius: 10px;
    border: none;
}

.modal-header {
    border-bottom: 1px solid #f0f0f0;
}

.modal-footer {
    border-top: 1px solid #f0f0f0;
}

/* استایل کانتینر اعلان */
.notification-container {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 1050;
    max-width: 300px;
}

.notification-container .alert {
    margin-bottom: 10px;
    box-shadow: 0 4px 10px rgba(0,0,0,0.1);
    border-radius: 8px;
    padding: 15px;
}

.notification-container .btn-close {
    font-size: 0.8rem;
}
/* افزودن استایل برای نمایش بهتر در لیست چت */
.chat-list .user-status {
    margin-right: 4px;
    margin-left: 4px;
}

/* افزودن استایل برای نمایش بهتر در هدر چت */
.chat-header .user-status {
    margin-right: 8px;
    margin-left: 8px;
}
.user-status.offline {
    background-color: #dc3545;
}

/* لیست گفتگوها */
.chat-list {
    list-style: none;
    padding: 0;
    margin: 0;
}

.chat-item {
    padding: 15px;
    border-bottom: 1px solid #ddd;
    display: flex;
    justify-content: space-between;
    align-items: center;
    transition: background-color 0.2s;
}

.chat-item:hover {
    background-color: #f8f9fa;
}

.chat-item-info {
    flex-grow: 1;
}

.chat-item-title {
    font-weight: bold;
    margin-bottom: 5px;
}

.chat-item-last-message {
    color: #666;
    font-size: 0.9rem;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    max-width: 300px;
}

.chat-item-meta {
    text-align: right;
    min-width: 70px;
}

.chat-item-time {
    font-size: 0.8rem;
    color: #777;
}

.unread-badge {
    display: inline-block;
    background-color: #0d6efd;
    color: white;
    border-radius: 50%;
    width: 20px;
    height: 20px;
    text-align: center;
    line-height: 20px;
    font-size: 0.8rem;
    margin-top: 5px;
}

/* ریسپانسیو */
@media (max-width: 768px) {
    .message {
        max-width: 85%;
    }

    .chat-item-last-message {
        max-width: 200px;
    }
}

@media (max-width: 576px) {
    .message {
        max-width: 90%;
    }

    .chat-item-last-message {
        max-width: 150px;
    }

    .chat-footer textarea {
        height: 60px;
    }
}

====== FILE: static/chat/sounds/css/admin-dashboard.css ======

/* admin-dashboard.css - استایل‌های داشبورد مدیریت */

.admin-dashboard-container {
    max-width: 1200px;
    margin: 20px auto;
    background-color: #ffffff;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    overflow: hidden;
}

.admin-dashboard-header {
    padding: 20px;
    background-color: #f8f9fa;
    border-bottom: 1px solid #e0e0e0;
}

.admin-dashboard-header h1 {
    margin: 0;
    font-size: 24px;
    font-weight: 600;
}

.admin-stats {
    display: flex;
    flex-wrap: wrap;
    padding: 20px;
    background-color: #ffffff;
    border-bottom: 1px solid #e0e0e0;
}

.stat-card {
    display: flex;
    align-items: center;
    padding: 15px;
    margin: 0 10px 10px 0;
    background-color: #f8f9fa;
    border-radius: 8px;
    width: calc(25% - 10px);
    min-width: 200px;
}

.stat-icon {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    background-color: #e9ecef;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-left: 15px;
}

.stat-icon i {
    font-size: 24px;
    color: #007bff;
}

.stat-content h3 {
    margin: 0;
    font-size: 14px;
    font-weight: 500;
    color: #6c757d;
}

.stat-value {
    font-size: 24px;
    font-weight: 600;
    margin: 5px 0 0;
    color: #212529;
}

.admin-tabs {
    padding: 0;
}

.nav-tabs {
    border-bottom: 1px solid #e0e0e0;
    padding: 0 20px;
}

.nav-tabs .nav-link {
    border: none;
    border-bottom: 2px solid transparent;
    color: #6c757d;
    font-weight: 500;
    padding: 15px 20px;
    transition: color 0.3s, border-color 0.3s;
}

.nav-tabs .nav-link.active {
    color: #007bff;
    border-bottom-color: #007bff;
    background-color: transparent;
}

.nav-tabs .nav-link:hover {
    border-color: transparent;
    color: #007bff;
}

.nav-tabs .badge {
    margin-right: 5px;
}

.tab-content {
    padding: 0;
}

.chat-list {
    list-style: none;
    padding: 0;
    margin: 0;
}

.chat-item {
    display: flex;
    align-items: center;
    padding: 15px 20px;
    border-bottom: 1px solid #f1f3f4;
    transition: background-color 0.3s;
}

a.chat-item {
    text-decoration: none;
    color: inherit;
}

a.chat-item:hover {
    background-color: #f8f9fa;
}

.chat-item-avatar {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    overflow: hidden;
    margin-left: 15px;
    background-color: #e9ecef;
    display: flex;
    align-items: center;
    justify-content: center;
}

.chat-item-avatar img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.avatar-placeholder {
    font-size: 24px;
    font-weight: bold;
    color: #6c757d;
}

.chat-item-content {
    flex-grow: 1;
    min-width: 0;
}

.chat-item-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 5px;
}

.chat-item-header h3 {
    margin: 0;
    font-size: 16px;
    font-weight: 600;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.chat-item-time {
    font-size: 12px;
    color: #6c757d;
    white-space: nowrap;
}

.chat-item-message {
    font-size: 14px;
    color: #6c757d;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.system-message-preview {
    font-style: italic;
    color: #6c757d;
}

.no-message {
    color: #6c757d;
    font-style: italic;
}

.chat-item-badge {
    margin-right: 10px;
}

.chat-item-badge .badge {
    font-size: 12px;
    padding: 5px 8px;
}

.chat-item-actions {
    display: flex;
    margin-right: 10px;
}

.chat-item-actions .btn {
    margin-right: 5px;
}

.empty-list {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 50px 20px;
    text-align: center;
}

.empty-list i {
    font-size: 48px;
    color: #e0e0e0;
    margin-bottom: 15px;
}

.empty-list p {
    font-size: 16px;
    color: #6c757d;
    margin-bottom: 20px;
}

/* تنظیمات واکنش‌گرایی */
@media (max-width: 992px) {
    .stat-card {
        width: calc(50% - 10px);
    }
}

@media (max-width: 768px) {
    .admin-dashboard-container {
        margin: 10px;
        border-radius: 5px;
    }

    .admin-dashboard-header h1 {
        font-size: 20px;
    }

    .stat-card {
        width: 100%;
        margin-right: 0;
    }

    .chat-item-avatar {
        width: 40px;
        height: 40px;
    }

    .chat-item-header h3 {
        font-size: 14px;
    }
}

/* استایل‌های جستجو */
.search-highlight {
    background-color: #f8f9fa;
    border-right: 3px solid #007bff;
    font-size: 13px;
    color: #333;
}

.search-result-message {
    max-width: 90%;
}

#closed-search-form {
    width: 200px;
}

#closed-search-form .input-group {
    border-radius: 20px;
    overflow: hidden;
}

#closed-search-input {
    border-left: none;
    background-color: rgba(255, 255, 255, 0.2);
    color: #fff;
}

#closed-search-input::placeholder {
    color: rgba(255, 255, 255, 0.7);
}

.card-header .input-group-sm .form-control-sm {
    height: calc(1.5em + 0.5rem + 2px);
    padding: 0.25rem 0.5rem;
    font-size: 0.875rem;
    line-height: 1.5;
    border-radius: 0.2rem;
}

.card-header .input-group-sm .btn-sm {
    padding: 0.25rem 0.5rem;
    font-size: 0.875rem;
    line-height: 1.5;
    border-radius: 0.2rem;
}

====== FILE: static/chat/sounds/css/start-chat.css ======

/* start-chat.css - استایل‌های صفحه شروع گفتگو */

.start-chat-container {
    max-width: 800px;
    margin: 40px auto;
    background-color: #ffffff;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    overflow: hidden;
}

.start-chat-header {
    padding: 20px;
    background-color: #f8f9fa;
    border-bottom: 1px solid #e0e0e0;
    text-align: center;
}

.start-chat-header h1 {
    margin: 0;
    font-size: 24px;
    font-weight: 600;
}

.start-chat-content {
    padding: 30px;
}

.start-chat-info {
    display: flex;
    align-items: flex-start;
    margin-bottom: 30px;
    padding: 20px;
    background-color: #f8f9fa;
    border-radius: 8px;
}

.info-icon {
    margin-left: 20px;
    font-size: 24px;
    color: #007bff;
}

.info-text p {
    margin: 0 0 10px;
    font-size: 16px;
    color: #495057;
}

.info-text p:last-child {
    margin-bottom: 0;
}

.start-chat-form {
    text-align: center;
    padding: 20px 0;
}

/* تنظیمات واکنش‌گرایی */
@media (max-width: 768px) {
    .start-chat-container {
        margin: 20px;
        border-radius: 5px;
    }

    .start-chat-header h1 {
        font-size: 20px;
    }

    .start-chat-content {
        padding: 20px;
    }

    .start-chat-info {
        flex-direction: column;
        align-items: center;
        text-align: center;
    }

    .info-icon {
        margin: 0 0 15px;
    }
}

====== FILE: static/chat/css/notifications.css ======

/* استایل‌های اعلان‌ها */

.notification-container {
    margin-top: 20px;
}

.notification-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
}

.notification-header h2 {
    margin: 0;
}

.notification-list {
    list-style: none;
    padding: 0;
    margin: 0;
}

.notification-item {
    padding: 15px;
    border: 1px solid #ddd;
    border-radius: 8px;
    margin-bottom: 15px;
    background-color: #fff;
    transition: background-color 0.2s;
}

.notification-item.unread {
    background-color: #f0f7ff;
    border-right: 4px solid #0d6efd;
}

.notification-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 10px;
}

.notification-header h5 {
    margin: 0;
    font-weight: bold;
}

.notification-time {
    font-size: 0.8rem;
    color: #777;
}

.notification-body {
    margin-bottom: 10px;
}

.notification-body p {
    margin: 0;
    color: #333;
}

.notification-footer {
    display: flex;
    justify-content: flex-end;
    gap: 10px;
}

/* نشانگر تعداد اعلان‌های خوانده نشده */
.notification-badge {
    display: inline-block;
    background-color: #dc3545;
    color: white;
    border-radius: 50%;
    min-width: 20px;
    height: 20px;
    text-align: center;
    line-height: 20px;
    font-size: 0.8rem;
    padding: 0 5px;
    position: absolute;
    top: -8px;
    right: -8px;
}

.notification-icon {
    position: relative;
}

/* ریسپانسیو */
@media (max-width: 768px) {
    .notification-footer {
        flex-direction: column;
        align-items: flex-start;
        gap: 5px;
    }

    .notification-footer .btn {
        width: 100%;
    }
}

====== FILE: static/chat/css/chat-list.css ======

/* ================================================= */
/* == استایل‌های جدید لیست گفتگو (تم زیما) == */
/* ================================================= */

/* کانتینر اصلی صفحه */
.chat-list-page {
 padding: 140px 0 60px;
 background: linear-gradient(135deg, var(--zima-blush), var(--zima-champagne));
 min-height: 100vh;
 position: relative;
}

.chat-list-page::before {
 content: '';
 position: absolute;
 top: 0; left: 0; right: 0; bottom: 0;
 background: url('/static/images/patterns/subtle-pattern.png') repeat;
 opacity: 0.03;
 pointer-events: none;
}

.chat-list-container {
 max-width: 1000px;
 margin: 0 auto;
 padding: 0 20px;
 position: relative;
 z-index: 2;
 background: white;
 border-radius: 20px;
 box-shadow: 0 10px 40px var(--shadow-soft);
 overflow: hidden;
}

/* هدر لیست گفتگو */
.chat-list-header {
 display: flex;
 justify-content: space-between;
 align-items: center;
 padding: 25px 30px;
 background: linear-gradient(135deg, var(--zima-blush), var(--zima-champagne));
 border-bottom: 1px solid var(--zima-pearl);
}

.chat-list-header h1 {
 margin: 0;
 font-size: 1.8rem;
 font-weight: 700;
 color: var(--text-color-dark);
 font-family: 'Playfair Display', serif;
}

/* استایل دکمه‌های هدر */
.chat-list-header .btn-zima-primary,
.chat-list-header .btn-zima-secondary {
 padding: 12px 25px;
 font-size: 0.95rem;
 font-weight: 600;
 border: none;
 border-radius: 50px;
 text-decoration: none;
 display: inline-flex;
 align-items: center;
 gap: 8px;
 transition: all 0.4s ease;
}

.chat-list-header .btn-zima-primary {
 background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
 color: white;
 box-shadow: 0 8px 20px rgba(255, 107, 107, 0.3);
}

.chat-list-header .btn-zima-primary:hover {
 transform: translateY(-2px);
 box-shadow: 0 12px 25px rgba(255, 107, 107, 0.4);
}

.chat-list-header .btn-zima-secondary {
 background: transparent;
 color: var(--text-color-dark);
 border: 2px solid var(--zima-pearl);
}

.chat-list-header .btn-zima-secondary:hover {
 background: white;
 border-color: white;
 transform: translateY(-2px);
}

/* لیست گفتگوها */
.chat-list {
 list-style: none;
 padding: 0;
 margin: 0;
}

.chat-item {
 display: flex;
 align-items: center;
 padding: 20px 30px;
 border-bottom: 1px solid var(--zima-pearl);
 transition: background-color 0.3s ease;
 text-decoration: none;
 color: inherit;
 position: relative;
}

.chat-item:last-child {
 border-bottom: none;
}

.chat-item:hover {
 background-color: var(--zima-blush);
}

.chat-item a { /* استایل لینک داخل آیتم */
 display: flex;
 flex-grow: 1;
 align-items: center;
 text-decoration: none;
 color: inherit;
}

/* آواتار */
.chat-item-avatar {
 width: 55px;
 height: 55px;
 border-radius: 50%;
 overflow: hidden;
 margin-left: 15px;
 background: linear-gradient(135deg, var(--zima-blush), var(--zima-champagne));
 display: flex;
 align-items: center;
 justify-content: center;
 flex-shrink: 0;
 border: 2px solid white;
 box-shadow: 0 2px 5px var(--shadow-soft);
}

.avatar-placeholder {
 font-size: 1.5rem;
 font-weight: 600;
 color: var(--text-color-medium);
}

/* محتوای آیتم */
.chat-item-content {
 flex-grow: 1;
 min-width: 0; /* برای جلوگیری از سرریز شدن متن */
}

.chat-item-header {
 display: flex;
 justify-content: space-between;
 align-items: center;
 margin-bottom: 4px;
}

.chat-item-header h3 {
 margin: 0;
 font-size: 1.1rem;
 font-weight: 600;
 color: var(--text-color-dark);
}

.chat-item-time {
 font-size: 0.8rem;
 color: var(--text-color-medium);
}

.chat-item-details {
 display: flex;
 align-items: center;
 gap: 10px;
 margin-bottom: 4px;
}

/* ✅ ✅ ✅ اصلاح کامل وضعیت آنلاین/آفلاین برای لیست گفتگو ✅ ✅ ✅ */
.chat-list-page .user-status {
 display: inline-block;
 width: 18px;
 height: 18px;
 position: relative;
 border-radius: 50%;
 background-color: transparent;
 margin: 0 5px;
 vertical-align: middle;
}

.chat-list-page .status-dot {
 display: block;
 width: 12px;
 height: 12px;
 border-radius: 50%;
 position: absolute;
 top: 50%;
 left: 50%;
 transform: translate(-50%, -50%);
 transition: all 0.3s ease;
}

.chat-list-page .status-dot.online {
 background-color: #28a745;
 box-shadow: 0 0 0 2px #fff, 0 0 0 4px rgba(40, 167, 69, 0.3), 0 0 7px rgba(40, 167, 69, 0.5);
 animation: pulse-green-list 2s infinite;
}

.chat-list-page .status-dot.offline {
 background-color: #6c757d;
 box-shadow: 0 0 0 2px #fff, 0 0 0 4px rgba(108, 117, 125, 0.2);
}

@keyframes pulse-green-list {
 0% {
 box-shadow: 0 0 0 2px #fff, 0 0 0 4px rgba(40, 167, 69, 0.3), 0 0 7px rgba(40, 167, 69, 0.5);
 }
 50% {
 box-shadow: 0 0 0 2px #fff, 0 0 0 4px rgba(40, 167, 69, 0.5), 0 0 10px rgba(40, 167, 69, 0.7);
 }
 100% {
 box-shadow: 0 0 0 2px #fff, 0 0 0 4px rgba(40, 167, 69, 0.3), 0 0 7px rgba(40, 167, 69, 0.5);
 }
}

/* وضعیت باز/بسته */
.status-badge {
 padding: 4px 12px;
 border-radius: 15px;
 font-size: 0.75rem;
 font-weight: 500;
 background-color: var(--zima-pearl);
 color: var(--text-color-medium);
}

.status-badge.closed {
 background-color: #e9ecef;
 color: #6c757d;
}

/* آخرین پیام */
.chat-item-message {
 font-size: 0.9rem;
 color: var(--text-color-medium);
 white-space: nowrap;
 overflow: hidden;
 text-overflow: ellipsis;
 max-width: 95%; /* برای جا دادن آیکون خوانده شدن */
}

.system-message-preview {
 font-style: italic;
}

.no-message {
 font-style: italic;
 opacity: 0.7;
}

/* نشانگر پیام خوانده نشده */
.chat-item-meta {
 display: flex;
 flex-direction: column;
 align-items: flex-end;
 gap: 8px;
 margin-right: 15px;
 flex-shrink: 0;
}

.unread-room-badge {
 background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
 color: white;
 width: 24px;
 height: 24px;
 border-radius: 50%;
 display: flex;
 align-items: center;
 justify-content: center;
 font-size: 0.8rem;
 font-weight: 600;
 box-shadow: 0 2px 5px var(--shadow-medium);
}

/* دکمه حذف */
.delete-chat {
 position: absolute;
 left: 20px;
 top: 50%;
 transform: translateY(-50%);
 color: var(--danger-color);
 opacity: 0;
 transition: all 0.3s ease;
 z-index: 10;
}

.chat-item:hover .delete-chat {
 opacity: 0.7;
}

.delete-chat:hover {
 opacity: 1;
 transform: translateY(-50%) scale(1.1);
}

/* حالت خالی */
.empty-list {
 text-align: center;
 padding: 80px 40px;
 color: var(--text-color-medium);
}
.empty-list i {
 font-size: 4rem;
 color: var(--zima-pearl);
 margin-bottom: 25px;
}
.empty-list p {
 font-size: 1.1rem;
 line-height: 1.6;
 margin-bottom: 30px;
}
.empty-list .btn-zima-primary { /* استایل دکمه در حالت خالی */
 padding: 15px 30px; font-size: 1rem; font-weight: 600;
 border: none; border-radius: 50px; text-decoration: none;
 display: inline-flex; align-items: center; gap: 10px;
 transition: all 0.4s ease;
 background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
 color: white;
 box-shadow: 0 8px 20px rgba(255, 107, 107, 0.3);
}
.empty-list .btn-zima-primary:hover {
 transform: translateY(-2px);
 box-shadow: 0 12px 25px rgba(255, 107, 107, 0.4);
}

/* واکنش‌گرایی */
@media (max-width: 768px) {
 .chat-list-container {
 border-radius: 0;
 }
 .chat-list-header {
 padding: 20px;
 flex-direction: column;
 gap: 15px;
 align-items: flex-start;
 }
 .chat-item {
 padding: 15px;
 }
 .chat-item-avatar {
 width: 45px;
 height: 45px;
 }
 .chat-item-header h3 {
 font-size: 1rem;
 }
}

====== FILE: static/chat/css/chat.css ======

/* ================== استایل‌های اصلی چت ================== */

.chat-room-page {
    padding: 20px 0;
    min-height: 100vh;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
}

.chat-room-container {
    max-width: 1000px;
    margin: 0 auto;
    padding: 0 15px;
}

/* ================== دکمه بازگشت ================== */
.back-to-list {
    display: flex !important;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    padding: 15px 20px;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 12px;
    backdrop-filter: blur(10px);
}

.back-to-list h2 {
    color: white;
    margin: 0;
    font-size: 1.5rem;
    font-weight: 600;
}

.back-to-list .btn {
    background: rgba(255, 255, 255, 0.2);
    border: 1px solid rgba(255, 255, 255, 0.3);
    color: white;
    border-radius: 8px;
    padding: 8px 16px;
    transition: all 0.3s ease;
}

.back-to-list .btn:hover {
    background: rgba(255, 255, 255, 0.3);
    color: white;
    transform: translateY(-2px);
}

/* ================== کانتینر اصلی چت ================== */
.chat-container {
    background: white;
    border-radius: 16px;
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
    overflow: hidden;
    height: 70vh;
    display: flex;
    flex-direction: column;
}

/* ================== هدر چت ================== */
.chat-header {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 20px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-bottom: 1px solid rgba(255, 255, 255, 0.2);
}

.chat-header h3 {
    margin: 0;
    font-size: 1.3rem;
    font-weight: 600;
}

.chat-header .d-flex {
    align-items: center;
    gap: 15px;
}

/* ================== وضعیت آنلاین/آفلاین ================== */
.user-status {
    position: relative;
    display: inline-flex;
    align-items: center;
    justify-content: center;
}

.status-dot {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    border: 2px solid white;
    display: inline-block;
    animation: pulse 2s infinite;
}

.status-dot.online {
    background-color: #28a745;
    box-shadow: 0 0 10px rgba(40, 167, 69, 0.5);
}

.status-dot.offline {
    background-color: #6c757d;
    animation: none;
}

@keyframes pulse {
    0% {
        box-shadow: 0 0 0 0 rgba(40, 167, 69, 0.7);
    }
    70% {
        box-shadow: 0 0 0 10px rgba(40, 167, 69, 0);
    }
    100% {
        box-shadow: 0 0 0 0 rgba(40, 167, 69, 0);
    }
}

/* ================== نشان وضعیت اتاق ================== */
.badge {
    font-size: 0.8rem;
    padding: 6px 12px;
    border-radius: 20px;
    font-weight: 500;
}

/* ================== دکمه‌های عمل ================== */
.chat-actions {
    display: flex;
    gap: 10px;
    min-height: 38px;
    align-items: center;
}

.chat-actions .btn {
    border-radius: 8px;
    font-size: 0.9rem;
    padding: 8px 16px;
    transition: all 0.3s ease;
}

.chat-actions .btn:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
}

/* ================== بدنه چت (پیام‌ها) ================== */
.chat-body {
    flex: 1;
    padding: 20px;
    overflow-y: auto;
    background: #f8f9fa;
    display: flex;
    flex-direction: column;
    gap: 15px;
    scroll-behavior: smooth;
}

/* اسکرول بار سفارشی */
.chat-body::-webkit-scrollbar {
    width: 6px;
}

.chat-body::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 10px;
}

.chat-body::-webkit-scrollbar-thumb {
    background: #c1c1c1;
    border-radius: 10px;
}

.chat-body::-webkit-scrollbar-thumb:hover {
    background: #a8a8a8;
}

/* ================== پیام‌ها ================== */
.message {
    max-width: 70%;
    margin-bottom: 15px;
    animation: slideIn 0.3s ease-out;
}

@keyframes slideIn {
    from {
        opacity: 0;
        transform: translateY(20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

/* پیام ارسالی */
.message.sent {
    align-self: flex-end;
    margin-left: auto;
}

.message.sent .message-content {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    border-radius: 18px 18px 6px 18px;
    padding: 12px 16px;
    box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
}

/* پیام دریافتی */
.message.received {
    align-self: flex-start;
    margin-right: auto;
}

.message.received .message-content {
    background: white;
    color: #333;
    border: 1px solid #e9ecef;
    border-radius: 18px 18px 18px 6px;
    padding: 12px 16px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

/* پیام سیستم */
.message.system-message {
    align-self: center;
    max-width: 80%;
    margin: 10px auto;
}

.message.system-message .message-content {
    background: #fff3cd;
    color: #856404;
    border: 1px solid #ffeaa7;
    border-radius: 12px;
    padding: 10px 15px;
    text-align: center;
    font-style: italic;
    font-size: 0.9rem;
}

/* ================== اطلاعات پیام ================== */
.message-info {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: 5px;
    padding: 0 5px;
}

.message-time {
    font-size: 0.75rem;
    color: #6c757d;
    opacity: 0.8;
}

/* ================== نشانگر خوانده شدن ================== */
.read-indicator {
    font-size: 0.8rem;
    color: #6c757d;
    transition: color 0.3s ease;
}

.message.read .read-indicator {
    color: #28a745;
}

.read-indicator i {
    font-size: 0.8rem;
}

/* ================== تصاویر و فایل‌ها ================== */
.message-image {
    margin-top: 10px;
}

.message-image img {
    max-width: 250px;
    max-height: 200px;
    border-radius: 12px;
    cursor: pointer;
    transition: transform 0.3s ease;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

.message-image img:hover {
    transform: scale(1.02);
}

.message-file {
    margin-top: 10px;
    padding: 10px;
    background: rgba(255, 255, 255, 0.9);
    border-radius: 8px;
    border: 1px solid #dee2e6;
}

.message-file a {
    color: #667eea;
    text-decoration: none;
    font-weight: 500;
    transition: color 0.3s ease;
}

.message-file a:hover {
    color: #764ba2;
}

.message-file i {
    margin-left: 8px;
}

/* ================== فوتر چت (ورودی پیام) ================== */
.chat-footer {
    background: white;
    padding: 20px;
    border-top: 1px solid #e9ecef;
    display: flex;
    gap: 10px;
    align-items: flex-end;
}

#message-input {
    flex: 1;
    border: 1px solid #dee2e6;
    border-radius: 20px;
    padding: 12px 16px;
    resize: none;
    font-family: inherit;
    font-size: 0.9rem;
    min-height: 44px;
    max-height: 120px;
    transition: all 0.3s ease;
    background: #f8f9fa;
}

#message-input:focus {
    outline: none;
    border-color: #667eea;
    background: white;
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
}

#message-input:disabled {
    background: #e9ecef;
    color: #6c757d;
    cursor: not-allowed;
}

/* دکمه‌های فوتر */
.chat-footer .btn {
    border-radius: 50%;
    width: 44px;
    height: 44px;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0;
    transition: all 0.3s ease;
}

#file-upload-button {
    background: #f8f9fa;
    border: 1px solid #dee2e6;
    color: #6c757d;
}

#file-upload-button:hover:not(:disabled) {
    background: #e9ecef;
    color: #495057;
    transform: scale(1.05);
}

#send-button {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border: none;
    color: white;
}

#send-button:hover:not(:disabled) {
    transform: scale(1.05);
    box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
}

#send-button:disabled,
#file-upload-button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none !important;
}

/* ================== پیش‌نمایش فایل ================== */
.file-preview {
    background: #f8f9fa;
    border: 1px solid #dee2e6;
    border-radius: 12px;
    padding: 15px;
    margin: 10px 0;
    position: relative;
    animation: slideIn 0.3s ease-out;
}

.file-preview .image-preview {
    position: relative;
    display: inline-block;
}

.file-preview .image-preview img {
    max-width: 200px;
    max-height: 200px;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.file-preview .file-item {
    display: flex;
    align-items: center;
    gap: 10px;
    padding: 10px;
    background: white;
    border-radius: 8px;
    border: 1px solid #e9ecef;
}

.file-preview .file-item i {
    color: #667eea;
    font-size: 1.2rem;
}

.file-preview .remove-file {
    position: absolute;
    top: 5px;
    right: 5px;
    background: #dc3545;
    border: none;
    color: white;
    border-radius: 50%;
    width: 24px;
    height: 24px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 0.8rem;
    cursor: pointer;
    transition: all 0.3s ease;
}

.file-preview .remove-file:hover {
    background: #c82333;
    transform: scale(1.1);
}

/* ================== نشانگر تایپ ================== */
.typing-indicator {
    font-style: italic;
    color: #6c757d;
    padding: 10px 20px;
    display: none;
    font-size: 0.9rem;
    background: rgba(108, 117, 125, 0.1);
    border-radius: 20px;
    margin: 0 20px;
    animation: pulse 1.5s ease-in-out infinite alternate;
}

/* ================== اعلان‌ها ================== */
.notification-container {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 1000;
    max-width: 350px;
}

.notification-container .alert {
    margin-bottom: 10px;
    border-radius: 12px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    border: none;
    animation: slideInRight 0.3s ease-out;
}

@keyframes slideInRight {
    from {
        opacity: 0;
        transform: translateX(100%);
    }
    to {
        opacity: 1;
        transform: translateX(0);
    }
}

/* ================== ریسپانسیو ================== */
@media (max-width: 768px) {
    .chat-room-container {
        padding: 0 10px;
    }

    .back-to-list {
        flex-direction: column;
        gap: 15px;
        text-align: center;
    }

    .back-to-list h2 {
        font-size: 1.3rem;
    }

    .chat-container {
        height: 80vh;
    }

    .chat-header {
        padding: 15px;
        flex-direction: column;
        gap: 10px;
        text-align: center;
    }

    .chat-actions {
        justify-content: center;
    }

    .message {
        max-width: 85%;
    }

    .chat-footer {
        padding: 15px;
    }

    .file-preview .image-preview img {
        max-width: 150px;
        max-height: 150px;
    }

    .notification-container {
        right: 10px;
        left: 10px;
        max-width: none;
    }
}

@media (max-width: 480px) {
    .chat-room-page {
        padding: 10px 0;
    }

    .chat-container {
        height: 85vh;
        border-radius: 12px;
    }

    .chat-header h3 {
        font-size: 1.1rem;
    }

    .chat-body {
        padding: 15px;
    }

    .message {
        max-width: 90%;
    }

    .chat-footer .btn {
        width: 40px;
        height: 40px;
    }

    #message-input {
        font-size: 16px; /* جلوگیری از زوم در iOS */
    }
}

/* ================== حالت تاریک (اختیاری) ================== */
@media (prefers-color-scheme: dark) {
    .chat-container {
        background: #2d3748;
        color: #e2e8f0;
    }

    .chat-body {
        background: #1a202c;
    }

    .message.received .message-content {
        background: #4a5568;
        color: #e2e8f0;
        border-color: #2d3748;
    }

    .chat-footer {
        background: #2d3748;
        border-color: #4a5568;
    }

    #message-input {
        background: #4a5568;
        border-color: #2d3748;
        color: #e2e8f0;
    }

    #message-input:focus {
        background: #2d3748;
    }

    #file-upload-button {
        background: #4a5568;
        border-color: #2d3748;
        color: #e2e8f0;
    }
}

/* ================== انیمیشن‌های اضافی ================== */
@keyframes bounce {
    0%, 20%, 60%, 100% {
        transform: translateY(0);
    }
    40% {
        transform: translateY(-10px);
    }
    80% {
        transform: translateY(-5px);
    }
}

.message.sent:hover {
    animation: bounce 0.6s;
}

/* ================== فوکوس و دسترسی ================== */
.btn:focus,
#message-input:focus {
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.25) !important;
}

/* ================== لودینگ ================== */
.loading {
    opacity: 0.7;
    pointer-events: none;
}

.loading::after {
    content: '';
    position: absolute;
    width: 16px;
    height: 16px;
    margin: auto;
    border: 2px solid transparent;
    border-top-color: #667eea;
    border-radius: 50%;
    animation: spin 1s ease infinite;
}

@keyframes spin {
    0% {
        transform: rotate(0deg);
    }
    100% {
        transform: rotate(360deg);
    }
}

====== FILE: static/chat/css/admin-dashboard.css ======

/* admin-dashboard.css - استایل‌های داشبورد مدیریت */

.admin-dashboard-container {
    max-width: 1200px;
    margin: 20px auto;
    background-color: #ffffff;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    overflow: hidden;
}

.admin-dashboard-header {
    padding: 20px;
    background-color: #f8f9fa;
    border-bottom: 1px solid #e0e0e0;
}

.admin-dashboard-header h1 {
    margin: 0;
    font-size: 24px;
    font-weight: 600;
}

.admin-stats {
    display: flex;
    flex-wrap: wrap;
    padding: 20px;
    background-color: #ffffff;
    border-bottom: 1px solid #e0e0e0;
}

.stat-card {
    display: flex;
    align-items: center;
    padding: 15px;
    margin: 0 10px 10px 0;
    background-color: #f8f9fa;
    border-radius: 8px;
    width: calc(25% - 10px);
    min-width: 200px;
}

.stat-icon {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    background-color: #e9ecef;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-left: 15px;
}

.stat-icon i {
    font-size: 24px;
    color: #007bff;
}

.stat-content h3 {
    margin: 0;
    font-size: 14px;
    font-weight: 500;
    color: #6c757d;
}

.stat-value {
    font-size: 24px;
    font-weight: 600;
    margin: 5px 0 0;
    color: #212529;
}

.admin-tabs {
    padding: 0;
}

.nav-tabs {
    border-bottom: 1px solid #e0e0e0;
    padding: 0 20px;
}

.nav-tabs .nav-link {
    border: none;
    border-bottom: 2px solid transparent;
    color: #6c757d;
    font-weight: 500;
    padding: 15px 20px;
    transition: color 0.3s, border-color 0.3s;
}

.nav-tabs .nav-link.active {
    color: #007bff;
    border-bottom-color: #007bff;
    background-color: transparent;
}

.nav-tabs .nav-link:hover {
    border-color: transparent;
    color: #007bff;
}

.nav-tabs .badge {
    margin-right: 5px;
}

.tab-content {
    padding: 0;
}

.chat-list {
    list-style: none;
    padding: 0;
    margin: 0;
}

.chat-item {
    display: flex;
    align-items: center;
    padding: 15px 20px;
    border-bottom: 1px solid #f1f3f4;
    transition: background-color 0.3s;
}

a.chat-item {
    text-decoration: none;
    color: inherit;
}

a.chat-item:hover {
    background-color: #f8f9fa;
}

.chat-item-avatar {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    overflow: hidden;
    margin-left: 15px;
    background-color: #e9ecef;
    display: flex;
    align-items: center;
    justify-content: center;
}

.chat-item-avatar img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.avatar-placeholder {
    font-size: 24px;
    font-weight: bold;
    color: #6c757d;
}

.chat-item-content {
    flex-grow: 1;
    min-width: 0;
}

.chat-item-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 5px;
}

.chat-item-header h3 {
    margin: 0;
    font-size: 16px;
    font-weight: 600;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.chat-item-time {
    font-size: 12px;
    color: #6c757d;
    white-space: nowrap;
}

.chat-item-message {
    font-size: 14px;
    color: #6c757d;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.system-message-preview {
    font-style: italic;
    color: #6c757d;
}

.no-message {
    color: #6c757d;
    font-style: italic;
}

.chat-item-badge {
    margin-right: 10px;
}

.chat-item-badge .badge {
    font-size: 12px;
    padding: 5px 8px;
}

.chat-item-actions {
    display: flex;
    margin-right: 10px;
}

.chat-item-actions .btn {
    margin-right: 5px;
}

.empty-list {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 50px 20px;
    text-align: center;
}

.empty-list i {
    font-size: 48px;
    color: #e0e0e0;
    margin-bottom: 15px;
}

.empty-list p {
    font-size: 16px;
    color: #6c757d;
    margin-bottom: 20px;
}

/* تنظیمات واکنش‌گرایی */
@media (max-width: 992px) {
    .stat-card {
        width: calc(50% - 10px);
    }
}

@media (max-width: 768px) {
    .admin-dashboard-container {
        margin: 10px;
        border-radius: 5px;
    }

    .admin-dashboard-header h1 {
        font-size: 20px;
    }

    .stat-card {
        width: 100%;
        margin-right: 0;
    }

    .chat-item-avatar {
        width: 40px;
        height: 40px;
    }

    .chat-item-header h3 {
        font-size: 14px;
    }
}

/* استایل‌های جستجو */
.search-highlight {
    background-color: #f8f9fa;
    border-right: 3px solid #007bff;
    font-size: 13px;
    color: #333;
}

.search-result-message {
    max-width: 90%;
}

#closed-search-form {
    width: 200px;
}

#closed-search-form .input-group {
    border-radius: 20px;
    overflow: hidden;
}

#closed-search-input {
    border-left: none;
    background-color: rgba(255, 255, 255, 0.2);
    color: #fff;
}

#closed-search-input::placeholder {
    color: rgba(255, 255, 255, 0.7);
}

.card-header .input-group-sm .form-control-sm {
    height: calc(1.5em + 0.5rem + 2px);
    padding: 0.25rem 0.5rem;
    font-size: 0.875rem;
    line-height: 1.5;
    border-radius: 0.2rem;
}

.card-header .input-group-sm .btn-sm {
    padding: 0.25rem 0.5rem;
    font-size: 0.875rem;
    line-height: 1.5;
    border-radius: 0.2rem;
}

====== FILE: static/chat/css/start-chat.css ======

/* =================================================== */
/* == استایل‌های جدید صفحه شروع گفتگو (تم زیما) == */
/* =================================================== */

.start-chat-page {
    padding: 140px 0 60px;
    background: linear-gradient(135deg, var(--zima-blush), var(--zima-champagne));
    min-height: 100vh;
    position: relative;
    overflow: hidden;
}

.start-chat-page::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: url('/static/images/patterns/subtle-pattern.png') repeat;
    opacity: 0.03;
    pointer-events: none;
}

.start-chat-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
    position: relative;
    z-index: 2;
}

.start-chat-wrapper {
    display: grid;
    grid-template-columns: 1fr 1.2fr; /* بخش فرم کمی بزرگتر */
    gap: 60px;
    align-items: flex-start;
}

/* بخش راهنمای گفتگو */
.info-panel {
    background: linear-gradient(135deg, white, var(--zima-blush));
    padding: 40px;
    border-radius: 25px;
    border: 2px solid var(--zima-pearl);
    box-shadow: 0 15px 35px var(--shadow-soft);
    position: sticky;
    top: 140px; /* برای ثابت ماندن هنگام اسکرول */
}

.info-title {
    font-size: 2rem;
    font-weight: 700;
    color: var(--text-color-dark);
    margin-bottom: 25px;
    display: flex;
    align-items: center;
    gap: 15px;
    font-family: 'Playfair Display', serif;
}

.info-item {
    display: flex;
    align-items: flex-start;
    gap: 15px;
    margin-bottom: 25px;
}

.info-icon {
    width: 50px;
    height: 50px;
    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 1.2rem;
    flex-shrink: 0;
}

.info-content h4 {
    color: var(--text-color-dark);
    font-weight: 600;
    margin-bottom: 8px;
    font-size: 1.2rem;
}

.info-content p {
    color: var(--text-color-medium);
    margin: 0;
    line-height: 1.6;
    font-size: 0.95rem;
}

/* بخش فرم گفتگو */
.form-container {
    background: white;
    padding: 50px 40px;
    border-radius: 25px;
    box-shadow: 0 15px 35px var(--shadow-soft);
    border: 3px solid var(--zima-pearl);
    position: relative;
}

.form-container::before {
    content: '';
    position: absolute;
    top: -10px;
    left: -10px;
    right: -10px;
    bottom: -10px;
    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
    border-radius: 30px;
    z-index: -1;
    opacity: 0.1;
}

.form-title {
    font-size: 2.2rem;
    font-weight: 700;
    color: var(--text-color-dark);
    margin-bottom: 15px;
    display: flex;
    align-items: center;
    gap: 15px;
    font-family: 'Playfair Display', serif;
}

.form-description {
    font-size: 1.1rem;
    color: var(--text-color-medium);
    margin-bottom: 30px;
    line-height: 1.6;
}

.form-group {
    margin-bottom: 25px;
}

.form-label {
    display: block;
    font-weight: 600;
    color: var(--text-color-dark);
    font-size: 1rem;
    margin-bottom: 10px;
}

.form-input,
.form-textarea {
    width: 100%;
    padding: 15px 20px;
    border: 2px solid var(--zima-pearl);
    border-radius: 12px;
    font-size: 1rem;
    font-family: 'Vazir', sans-serif;
    transition: all 0.3s ease;
    background: white;
    outline: none;
}

.form-input:focus,
.form-textarea:focus {
    border-color: var(--primary-color);
    box-shadow: 0 0 0 3px rgba(255, 107, 107, 0.1);
}

.form-textarea {
    resize: vertical;
    min-height: 150px;
}

.form-help {
    font-size: 0.9rem;
    color: var(--text-color-medium);
    margin-top: 8px;
}

.form-actions {
    display: flex;
    gap: 15px;
    margin-top: 30px;
}

.btn-start-chat,
.btn-cancel {
    padding: 15px 30px;
    font-size: 1rem;
    font-weight: 600;
    border: none;
    border-radius: 50px;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: 10px;
    transition: all 0.4s ease;
    cursor: pointer;
}

.btn-start-chat {
    flex-grow: 1;
    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
    color: white;
    box-shadow: 0 8px 25px rgba(255, 107, 107, 0.3);
}

.btn-start-chat:hover {
    transform: translateY(-2px);
    box-shadow: 0 12px 30px rgba(255, 107, 107, 0.4);
}

.btn-cancel {
    background: transparent;
    color: var(--text-color-dark);
    border: 2px solid var(--zima-pearl);
}

.btn-cancel:hover {
    background: var(--zima-pearl);
    border-color: var(--zima-pearl);
    transform: translateY(-2px);
}

/* تنظیمات واکنش‌گرایی */
@media (max-width: 992px) {
    .start-chat-wrapper {
        grid-template-columns: 1fr;
    }

    .info-panel {
        position: static;
        margin-bottom: 30px;
    }
}

@media (max-width: 768px) {
    .start-chat-page {
        padding: 120px 0 40px;
    }

    .start-chat-container {
        padding: 0 15px;
    }

    .form-container,
    .info-panel {
        padding: 30px;
    }

    .form-title, .info-title {
        font-size: 1.8rem;
    }
}

@media (max-width: 480px) {
    .form-container,
    .info-panel {
        padding: 25px 20px;
    }

    .form-actions {
        flex-direction: column;
    }
}

====== FILE: static/css/bootstrap.rtl.min.css ======



====== FILE: static/css/slider.css ======

/* استایل برای اسلایدر */
.slider-container {
    width: 100%;
    position: relative;
    overflow: hidden;
    margin-bottom: 30px;
}

.slider {
    width: 100%;
    height: 400px; /* ارتفاع ثابت برای اسلایدر - این مقدار را می‌توانید تغییر دهید */
    position: relative;
}

.slider-item {
    width: 100%;
    height: 100%;
    position: absolute;
    top: 0;
    left: 0;
    opacity: 0;
    transition: opacity 1s ease-in-out;
}

.slider-item.active {
    opacity: 1;
}

.slider-item img {
    width: 100%;
    height: 100%;
    object-fit: cover; /* این ویژگی باعث می‌شود تصویر کل فضا را پر کند و نسبت ابعاد حفظ شود */
    object-position: center; /* موقعیت تصویر را تنظیم می‌کند */
}

.slider-caption {
    position: absolute;
    bottom: 20%;
    left: 10%;
    right: 10%;
    text-align: center;
    color: white;
    text-shadow: 0 0 5px rgba(0,0,0,0.5);
}

.slider-caption h2 {
    font-size: 2.5rem;
    margin-bottom: 1rem;
}

.slider-caption p {
    font-size: 1.2rem;
    margin-bottom: 1.5rem;
}

.slider-button {
    display: inline-block;
    padding: 10px 20px;
    background-color: white;
    color: #333;
    text-decoration: none;
    border-radius: 5px;
    font-weight: bold;
    transition: all 0.3s ease;
}

.slider-button:hover {
    background-color: #f8f9fa;
    transform: translateY(-3px);
}

.slider-controls {
    position: absolute;
    bottom: 20px;
    left: 0;
    right: 0;
    text-align: center;
}

.slider-dot {
    display: inline-block;
    width: 12px;
    height: 12px;
    margin: 0 5px;
    background-color: rgba(255,255,255,0.5);
    border-radius: 50%;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.slider-dot.active {
    background-color: white;
}

.slider-prev, .slider-next {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    width: 40px;
    height: 40px;
    background-color: rgba(0,0,0,0.3);
    color: white;
    border-radius: 50%;
    text-align: center;
    line-height: 40px;
    cursor: pointer;
    z-index: 10;
    transition: background-color 0.3s ease;
}

.slider-prev:hover, .slider-next:hover {
    background-color: rgba(0,0,0,0.6);
}

.slider-prev {
    left: 20px;
}

.slider-next {
    right: 20px;
}

/* برای نمایش بهتر در موبایل */
@media (max-width: 768px) {
    .slider {
        height: 300px;
    }

    .slider-caption h2 {
        font-size: 1.8rem;
    }

    .slider-caption p {
        font-size: 1rem;
    }
}

====== FILE: static/css/zima_theme_v2.css ======

/* استایل‌های اصلی تم زیما - نسخه ۲ (با پالت رنگی متمایل به نارنجی و استایل‌های محصولات) */
:root {
    --zima-deep: #2C1810;
    --zima-brown: #8B4513;
    --zima-gold: #DAA520;
    --zima-cream: #F5F5DC;
    --zima-ivory: #FFFFF0;
    --zima-rose: #E8B4B8;
    --zima-coral: #FF6B6B;
    --zima-peach: #FFCCCB;
    --zima-blush: #FFF0F5;
    --zima-champagne: #F7E7CE;
    --zima-bronze: #CD7F32;
    --zima-pearl: #EAE0C8;
    --zima-sage: #BCB88A;
    --zima-mauve: #E0B4D6;
    /* متغیرهای عمومی برای سهولت استفاده و خوانایی */
    --primary-color: var(--zima-coral);
    --secondary-color: var(--zima-gold);
    --text-color-dark: var(--zima-deep);
    --text-color-medium: var(--zima-brown);
    --background-light: var(--zima-ivory);
    --background-medium: var(--zima-cream);

    --shadow-soft: rgba(139, 69, 19, 0.1); /* بر اساس zima-brown */
    --shadow-medium: rgba(139, 69, 19, 0.2);
    --shadow-strong: rgba(139, 69, 19, 0.3);
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Vazir', sans-serif;
    background: var(--background-light); /* استفاده از رنگ از پالت جدید */
    color: var(--text-color-dark); /* استفاده از رنگ از پالت جدید */
    overflow-x: hidden;
    cursor: none; /* برای فعال کردن کرسر سفارشی */
    line-height: 1.7;
    direction: rtl; /* برای فارسی */
    text-align: right; /* برای فارسی */
}

/* Magical Cursor System */
.cursor {
    width: 25px;
    height: 25px;
    border: 2px solid var(--secondary-color); /* استفاده از رنگ از پالت جدید */
    border-radius: 50%;
    position: fixed;
    pointer-events: none;
    z-index: 9999;
    transition: all 0.3s cubic-bezier(0.68, -0.55, 0.265, 1.55);
    backdrop-filter: blur(5px);
    mix-blend-mode: multiply;
}

.cursor-dot {
    width: 6px;
    height: 6px;
    background: var(--primary-color); /* استفاده از رنگ از پالت جدید */
    border-radius: 50%;
    position: fixed;
    pointer-events: none;
    z-index: 10000;
    transition: all 0.1s ease;
}

.cursor.hover { /* نام کلاس به hover تغییر یافت در JS */
    transform: scale(3);
    background: rgba(218, 165, 32, 0.1); /* بر اساس zima-gold */
    border-color: var(--primary-color); /* استفاده از رنگ از پالت جدید */
}

/* Floating Hearts (برای صفحه اصلی) */
/* این استایل فقط برای صفحه اصلی است و نیازی به تغییر پالت ندارد */
.floating-heart {
    position: fixed;
    color: var(--primary-color); /* از پالت جدید */
    font-size: 20px;
    pointer-events: none;
    z-index: 1;
    animation: floatHeart 6s ease-in-out infinite;
    opacity: 0.3;
}

@keyframes floatHeart {
    0%, 100% { transform: translateY(0) rotate(0deg); opacity: 0.3; }
    25% { transform: translateY(-20px) rotate(90deg); opacity: 0.6; }
    50% { transform: translateY(-10px) rotate(180deg); opacity: 0.4; }
    75% { transform: translateY(-30px) rotate(270deg); opacity: 0.7; }
}

/* Romantic Loading Screen */
.loader {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(45deg, var(--zima-deep), var(--zima-brown)); /* استفاده از رنگ از پالت جدید */
    z-index: 10001;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: opacity 1s ease, visibility 1s ease;
}

.loader.hidden {
    opacity: 0;
    visibility: hidden;
}

.loader-content {
    text-align: center;
}

.loader-logo {
    font-size: 4rem;
    font-weight: 700;
    color: var(--secondary-color); /* استفاده از رنگ از پالت جدید */
    font-family: 'Playfair Display', serif; /* فونت تغییر کرد */
    margin-bottom: 20px;
    animation: logoGlow 2s ease-in-out infinite alternate;
}

@keyframes logoGlow {
    0% { text-shadow: 0 0 20px var(--secondary-color); }
    100% { text-shadow: 0 0 40px var(--secondary-color), 0 0 60px var(--secondary-color); }
}

.loader-text { /* این کلاس در base.html جدید نیست، اما اگر اضافه شد، با رنگ جدید باشد */
    color: var(--text-color-medium);
    font-size: 1.1rem;
    letter-spacing: 2px;
}

/* Elegant Navigation */
.nav-container {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    z-index: 1000;
    background: rgba(255, 255, 240, 0.95); /* zima-ivory شفاف */
    backdrop-filter: blur(30px); /* مقدار بیشتر برای بلور */
    border-bottom: 1px solid var(--shadow-soft);
    transition: all 0.4s ease;
}

.nav-container.scrolled {
    background: rgba(255, 255, 240, 0.98);
    box-shadow: 0 10px 40px var(--shadow-soft);
}

.navbar {
    max-width: 1600px; /* عریض‌تر */
    margin: 0 auto;
    padding: 20px 50px; /* پدینگ بیشتر */
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.logo {
    font-size: 3rem; /* سایز بزرگتر */
    font-weight: 900; /* وزن بیشتر */
    background: linear-gradient(135deg, var(--zima-brown), var(--secondary-color), var(--primary-color)); /* گرادیانت رنگی جدید */
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    text-decoration: none;    font-family: 'Playfair Display', serif; /* فونت تغییر کرد */
}

.logo::after { /* این بخش در تمپلیت جدید navbar نیست، فقط در hero home.html بود */
    content: '♡';    position: absolute;
    top: -5px;
    left: -25px; /* برای راست به چپ */
    font-size: 1.2rem;
    color: var(--primary-color);
    animation: heartbeat 2s ease-in-out infinite;
}

@keyframes heartbeat {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.2); }
}

.nav-menu {
    display: flex;
    list-style: none;
    gap: 40px;
    align-items: center;
}

.nav-link {
    color: var(--text-color-dark); /* استفاده از رنگ از پالت جدید */
    text-decoration: none;
    font-weight: 500;
    font-size: 1.05rem;
    position: relative;
    transition: all 0.3s ease;
    padding: 10px 0;
}

.nav-link::before {
    content: '';
    position: absolute;
    bottom: -5px; /* کمی پایین‌تر */
    right: 50%; /* برای راست به چپ */
    width: 0;
    height: 3px; /* ضخامت بیشتر */
    background: linear-gradient(90deg, var(--secondary-color), var(--primary-color)); /* گرادیانت رنگی جدید */
    transition: all 0.4s ease; /* زمان بیشتر */
    transform: translateX(50%); /* برای راست به چپ */
}

.nav-link:hover {
    color: var(--primary-color); /* استفاده از رنگ از پالت جدید */
}

.nav-link:hover::before {
    width: 100%;
}

.nav-icons {
    display: flex;
    gap: 25px;
    align-items: center;
}

.nav-icon {
    color: var(--text-color-dark); /* استفاده از رنگ از پالت جدید */
    font-size: 1.3rem;
    cursor: pointer;
    transition: all 0.3s ease;
    position: relative;
}

.nav-icon:hover {
    color: var(--primary-color); /* استفاده از رنگ از پالت جدید */
    transform: translateY(-3px); /* جابجایی بیشتر */
}

.cart-badge {
    position: absolute;
    top: -8px;
    left: -8px; /* برای راست به چپ */
    width: 20px;
    height: 20px;
    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color)); /* گرادیانت رنگی جدید */
    color: white;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 0.75rem;
    font-weight: 700;
}

/* Products Hero Section (در home.html و product_list.html استفاده می‌شود) */
.products-hero {
    margin-top: 80px; /* فضای بالای ناوبار ثابت */
    padding: 80px 0;
    background: linear-gradient(135deg,
        var(--zima-blush) 0%, /* از پالت قبلی، چون هیرو صفحه اصلی آن را داشت */
        var(--zima-champagne) 50%, /* از پالت قبلی */
        var(--zima-pearl) 100%); /* از پالت قبلی */
    text-align: center;
    position: relative;
    overflow: hidden;
}

.products-hero::before {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: radial-gradient(circle, var(--secondary-color) 0%, transparent 70%); /* از پالت جدید */
    opacity: 0.05;
    animation: rotate 30s linear infinite;
}

@keyframes rotate {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

.hero-content {
    position: relative;
    z-index: 2;
    max-width: 800px;
    margin: 0 auto;
    padding: 0 20px;
}

.hero-title {
    font-size: 4rem;
    font-weight: 800;
    margin-bottom: 20px;
    font-family: 'Playfair Display', serif; /* فونت تغییر کرد */
    background: linear-gradient(135deg, var(--zima-deep), var(--secondary-color), var(--primary-color)); /* گرادیانت رنگی جدید */
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
}

.hero-subtitle {
    font-size: 1.3rem;
    color: var(--text-color-medium); /* استفاده از رنگ از پالت جدید */
    margin-bottom: 30px;
}

.breadcrumb {
    display: inline-flex;    align-items: center;
    gap: 15px;
    background: white;
    padding: 15px 30px;
    border-radius: 50px;
    box-shadow: 0 10px 30px var(--shadow-soft);
}

.breadcrumb a {
    color: var(--text-color-medium); /* استفاده از رنگ از پالت جدید */
    text-decoration: none;
    transition: color 0.3s ease;
}

.breadcrumb a:hover {
    color: var(--primary-color); /* استفاده از رنگ از پالت جدید */
}

.breadcrumb span {
    color: var(--secondary-color); /* استفاده از رنگ از پالت جدید */
}

/* Hero Section (برای صفحه اصلی) */
.hero { /* کلاس خاص هیرو صفحه اصلی (جایی که تصویر و CTA دارد) */
    min-height: 100vh;
    position: relative;
    display: flex;
    align-items: center;
    overflow: hidden;
    background: linear-gradient(135deg, var(--zima-mint), var(--zima-mauve), var(--zima-blush)); /* از پالت صورتی قبلی */
    padding-top: 100px; /* برای جبران ناوبار ثابت */
}

.hero-shapes { /* برای صفحه اصلی */
    position: absolute;
    width: 100%;    height: 100%;
    overflow: hidden;
}

.shape { /* برای صفحه اصلی */
    position: absolute;
    border-radius: 50%;
    opacity: 0.1;
    animation: float 20s ease-in-out infinite;
}

.shape:nth-child(1) { /* برای صفحه اصلی */
    width: 300px;
    height: 300px;
    background: var(--zima-rose); /* از پالت صورتی قبلی */
    top: 10%;
    right: 10%; /* برای راست به چپ */
    animation-delay: 0s;
}

.shape:nth-child(2) { /* برای صفحه اصلی */
    width: 200px;
    height: 200px;
    background: var(--primary-color); /* از پالت جدید */
    top: 60%;
    left: 15%; /* برای راست به چپ */
    animation-delay: 5s;
}

.shape:nth-child(3) { /* برای صفحه اصلی */
    width: 150px;
    height: 150px;
    background: var(--secondary-color); /* از پالت جدید */
    bottom: 20%;
    right: 20%; /* برای راست به چپ */
    animation-delay: 10s;
}

@keyframes float {
    0%, 100% { transform: translateY(0) scale(1); }
    33% { transform: translateY(-30px) scale(1.1); }
    66% { transform: translateY(20px) scale(0.9); }
}

.hero-container { /* برای صفحه اصلی */
    max-width: 1400px;
    margin: 0 auto;
    padding: 0 40px;
    display: grid;
    grid-template-columns: 1fr 1fr;
    align-items: center;
    gap: 80px;
    position: relative;
    z-index: 2;
}

.hero-content { /* برای صفحه اصلی */
    animation: slideInLeft 1s ease-out; /* جهت انیمیشن برای راست به چپ */
    text-align: right; /* برای راست به چپ */
}

@keyframes slideInLeft {
    from { opacity: 0; transform: translateX(-50px); }
    to { opacity: 1; transform: translateX(0); }
}

.hero-badge { /* برای صفحه اصلی */
    display: inline-flex;
    align-items: center;
    gap: 10px;
    background: rgba(255, 255, 255, 0.8);
    padding: 12px 24px;
    border-radius: 30px;
    font-size: 0.9rem;
    color: var(--primary-color); /* استفاده از رنگ از پالت جدید */
    font-weight: 600;
    margin-bottom: 30px;
    backdrop-filter: blur(10px);
    border: 1px solid var(--zima-rose); /* از پالت صورتی قبلی */
}

.hero-title { /* برای صفحه اصلی */
    font-size: clamp(3rem, 6vw, 5rem);
    font-weight: 700;
    line-height: 1.1;
    margin-bottom: 25px;
    color: var(--text-color-dark); /* استفاده از رنگ از پالت جدید */
}

.hero-title .highlight { /* برای صفحه اصلی */    color: var(--primary-color); /* استفاده از رنگ از پالت جدید */
    font-family: 'Dancing Script', cursive;
    font-weight: 600;
}

.hero-description { /* برای صفحه اصلی */
    font-size: 1.3rem;
    color: var(--text-color-medium); /* استفاده از رنگ از پالت جدید */
    margin-bottom: 40px;
    line-height: 1.8;
}

.hero-cta { /* برای صفحه اصلی */
    display: flex;
    gap: 20px;
    align-items: center;    justify-content: flex-end; /* برای راست به چپ */
}

.btn { /* برای صفحه اصلی */
    padding: 18px 40px;
    font-size: 1rem;
    font-weight: 600;
    border: none;
    border-radius: 50px;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    gap: 10px;
    transition: all 0.4s ease;
    cursor: pointer;
    position: relative;
    overflow: hidden;
}

.btn::before { /* برای صفحه اصلی */
    content: '';
    position: absolute;
    top: 0;
    right: -100%; /* برای راست به چپ */
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.4), transparent);
    transition: right 0.6s ease; /* برای راست به چپ */
}

.btn:hover::before { /* برای صفحه اصلی */
    right: 100%; /* برای راست به چپ */
}

.btn-primary { /* برای صفحه اصلی */
    background: linear-gradient(135deg, var(--primary-color), var(--zima-rose)); /* استفاده از رنگ از پالت جدید */
    color: white;
    box-shadow: 0 10px 30px rgba(255, 107, 107, 0.3); /* بر اساس primary-color */
}

.btn-primary:hover { /* برای صفحه اصلی */
    transform: translateY(-3px);
    box-shadow: 0 15px 40px rgba(255, 107, 107, 0.4); /* بر اساس primary-color */
}
.btn-secondary { /* برای صفحه اصلی */
    background: transparent;
    color: var(--text-color-dark); /* استفاده از رنگ از پالت جدید */
    border: 2px solid var(--zima-rose); /* از پالت صورتی قبلی */
}

.btn-secondary:hover { /* برای صفحه اصلی */
    background: var(--zima-rose); /* از پالت صورتی قبلی */
    color: white;
}

.hero-image { /* برای صفحه اصلی */
    position: relative;
    animation: slideInRight 1s ease-out; /* جهت انیمیشن برای راست به چپ */
}

@keyframes slideInRight { /* برای صفحه اصلی */
    from { opacity: 0; transform: translateX(50px); }
    to { opacity: 1; transform: translateX(0); }
}

.hero-img { /* برای صفحه اصلی */
    width: 100%;    height: 600px;
    object-fit: cover;
    border-radius: 30px;
    box-shadow: 0 30px 60px var(--shadow-soft); /* از پالت جدید */
}

.floating-elements { /* برای صفحه اصلی */
    position: absolute;
    width: 100%;
    height: 100%;
}.floating-element { /* برای صفحه اصلی */
    position: absolute;
    animation: gentleFloat 8s ease-in-out infinite;
}

.floating-element:nth-child(1) { /* برای صفحه اصلی */
    top: 10%;
    left: 10%; /* برای راست به چپ */
    animation-delay: 0s;
}
.floating-element:nth-child(2) { /* برای صفحه اصلی */
    bottom: 20%;
    left: 20%; /* برای راست به چپ */
    animation-delay: 4s;
}

@keyframes gentleFloat { /* برای صفحه اصلی */
    0%, 100% { transform: translateY(0) rotate(0deg); }
    50% { transform: translateY(-20px) rotate(180deg); }
}

/* Collections Section */
.collections {
    padding: 120px 0;
    background: var(--background-light); /* استفاده از رنگ از پالت جدید */
}

.section-header {
    text-align: center;
    max-width: 800px;
    margin: 0 auto 80px;
}

.section-badge {
    display: inline-block;
    background: var(--zima-champagne); /* از پالت قبلی */
    color: var(--primary-color); /* استفاده از رنگ از پالت جدید */
    padding: 8px 20px;
    border-radius: 20px;
    font-size: 0.9rem;
    font-weight: 600;
    margin-bottom: 20px;}

.section-title {
    font-size: 3.5rem;
    font-weight: 700;
    margin-bottom: 25px;
    color: var(--text-color-dark); /* استفاده از رنگ از پالت جدید */
}

.section-title .script {
    font-family: 'Dancing Script', cursive; /* فونت تغییر کرد */
    color: var(--primary-color); /* استفاده از رنگ از پالت جدید */
    font-weight: 600;
}

.section-description {
    font-size: 1.2rem;
    color: var(--text-color-medium); /* استفاده از رنگ از پالت جدید */
    line-height: 1.8;
}

.collections-grid {
    max-width: 1400px;    margin: 0 auto;
    padding: 0 40px;
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 40px;
}

.collection-card {
    background: white;
    border-radius: 25px;
    overflow: hidden;
    box-shadow: 0 15px 40px var(--shadow-soft);
    transition: all 0.4s ease;
    cursor: pointer;
    position: relative;
}

.collection-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(135deg, var(--zima-rose), var(--primary-color)); /* استفاده از رنگ از پالت جدید */
    opacity: 0;
    transition: opacity 0.4s ease;
    z-index: 1;
    border-radius: 25px;
}

.collection-card:hover::before {
    opacity: 0.05;
}

.collection-card:hover {
    transform: translateY(-10px);
    box-shadow: 0 25px 60px var(--shadow-medium);
}

.collection-image {
    width: 100%;
    height: 300px;
    object-fit: cover;
    transition: transform 0.4s ease;
}

.collection-card:hover .collection-image {
    transform: scale(1.05);
}

.collection-content {
    padding: 30px;
    position: relative;
    z-index: 2;
}

.collection-title {
    font-size: 1.8rem;
    font-weight: 600;
    margin-bottom: 15px;
    color: var(--text-color-dark); /* استفاده از رنگ از پالت جدید */
}

.collection-description {
    color: var(--text-color-medium); /* استفاده از رنگ از پالت جدید */
    margin-bottom: 25px;
    line-height: 1.6;
}

.collection-link {
    color: var(--primary-color); /* استفاده از رنگ از پالت جدید */
    text-decoration: none;
    font-weight: 600;
    display: inline-flex;
    align-items: center;
    gap: 8px;
    transition: gap 0.3s ease;
}
.collection-link:hover {
    gap: 15px;
}

/* Featured Products */
.featured {
    padding: 120px 0;
    background: linear-gradient(135deg, var(--background-medium) 0%, var(--zima-champagne) 100%); /* استفاده از رنگ از پالت جدید */
}

.products-container {
    max-width: 1400px;
    margin: 0 auto;
    padding: 0 40px;
}

.products-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 30px;
    margin-top: 60px;
}

.product-card {
    background: white;
    border-radius: 20px;
    overflow: hidden;
    transition: all 0.4s ease;
    cursor: pointer;
    position: relative;
    box-shadow: 0 10px 30px var(--shadow-soft);
}

.product-card:hover {
    transform: translateY(-8px);
    box-shadow: 0 20px 50px var(--shadow-medium);
}

.product-image-container {
    position: relative;
    height: 380px; /* از 350px به 380px تغییر کرد برای یکسان‌سازی با تمپلیت محصولات */
    background: linear-gradient(135deg, var(--zima-blush), var(--zima-champagne)); /* از پالت صورتی قبلی */
    overflow: hidden;
}

.product-badges {
    position: absolute;
    top: 15px;
    right: 15px; /* برای راست به چپ */
    display: flex;
    flex-direction: column;    gap: 8px;
    z-index: 3;
}

.product-badge {
    padding: 6px 15px;
    background: var(--primary-color); /* استفاده از رنگ از پالت جدید */
    color: white;
    border-radius: 15px;
    font-size: 0.8rem;
    font-weight: 600;
    z-index: 2;
}

.product-badge.sale {
    background: linear-gradient(135deg, #FF4444, #FF6B6B);
}

.product-badge.new {
    background: linear-gradient(135deg, #4CAF50, #8BC34A);
}

.product-badge.limited {
    background: linear-gradient(135deg, #9C27B0, #BA68C8);
}

.product-actions {
    position: absolute;
    top: 15px;
    left: 15px; /* برای راست به چپ */
    display: flex;
    flex-direction: column;
    gap: 10px;
    z-index: 3;
}

.action-btn {
    width: 40px;
    height: 40px;
    background: rgba(255, 255, 255, 0.9);
    backdrop-filter: blur(10px);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
    border: 1px solid rgba(255, 255, 255, 0.3);
    color: var(--text-color-medium); /* استفاده از رنگ از پالت جدید */
}

.action-btn:hover {
    background: var(--primary-color); /* استفاده از رنگ از پالت جدید */
    color: white;
    transform: scale(1.1);
}

.action-btn.active {
    background: var(--primary-color); /* استفاده از رنگ از پالت جدید */
    color: white;
}

.product-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.6s ease;
}

.product-card:hover .product-image {
    transform: scale(1.1);
}

.product-info {
    padding: 25px;
}

.product-brand {
    font-size: 0.85rem;
    color: var(--primary-color); /* استفاده از رنگ از پالت جدید */
    font-weight: 700; /* از 600 به 700 تغییر کرد */
    margin-bottom: 8px;    text-transform: uppercase;
    letter-spacing: 1px;
}

.product-name {
    font-size: 1.2rem; /* از 1.3rem به 1.2rem تغییر کرد */
    font-weight: 600;
    margin-bottom: 10px;
    color: var(--text-color-dark); /* استفاده از رنگ از پالت جدید */
    line-height: 1.4; /* اضافه شد */
}

.product-details { /* این کلاس فقط در product_list.html استفاده می‌شود */
    display: flex;
    align-items: center;
    gap: 15px;
    margin-bottom: 15px;
}

.product-rating {
    display: flex;
    align-items: center;
    gap: 5px;
    /* margin-bottom: 15px; این margin-bottom برای home.html لازم نیست */
}

.stars {
    display: flex;
    gap: 2px;
}

.star {
    color: var(--secondary-color); /* استفاده از رنگ از پالت جدید */
    font-size: 0.9rem;
}

.rating-count { /* این کلاس در product_list.html استفاده می‌شود */    font-size: 0.85rem;
    color: var(--text-color-medium); /* استفاده از رنگ از پالت جدید */
}

.rating-text { /* این کلاس در home.html استفاده می‌شود */
    font-size: 0.85rem;
    color: var(--text-color-medium); /* استفاده از رنگ از پالت جدید */
    margin-right: 8px; /* برای راست به چپ */
}

.product-sizes { /* این کلاس فقط در product_list.html استفاده می‌شود */
    font-size: 0.85rem;
    color: var(--text-color-medium); /* استفاده از رنگ از پالت جدید */
}

.product-colors { /* این کلاس فقط در product_list.html استفاده می‌شود */
    display: flex;
    gap: 8px;
    margin-bottom: 15px;
}

.color-dot {
    width: 20px;
    height: 20px;
    border-radius: 50%;
    border: 2px solid white;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    cursor: pointer;
    transition: all 0.3s ease;}

.color-dot:hover {
    transform: scale(1.2);
}

.product-price-container { /* این کلاس فقط در product_list.html استفاده می‌شود */
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: 20px;
}

.product-price {
    font-size: 1.4rem; /* از 1.5rem به 1.4rem تغییر کرد */
    font-weight: 800; /* از 700 به 800 تغییر کرد */
    color: var(--primary-color); /* استفاده از رنگ از پالت جدید */
    /* margin-bottom: 20px; این margin-bottom برای home.html لازم نیست */
    display: flex; /* اضافه شد تا قیمت‌ها کنار هم باشند */
    align-items: center; /* اضافه شد */
    gap: 10px; /* اضافه شد */
}

.price-current {
    font-size: 1.4rem;
    font-weight: 800;
    color: var(--primary-color);
    font-family: 'Playfair Display', serif;
}

.price-original {
    font-size: 1.1rem;
    color: var(--text-color-medium);
    text-decoration: line-through;
    opacity: 0.7;
}

.discount-percentage { /* این کلاس فقط در product_list.html استفاده می‌شود */
    background: linear-gradient(135deg, #FF4444, #FF6B6B);
    color: white;
    padding: 4px 10px;
    border-radius: 15px;
    font-size: 0.8rem;
    font-weight: 700;
}

.product-add-cart {
    width: 100%;
    padding: 15px; /* از 12px به 15px تغییر کرد */
    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color)); /* استفاده از رنگ از پالت جدید */
    color: white;
    border: none;
    border-radius: 50px; /* از 25px به 50px تغییر کرد */
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    text-transform: uppercase;
    letter-spacing: 1px; /* اضافه شد */
}

.product-add-cart:hover {
    transform: translateY(-2px);
    box-shadow: 0 10px 25px rgba(255, 107, 107, 0.4); /* بر اساس primary-color */
}

.btn-quick-view { /* این کلاس فقط در home.html استفاده می‌شود */
    width: 45px;
    height: 45px;
    background: var(--background-light); /* استفاده از رنگ از پالت جدید */
    border: 1px solid var(--zima-rose); /* از پالت صورتی قبلی */
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
    color: var(--primary-color); /* استفاده از رنگ از پالت جدید */
}

.btn-quick-view:hover {
    background: var(--zima-rose); /* از پالت صورتی قبلی */
    color: white;}

/* Quick View Modal (برای product_list.html) */
.quick-view-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.8);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 10000;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
}

.quick-view-modal.active {
    opacity: 1;
    visibility: visible;
}

.modal-content-qv { /* نام کلاس تغییر کرد تا با bootstrap modal-content تداخل نداشته باشد */
    background: white;    border-radius: 30px;
    max-width: 1000px;
    width: 90%;
    max-height: 90vh;
    overflow: hidden;
    display: flex;
    position: relative;
    animation: modalSlideIn 0.5s ease;
}

@keyframes modalSlideIn {
    from {
        transform: translateY(50px);
        opacity: 0;
    }
    to {
        transform: translateY(0);
        opacity: 1;
    }
}

.modal-close {
    position: absolute;    top: 20px;
    left: 20px; /* برای راست به چپ */
    width: 40px;
    height: 40px;
    background: var(--zima-ivory);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    z-index: 5;
    transition: all 0.3s ease;
}

.modal-close:hover {
    background: var(--primary-color); /* از پالت جدید */
    color: white;
    transform: rotate(90deg);
}

.modal-images {
    flex: 1;
    background: var(--zima-blush); /* از پالت صورتی قبلی */
    padding: 40px;
    display: flex;
    flex-direction: column;
    gap: 20px;
}

.main-image-qv { /* نام کلاس تغییر کرد */
    width: 100%;
    height: 400px;
    object-fit: cover;
    border-radius: 20px;
}

.thumbnail-list {
    display: flex;
    gap: 15px;
}

.thumbnail-qv { /* نام کلاس تغییر کرد */
    width: 80px;
    height: 80px;
    object-fit: cover;
    border-radius: 10px;
    cursor: pointer;
    transition: all 0.3s ease;
    border: 3px solid transparent;
}

.thumbnail-qv:hover {
    border-color: var(--secondary-color); /* از پالت جدید */
}

.thumbnail-qv.active {
    border-color: var(--primary-color); /* از پالت جدید */
}

.modal-details {
    flex: 1;
    padding: 40px;
    overflow-y: auto;
}

.modal-brand {
    color: var(--primary-color); /* از پالت جدید */
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 1px;
    margin-bottom: 10px;
}

.modal-title-qv { /* نام کلاس تغییر کرد */
    font-size: 2rem;
    font-weight: 700;
    margin-bottom: 20px;
    color: var(--text-color-dark); /* از پالت جدید */
    font-family: 'Playfair Display', serif; /* فونت تغییر کرد */
}

.modal-rating {
    display: flex;
    align-items: center;
    gap: 15px;
    margin-bottom: 25px;
}

.modal-price {
    font-size: 2rem;
    font-weight: 800;
    color: var(--primary-color); /* از پالت جدید */
    margin-bottom: 30px;
    font-family: 'Playfair Display', serif; /* فونت تغییر کرد */
}

.modal-description {
    color: var(--text-color-medium); /* از پالت جدید */
    line-height: 1.8;
    margin-bottom: 30px;
}

.modal-options {
    margin-bottom: 30px;
}

.option-group {
    margin-bottom: 25px;
}

.option-label {
    font-weight: 600;
    margin-bottom: 15px;
    color: var(--text-color-dark); /* از پالت جدید */
}

.size-options {
    display: flex;
    gap: 10px;
    flex-wrap: wrap;
}

.size-option {
    padding: 12px 20px;
    border: 2px solid var(--zima-pearl); /* از پالت قبلی */
    background: white;
    border-radius: 10px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
}

.size-option:hover {
    border-color: var(--secondary-color); /* از پالت جدید */
    background: var(--zima-blush); /* از پالت صورتی قبلی */
}

.size-option.active {
    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color)); /* از پالت جدید */
    color: white;
    border-color: transparent;
}

.size-option.disabled { /* اضافه شده برای سایزهای ناموجود */
    opacity: 0.5;
    cursor: not-allowed;
    text-decoration: line-through;
}

.color-options {
    display: flex;
    gap: 12px;
}

.color-option-large {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    cursor: pointer;
    transition: all 0.3s ease;
    border: 3px solid white;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
}

.color-option-large:hover {    transform: scale(1.1);
}

.color-option-large.active {
    border-color: var(--secondary-color); /* از پالت جدید */
    box-shadow: 0 0 0 2px var(--secondary-color); /* از پالت جدید */
}

.color-option-large.disabled { /* اضافه شده برای رنگ‌های ناموجود */
    opacity: 0.5;
    cursor: not-allowed;
}

.quantity-selector {
    display: flex;
    align-items: center;
    gap: 20px;
    margin-bottom: 30px;
}
.quantity-btn {
    width: 40px;
    height: 40px;
    border: 2px solid var(--zima-pearl); /* از پالت قبلی */
    background: white;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
    font-weight: 600;
}

.quantity-btn:hover {
    border-color: var(--primary-color); /* از پالت جدید */
    color: var(--primary-color); /* از پالت جدید */
}

.quantity-input {
    width: 60px;
    text-align: center;
    border: none;
    font-size: 1.2rem;
    font-weight: 600;
    -moz-appearance: textfield; /* برای فایرفاکس */
}
.quantity-input::-webkit-outer-spin-button,
.quantity-input::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
}

.modal-actions {
    display: flex;    gap: 15px;
}

.btn-add-to-cart {
    flex: 1;
    padding: 18px;
    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color)); /* از پالت جدید */
    color: white;
    border: none;
    border-radius: 50px;
    font-weight: 700;
    cursor: pointer;
    transition: all 0.3s ease;
    text-transform: uppercase;
    letter-spacing: 1px;
}

.btn-add-to-cart:hover {
    transform: translateY(-2px);
    box-shadow: 0 10px 25px rgba(255, 107, 107, 0.4); /* بر اساس primary-color */
}

.btn-wishlist {
    width: 60px;
    height: 60px;
    border: 2px solid var(--primary-color); /* از پالت جدید */
    background: white;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
    color: var(--primary-color); /* از پالت جدید */
}

.btn-wishlist:hover {
    background: var(--primary-color); /* از پالت جدید */
    color: white;
}

/* Pagination */
.pagination {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 10px;
    margin-top: 60px;
}

.page-btn {
    width: 45px;
    height: 45px;
    border: 2px solid var(--zima-pearl); /* از پالت قبلی */
    background: white;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
    font-weight: 600;
    color: var(--text-color-medium); /* از پالت جدید */
}

.page-btn:hover {
    border-color: var(--secondary-color); /* از پالت جدید */
    background: var(--zima-blush); /* از پالت صورتی قبلی */
}

.page-btn.active {
    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color)); /* از پالت جدید */
    color: white;
    border-color: transparent;
}

.page-btn.disabled {
    opacity: 0.5;
    cursor: not-allowed;
}

/* Mobile Filter Toggle */
.mobile-filter-toggle {
    display: none; /* در دسکتاپ مخفی است */
    position: fixed;
    bottom: 30px;
    left: 50%;
    transform: translateX(-50%);
    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color)); /* از پالت جدید */
    color: white;
    padding: 15px 30px;
    border-radius: 50px;
    box-shadow: 0 10px 30px rgba(0,0,0,0.2);
    cursor: pointer;
    z-index: 100;
    font-weight: 600;
    border: none;
}

/* Newsletter Section (قبلاً در base.html قرار گرفت) */
.newsletter-section {
    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color)); /* از پالت جدید */
    padding: 80px 0;
    text-align: center;
    margin-top: 100px;
}

.newsletter-content {
    max-width: 600px;
    margin: 0 auto;
    padding: 0 20px;
}

.newsletter-title {
    font-size: 2.5rem;
    color: white;
    margin-bottom: 20px;
    font-family: 'Playfair Display', serif; /* فونت تغییر کرد */
}

.newsletter-text {
    color: rgba(255, 255, 255, 0.9);
    font-size: 1.2rem;
    margin-bottom: 40px;
}

.newsletter-form {
    display: flex;
    max-width: 500px;
    margin: 0 auto;
    background: white;
    border-radius: 60px;
    padding: 8px;
    box-shadow: 0 20px 50px rgba(0, 0, 0, 0.2);
}

.newsletter-input {
    flex: 1;
    border: none;
    padding: 18px 25px;
    font-size: 1rem;
    background: transparent;
    outline: none;
    text-align: right; /* برای فارسی */
}.newsletter-submit {
    background: var(--text-color-dark); /* از پالت جدید */
    color: white;
    border: none;
    padding: 18px 35px;    border-radius: 50px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
}

.newsletter-submit:hover {
    transform: scale(1.05);
}

/* Footer (قبلاً در base.html قرار گرفت) */
.footer {
    background: var(--text-color-dark); /* از پالت جدید */
    color: white;
    padding: 80px 0 40px;
}

.footer-content {
    max-width: 1600px;
    margin: 0 auto;
    padding: 0 50px;
    display: grid;
    grid-template-columns: 2fr 1fr 1fr 1fr;
    gap: 60px;    margin-bottom: 50px;
}

.footer-brand h3 {
    font-size: 2.5rem;
    font-family: 'Playfair Display', serif; /* فونت تغییر کرد */
    margin-bottom: 20px;
    background: linear-gradient(135deg, var(--secondary-color), var(--primary-color)); /* گرادیانت رنگی جدید */
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
}

.footer-brand p {
    color: rgba(255, 255, 255, 0.8);
    line-height: 1.8;
    margin-bottom: 30px;
}

.footer-social {
    display: flex;
    gap: 15px;
}

.social-link {
    background: rgba(218, 165, 32, 0.1); /* بر اساس secondary-color */
    border: 2px solid var(--secondary-color); /* از پالت جدید */
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--secondary-color); /* از پالت جدید */
    text-decoration: none;
    transition: all 0.3s ease;
}

.social-link:hover {
    background: var(--secondary-color); /* از پالت جدید */
    color: var(--text-color-dark); /* از پالت جدید */
    transform: translateY(-3px);
}

.footer-column h4 {
    font-size: 1.3rem;
    margin-bottom: 25px;
    color: white;
    font-weight: 700;
}

.footer-links {
    list-style: none;
}

.footer-links li {
    margin-bottom: 12px;
}

.footer-links a {
    color: rgba(255, 255, 255, 0.8);
    text-decoration: none;
    transition: all 0.3s ease;
}

.footer-links a:hover {
    color: var(--primary-color); /* از پالت جدید */
    padding-right: 10px;
}

.footer-bottom {
    text-align: center;
    padding-top: 40px;
    border-top: 1px solid rgba(255, 255, 255, 0.1);
    color: rgba(255, 255, 255, 0.6);
}

/* Responsive Design */
@media (max-width: 1200px) {
    .products-main {
        flex-direction: column;
    }

    .sidebar {
        width: 100%;
        position: static;
        display: none;
    }

    .sidebar.mobile-active {
        display: block;
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: white;
        z-index: 1000;
        overflow-y: auto;
        padding: 20px;
    }

    .mobile-filter-toggle {
        display: block;
    }

    .products-grid {
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    }
}

@media (max-width: 768px) {
    .navbar {
        padding: 15px 20px;
    }
    .nav-menu {
        display: none;
    }
    .nav-icons {
        gap: 15px;
    }
    .nav-icon {
        font-size: 1.1rem;
    }
    .cart-badge {
        width: 18px;
        height: 18px;
        font-size: 0.7rem;
        top: -5px;
        left: -5px; /* برای راست به چپ */
    }

    .hero-title {        font-size: 2.5rem;
    }
    .hero-subtitle {
        font-size: 1.1rem;
    }
    .breadcrumb { /* این کلاس در صفحه محصولات جدید استفاده می‌شود، نه هیرو صفحه اصلی */
        padding: 10px 20px;
        gap: 10px;
        font-size: 0.9rem;
    }

    .collections-grid { /* این کلاس در home.html استفاده می‌شود */
        grid-template-columns: 1fr;
    }
    .products-grid {
        grid-template-columns: repeat(2, 1fr);
        gap: 20px;
    }

    .modal-content-qv { /* نام کلاس تغییر کرد تا با bootstrap modal-content تداخل نداشته باشد */
        flex-direction: column;
        max-height: 95vh;
        overflow-y: auto;
    }
    .modal-images {
        padding: 20px;
    }
    .main-image-qv {        height: 300px;
    }
    .thumbnail-list {
        gap: 10px;
    }
    .thumbnail-qv {
        width: 60px;        height: 60px;
    }
    .modal-details {
        padding: 20px;
    }
    .modal-title-qv {
        font-size: 1.8rem;
    }
    .modal-price {
        font-size: 1.8rem;
    }
    .quantity-selector {
        gap: 10px;
    }    .quantity-input {
        width: 50px;
        font-size: 1rem;
    }
    .btn-add-to-cart {
        padding: 15px;
    }
    .btn-wishlist {
        width: 50px;
        height: 50px;
    }

    .footer-content {
        grid-template-columns: 1fr;
        text-align: center;
        gap: 40px;
    }
    .footer-social {
        justify-content: center; /* در موبایل وسط چین شود */
    }
    .footer-links a {
        padding-right: 0;
    }
    .footer-links a:hover {
        padding-left: 10px; /* همچنان افکت پدینگ در هاور حفظ شود */
    }
    .newsletter-form {
        flex-direction: column;
        padding: 20px;
        border-radius: 20px;
    }
    .newsletter-input {
        margin-bottom: 15px;
        text-align: center;
    }
}

@media (max-width: 480px) {    .products-grid {
        grid-template-columns: 1fr;
    }

    .products-header { /* این کلاس در صفحه محصولات استفاده می‌شود */
        flex-direction: column;
        gap: 20px;
        padding: 15px 20px;
    }

    .header-controls { /* این کلاس در صفحه محصولات استفاده می‌شود */
        width: 100%;
        justify-content: space-between;
    }
    .sort-dropdown { /* این کلاس در صفحه محصولات استفاده می‌شود */
        flex: 1;
    }
    .view-options { /* این کلاس در صفحه محصولات استفاده می‌شود */
        display: none; /* در کوچکترین حالت ممکن است حذف شود */
    }

    .product-image-container {
        height: 250px;
    }
}

/* Animations */.fade-in {
    opacity: 0;
    transform: translateY(30px);
    transition: all 0.8s ease;
}

.fade-in.visible {
    opacity: 1;
    transform: translateY(0);
}

/* Sparkle Effect (تنها در home.html اصلی استفاده می‌شود) */
.sparkle {
    position: fixed;
    width: 6px;    height: 6px;
    background: var(--secondary-color); /* استفاده از رنگ از پالت جدید */
    border-radius: 50%;
    pointer-events: none;
    z-index: 1000;
    animation: sparkleAnim 1s ease-out forwards;
}

@keyframes sparkleAnim {
    0% {
        opacity: 1;
        transform: scale(0);
    }
    50% {
        opacity: 1;
        transform: scale(1);
    }
    100% {
        opacity: 0;
        transform: scale(0);
    }
}

/* Loading Spinner (برای استفاده در عملیات‌های AJAX) */
.loading-spinner {
    display: none;
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 60px;
    height: 60px;
    border: 3px solid var(--zima-pearl); /* استفاده از رنگ از پالت جدید */
    border-top-color: var(--primary-color); /* استفاده از رنگ از پالت جدید */
    border-radius: 50%;
    animation: spin 1s linear infinite;
    z-index: 1000;
}

@keyframes spin {
    0% { transform: translate(-50%, -50%) rotate(0deg); }
    100% { transform: translate(-50%, -50%) rotate(360deg); }
}

/* Toast Notification (برای نمایش پیام‌های موفقیت/خطا) */
.toast {
    position: fixed;
    bottom: 30px;
    right: 30px;
    background: white;
    padding: 20px 30px;    border-radius: 50px;
    box-shadow: 0 10px 30px rgba(0,0,0,0.2);
    display: flex;
    align-items: center;
    gap: 15px;
    transform: translateX(400px); /* ابتدا خارج از صفحه */
    transition: transform 0.3s ease;
    z-index: 1000;
}

.toast.show {
    transform: translateX(0);
}

.toast-icon {
    width: 30px;
    height: 30px;
    background: var(--primary-color); /* استفاده از رنگ از پالت جدید */
    color: white;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
}

.toast-message {
    font-weight: 600;
    color: var(--text-color-dark); /* استفاده از رنگ از پالت جدید */
}

/* برای نمایش پیام‌های جنگو */
.django-messages {
    position: fixed;
    top: 100px; /* پایین‌تر از هدر */
    right: 20px;
    z-index: 10002;
    width: 350px;
}

.django-messages .alert {
    margin-bottom: 10px;
    box-shadow: 0 4px 10px rgba(0,0,0,0.1);
    border-radius: 8px;
    padding: 15px;
    background-color: var(--zima-champagne); /* از پالت قبلی */
    border: 1px solid var(--zima-rose); /* از پالت قبلی */
    color: var(--text-color-dark); /* استفاده از رنگ از پالت جدید */
}

/* استایل‌های اصلی تم زیما - نسخه ۲ (یکپارچه شده و اصلاح شده) */:root {
    --zima-deep: #2C1810;
    --zima-brown: #8B4513;
    --zima-gold: #DAA520;
    --zima-cream: #F5F5DC;
    --zima-ivory: #FFFFF0;
    --zima-rose: #E8B4B8;
    --zima-coral: #FF6B6B;
    --zima-peach: #FFCCCB;
    --zima-blush: #FFF0F5;
    --zima-champagne: #F7E7CE;
    --zima-bronze: #CD7F32;
    --zima-pearl: #EAE0C8;
    --zima-sage: #BCB88A;
    --zima-mauve: #E0B4D6;
    /* متغیرهای عمومی برای سهولت استفاده و خوانایی */
    --primary-color: var(--zima-coral);
    --secondary-color: var(--zima-gold);
    --text-color-dark: var(--zima-deep);
    --text-color-medium: var(--zima-brown);
    --background-light: var(--zima-ivory);
    --background-medium: var(--zima-cream);

    --shadow-soft: rgba(139, 69, 19, 0.1);
    --shadow-medium: rgba(139, 69, 19, 0.2);
    --shadow-strong: rgba(139, 69, 19, 0.3);
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Vazir', sans-serif;
    background: var(--background-light);
    color: var(--text-color-dark);
    overflow-x: hidden;
    cursor: none;
    line-height: 1.7;
    direction: rtl;
    text-align: right;
}

/* ... (بقیه کدهای zima_theme_v2.css شما بدون تغییر تا اینجا) ... */

/* ✅ بخش اضافه شده برای چیدمان اصلی صفحه محصولات */
.products-main {
    display: flex;
    flex-direction: row; /* سایدبار در چپ، محتوا در راست (چون در HTML سایدبار اول آمده) */
    gap: 30px;    max-width: 1600px;
    margin: 40px auto;
    padding: 0 50px;
    align-items: flex-start; /* تراز کردن آیتم‌ها از بالا */
}

.sidebar {
    flex-basis: 300px; /* عرض ثابت برای سایدبار */
    flex-shrink: 0; /* جلوگیری از کوچک شدن سایدبار */
    position: sticky; /* برای اینکه با اسکرول حرکت کند */
    top: 120px; /* فاصله از بالای صفحه (با احتساب ارتفاع ناوبار) */
}

.products-content {
    flex-grow: 1; /* محتوای اصلی فضای باقی‌مانده را بگیرد */
    min-width: 0; /* برای جلوگیری از سرریز شدن در فلکس‌باکس */
}

/* ✅ استایل‌های اصلاح شده و تکمیلی برای هدر و فیلترهای محصولات */
.products-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 25px;
    padding: 15px 20px;
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 2px 5px var(--shadow-soft);
}

.results-count strong {
    color: var(--primary-color);    font-size: 1.1em;
}

.header-controls {
    display: flex;
    align-items: center;
    gap: 15px;
}

.sort-dropdown {
    padding: 8px 12px;
    border: 1px solid #ddd;
    border-radius: 5px;
    background-color: white;
    font-size: 0.9em;
    cursor: pointer;
    outline: none;
    min-width: 150px;
}

.view-options {
    display: flex;
    border: 1px solid #ddd;
    border-radius: 5px;
    overflow: hidden;
}

.view-btn {
    padding: 8px 12px;
    background-color: white;
    border: none;
    cursor: pointer;
    font-size: 1em;
    color: #555;
    transition: all 0.2s ease;
}

.view-btn.active {
    background-color: var(--primary-color);
    color: white;
}

/* ✅ استایل‌های تکمیلی برای بخش‌های فیلتر در سایدبار */
.filter-section {
    margin-bottom: 25px;
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 2px 5px var(--shadow-soft);
    overflow: hidden;
}

.filter-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 15px 20px;
    cursor: pointer;
    border-bottom: 1px solid #eee;
}

.filter-title {
    margin: 0;
    font-size: 1.1em;
    font-weight: 600;
}

.filter-toggle {
    transition: transform 0.3s ease;
}

.filter-header.active .filter-toggle {
    transform: rotate(180deg);
}

.filter-content {
    padding: 15px 20px;
    max-height: 300px;
    overflow-y: auto;
    transition: max-height 0.3s ease-out, padding 0.3s ease-out;
}

.filter-content.collapsed {
    max-height: 0;
    padding-top: 0;
    padding-bottom: 0;
    overflow: hidden;
}

.search-box {
    display: flex;
    border: 1px solid #ddd;
    border-radius: 8px;
    overflow: hidden;
}

.search-input {
    flex-grow: 1;
    padding: 10px 15px;
    border: none;
    outline: none;
    font-size: 1em;
    font-family: 'Vazir', sans-serif;
}

.search-btn {    background-color: var(--primary-color);
    color: white;
    border: none;
    padding: 10px 15px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.category-list {
    list-style: none;
    padding: 0;
    margin: 0;
}

.category-item {
    margin-bottom: 10px;
}

.category-label {
    display: flex;
    justify-content: space-between;
    align-items: center;
    cursor: pointer;
    font-size: 1em;
    color: #555;
}

.category-checkbox {
    margin-left: 10px;
    accent-color: var(--primary-color);
}

.category-count {
    font-size: 0.9em;
    color: #888;
}

.size-grid {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
}

.size-btn {
    background-color: #f0f0f0;
    color: #555;
    padding: 8px 15px;
    border: 1px solid #ddd;
    border-radius: 20px;
    cursor: pointer;
    transition: all 0.2s ease;
    font-size: 0.9em;
}

.size-btn.active {
    background-color: var(--primary-color);
    color: white;
    border-color: var(--primary-color);
}

.color-grid {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
}.color-option {
    width: 30px;
    height: 30px;
    border-radius: 50%;
    border: 1px solid #eee;
    cursor: pointer;    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    transition: transform 0.2s ease, border-color 0.2s ease;
}

.color-option.active {
    border: 3px solid var(--primary-color);
    transform: scale(1.05);
}

.price-inputs {
    display: flex;    align-items: center;
    gap: 10px;
    margin-top: 10px;
}

.price-input {
    width: 100%;
    padding: 8px 10px;
    border: 1px solid #ddd;
    border-radius: 5px;
    text-align: center;
    font-size: 0.95em;
    -moz-appearance: textfield;
}

.price-input::-webkit-outer-spin-button,
.price-input::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
}

.filter-actions {
    display: flex;
    gap: 10px;
    margin-top: 20px;
}

.btn-apply, .btn-reset {
    flex: 1;
    padding: 12px 15px;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    font-size: 1em;
    font-weight: bold;
    transition: all 0.3s ease;
    text-align: center;
    text-decoration: none;
}.btn-apply {
    background-color: var(--primary-color);
    color: white;}

.btn-reset {
    background-color: #eee;
    color: #555;
}

.empty-state {
    text-align: center;
    padding: 80px 20px;
    background-color: white;    border-radius: 8px;
    box-shadow: 0 5px 15px var(--shadow-soft);
    grid-column: 1 / -1;
}
.empty-state i {
    font-size: 4em;
    color: #ccc;
    margin-bottom: 20px;
}

/* =============================================== */
/* == استایل‌های اضافه شده برای صفحه اصلی (Home) == */
/* =============================================== */

/* Testimonials Section */
.testimonials {
    padding: 120px 0;
    background: var(--background-light);}

.testimonials-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 40px;
    text-align: center;
}

.testimonials-slider {
    display: flex;
    gap: 40px;
    overflow-x: auto;
    scroll-behavior: smooth;
    padding: 40px 0;
    scrollbar-width: none; /* For Firefox */
}

.testimonials-slider::-webkit-scrollbar {
    display: none; /* For Chrome, Safari, and Opera */
}

.testimonial-card {
    min-width: 350px;    background: white;
    padding: 40px 30px;
    border-radius: 20px;
    box-shadow: 0 15px 40px var(--shadow-soft);
    position: relative;
    text-align: right; /* RTL */
}

.testimonial-card::before {
    content: '"';
    position: absolute;
    top: -20px;    right: 30px; /* RTL */
    font-size: 4rem;
    color: var(--primary-color);
    opacity: 0.2;
    font-family: serif;
}.testimonial-text {
    font-size: 1.1rem;
    line-height: 1.8;
    margin-bottom: 25px;
    color: var(--text-color-medium);
    font-style: italic;
}

.testimonial-author {
    display: flex;
    align-items: center;
    gap: 15px;
}

.author-avatar {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    background: linear-gradient(135deg, var(--zima-rose), var(--primary-color));
    display: flex;
    align-items: center;
    justify-content: center;    color: white;
    font-weight: 600;
    font-size: 1.2rem;
}

.author-info h4 {
    font-size: 1rem;
    color: var(--text-color-dark);
    margin-bottom: 2px;
}

.author-info p {
    font-size: 0.9rem;
    color: var(--text-color-medium);
}

.filter-section {
    margin-bottom: 25px;
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 2px 5px var(--shadow-soft);
    overflow: hidden;
}

.filter-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 15px 20px;
    cursor: pointer;
    border-bottom: 1px solid #eee;
}

.filter-header.active .filter-toggle {
    transform: rotate(180deg);
}

.filter-title {
    margin: 0;
    font-size: 1.1em;
    font-weight: 600;
}

.filter-toggle {
    transition: transform 0.3s ease;
}

.filter-content {
    padding: 0 20px;
    max-height: 0;
    overflow: hidden; /* از auto به hidden تغییر کرد تا انیمیشن درست کار کند */
    transition: max-height 0.4s ease-in-out, padding 0.4s ease-in-out;
}

.filter-content-inner {
    padding: 15px 0;
}

.search-box {
    display: flex;
    border: 1px solid #ddd;
    border-radius: 8px;
    overflow: hidden;
}

.search-input {
    flex-grow: 1;
    padding: 10px 15px;
    border: none;
    outline: none;
    font-size: 1em;
    font-family: 'Vazir', sans-serif;
}

.search-btn {
    background-color: var(--primary-color);
    color: white;
    border: none;
    padding: 10px 15px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.category-list {
    list-style: none;
    padding: 0;
    margin: 0;
}

.category-item {
    margin-bottom: 10px;
}

.category-label {
    display: flex;
    justify-content: space-between;
    align-items: center;
    cursor: pointer;
    font-size: 1em;
    color: #555;
}

.category-checkbox {
    margin-left: 10px;
    accent-color: var(--primary-color);
}

.category-count {
    font-size: 0.9em;
    color: #888;
}

.size-grid {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
}

.size-btn {
    background-color: #f0f0f0;
    color: #555;
    padding: 8px 15px;
    border: 1px solid #ddd;
    border-radius: 20px;
    cursor: pointer;
    transition: all 0.2s ease;
    font-size: 0.9em;
}

.color-grid {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
}

.color-option {
    width: 30px;
    height: 30px;
    border-radius: 50%;
    border: 1px solid #eee;
    cursor: pointer;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    transition: all 0.2s ease;
}

.price-inputs {
    display: flex;
    align-items: center;
    gap: 10px;
    margin-top: 10px;
}

.price-input {
    width: 100%;
    padding: 8px 10px;
    border: 1px solid #ddd;
    border-radius: 5px;
    text-align: center;
    font-size: 0.95em;
    -moz-appearance: textfield;
}

.price-input::-webkit-outer-spin-button,
.price-input::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
}

.filter-actions {
    display: flex;
    gap: 10px;
    margin-top: 20px;
}

.btn-apply, .btn-reset {
    flex: 1;
    padding: 12px 15px;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    font-size: 1em;
    font-weight: bold;
    transition: all 0.3s ease;
    text-align: center;
    text-decoration: none;
}

.btn-apply {
    background-color: var(--primary-color);
    color: white;
}

.btn-reset {
    background-color: #eee;
    color: #555;
}

/* ✅ ✅ ✅ استایل‌های جدید برای نمایش گزینه‌های فعال ✅ ✅ ✅ */
.size-btn.active,
.brand-label.active {
    background: var(--zima-deep) !important;
    color: white !important;
    border-color: var(--zima-deep) !important;
    font-weight: bold;
}

.color-option.active {
    border: 3px solid var(--primary-color);
    box-shadow: 0 0 8px rgba(255, 107, 107, 0.5);
    transform: scale(1.1);
}

.category-label input:checked + .category-name {
    color: var(--primary-color);
    font-weight: bold;
}

/* ✅ ✅ ✅ استایل جدید و نهایی برای نمایش گزینه‌های فعال (با حاشیه نارنجی) ✅ ✅ ✅ */
/* این کدها برای مشخص کردن آیتم‌های انتخاب شده در فیلترها هستند */
.size-btn.active,
.brand-label.active {
    border: 2px solid var(--secondary-color) !important; /* حاشیه نارنجی */
    background-color: var(--zima-champagne) !important; /* پس‌زمینه کرم روشن */
    color: var(--text-color-dark) !important; /* متن تیره برای خوانایی */
    font-weight: bold;
    box-shadow: 0 0 8px rgba(218, 165, 32, 0.4); /* سایه نارنجی ملایم */
}

.color-option.active {
    border: 3px solid var(--secondary-color) !important; /* حاشیه نارنجی ضخیم */
    box-shadow: 0 0 8px rgba(218, 165, 32, 0.6); /* سایه نارنجی برای درخشش */
    transform: scale(1.15); /* کمی بزرگتر برای تاکید */
}

.category-label input:checked + .category-name {
    color: var(--secondary-color); /* متن نارنجی */
    font-weight: bold;
}

/* ✅ ✅ ✅ استایل‌های نهایی برای نمایش گزینه‌های فعال در فیلترها ✅ ✅ ✅ */

/* استایل برای دکمه‌های سایز و برند انتخاب شده */
.size-btn.active,
.brand-label.active {
    border: 2px solid var(--secondary-color) !important;
    background: linear-gradient(135deg, var(--secondary-color), var(--zima-gold)) !important;
    color: white !important;
    font-weight: bold;
    box-shadow: 0 0 10px rgba(218, 165, 32, 0.5);
    transform: scale(1.05);
}

/* استایل برای دایره‌های رنگ انتخاب شده */
.color-option.active {
    border: 3px solid var(--secondary-color) !important;
    box-shadow: 0 0 0 2px white, 0 0 0 5px var(--secondary-color), 0 0 15px rgba(218, 165, 32, 0.6) !important;
    transform: scale(1.2);
}

/* استایل برای چک‌باکس‌های دسته‌بندی انتخاب شده */
.category-label.active {
    background-color: rgba(218, 165, 32, 0.1);
    border-radius: 8px;
    padding: 5px 10px;
    margin: -5px -10px;
}

.category-label.active .category-name {
    color: var(--secondary-color) !important;
    font-weight: bold;
}

/* افکت هاور برای بهتر نشان دادن قابلیت کلیک */
.size-btn:hover:not(.active),
.brand-label:hover:not(.active) {
    border-color: var(--primary-color);
    background-color: rgba(255, 107, 107, 0.1);
    transform: translateY(-1px);
}

.color-option:hover:not(.active) {
    transform: scale(1.1);
    box-shadow: 0 0 8px rgba(0, 0, 0, 0.2);
}

/* انیمیشن برای تغییرات */
.size-btn,
.brand-label,
.color-option {
    transition: all 0.3s ease;
}

/* =============================================== */
/* == استایل‌های صفحه جزئیات محصول == */
/* =============================================== */

/* Breadcrumb Section */
.product-breadcrumb {
    padding: 120px 0 40px;
    background: var(--background-light);
}

.container {
    max-width: 1400px;
    margin: 0 auto;
    padding: 0 40px;
}

.breadcrumb-nav {
    display: flex;
    align-items: center;
    gap: 10px;
    font-size: 0.9rem;
}

.breadcrumb-nav a {
    color: var(--text-color-medium);
    text-decoration: none;
    transition: color 0.3s ease;
}

.breadcrumb-nav a:hover {
    color: var(--primary-color);
}

.breadcrumb-nav .current {
    color: var(--primary-color);
    font-weight: 600;
}

/* Product Detail Section */
.product-detail-section {
    padding: 60px 0;
    background: white;
}

.product-detail-wrapper {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 80px;
    align-items: start;
}

/* Product Images */
.product-images {
    position: sticky;
    top: 120px;
}

.main-image-container {
    position: relative;
    margin-bottom: 20px;
    border-radius: 20px;
    overflow: hidden;
    background: var(--zima-blush);
}

.main-product-image {
    width: 100%;
    height: 600px;
    object-fit: cover;
    transition: transform 0.3s ease;
}

.product-badges-detail {
    position: absolute;
    top: 20px;
    right: 20px;
    display: flex;
    flex-direction: column;
    gap: 10px;
    z-index: 3;
}

.zoom-btn {
    position: absolute;
    bottom: 20px;
    right: 20px;
    width: 50px;
    height: 50px;
    background: rgba(255, 255, 255, 0.9);
    border: none;
    border-radius: 50%;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
}

.zoom-btn:hover {
    background: var(--primary-color);
    color: white;
    transform: scale(1.1);
}

.thumbnail-container {
    display: flex;
    gap: 15px;
    overflow-x: auto;
    padding: 10px 0;
}

.thumbnail-item {
    flex-shrink: 0;
    width: 80px;
    height: 80px;
    border-radius: 10px;
    overflow: hidden;
    cursor: pointer;
    border: 3px solid transparent;
    transition: all 0.3s ease;
}

.thumbnail-item.active {
    border-color: var(--primary-color);
}

.thumbnail-item img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

/* Product Info */
.product-info-detail {
    padding: 20px 0;
}

.product-header {
    margin-bottom: 30px;
}

.product-brand-detail {
    color: var(--primary-color);
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 1px;
    margin-bottom: 10px;
    font-size: 0.9rem;
}

.product-title-detail {
    font-size: 2.5rem;
    font-weight: 700;
    color: var(--text-color-dark);
    margin-bottom: 20px;
    line-height: 1.2;
    font-family: 'Playfair Display', serif;
}

.product-rating-detail {
    display: flex;
    align-items: center;
    gap: 10px;
    flex-wrap: wrap;
}

.stars-large .star {
    font-size: 1.2rem;
    color: var(--secondary-color);
}

.rating-number {
    font-weight: 600;
    color: var(--text-color-dark);
}

.reviews-count {
    color: var(--text-color-medium);
}

.add-review-link {
    color: var(--primary-color);
    text-decoration: none;
    font-weight: 600;
    padding: 5px 15px;
    border-radius: 20px;
    border: 1px solid var(--primary-color);
    transition: all 0.3s ease;
}

.add-review-link:hover {
    background: var(--primary-color);
    color: white;
}

/* Price Section */
.price-section {
    display: flex;
    align-items: center;
    gap: 15px;
    margin-bottom: 25px;
    flex-wrap: wrap;
}

.current-price {
    font-size: 2.2rem;
    font-weight: 800;
    color: var(--primary-color);
    font-family: 'Playfair Display', serif;
}

.original-price {
    font-size: 1.5rem;
    color: var(--text-color-medium);
    text-decoration: line-through;
    opacity: 0.7;
}

.discount-badge {
    background: linear-gradient(135deg, #FF4444, #FF6B6B);
    color: white;
    padding: 8px 15px;
    border-radius: 20px;
    font-size: 0.9rem;
    font-weight: 700;
}

/* Stock Status */
.stock-status {
    margin-bottom: 25px;
}

.in-stock {
    color: #4CAF50;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 8px;
}

.out-of-stock {
    color: #FF4444;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 8px;
}

/* Product Description */
.product-description-short {
    color: var(--text-color-medium);
    line-height: 1.8;
    margin-bottom: 30px;
    font-size: 1.1rem;
}

/* Product Options */
.product-options {
    margin-bottom: 40px;
}

.option-group {
    margin-bottom: 25px;
}

.option-label {
    display: block;
    font-weight: 600;
    margin-bottom: 15px;
    color: var(--text-color-dark);
    font-size: 1.1rem;
}

.selected-color-name {
    color: var(--primary-color);
}

/* Size Options */
.size-options-detail {
    display: flex;
    gap: 12px;
    flex-wrap: wrap;
}

.size-option-detail {
    position: relative;
    cursor: pointer;
}

.size-option-detail input {
    display: none;
}

.size-option-detail span {
    display: block;
    padding: 12px 20px;
    border: 2px solid var(--zima-pearl);
    background: white;
    border-radius: 12px;
    font-weight: 600;
    transition: all 0.3s ease;
    text-align: center;
    min-width: 50px;
}

.size-option-detail:hover span {
    border-color: var(--secondary-color);
    background: var(--zima-blush);
}

.size-option-detail.active span,
.size-option-detail input:checked + span {
    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
    color: white;
    border-color: transparent;
}

/* Color Options */
.color-options-detail {
    display: flex;
    gap: 12px;
    flex-wrap: wrap;
}

.color-option-detail {
    position: relative;
    cursor: pointer;
    width: 45px;
    height: 45px;
    border-radius: 50%;
    transition: all 0.3s ease;
    border: 3px solid white;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
}

.color-option-detail input {
    display: none;
}

.color-option-detail:hover {
    transform: scale(1.1);
}

.color-option-detail.active,
.color-option-detail input:checked + .color-option-detail {
    border-color: var(--secondary-color);
    box-shadow: 0 0 0 2px var(--secondary-color), 0 4px 15px rgba(0,0,0,0.2);
    transform: scale(1.15);
}

/* Quantity Selector */
.quantity-selector-detail {
    display: flex;
    align-items: center;
    gap: 15px;
}

.quantity-btn {
    width: 45px;
    height: 45px;
    border: 2px solid var(--zima-pearl);
    background: white;
    border-radius: 50%;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 600;
}

.quantity-btn:hover {
    border-color: var(--primary-color);
    color: var(--primary-color);
}

.quantity-input-detail {
    width: 80px;
    height: 45px;
    text-align: center;
    border: 2px solid var(--zima-pearl);
    border-radius: 12px;
    font-size: 1.2rem;
    font-weight: 600;
    outline: none;
    -moz-appearance: textfield;
}

.quantity-input-detail::-webkit-outer-spin-button,
.quantity-input-detail::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
}

.quantity-input-detail:focus {
    border-color: var(--primary-color);
}

/* Action Buttons */
.product-actions-detail {
    display: flex;
    gap: 15px;
    margin-bottom: 30px;
    flex-wrap: wrap;
}

.btn-add-to-cart-detail {
    flex: 1;
    min-width: 200px;
    padding: 18px 30px;
    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
    color: white;
    border: none;
    border-radius: 50px;
    font-weight: 700;
    font-size: 1.1rem;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 10px;
    text-transform: uppercase;
    letter-spacing: 1px;
}

.btn-add-to-cart-detail:hover:not(.disabled) {
    transform: translateY(-2px);
    box-shadow: 0 10px 25px rgba(255, 107, 107, 0.4);
}

.btn-add-to-cart-detail.disabled {
    background: #ccc;
    cursor: not-allowed;
}

.btn-wishlist-detail,
.btn-compare-detail {
    padding: 18px 25px;
    border: 2px solid var(--primary-color);
    background: white;
    color: var(--primary-color);
    border-radius: 50px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    gap: 8px;
    white-space: nowrap;
}

.btn-wishlist-detail:hover,
.btn-compare-detail:hover,
.btn-wishlist-detail.active {
    background: var(--primary-color);
    color: white;
    transform: translateY(-2px);
}

/* Social Share */
.social-share {
    display: flex;
    align-items: center;
    gap: 15px;
    margin-bottom: 30px;
    flex-wrap: wrap;
}

.share-label {
    font-weight: 600;
    color: var(--text-color-dark);
}

.share-buttons {
    display: flex;
    gap: 10px;
}

.share-btn {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    text-decoration: none;
    color: white;
    transition: all 0.3s ease;
}

.share-btn.telegram { background: #0088cc; }
.share-btn.whatsapp { background: #25D366; }
.share-btn.twitter { background: #1DA1F2; }
.share-btn.copy { background: var(--text-color-medium); }

.share-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(0,0,0,0.2);
}

/* Product Features */
.product-features {
    border-top: 1px solid #eee;
    padding-top: 25px;
}

.feature-item {
    display: flex;
    align-items: center;
    gap: 12px;
    margin-bottom: 15px;
    color: var(--text-color-medium);
}

.feature-item i {
    color: var(--primary-color);
    font-size: 1.2rem;
}

/* Product Tabs */
.product-tabs-section {
    padding: 80px 0;
    background: var(--background-light);
}

.tabs-wrapper {
    background: white;
    border-radius: 20px;
    box-shadow: 0 10px 30px var(--shadow-soft);
    overflow: hidden;
}

.tab-headers {
    display: flex;
    background: var(--zima-champagne);
    border-bottom: 1px solid #eee;
}

.tab-header {
    flex: 1;
    padding: 20px 30px;
    background: transparent;
    border: none;
    font-size: 1.1rem;
    font-weight: 600;
    color: var(--text-color-medium);
    cursor: pointer;
    transition: all 0.3s ease;
    position: relative;
}

.tab-header.active {
    color: var(--primary-color);
    background: white;
}

.tab-header.active::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    height: 3px;
    background: var(--primary-color);
}

.tab-contents {
    min-height: 400px;
}

.tab-content {
    padding: 40px;
    display: none;
}

.tab-content.active {
    display: block;
}

/* Description Content */
.description-content {
    color: var(--text-color-medium);
    line-height: 1.8;
    font-size: 1.1rem;
}

/* Specifications Table */
.specs-table {
    width: 100%;
    border-collapse: collapse;
}

.specs-table tr {
    border-bottom: 1px solid #eee;
}

.specs-table td {
    padding: 15px 0;
    vertical-align: top;
}

.specs-table td:first-child {
    font-weight: 600;
    color: var(--text-color-dark);
    width: 200px;
}

.specs-table td:last-child {
    color: var(--text-color-medium);
}

/* Reviews Content */
.reviews-content {
    max-width: none;
}

.reviews-summary {
    background: var(--zima-blush);
    padding: 30px;
    border-radius: 15px;
    margin-bottom: 40px;
}

.rating-overview {
    display: grid;
    grid-template-columns: 200px 1fr;
    gap: 40px;
    align-items: center;
}

.average-rating {
    text-align: center;
}

.rating-number-large {
    font-size: 3rem;
    font-weight: 800;
    color: var(--primary-color);
    display: block;
    font-family: 'Playfair Display', serif;
}

.total-reviews {
    color: var(--text-color-medium);
    margin-top: 10px;
    display: block;
}

.rating-breakdown {
    display: flex;
    flex-direction: column;
    gap: 10px;
}

.rating-bar {
    display: flex;
    align-items: center;
    gap: 15px;
}

.rating-bar span:first-child {
    width: 60px;
    font-size: 0.9rem;
    color: var(--text-color-medium);
}

.bar {
    flex: 1;
    height: 8px;
    background: #eee;
    border-radius: 4px;
    overflow: hidden;
}

.bar .fill {
    height: 100%;
    background: linear-gradient(90deg, var(--secondary-color), var(--primary-color));
    border-radius: 4px;
}

.rating-bar span:last-child {
    width: 40px;
    text-align: right;
    font-size: 0.9rem;
    color: var(--text-color-medium);
}

/* Add Review Section */
.add-review-section {
    background: white;
    padding: 30px;
    border-radius: 15px;
    margin-bottom: 40px;
    border: 1px solid #eee;
}

.add-review-section h3 {
    margin-bottom: 25px;
    color: var(--text-color-dark);
    font-size: 1.5rem;
}

.review-form .form-group {
    margin-bottom: 20px;
}

.review-form label {
    display: block;
    margin-bottom: 8px;
    font-weight: 600;
    color: var(--text-color-dark);
}

.review-form textarea {
    width: 100%;
    padding: 15px;
    border: 2px solid #eee;
    border-radius: 10px;
    font-family: 'Vazir', sans-serif;
    font-size: 1rem;
    resize: vertical;
    outline: none;
    transition: border-color 0.3s ease;
}

.review-form textarea:focus {
    border-color: var(--primary-color);
}

/* Star Rating Input */
.rating-input {
    margin-bottom: 20px;
}

.star-rating-input {
    display: flex;
    flex-direction: row-reverse;
    gap: 5px;
    margin-top: 10px;
}

.star-rating-input input {
    display: none;
}

.star-rating-input label {
    cursor: pointer;
    color: #ddd;
    font-size: 1.5rem;
    transition: color 0.2s ease;
}

.star-rating-input label:hover,
.star-rating-input label.active,
.star-rating-input input:checked ~ label {
    color: var(--secondary-color);
}

.btn-submit-review {
    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
    color: white;
    border: none;
    padding: 15px 30px;
    border-radius: 50px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
}

.btn-submit-review:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(255, 107, 107, 0.4);
}

/* Reviews List */
.reviews-list {
    display: flex;
    flex-direction: column;
    gap: 25px;
}

.review-item {
    background: white;
    padding: 25px;
    border-radius: 15px;
    border: 1px solid #eee;
}

.review-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
}

.reviewer-info {
    display: flex;
    align-items: center;
    gap: 15px;
}

.reviewer-avatar {
    width: 45px;
    height: 45px;
    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-weight: 600;
    font-size: 1.2rem;
}

.reviewer-details {
    display: flex;
    flex-direction: column;
}

.reviewer-name {
    font-weight: 600;
    color: var(--text-color-dark);
}

.review-date {
    font-size: 0.9rem;
    color: var(--text-color-medium);
}

.review-rating .star {
    font-size: 1rem;
    color: var(--secondary-color);
}

.review-content {
    color: var(--text-color-medium);
    line-height: 1.7;
}

.no-reviews {
    text-align: center;
    padding: 60px 20px;
    color: var(--text-color-medium);
}

.no-reviews i {
    font-size: 3rem;
    margin-bottom: 20px;
    color: #ddd;
}

/* Q&A Content */
.qa-content {
    max-width: none;
}

.add-question-section {
    background: white;
    padding: 30px;
    border-radius: 15px;
    margin-bottom: 40px;
    border: 1px solid #eee;
}

.question-form textarea {
    width: 100%;
    padding: 15px;
    border: 2px solid #eee;
    border-radius: 10px;
    font-family: 'Vazir', sans-serif;
    resize: vertical;
    outline: none;
}

.btn-submit-question {
    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
    color: white;
    border: none;
    padding: 15px 30px;
    border-radius: 50px;
    font-weight: 600;
    cursor: pointer;
    margin-top: 15px;
    transition: all 0.3s ease;
}

.questions-list {
    display: flex;
    flex-direction: column;
    gap: 25px;
}

.question-item {
    background: white;
    border-radius: 15px;
    overflow: hidden;
    border: 1px solid #eee;
}

.question {
    padding: 25px;
    background: var(--zima-blush);
}

.question-header {
    display: flex;
    justify-content: space-between;
    margin-bottom: 10px;
}

.questioner {
    font-weight: 600;
    color: var(--text-color-dark);
}

.question-date {
    color: var(--text-color-medium);
    font-size: 0.9rem;
}

.answer {
    padding: 25px;
    background: white;
    border-top: 1px solid #eee;
}

.answer-header {
    display: flex;
    justify-content: space-between;
    margin-bottom: 10px;
}

.answerer {
    font-weight: 600;
    color: var(--primary-color);
}

/* Related Products */
.related-products-section {
    padding: 80px 0;
    background: white;
}

.related-products-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 30px;
    margin-top: 50px;
}

/* Image Zoom Modal */
.image-zoom-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.9);
    z-index: 10000;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
}

.image-zoom-modal.active {
    opacity: 1;
    visibility: visible;
}

.zoom-modal-content {
    position: relative;
    max-width: 90%;
    max-height: 90%;
}

.zoom-modal-content img {
    max-width: 100%;
    max-height: 100%;
    object-fit: contain;
}

.zoom-close {
    position: absolute;
    top: -50px;
    right: 0;
    background: white;
    border: none;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
}

.zoom-close:hover {
    background: var(--primary-color);
    color: white;
}

/* Responsive Design */
@media (max-width: 1200px) {
    .product-detail-wrapper {
        grid-template-columns: 1fr;
        gap: 50px;
    }

    .product-images {
        position: static;
    }

    .rating-overview {
        grid-template-columns: 1fr;
        gap: 20px;
        text-align: center;
    }
}

@media (max-width: 768px) {
    .container {
        padding: 0 20px;
    }

    .product-title-detail {
        font-size: 1.8rem;
    }

    .current-price {
        font-size: 1.8rem;
    }

    .main-product-image {
        height: 400px;
    }

    .product-actions-detail {
        flex-direction: column;
    }

    .btn-add-to-cart-detail {
        min-width: auto;
    }

    .tab-headers {
        flex-wrap: wrap;
    }

    .tab-header {
        flex: 1 1 50%;
        min-width: 150px;
    }

    .tab-content {
        padding: 20px;
    }

    .related-products-grid {
        grid-template-columns: repeat(2, 1fr);
        gap: 20px;
    }
}

@media (max-width: 480px) {
    .product-breadcrumb {
        padding: 100px 0 20px;
    }

    .breadcrumb-nav {
        font-size: 0.8rem;
        flex-wrap: wrap;
    }

    .main-product-image {
        height: 300px;
    }

    .thumbnail-item {
        width: 60px;
        height: 60px;
    }

    .product-title-detail {
        font-size: 1.5rem;
    }

    .current-price {
        font-size: 1.5rem;
    }

    .size-options-detail {
        gap: 8px;
    }

    .size-option-detail span {
        padding: 10px 15px;
    }

    .related-products-grid {
        grid-template-columns: 1fr;
    }

    .social-share {
        flex-direction: column;
        align-items: flex-start;
        gap: 10px;
    }
}

/* اصلاح padding برای جلوگیری از قرار گرفتن زیر هدر */
.product-detail-container {
 max-width: 1400px;
 margin: 0 auto;
 padding: 140px 50px 60px; /* افزایش padding-top */
}

/* استایل‌های زوم تصویر */
.zoom-container {
 overflow: hidden;
 cursor: grab;
 width: 80vw;
 height: 80vh;
 display: flex;
 align-items: center;
 justify-content: center;
}

.zoom-container:active {
 cursor: grabbing;
}

.zoomed-image {
 max-width: none;
 max-height: none;
 width: auto;
 height: auto;
 transition: transform 0.1s ease;
 user-select: none;
}

/* استایل‌های انتخاب رنگ و سایز */
.color-option-detail,
.size-option-detail {
 transition: opacity 0.3s ease;
}

.color-option-detail.disabled,
.size-option-detail.disabled {
 opacity: 0.3;
 pointer-events: none;
}

/* استایل‌های فرم نظرات */
.review-restriction,
.login-required {
 background: #f8f9fa;
 padding: 20px;
 border-radius: 10px;
 text-align: center;
 color: #666;
}

.login-required a {
 color: var(--primary-color);
 text-decoration: none;
 font-weight: 600;
}

.login-required a:hover {
 text-decoration: underline;
}

/* Toast notifications */
.toast {
 position: fixed;
 top: 20px;
 right: 20px;
 background: white;
 border-radius: 10px;
 padding: 15px 20px;
 box-shadow: 0 10px 30px rgba(0,0,0,0.2);
 display: flex;
 align-items: center;
 gap: 10px;
 z-index: 10001;
 transform: translateX(100%);
 transition: transform 0.3s ease;
}

.toast.show {
 transform: translateX(0);
}

.toast-icon {
 color: var(--primary-color);
 font-size: 1.2rem;
}

.toast-message {
 color: var(--text-color-dark);
 font-weight: 500;
}

/* Responsive adjustments */
@media (max-width: 768px) {
 .product-detail-container {
 padding: 120px 20px 40px;
 }

 .zoom-container {
 width: 95vw;
 height: 70vh;
 }
}

/* اصلاحات برای نمایش صحیح انتخاب رنگ و سایز در صفحه جزئیات */
.color-option-detail.disabled,
.size-option-detail.disabled {
    opacity: 0.3 !important;
    pointer-events: none !important;
}

.color-option-detail.active {
    border: 3px solid var(--secondary-color) !important;
    box-shadow: 0 0 0 2px white, 0 0 0 5px var(--secondary-color) !important;
    transform: scale(1.15) !important;
}

.size-option-detail.active span {
    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color)) !important;
    color: white !important;
    border-color: transparent !important;
}

/* استایل برای زوم تصویر */
.zoom-container {
    overflow: hidden;
    cursor: grab;
    width: 80vw;
    height: 80vh;
    display: flex;
    align-items: center;
    justify-content: center;
}

.zoom-container:active {
    cursor: grabbing;
}

.zoom-container img {
    max-width: none;
    max-height: none;
    width: auto;
    height: auto;
    transition: transform 0.1s ease;
    user-select: none;
}

/* اصلاح padding برای جلوگیری از قرار گرفتن زیر هدر */
.product-breadcrumb {
    padding: 140px 0 40px !important;
}

/* Toast notifications */
.toast {
    position: fixed;
    top: 20px;
    right: 20px;
    background: white;
    border-radius: 10px;
    padding: 15px 20px;
    box-shadow: 0 10px 30px rgba(0,0,0,0.2);
    display: flex;
    align-items: center;
    gap: 10px;
    z-index: 10001;
    transform: translateX(100%);
    transition: transform 0.3s ease;
}

.toast.show {
    transform: translateX(0);
}

.toast-icon {
    color: var(--primary-color);
    font-size: 1.2rem;
}

.toast-message {
    color: var(--text-color-dark);
    font-weight: 500;
}

/* استایل‌های مشترک برای صفحات احراز هویت */
.auth-section .form-input::placeholder {
 color: #999;
 opacity: 1;
}

.auth-section .password-toggle:hover {
 color: var(--primary-color);
}

.auth-section .strength-text {
 font-size: 0.8rem;
 margin-top: 5px;
}

/* انیمیشن برای دکمه‌ها */
.btn-auth:active {
 transform: translateY(0);
}

/* بهبود responsive */
@media (max-width: 480px) {
 .auth-container {
 padding: 0 10px;
 }

 .auth-wrapper {
 margin: 10px;
 border-radius: 15px;
 }

 .auth-form-section,
 .auth-welcome {
 padding: 30px 20px;
 }
}
/* Chat Widget Styles */
.chat-widget {
    position: fixed;
    bottom: 20px;
    right: 20px;
    z-index: 9999;
    background: linear-gradient(135deg, #ff6b6b, #feca57);
    width: 60px;
    height: 60px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    text-decoration: none;
    font-size: 1.5rem;
    box-shadow: 0 8px 25px rgba(255, 107, 107, 0.4);
    transition: all 0.3s ease;
    cursor: pointer;
    animation: pulse 2s infinite;
}

.chat-widget:hover {
    transform: translateY(-3px) scale(1.1);
    box-shadow: 0 12px 35px rgba(255, 107, 107, 0.6);
    color: white;
    text-decoration: none;
}

.chat-widget i {
    font-size: 1.5rem;
    transition: transform 0.3s ease;
}

.chat-widget:hover i {
    transform: scale(1.1);
}

/* Pulse Animation */
@keyframes pulse {
    0% {
        box-shadow: 0 8px 25px rgba(255, 107, 107, 0.4), 0 0 0 0 rgba(255, 107, 107, 0.7);
    }
    70% {
        box-shadow: 0 8px 25px rgba(255, 107, 107, 0.4), 0 0 0 10px rgba(255, 107, 107, 0);
    }
    100% {
        box-shadow: 0 8px 25px rgba(255, 107, 107, 0.4), 0 0 0 0 rgba(255, 107, 107, 0);
    }
}

/* Chat Tooltip */
.chat-widget::before {
    content: 'گفتگو با پشتیبانی';
    position: absolute;
    right: 70px;
    top: 50%;
    transform: translateY(-50%);
    background: rgba(0, 0, 0, 0.8);
    color: white;
    padding: 8px 12px;
    border-radius: 8px;
    font-size: 0.9rem;
    white-space: nowrap;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
    pointer-events: none;
}

.chat-widget::after {
    content: '';
    position: absolute;
    right: 60px;
    top: 50%;
    transform: translateY(-50%);
    width: 0;
    height: 0;
    border-left: 6px solid rgba(0, 0, 0, 0.8);
    border-top: 6px solid transparent;
    border-bottom: 6px solid transparent;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
}

.chat-widget:hover::before,
.chat-widget:hover::after {
    opacity: 1;
    visibility: visible;
}

/* Notification Badge */
.chat-notification {
    position: absolute;
    top: -5px;
    right: -5px;
    background: #dc3545;
    color: white;
    border-radius: 50%;
    width: 20px;
    height: 20px;
    font-size: 0.7rem;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    animation: bounce 1s infinite;
}

@keyframes bounce {
    0%, 20%, 50%, 80%, 100% {
        transform: translateY(0);
    }
    40% {
        transform: translateY(-3px);
    }
    60% {
        transform: translateY(-1px);
    }
}

/* Hide chat widget on chat pages */
.hide-chat-widget .chat-widget {
    display: none !important;
}

/* Mobile Responsive */
@media (max-width: 768px) {
    .chat-widget {
        bottom: 15px;
        right: 15px;
        width: 55px;
        height: 55px;
    }

    .chat-widget i {
        font-size: 1.3rem;
    }

    .chat-widget::before {
        right: 65px;
        font-size: 0.8rem;
        padding: 6px 10px;
    }

    .chat-widget::after {
        right: 55px;
    }
}

@media (max-width: 480px) {
    .chat-widget {
        bottom: 10px;
        right: 10px;
        width: 50px;
        height: 50px;
    }

    .chat-widget i {
        font-size: 1.2rem;
    }
}

/* Hide tooltip on very small screens */
@media (max-width: 320px) {
    .chat-widget::before,
    .chat-widget::after {
        display: none;
    }
}

/* Hide on print */
@media print {
    .chat-widget {
        display: none !important;
    }
}

====== FILE: static/css/style.css ======

/* فونت‌ها */
@font-face {
    font-family: 'Vazir';
    src: url('../fonts/Vazir.eot');
    src: url('../fonts/Vazir.eot?#iefix') format('embedded-opentype'),
         url('../fonts/Vazir.woff2') format('woff2'),
         url('../fonts/Vazir.woff') format('woff'),
         url('../fonts/Vazir.ttf') format('truetype');
    font-weight: normal;
    font-style: normal;
}

@font-face {
    font-family: 'Vazir';
    src: url('../fonts/Vazir-Bold.eot');
    src: url('../fonts/Vazir-Bold.eot?#iefix') format('embedded-opentype'),
         url('../fonts/Vazir-Bold.woff2') format('woff2'),
         url('../fonts/Vazir-Bold.woff') format('woff'),
         url('../fonts/Vazir-Bold.ttf') format('truetype');
    font-weight: bold;
    font-style: normal;
}

/* تنظیمات کلی */
body {
    font-family: 'Vazir', tahoma, Arial, sans-serif;
    background-color: #f8f9fa;
    color: #333;
    direction: rtl;
    text-align: right;
}

/* هدر */
.site-header {
    background-color: #fff;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

.navbar-brand img {
    max-height: 40px;
}

.navbar .nav-link {
    color: #333;
    font-weight: 500;
    transition: color 0.3s;
}

.navbar .nav-link:hover {
    color: #007bff;
}

/* کارت محصول */
.product-card {
    position: relative;
    transition: transform 0.3s, box-shadow 0.3s;
    overflow: hidden;
}

.product-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
}

.product-card .card-img-top {
    height: 200px;
    object-fit: cover;
    transition: transform 0.5s;
}

.product-card:hover .card-img-top {
    transform: scale(1.05);
}

.discount-badge {
    position: absolute;
    top: 10px;
    right: 10px;
    background-color: #dc3545;
    color: white;
    padding: 2px 8px;
    border-radius: 4px;
    font-size: 0.8rem;
    font-weight: bold;
    z-index: 1;
}

.original-price {
    font-size: 0.9rem;
    display: block;
}

.discount-price {
    color: #dc3545;
    font-weight: bold;
}

.price {
    font-weight: bold;
}

.color-dot {
    display: inline-block;
    width: 15px;
    height: 15px;
    border-radius: 50%;
    margin-right: 5px;
    border: 1px solid #ddd;
}

/* صفحه جزئیات محصول */
.product-images .main-image img {
    width: 100%;
    height: auto;
    max-height: 400px;
    object-fit: contain;
}

.product-gallery .swiper-slide {
    cursor: pointer;
    opacity: 0.6;
    transition: opacity 0.3s;
}

.product-gallery .swiper-slide:hover,
.product-gallery .swiper-slide-active {
    opacity: 1;
}

.rating {
    direction: ltr;
    display: inline-block;
}

.rating input {
    display: none;
}

.rating label {
    cursor: pointer;
    width: 25px;
    height: 25px;
    margin: 0;
    padding: 0;
    font-size: 25px;
    line-height: 25px;
    color: #ddd;
    float: right;
}

.rating input:checked ~ label,
.rating:not(:checked) label:hover,
.rating:not(:checked) label:hover ~ label {
    color: #ffc107;
}

.rating-display i {
    font-size: 0.9rem;
}

.product-features {
    display: flex;
    justify-content: space-around;
    margin-top: 20px;
    padding-top: 20px;
    border-top: 1px solid #eee;
}

.product-features .feature {
    text-align: center;
}

.product-features .feature i {
    font-size: 1.5rem;
    margin-bottom: 8px;
}

/* دسته‌بندی‌ها */
.category-card {
    height: 200px;
    overflow: hidden;
    position: relative;
}

.category-card img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.5s;
}

.category-card:hover img {
    transform: scale(1.1);
}

.category-card .card-img-overlay {
    background: rgba(0, 0, 0, 0.3);
    transition: background 0.3s;
}

.category-card:hover .card-img-overlay {
    background: rgba(0, 0, 0, 0.5);
}

/* سبد خرید */
.quantity-control {
    display: flex;
    align-items: center;
}

/* فوتر */
.site-footer {
    background-color: #343a40;
    color: #f8f9fa;
    padding: 40px 0 20px;
}

.site-footer h5 {
    color: white;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    padding-bottom: 10px;
    margin-bottom: 20px;
}

.site-footer a {
    color: #ccc;
    text-decoration: none;
    transition: color 0.3s;
}

.site-footer a:hover {
    color: white;
}

.footer-bottom {
    background-color: #212529;
    padding: 15px 0;
    margin-top: 30px;
}

/* پاسخگویی */
@media (max-width: 767.98px) {
    .product-card .card-img-top {
        height: 150px;
    }

    .category-card {
        height: 150px;
    }
}

====== FILE: templates/cart/cart.html ======

{% extends 'base/base.html' %}
{% load static %}

{% block title %}سبد خرید | زیما{% endblock %}

{% block extra_css %}
<style>
    :root {
        --primary-color: #ff6b6b;
        --secondary-color: #feca57;
        --text-color-dark: #2c3e50;
        --text-color-medium: #5a6c7d;
        --text-color-light: #95a5a6;
        --zima-blush: #fff5f5;
        --zima-pearl: #f8f9fa;
        --zima-champagne: #fef9e7;
        --success-color: #28a745;
        --danger-color: #dc3545;
        --warning-color: #ffc107;
        --info-color: #17a2b8;
    }

    .cart-page {
        min-height: 100vh;
        background: linear-gradient(135deg, var(--zima-blush), var(--zima-champagne));
        padding: 140px 0 60px;
        position: relative;
    }

    .cart-page::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: url('{% static "images/patterns/subtle-pattern.png" %}') repeat;
        opacity: 0.03;
        pointer-events: none;
    }

    .cart-container {
        max-width: 1400px;
        margin: 0 auto;
        padding: 0 20px;
        position: relative;
        z-index: 2;
    }

    /* Breadcrumb Styles */
    .cart-breadcrumb {
        display: flex;
        align-items: center;
        justify-content: center;
        margin-bottom: 40px;
        background: white;
        padding: 20px;
        border-radius: 15px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
    }

    .breadcrumb-step {
        display: flex;
        align-items: center;
        color: var(--text-color-light);
        font-weight: 500;
        position: relative;
    }

    .breadcrumb-step.active {
        color: var(--primary-color);
        font-weight: 600;
    }

    .breadcrumb-step.completed {
        color: var(--success-color);
    }

    .breadcrumb-step .step-icon {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-left: 10px;
        background: var(--zima-pearl);
        color: var(--text-color-light);
        font-size: 1.2rem;
        transition: all 0.3s ease;
    }

    .breadcrumb-step.active .step-icon {
        background: var(--primary-color);
        color: white;
    }

    .breadcrumb-step.completed .step-icon {
        background: var(--success-color);
        color: white;
    }

    .breadcrumb-arrow {
        margin: 0 20px;
        color: var(--text-color-light);
        font-size: 1.2rem;
    }

    /* Cart Layout */
    .cart-layout {
        display: grid;
        grid-template-columns: 2fr 1fr;
        gap: 40px;
    }

    /* Cart Items Styles */
    .cart-items-section {
        background: white;
        border-radius: 20px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
        margin-bottom: 30px;
        overflow: hidden;
        border: 2px solid var(--zima-pearl);
    }

    .cart-items-header {
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        color: white;
        padding: 25px 30px;
        position: relative;
    }

    .cart-items-header::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: url('{% static "images/patterns/elegant-pattern.png" %}') repeat;
        opacity: 0.1;
    }

    .cart-items-header h2 {
        margin: 0;
        font-size: 1.5rem;
        font-weight: 700;
        position: relative;
        z-index: 2;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .cart-items-body {
        padding: 0;
    }

    .cart-item {
        display: flex;
        align-items: center;
        padding: 25px 30px;
        border-bottom: 1px solid var(--zima-pearl);
        transition: all 0.3s ease;
    }

    .cart-item:hover {
        background: var(--zima-blush);
    }

    .cart-item:last-child {
        border-bottom: none;
    }

    .item-image {
        width: 120px;
        height: 120px;
        border-radius: 15px;
        overflow: hidden;
        margin-left: 20px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    }

    .item-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.3s ease;
    }

    .item-image:hover img {
        transform: scale(1.05);
    }

    .no-image {
        background: linear-gradient(135deg, var(--zima-pearl), var(--zima-blush));
        display: flex;
        align-items: center;
        justify-content: center;
        color: var(--text-color-light);
        font-size: 0.9rem;
        width: 100%;
        height: 100%;
    }

    .item-details {
        flex: 1;
        padding-right: 20px;
    }

    .item-title {
        font-size: 1.2rem;
        font-weight: 600;
        color: var(--text-color-dark);
        margin-bottom: 8px;
        line-height: 1.4;
    }

    .item-brand {
        color: var(--text-color-medium);
        font-size: 0.9rem;
        margin-bottom: 12px;
    }

    .item-attributes {
        display: flex;
        gap: 15px;
        margin-bottom: 12px;
    }

    .attribute {
        display: flex;
        align-items: center;
        gap: 5px;
        color: var(--text-color-medium);
        font-size: 0.9rem;
    }

    .color-circle {
        width: 20px;
        height: 20px;
        border-radius: 50%;
        border: 2px solid white;
        box-shadow: 0 0 0 1px var(--zima-pearl);
    }

    .item-price {
        text-align: center;
        padding: 0 20px;
    }

    .price-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 5px;
    }

    .original-price {
        text-decoration: line-through;
        color: var(--text-color-light);
        font-size: 0.9rem;
    }

    .current-price {
        font-size: 1.1rem;
        font-weight: 600;
        color: var(--text-color-dark);
    }

    .discounted-price {
        color: var(--danger-color);
        font-weight: 700;
    }

    .discount-badge {
        background: var(--danger-color);
        color: white;
        font-size: 0.75rem;
        padding: 3px 8px;
        border-radius: 12px;
        font-weight: 500;
    }

    .quantity-controls {
        display: flex;
        align-items: center;
        gap: 10px;
        padding: 0 20px;
    }

    .quantity-btn {
        width: 35px;
        height: 35px;
        border: 2px solid var(--zima-pearl);
        background: white;
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.3s ease;
        font-weight: 600;
        color: var(--text-color-medium);
    }

    .quantity-btn:hover {
        border-color: var(--primary-color);
        color: var(--primary-color);
        background: var(--zima-blush);
    }

    .quantity-btn:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    .quantity-input {
        width: 50px;
        height: 35px;
        text-align: center;
        border: 2px solid var(--zima-pearl);
        border-radius: 8px;
        font-weight: 600;
        background: white;
    }

    .quantity-input:focus {
        outline: none;
        border-color: var(--primary-color);
        box-shadow: 0 0 0 3px rgba(255, 107, 107, 0.1);
    }

    .item-total {
        text-align: center;
        padding: 0 20px;
        min-width: 120px;
    }

    .total-price {
        font-size: 1.2rem;
        font-weight: 700;
        color: var(--text-color-dark);
    }

    .item-actions {
        display: flex;
        flex-direction: column;
        gap: 10px;
        padding: 0 20px;
    }

    .action-btn {
        width: 40px;
        height: 40px;
        border: none;
        border-radius: 10px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.3s ease;
        font-size: 1rem;
    }

    .save-btn {
        background: var(--zima-blush);
        color: var(--primary-color);
    }

    .save-btn:hover {
        background: var(--primary-color);
        color: white;
    }

    .remove-btn {
        background: rgba(220, 53, 69, 0.1);
        color: var(--danger-color);
    }

    .remove-btn:hover {
        background: var(--danger-color);
        color: white;
    }

    /* Cart Summary Styles */
    .cart-summary {
        background: white;
        border-radius: 20px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
        border: 2px solid var(--zima-pearl);
        position: sticky;
        top: 160px;
    }

    .summary-header {
        background: linear-gradient(135deg, var(--text-color-dark), var(--text-color-medium));
        color: white;
        padding: 25px 30px;
        border-radius: 18px 18px 0 0;
        position: relative;
    }

    .summary-header::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: url('{% static "images/patterns/elegant-pattern.png" %}') repeat;
        opacity: 0.1;
    }

    .summary-header h3 {
        margin: 0;
        font-size: 1.3rem;
        font-weight: 600;
        position: relative;
        z-index: 2;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .summary-body {
        padding: 30px;
    }

    .summary-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
        padding: 8px 0;
    }

    .summary-row:not(:last-child) {
        border-bottom: 1px solid var(--zima-pearl);
        padding-bottom: 15px;
    }

    .summary-label {
        color: var(--text-color-medium);
        font-size: 0.95rem;
    }

    .summary-value {
        font-weight: 600;
        color: var(--text-color-dark);
    }

    .discount-value {
        color: var(--danger-color);
    }

    .shipping-free {
        color: var(--success-color);
        font-weight: 600;
    }

    .total-row {
        background: var(--zima-blush);
        margin: 20px -30px -30px;
        padding: 25px 30px;
        border-top: 2px solid var(--zima-pearl);
    }

    .total-row .summary-label {
        font-size: 1.1rem;
        font-weight: 600;
        color: var(--text-color-dark);
    }

    .total-row .summary-value {
        font-size: 1.4rem;
        font-weight: 700;
        color: var(--primary-color);
    }

    /* Coupon Section */
    .coupon-section {
        background: var(--zima-blush);
        border-radius: 15px;
        padding: 20px;
        margin-bottom: 25px;
    }

    .coupon-form {
        display: flex;
        gap: 10px;
    }

    .coupon-input {
        flex: 1;
        padding: 12px 15px;
        border: 2px solid var(--zima-pearl);
        border-radius: 10px;
        font-size: 0.9rem;
        background: white;
    }

    .coupon-input:focus {
        outline: none;
        border-color: var(--primary-color);
        box-shadow: 0 0 0 3px rgba(255, 107, 107, 0.1);
    }

    .coupon-btn {
        background: var(--primary-color);
        color: white;
        border: none;
        padding: 12px 20px;
        border-radius: 10px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .coupon-btn:hover {
        background: var(--secondary-color);
        transform: translateY(-1px);
    }

    .applied-coupon {
        background: rgba(40, 167, 69, 0.1);
        border: 1px solid var(--success-color);
        border-radius: 10px;
        padding: 15px;
        margin-bottom: 20px;
    }

    .coupon-info {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .coupon-code {
        font-weight: 600;
        color: var(--success-color);
    }

    .remove-coupon {
        background: none;
        border: none;
        color: var(--danger-color);
        cursor: pointer;
        font-size: 1.2rem;
    }

    /* Action Buttons */
    .action-buttons {
        display: flex;
        flex-direction: column;
        gap: 15px;
        margin-top: 25px;
    }

    .btn-checkout {
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        color: white;
        border: none;
        padding: 15px 25px;
        border-radius: 12px;
        font-weight: 600;
        font-size: 1rem;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        text-align: center;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 10px;
    }

    .btn-checkout:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(255, 107, 107, 0.4);
        color: white;
    }

    .btn-continue {
        background: transparent;
        color: var(--text-color-medium);
        border: 2px solid var(--zima-pearl);
        padding: 12px 25px;
        border-radius: 12px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        text-align: center;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
    }

    .btn-continue:hover {
        border-color: var(--primary-color);
        color: var(--primary-color);
        transform: translateY(-1px);
    }

    .btn-clear {
        background: transparent;
        color: var(--danger-color);
        border: 2px solid rgba(220, 53, 69, 0.3);
        padding: 10px 20px;
        border-radius: 10px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
        font-size: 0.9rem;
    }

    .btn-clear:hover {
        background: var(--danger-color);
        color: white;
        border-color: var(--danger-color);
    }

    /* Empty Cart Styles */
    .empty-cart {
        text-align: center;
        padding: 80px 40px;
        background: white;
        border-radius: 20px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
        border: 2px solid var(--zima-pearl);
    }

    .empty-icon {
        width: 120px;
        height: 120px;
        background: var(--zima-blush);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 30px;
        color: var(--primary-color);
        font-size: 3rem;
    }

    .empty-title {
        font-size: 1.8rem;
        font-weight: 600;
        color: var(--text-color-dark);
        margin-bottom: 15px;
    }

    .empty-description {
        color: var(--text-color-medium);
        margin-bottom: 30px;
        font-size: 1rem;
        line-height: 1.6;
    }

    /* Shipping Info */
    .shipping-info {
        background: var(--zima-blush);
        border-radius: 12px;
        padding: 15px;
        margin-bottom: 20px;
        border-left: 4px solid var(--primary-color);
    }

    .shipping-info h6 {
        color: var(--text-color-dark);
        font-weight: 600;
        margin-bottom: 8px;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .shipping-info p {
        color: var(--text-color-medium);
        font-size: 0.9rem;
        margin: 0;
    }

    /* Security Features */
    .security-features {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 15px;
        margin-bottom: 25px;
    }

    .security-item {
        display: flex;
        align-items: center;
        gap: 8px;
        color: var(--text-color-medium);
        font-size: 0.85rem;
    }

    .security-item i {
        color: var(--success-color);
    }

    /* Responsive Design */
    @media (max-width: 1200px) {
        .cart-container {
            padding: 0 15px;
        }

        .cart-layout {
            grid-template-columns: 1fr;
            gap: 30px;
        }

        .cart-summary {
            position: static;
        }
    }

    @media (max-width: 768px) {
        .cart-page {
            padding: 120px 0 40px;
        }

        .cart-breadcrumb {
            flex-direction: column;
            gap: 15px;
            padding: 15px;
        }

        .breadcrumb-arrow {
            transform: rotate(90deg);
            margin: 10px 0;
        }

        .cart-item {
            flex-direction: column;
            align-items: stretch;
            gap: 20px;
            padding: 20px;
        }

        .item-image {
            width: 100px;
            height: 100px;
            margin: 0 auto;
        }

        .item-details {
            text-align: center;
            padding: 0;
        }

        .item-attributes {
            justify-content: center;
        }

        .quantity-controls,
        .item-price,
        .item-total {
            padding: 0;
            text-align: center;
        }

        .item-actions {
            flex-direction: row;
            justify-content: center;
            padding: 0;
        }

        .summary-body {
            padding: 20px;
        }

        .total-row {
            margin: 20px -20px -20px;
            padding: 20px;
        }

        .security-features {
            grid-template-columns: 1fr;
        }
    }

    @media (max-width: 480px) {
        .cart-items-header,
        .summary-header {
            padding: 20px;
        }

        .cart-item {
            padding: 15px;
        }
    }
</style>
{% endblock %}

{% block content %}
<section class="cart-page">
    <div class="cart-container">
        <!-- Breadcrumb Navigation -->
        <div class="cart-breadcrumb">
            <div class="breadcrumb-step active">
                <div class="step-icon">
                    <i class="fas fa-shopping-cart"></i>
                </div>
                <span>سبد خرید</span>
            </div>
            <div class="breadcrumb-arrow">
                <i class="fas fa-chevron-left"></i>
            </div>
            <div class="breadcrumb-step">
                <div class="step-icon">
                    <i class="fas fa-shipping-fast"></i>
                </div>
                <span>اطلاعات ارسال</span>
            </div>
            <div class="breadcrumb-arrow">
                <i class="fas fa-chevron-left"></i>
            </div>
            <div class="breadcrumb-step">
                <div class="step-icon">
                    <i class="fas fa-credit-card"></i>
                </div>
                <span>پرداخت</span>
            </div>
        </div>

        {% if cart_items %}
        <div class="cart-layout">
            <!-- Cart Items Section -->
            <div class="cart-items-section">
                <div class="cart-items-header">
                    <h2>
                        <i class="fas fa-shopping-bag"></i>
                        محصولات انتخابی
                        <span style="background: rgba(255,255,255,0.2); padding: 5px 10px; border-radius: 20px; font-size: 0.8rem; margin-right: 10px;">
                            {{ cart_total.total_items }} محصول
                        </span>
                    </h2>
                </div>

                <div class="cart-items-body">
                    {% for item in cart_items %}
                    <div class="cart-item" data-item-id="{{ item.id }}">
                        <!-- Product Image -->
                        <div class="item-image">
                            {% with image=item.product.get_main_image %}
                            {% if image %}
                            <img src="{{ image.image.url }}" alt="{{ item.product.name }}" loading="lazy">
                            {% else %}
                            <div class="no-image">
                                <i class="fas fa-image"></i>
                            </div>
                            {% endif %}
                            {% endwith %}
                        </div>

                        <!-- Product Details -->
                        <div class="item-details">
                            <div class="item-title">{{ item.product.name }}</div>
                            <div class="item-brand">زیما</div>

                            <div class="item-attributes">
                                <div class="attribute">
                                    <span>سایز:</span>
                                    <strong>{{ item.size }}</strong>
                                </div>
                                <div class="attribute">
                                    <span>رنگ:</span>
                                        <div class="color-circle" style="background-color: {{ item.get_color_object.hex_code|default:'#ccc' }};" title="{{ item.color }}"></div>
                                    <span>{{ item.color }}</span>
                                </div>
                            </div>

                            {% if item.product.has_discount %}
                            <span class="discount-badge">
                                {{ item.product.discount_percent }}% تخفیف
                            </span>
                            {% endif %}
                        </div>

                        <!-- Price -->
                        <div class="item-price">
                            <div class="price-container">
                                {% if item.product.has_discount %}
                                <div class="original-price">{{ item.product.price|floatformat:0 }} تومان</div>
                                <div class="current-price discounted-price">{{ item.get_unit_price|floatformat:0 }} تومان</div>
                                {% else %}
                                <div class="current-price">{{ item.get_unit_price|floatformat:0 }} تومان</div>
                                {% endif %}
                            </div>
                        </div>

                        <!-- Quantity Controls -->
                        <div class="quantity-controls">
                            <form method="post" action="{% url 'cart:update_cart' item.id %}" style="display: inline;">
                                {% csrf_token %}
                                <input type="hidden" name="action" value="decrease">
                                <button type="submit" class="quantity-btn" {% if item.quantity <= 1 %}disabled{% endif %}>
                                    <i class="fas fa-minus"></i>
                                </button>
                            </form>

                            <input type="number" class="quantity-input" value="{{ item.quantity }}" min="1" max="10"
                                onchange="updateQuantity({{ item.id }}, this.value)">

                            <form method="post" action="{% url 'cart:update_cart' item.id %}" style="display: inline;">
                                {% csrf_token %}
                                <input type="hidden" name="action" value="increase">
                                <button type="submit" class="quantity-btn">
                                    <i class="fas fa-plus"></i>
                                </button>
                            </form>
                        </div>

                        <!-- Total Price -->
                        <div class="item-total">
                            <div class="total-price">{{ item.get_final_price|floatformat:0 }} تومان</div>
                        </div>

                        <!-- Actions -->
                        <div class="item-actions">
                            <button class="action-btn save-btn" title="ذخیره برای بعد">
                                <i class="fas fa-heart"></i>
                            </button>
                            <form method="post" action="{% url 'cart:remove_from_cart' item.id %}" style="display: inline;">
                                {% csrf_token %}
                                <button type="submit" class="action-btn remove-btn" title="حذف از سبد"
                                    onclick="return confirm('آیا از حذف این محصول اطمینان دارید؟')">
                                    <i class="fas fa-trash-alt"></i>
                                </button>
                            </form>
                        </div>
                    </div>
                    {% endfor %}
                </div>
            </div>

            <!-- Cart Summary Section -->
            <div class="cart-summary">
                <div class="summary-header">
                    <h3>
                        <i class="fas fa-calculator"></i>
                        خلاصه سفارش
                    </h3>
                </div>

                <div class="summary-body">
                    <!-- Coupon Section -->
                    {% if not applied_coupon %}
                    <div class="coupon-section">
                        <h6 style="margin-bottom: 15px; color: var(--text-color-dark); font-weight: 600;">کد تخفیف</h6>
                        <form method="post" action="{% url 'cart:apply_coupon' %}" class="coupon-form">
                            {% csrf_token %}
                            <input type="text" name="code" class="coupon-input" placeholder="کد تخفیف خود را وارد کنید" required>
                            <button type="submit" class="coupon-btn">اعمال</button>
                        </form>
                    </div>
                    {% else %}
                    <div class="applied-coupon">
                        <div class="coupon-info">
                            <div>
                                <i class="fas fa-ticket-alt" style="color: var(--success-color); margin-left: 5px;"></i>
                                <span class="coupon-code">{{ applied_coupon.code }}</span>
                                <div style="font-size: 0.8rem; color: var(--text-color-medium);">
                                    کد تخفیف {{ applied_coupon.code }} اعمال شد
                                </div>
                            </div>
                            <form method="post" action="{% url 'cart:remove_coupon' %}" style="display: inline;">
                                {% csrf_token %}
                                <button type="submit" class="remove-coupon" title="حذف کد تخفیف">
                                    <i class="fas fa-times"></i>
                                </button>
                            </form>
                        </div>
                    </div>
                    {% endif %}

                    <!-- Order Summary -->
                    <div class="summary-row">
                        <span class="summary-label">جمع کل محصولات:</span>
                        <span class="summary-value">{{ cart_total.original_subtotal|floatformat:0 }} تومان</span>
                    </div>

                    {% if cart_total.product_discount > 0 %}
                    <div class="summary-row">
                        <span class="summary-label">تخفیف محصولات:</span>
                        <span class="summary-value discount-value">-{{ cart_total.product_discount|floatformat:0 }} تومان</span>
                    </div>
                    {% endif %}

                    {% if cart_total.coupon_discount > 0 %}
                    <div class="summary-row">
                        <span class="summary-label">تخفیف کد:</span>
                        <span class="summary-value discount-value">-{{ cart_total.coupon_discount|floatformat:0 }} تومان</span>
                    </div>
                    {% endif %}

                    <div class="summary-row">
                        <span class="summary-label">هزینه ارسال:</span>
                        {% if cart_total.shipping_cost > 0 %}
                        <span class="summary-value">{{ cart_total.shipping_cost|floatformat:0 }} تومان</span>
                        {% else %}
                        <span class="summary-value shipping-free">رایگان</span>
                        {% endif %}
                    </div>

                    {% if cart_total.tax_amount > 0 %}
                    <div class="summary-row">
                        <span class="summary-label">مالیات:</span>
                        <span class="summary-value">{{ cart_total.tax_amount|floatformat:0 }} تومان</span>
                    </div>
                    {% endif %}

                    <div class="summary-row total-row">
                        <span class="summary-label">مبلغ نهایی:</span>
                        <span class="summary-value">{{ cart_total.total|floatformat:0 }} تومان</span>
                    </div>

                    <!-- Security Features -->
                    <div class="security-features">
                        <div class="security-item">
                            <i class="fas fa-shield-alt"></i>
                            <span>پرداخت امن و محافظت شده</span>
                        </div>
                        <div class="security-item">
                            <i class="fas fa-truck"></i>
                            <span>ارسال رایگان</span>
                        </div>
                        <div class="security-item">
                            <i class="fas fa-undo-alt"></i>
                            <span>30 روز ضمانت</span>
                        </div>
                        <div class="security-item">
                            <i class="fas fa-headset"></i>
                            <span>پشتیبانی 24/7</span>
                        </div>
                    </div>

                    <!-- Shipping Info -->
                    {% if cart_total.shipping_cost == 0 and cart_total.subtotal > 0 %}
                    <div class="shipping-info">
                        <h6>
                            <i class="fas fa-truck"></i>
                            ارسال رایگان
                        </h6>
                        <p>ارسال رایگان برای خرید بالای 300,000 تومان</p>
                    </div>
                    {% elif cart_total.free_shipping_remaining > 0 %}
                    <div class="shipping-info">
                        <h6>
                            <i class="fas fa-info-circle"></i>
                            نزدیک به ارسال رایگان!
                        </h6>
                        <p>با خرید {{ cart_total.free_shipping_remaining|floatformat:0 }} تومان بیشتر، ارسال رایگان خواهد بود!</p>
                    </div>
                    {% endif %}

                    <!-- Action Buttons -->
                    <div class="action-buttons">
                        <a href="#" class="btn-checkout">
                            <i class="fas fa-credit-card"></i>
                            ادامه فرایند خرید
                        </a>

                        <a href="{% url 'products:list' %}" class="btn-continue">
                            <i class="fas fa-shopping-bag"></i>
                            ادامه خرید
                        </a>

                        <form method="post" action="{% url 'cart:clear_cart' %}" style="margin-top: 10px;">
                            {% csrf_token %}
                            <button type="submit" class="btn-clear w-100"
                                onclick="return confirm('آیا از خالی کردن سبد خرید اطمینان دارید؟')">
                                <i class="fas fa-trash"></i>
                                خالی کردن سبد خرید
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        </div>

        {% else %}
        <!-- Empty Cart -->
        <div class="empty-cart">
            <div class="empty-icon">
                <i class="fas fa-shopping-cart"></i>
            </div>
            <h2 class="empty-title">سبد خرید شما خالی است</h2>
            <p class="empty-description">
                محصولات زیبای زیما را کشف کنید و خریدتان را شروع کنید
            </p>
            <a href="{% url 'products:list' %}" class="btn-checkout">
                <i class="fas fa-shopping-bag"></i>
                ادامه خرید
            </a>
        </div>
        {% endif %}
    </div>
</section>
{% endblock %}

{% block extra_js %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Quantity update function
    window.updateQuantity = function(itemId, quantity) {
        if (quantity < 1) quantity = 1;
        if (quantity > 10) quantity = 10;

        fetch(`/cart/update/${itemId}/`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRFToken': getCsrfToken()
            },
            body: JSON.stringify({
                'action': 'set_quantity',
                'quantity': quantity
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                location.reload();
            } else {
                alert('خطا در به‌روزرسانی تعداد محصول');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('خطا در به‌روزرسانی');
        });
    };

    // Save for later functionality
    document.querySelectorAll('.save-btn').forEach(button => {
        button.addEventListener('click', function() {
            const itemId = this.closest('.cart-item').dataset.itemId;

            fetch(`/cart/save-for-later/${itemId}/`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': getCsrfToken()
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showMessage('محصول برای بعد ذخیره شد', 'success');
                    location.reload();
                } else {
                    showMessage(data.message || 'خطا در ذخیره محصول', 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showMessage('خطا در ذخیره محصول', 'error');
            });
        });
    });

    // Enhanced quantity input validation
    document.querySelectorAll('.quantity-input').forEach(input => {
        input.addEventListener('change', function() {
            let value = parseInt(this.value);
            if (isNaN(value) || value < 1) {
                this.value = 1;
                value = 1;
            }
            if (value > 10) {
                this.value = 10;
                value = 10;
            }

            const itemId = this.closest('.cart-item').dataset.itemId;
            updateQuantity(itemId, value);
        });

        input.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                this.blur();
            }
        });
    });
});

function getCsrfToken() {
    return document.querySelector('[name=csrfmiddlewaretoken]').value;
}

function showMessage(message, type) {
    // Create and show message
    const alertDiv = document.createElement('div');
    alertDiv.className = `alert alert-${type === 'error' ? 'danger' : 'success'} alert-dismissible fade show`;
    alertDiv.style.cssText = 'position: fixed; top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
    alertDiv.innerHTML = `
        ${message}
        <button type="button" class="btn-close" onclick="this.parentElement.remove()"></button>
    `;

    document.body.appendChild(alertDiv);

    // Auto remove after 5 seconds
    setTimeout(() => {
        if (alertDiv.parentElement) {
            alertDiv.remove();
        }
    }, 5000);
}

// Loading states for buttons
document.querySelectorAll('form').forEach(form => {
    form.addEventListener('submit', function() {
        const submitBtn = this.querySelector('button[type="submit"]');
        if (submitBtn && !submitBtn.classList.contains('quantity-btn')) {
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> در حال پردازش...';
            submitBtn.disabled = true;
        }
    });
});
</script>
{% endblock %}

====== FILE: templates/pages/contact.html ======

{% extends 'base/base.html' %}
{% load static %}

{% block title %}تماس با ما | زیما - ارتباط مستقیم با ما{% endblock %}

{% block extra_css %}
    <style>
        :root {
            --primary-color: #ff6b6b;
            --secondary-color: #feca57;
            --text-color-dark: #2c3e50;
            --text-color-medium: #5a6c7d;
            --text-color-light: #95a5a6;
            --zima-blush: #fff5f5;
            --zima-pearl: #f8f9fa;
            --zima-champagne: #fef9e7;
            --success-color: #28a745;
            --danger-color: #dc3545;
            --warning-color: #ffc107;
            --info-color: #17a2b8;
        }

        .contact-page {
            padding: 140px 0 60px;
            background: linear-gradient(135deg, var(--zima-blush), var(--zima-champagne));
            min-height: 100vh;
            position: relative;
            overflow: hidden;
        }

        .contact-page::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: url('{% static "images/patterns/elegant-pattern.png" %}') repeat;
            opacity: 0.02;
            pointer-events: none;
        }

        .contact-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 20px;
            position: relative;
            z-index: 2;
        }

        /* Hero Section */
        .hero-section {
            text-align: center;
            margin-bottom: 80px;
            position: relative;
        }

        .hero-section::before {
            content: '';
            position: absolute;
            top: -50px;
            left: 50%;
            transform: translateX(-50%);
            width: 200px;
            height: 200px;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            border-radius: 50%;
            opacity: 0.1;
            z-index: -1;
        }

        .hero-title {
            font-size: 3rem;
            font-weight: 800;
            color: var(--text-color-dark);
            margin-bottom: 20px;
            line-height: 1.2;
        }

        .hero-subtitle {
            font-size: 1.3rem;
            color: var(--text-color-medium);
            margin-bottom: 30px;
            font-weight: 500;
        }

        .hero-description {
            font-size: 1.1rem;
            color: var(--text-color-medium);
            line-height: 1.8;
            max-width: 800px;
            margin: 0 auto;
        }

        /* Contact Methods Section */
        .contact-methods {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 30px;
            margin-bottom: 80px;
        }

        .contact-method {
            background: white;
            padding: 35px;
            border-radius: 20px;
            text-align: center;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.08);
            border: 2px solid var(--zima-pearl);
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .contact-method::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 107, 107, 0.1), transparent);
            transition: left 0.5s ease;
        }

        .contact-method:hover::before {
            left: 100%;
        }

        .contact-method:hover {
            transform: translateY(-10px);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
            border-color: var(--primary-color);
        }

        .contact-icon {
            width: 80px;
            height: 80px;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 25px;
            font-size: 2rem;
            color: white;
            box-shadow: 0 8px 20px rgba(255, 107, 107, 0.3);
        }

        .contact-method.phone .contact-icon {
            background: linear-gradient(135deg, #28a745, #20c997);
        }

        .contact-method.email .contact-icon {
            background: linear-gradient(135deg, #007bff, #6f42c1);
        }

        .contact-method.telegram .contact-icon {
            background: linear-gradient(135deg, #0088cc, #229ed9);
        }

        .contact-method.whatsapp .contact-icon {
            background: linear-gradient(135deg, #25d366, #128c7e);
        }

        .contact-method.instagram .contact-icon {
            background: linear-gradient(135deg, #e4405f, #f77737);
        }

        .contact-method.address .contact-icon {
            background: linear-gradient(135deg, #dc3545, #fd7e14);
        }

        .contact-title {
            font-size: 1.4rem;
            font-weight: 600;
            color: var(--text-color-dark);
            margin-bottom: 15px;
        }

        .contact-info {
            color: var(--text-color-medium);
            line-height: 1.6;
            font-size: 1rem;
            margin-bottom: 20px;
        }

        .contact-link {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            color: var(--primary-color);
            text-decoration: none;
            font-weight: 600;
            padding: 10px 20px;
            border: 2px solid var(--primary-color);
            border-radius: 25px;
            transition: all 0.3s ease;
        }

        .contact-link:hover {
            background: var(--primary-color);
            color: white;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(255, 107, 107, 0.3);
        }

        /* Contact Form Section */
        .contact-form-section {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 60px;
            margin-bottom: 80px;
            align-items: start;
        }

        .form-container {
            background: white;
            padding: 40px;
            border-radius: 25px;
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.08);
            border: 3px solid var(--zima-pearl);
            position: relative;
        }

        .form-container::before {
            content: '';
            position: absolute;
            top: -10px;
            left: -10px;
            right: -10px;
            bottom: -10px;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            border-radius: 30px;
            z-index: -1;
            opacity: 0.1;
        }

        .form-title {
            font-size: 2.2rem;
            font-weight: 700;
            color: var(--text-color-dark);
            margin-bottom: 25px;
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .form-description {
            font-size: 1.1rem;
            color: var(--text-color-medium);
            margin-bottom: 30px;
            line-height: 1.6;
        }

        .contact-form {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        .form-group {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .form-label {
            font-weight: 600;
            color: var(--text-color-dark);
            font-size: 1rem;
        }

        .form-input,
        .form-select,
        .form-textarea {
            padding: 15px;
            border: 2px solid var(--zima-pearl);
            border-radius: 12px;
            font-size: 1rem;
            font-family: inherit;
            transition: all 0.3s ease;
            background: var(--zima-pearl);
        }

        .form-input:focus,
        .form-select:focus,
        .form-textarea:focus {
            outline: none;
            border-color: var(--primary-color);
            background: white;
            box-shadow: 0 0 0 3px rgba(255, 107, 107, 0.1);
        }

        .form-textarea {
            resize: vertical;
            min-height: 120px;
        }

        .form-submit {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: white;
            padding: 15px 30px;
            border: none;
            border-radius: 50px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
        }

        .form-submit:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(255, 107, 107, 0.3);
        }

        /* Info Panel */
        .info-panel {
            background: linear-gradient(135deg, white, var(--zima-blush));
            padding: 40px;
            border-radius: 25px;
            border: 2px solid var(--zima-pearl);
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.08);
        }

        .info-title {
            font-size: 2rem;
            font-weight: 700;
            color: var(--text-color-dark);
            margin-bottom: 25px;
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .info-item {
            display: flex;
            align-items: flex-start;
            gap: 15px;
            margin-bottom: 25px;
            padding: 20px;
            background: white;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
        }

        .info-icon {
            width: 50px;
            height: 50px;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 1.2rem;
            flex-shrink: 0;
        }

        .info-content h4 {
            color: var(--text-color-dark);
            font-weight: 600;
            margin-bottom: 8px;
            font-size: 1.2rem;
        }

        .info-content p {
            color: var(--text-color-medium);
            margin: 0;
            line-height: 1.6;
        }

        /* Working Hours */
        .working-hours {
            background: white;
            border-radius: 25px;
            padding: 50px;
            margin-bottom: 80px;
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.08);
            border: 3px solid var(--zima-pearl);
        }

        .hours-title {
            text-align: center;
            font-size: 2.5rem;
            font-weight: 700;
            color: var(--text-color-dark);
            margin-bottom: 50px;
            position: relative;
        }

        .hours-title::after {
            content: '';
            position: absolute;
            bottom: -10px;
            left: 50%;
            transform: translateX(-50%);
            width: 80px;
            height: 4px;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            border-radius: 2px;
        }

        .hours-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 30px;
        }

        .hours-card {
            background: var(--zima-blush);
            padding: 30px;
            border-radius: 20px;
            border: 2px solid var(--zima-pearl);
            text-align: center;
            position: relative;
            overflow: hidden;
        }

        .hours-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 5px;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        }

        .hours-card-title {
            font-size: 1.4rem;
            font-weight: 600;
            color: var(--text-color-dark);
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
        }

        .hours-list {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        .hours-list li {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 8px 0;
            border-bottom: 1px solid rgba(255, 107, 107, 0.1);
            color: var(--text-color-medium);
        }

        .hours-list li:last-child {
            border-bottom: none;
        }

        .day {
            font-weight: 600;
        }

        .time {
            color: var(--primary-color);
            font-weight: 600;
        }

        /* FAQ Section */
        .faq-section {
            margin-bottom: 80px;
        }

        .faq-title {
            text-align: center;
            font-size: 2.5rem;
            font-weight: 700;
            color: var(--text-color-dark);
            margin-bottom: 50px;
            position: relative;
        }

        .faq-title::after {
            content: '';
            position: absolute;
            bottom: -10px;
            left: 50%;
            transform: translateX(-50%);
            width: 80px;
            height: 4px;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            border-radius: 2px;
        }

        .faq-container {
            max-width: 800px;
            margin: 0 auto;
        }

        .faq-item {
            background: white;
            border-radius: 15px;
            margin-bottom: 20px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
            border: 2px solid var(--zima-pearl);
            overflow: hidden;
        }

        .faq-question {
            padding: 25px;
            background: var(--zima-blush);
            cursor: pointer;
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-weight: 600;
            color: var(--text-color-dark);
            font-size: 1.1rem;
            transition: all 0.3s ease;
        }

        .faq-question:hover {
            background: var(--primary-color);
            color: white;
        }

        .faq-question.active {
            background: var(--primary-color);
            color: white;
        }

        .faq-icon {
            font-size: 1.2rem;
            transition: transform 0.3s ease;
        }

        .faq-question.active .faq-icon {
            transform: rotate(180deg);
        }

        .faq-answer {
            padding: 0 25px;
            max-height: 0;
            overflow: hidden;
            transition: all 0.3s ease;
        }

        .faq-answer.active {
            padding: 25px;
            max-height: 200px;
        }

        .faq-answer p {
            color: var(--text-color-medium);
            line-height: 1.6;
            margin: 0;
        }

        /* Social Media Section */
        .social-section {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            border-radius: 25px;
            padding: 60px;
            text-align: center;
            color: white;
            position: relative;
            overflow: hidden;
        }

        .social-section::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: url('{% static "images/patterns/elegant-pattern.png" %}') repeat;
            opacity: 0.1;
        }

        .social-content {
            position: relative;
            z-index: 2;
        }

        .social-title {
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 20px;
        }

        .social-subtitle {
            font-size: 1.2rem;
            margin-bottom: 40px;
            opacity: 0.9;
        }

        .social-links {
            display: flex;
            gap: 20px;
            justify-content: center;
            flex-wrap: wrap;
        }

        .social-link {
            width: 60px;
            height: 60px;
            background: rgba(255, 255, 255, 0.2);
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 1.5rem;
            text-decoration: none;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
        }

        .social-link:hover {
            background: white;
            color: var(--primary-color);
            transform: translateY(-5px) scale(1.1);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
        }

        /* Responsive Design */
        @media (max-width: 1200px) {
            .contact-container {
                padding: 0 15px;
            }
        }

        @media (max-width: 768px) {
            .contact-page {
                padding: 120px 0 40px;
            }
            
            .hero-title {
                font-size: 2.2rem;
            }
            
            .hero-subtitle {
                font-size: 1.1rem;
            }
            
            .contact-methods {
                grid-template-columns: 1fr;
            }
            
            .contact-form-section {
                grid-template-columns: 1fr;
                gap: 40px;
            }
            
            .form-container,
            .info-panel,
            .working-hours {
                padding: 30px;
            }
            
            .hours-grid {
                grid-template-columns: 1fr;
            }
            
            .social-section {
                padding: 40px 30px;
            }
            
            .social-title {
                font-size: 2rem;
            }
        }

        @media (max-width: 480px) {
            .hero-title {
                font-size: 1.8rem;
            }
            
            .form-container,
            .info-panel,
            .working-hours {
                padding: 20px;
            }
            
            .contact-method {
                padding: 25px;
            }
            
            .social-section {
                padding: 30px 20px;
            }
            
            .social-links {
                gap: 15px;
            }
            
            .social-link {
                width: 50px;
                height: 50px;
                font-size: 1.2rem;
            }
        }
    </style>
{% endblock %}

{% block content %}
    <section class="contact-page">
        <div class="contact-container">
            <!-- Hero Section -->
            <div class="hero-section">
                <h1 class="hero-title">تماس با ما</h1>
                <p class="hero-subtitle">ما همیشه در خدمت شما هستیم</p>
                <p class="hero-description">
                    تیم پشتیبانی زیما آماده پاسخگویی به تمامی سوالات و درخواست‌های شما است. 
                    از طریق هر یک از راه‌های ارتباطی زیر می‌توانید با ما در تماس باشید.
                </p>
            </div>

            <!-- Contact Methods -->
            <div class="contact-methods">
                <div class="contact-method phone">
                    <div class="contact-icon">
                        <i class="fas fa-phone"></i>
                    </div>
                    <h3 class="contact-title">تماس تلفنی</h3>
                    <p class="contact-info">
                        برای مشاوره و سفارش تلفنی با ما تماس بگیرید
                    </p>
                    <a href="tel:+989123456789" class="contact-link">
                        <i class="fas fa-phone"></i>
                        ۰۹۱۲-۳۴۵-۶۷۸۹
                    </a>
                </div>

                <div class="contact-method email">
                    <div class="contact-icon">
                        <i class="fas fa-envelope"></i>
                    </div>
                    <h3 class="contact-title">ایمیل</h3>
                    <p class="contact-info">
                        برای پیگیری سفارشات و ارسال پیشنهادات
                    </p>
                    <a href="mailto:info@zima-shop.ir" class="contact-link">
                        <i class="fas fa-envelope"></i>
                        info@zima-shop.ir
                    </a>
                </div>

                <div class="contact-method telegram">
                    <div class="contact-icon">
                        <i class="fab fa-telegram"></i>
                    </div>
                    <h3 class="contact-title">تلگرام</h3>
                    <p class="contact-info">
                        پشتیبانی سریع و آنلاین از طریق تلگرام
                    </p>
                    <a href="https://t.me/zima_support" class="contact-link" target="_blank">
                        <i class="fab fa-telegram"></i>
                        @zima_support
                    </a>
                </div>

                <div class="contact-method whatsapp">
                    <div class="contact-icon">
                        <i class="fab fa-whatsapp"></i>
                    </div>
                    <h3 class="contact-title">واتساپ</h3>
                    <p class="contact-info">
                        چت مستقیم و ارسال تصاویر محصولات
                    </p>
                    <a href="https://wa.me/989123456789" class="contact-link" target="_blank">
                        <i class="fab fa-whatsapp"></i>
                        ۰۹۱۲-۳۴۵-۶۷۸۹
                    </a>
                </div>

                <div class="contact-method instagram">
                    <div class="contact-icon">
                        <i class="fab fa-instagram"></i>
                    </div>
                    <h3 class="contact-title">اینستاگرام</h3>
                    <p class="contact-info">
                        دنبال کردن محصولات جدید و تخفیف‌ها
                    </p>
                    <a href="https://instagram.com/zima.official" class="contact-link" target="_blank">
                        <i class="fab fa-instagram"></i>
                        @zima.official
                    </a>
                </div>

                <div class="contact-method address">
                    <div class="contact-icon">
                        <i class="fas fa-map-marker-alt"></i>
                    </div>
                    <h3 class="contact-title">آدرس فروشگاه</h3>
                    <p class="contact-info">
                        مراجعه حضوری برای مشاهده محصولات
                    </p>
                    <a href="#" class="contact-link">
                        <i class="fas fa-map-marker-alt"></i>
                        مشهد، خیابان امام رضا
                    </a>
                </div>
            </div>

            <!-- Contact Form Section -->
            <div class="contact-form-section">
                <div class="form-container">
                    <h2 class="form-title">
                        <i class="fas fa-paper-plane"></i>
                        ارسال پیام
                    </h2>
                    <p class="form-description">
                        فرم زیر را پر کنید تا در اسرع وقت با شما تماس بگیریم. تمامی پیام‌ها در کمتر از 24 ساعت پاسخ داده می‌شوند.
                    </p>
                    
                    <form class="contact-form" method="post">
                        {% csrf_token %}
                        <div class="form-group">
                            <label for="name" class="form-label">نام و نام خانوادگی *</label>
                            <input type="text" id="name" name="name" class="form-input" required>
                        </div>

                        <div class="form-group">
                            <label for="phone" class="form-label">شماره تماس *</label>
                            <input type="tel" id="phone" name="phone" class="form-input" required>
                        </div>

                        <div class="form-group">
                            <label for="email" class="form-label">ایمیل</label>
                            <input type="email" id="email" name="email" class="form-input">
                        </div>

                        <div class="form-group">
                            <label for="subject" class="form-label">موضوع پیام *</label>
                            <select id="subject" name="subject" class="form-select" required>
                                <option value="">انتخاب کنید</option>
                                <option value="order">سفارش و خرید</option>
                                <option value="support">پشتیبانی</option>
                                <option value="complaint">شکایت</option>
                                <option value="suggestion">پیشنهاد</option>
                                <option value="cooperation">همکاری</option>
                                <option value="other">سایر موارد</option>
                            </select>
                        </div>

                        <div class="form-group">
                            <label for="message" class="form-label">پیام شما *</label>
                            <textarea id="message" name="message" class="form-textarea" required placeholder="پیام خود را اینجا بنویسید..."></textarea>
                        </div>

                        <button type="submit" class="form-submit">
                            <i class="fas fa-paper-plane"></i>
                            ارسال پیام
                        </button>
                    </form>
                </div>

                <div class="info-panel">
                    <h2 class="info-title">
                        <i class="fas fa-info-circle"></i>
                        اطلاعات تماس
                    </h2>
                    
                    <div class="info-item">
                        <div class="info-icon">
                            <i class="fas fa-clock"></i>
                        </div>
                        <div class="info-content">
                            <h4>ساعات پاسخگویی</h4>
                            <p>شنبه تا پنج‌شنبه: ۹:۰۰ تا ۲۱:۰۰<br>جمعه: ۱۴:۰۰ تا ۲۱:۰۰</p>
                        </div>
                    </div>

                    <div class="info-item">
                        <div class="info-icon">
                            <i class="fas fa-shipping-fast"></i>
                        </div>
                        <div class="info-content">
                            <h4>ارسال سفارشات</h4>
                            <p>ارسال رایگان برای خرید بالای ۳۰۰ هزار تومان<br>ارسال به تمام نقاط کشور</p>
                        </div>
                    </div>

                    <div class="info-item">
                        <div class="info-icon">
                            <i class="fas fa-undo"></i>
                        </div>
                        <div class="info-content">
                            <h4>ضمانت بازگشت</h4>
                            <p>۷ روز ضمانت بازگشت کالا<br>بدون هیچ‌گونه هزینه اضافی</p>
                        </div>
                    </div>

                    <div class="info-item">
                        <div class="info-icon">
                            <i class="fas fa-award"></i>
                        </div>
                        <div class="info-content">
                            <h4>کیفیت تضمینی</h4>
                            <p>۱۰۰٪ اصالت محصولات<br>کنترل کیفیت دقیق</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Working Hours -->
            <div class="working-hours">
                <h2 class="hours-title">ساعات کاری</h2>
                <div class="hours-grid">
                    <div class="hours-card">
                        <h3 class="hours-card-title">
                            <i class="fas fa-phone"></i>
                            پشتیبانی تلفنی
                        </h3>
                        <ul class="hours-list">
                            <li><span class="day">شنبه تا چهارشنبه</span> <span class="time">۹:۰۰ - ۲۱:۰۰</span></li>
                            <li><span class="day">پنج‌شنبه</span> <span class="time">۹:۰۰ - ۱۸:۰۰</span></li>
                            <li><span class="day">جمعه</span> <span class="time">۱۴:۰۰ - ۲۱:۰۰</span></li>
                        </ul>
                    </div>

                    <div class="hours-card">
                        <h3 class="hours-card-title">
                            <i class="fas fa-comments"></i>
                            پشتیبانی آنلاین
                        </h3>
                        <ul class="hours-list">
                            <li><span class="day">تلگرام</span> <span class="time">۲۴ ساعته</span></li>
                            <li><span class="day">واتساپ</span> <span class="time">۸:۰۰ - ۲۳:۰۰</span></li>
                            <li><span class="day">اینستاگرام</span> <span class="time">۹:۰۰ - ۲۲:۰۰</span></li>
                        </ul>
                    </div>

                    <div class="hours-card">
                        <h3 class="hours-card-title">
                            <i class="fas fa-store"></i>
                            فروشگاه حضوری
                        </h3>
                        <ul class="hours-list">
                            <li><span class="day">شنبه تا چهارشنبه</span> <span class="time">۱۰:۰۰ - ۲۰:۰۰</span></li>
                            <li><span class="day">پنج‌شنبه</span> <span class="time">۱۰:۰۰ - ۱۷:۰۰</span></li>
                            <li><span class="day">جمعه</span> <span class="time">تعطیل</span></li>
                        </ul>
                    </div>
                </div>
            </div>

            <!-- FAQ Section -->
            <div class="faq-section">
                <h2 class="faq-title">سوالات متداول</h2>
                <div class="faq-container">
                    <div class="faq-item">
                        <div class="faq-question">
                            <span>چگونه می‌توانم سفارش دهم؟</span>
                            <i class="fas fa-chevron-down faq-icon"></i>
                        </div>
                        <div class="faq-answer">
                            <p>شما می‌توانید از طریق سایت، تماس تلفنی یا پیام در شبکه‌های اجتماعی سفارش خود را ثبت کنید. تمامی محصولات با عکس و توضیحات کامل در سایت موجود است.</p>
                        </div>
                    </div>

                    <div class="faq-item">
                        <div class="faq-question">
                            <span>زمان ارسال سفارشات چقدر است؟</span>
                            <i class="fas fa-chevron-down faq-icon"></i>
                        </div>
                        <div class="faq-answer">
                            <p>برای شهر مشهد ۱-۲ روز کاری و برای سایر شهرها ۲-۵ روز کاری. سفارشات روز شنبه تا چهارشنبه تا ساعت ۱۶ همان روز آماده ارسال می‌شود.</p>
                        </div>
                    </div>

                    <div class="faq-item">
                        <div class="faq-question">
                            <span>آیا امکان تعویض یا بازگشت کالا وجود دارد؟</span>
                            <i class="fas fa-chevron-down faq-icon"></i>
                        </div>
                        <div class="faq-answer">
                            <p>بله، تا ۷ روز پس از دریافت کالا امکان بازگشت یا تعویض وجود دارد. کالا باید در شرایط اولیه و با بسته‌بندی سالم باشد.</p>
                        </div>
                    </div>

                    <div class="faq-item">
                        <div class="faq-question">
                            <span>هزینه ارسال چقدر است؟</span>
                            <i class="fas fa-chevron-down faq-icon"></i>
                        </div>
                        <div class="faq-answer">
                            <p>برای خرید بالای ۳۰۰ هزار تومان ارسال رایگان است. برای مبالغ کمتر، هزینه ارسال ۳۰ هزار تومان محاسبه می‌شود.</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Social Media Section -->
            <div class="social-section">
                <div class="social-content">
                    <h2 class="social-title">ما را دنبال کنید</h2>
                    <p class="social-subtitle">از آخرین محصولات و تخفیف‌های ویژه مطلع شوید</p>
                    <div class="social-links">
                        <a href="https://t.me/zima_channel" class="social-link" target="_blank" title="کانال تلگرام">
                            <i class="fab fa-telegram"></i>
                        </a>
                        <a href="https://wa.me/989123456789" class="social-link" target="_blank" title="واتساپ">
                            <i class="fab fa-whatsapp"></i>
                        </a>
                        <a href="https://instagram.com/zima.official" class="social-link" target="_blank" title="اینستاگرام">
                            <i class="fab fa-instagram"></i>
                        </a>
                        <a href="tel:+989123456789" class="social-link" title="تماس تلفنی">
                            <i class="fas fa-phone"></i>
                        </a>
                        <a href="mailto:info@zima-shop.ir" class="social-link" title="ایمیل">
                            <i class="fas fa-envelope"></i>
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </section>
{% endblock %}

{% block extra_js %}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // FAQ Toggle
            const faqQuestions = document.querySelectorAll('.faq-question');
            
            faqQuestions.forEach(question => {
                question.addEventListener('click', function() {
                    const faqItem = this.parentNode;
                    const answer = faqItem.querySelector('.faq-answer');
                    const isActive = this.classList.contains('active');
                    
                    // Close all other FAQ items
                    faqQuestions.forEach(q => {
                        q.classList.remove('active');
                        q.parentNode.querySelector('.faq-answer').classList.remove('active');
                    });
                    
                    // Toggle current item
                    if (!isActive) {
                        this.classList.add('active');
                        answer.classList.add('active');
                    }
                });
            });

            // Form Submission
            const contactForm = document.querySelector('.contact-form');
            if (contactForm) {
                contactForm.addEventListener('submit', function(e) {
                    e.preventDefault();
                    
                    // Get form data
                    const formData = new FormData(this);
                    const submitBtn = this.querySelector('.form-submit');
                    const originalText = submitBtn.innerHTML;
                    
                    // Show loading state
                    submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> در حال ارسال...';
                    submitBtn.disabled = true;
                    
                    // Simulate form submission (replace with actual AJAX call)
                    setTimeout(() => {
                        // Show success message
                        alert('پیام شما با موفقیت ارسال شد. به زودی با شما تماس می‌گیریم.');
                        
                        // Reset form
                        this.reset();
                        
                        // Reset button
                        submitBtn.innerHTML = originalText;
                        submitBtn.disabled = false;
                    }, 2000);
                });
            }

            // Intersection Observer for animations
            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.style.opacity = '1';
                        entry.target.style.transform = 'translateY(0)';
                    }
                });
            }, { threshold: 0.1 });

            // Observe elements for animation
            document.querySelectorAll('.contact-method, .info-item, .hours-card, .faq-item').forEach(el => {
                el.style.opacity = '0';
                el.style.transform = 'translateY(30px)';
                el.style.transition = 'all 0.6s ease';
                observer.observe(el);
            });

            // Phone number formatting
            const phoneInputs = document.querySelectorAll('input[type="tel"]');
            phoneInputs.forEach(input => {
                input.addEventListener('input', function(e) {
                    let value = e.target.value.replace(/\D/g, '');
                    if (value.length > 11) {
                        value = value.substring(0, 11);
                    }
                    e.target.value = value;
                });
            });

            // Add parallax effect to hero section
            window.addEventListener('scroll', () => {
                const scrolled = window.pageYOffset;
                const hero = document.querySelector('.hero-section');
                if (hero) {
                    hero.style.transform = `translateY(${scrolled * 0.1}px)`;
                }
            });
        });
    </script>
{% endblock %}

====== FILE: templates/pages/home.html ======

{% extends "base/base.html" %}
{% load static %}

{% block title %}زیما | زیبایی خصوصی شما{% endblock %}

{% block content %}
<!-- Hero Section -->
<section class="hero">
    <div class="hero-shapes">
        <div class="shape"></div>
        <div class="shape"></div>
        <div class="shape"></div>
    </div>

    <div class="hero-container">
        <div class="hero-content">
            <div class="hero-badge">
                <i class="fas fa-sparkles"></i>
                کالکشن جدید زمستان
            </div>
            <h1 class="hero-title">
                زیبایی <span class="highlight">خصوصی</span><br>
                شما را کشف کنید
            </h1>
            <p class="hero-description">
                مجموعه‌ای منحصربه‌فرد از لباس‌های زیر که احساس زیبایی و اعتماد به نفس را در شما بیدار می‌کند
            </p>
            <div class="hero-cta">
                <a href="{% url 'products:list' %}" class="btn btn-primary">
                    <span>کشف کالکشن</span>
                    <i class="fas fa-arrow-left"></i>
                </a>
                <a href="#" class="btn btn-secondary">
                    <i class="fas fa-play"></i>
                    <span>تماشای ویدیو</span>
                </a>
            </div>
        </div>

        <div class="hero-image">
            {# شما باید این تصویر را در static/images/zima_theme/ قرار دهید #}
            <img src="{% static 'images/zima.jpg' %}" alt="کالکشن زیما" class="hero-img">
            <div class="floating-elements">
                <div class="floating-element">
                    <i class="fas fa-star" style="color: var(--gold-accent); font-size: 1.5rem;"></i>
                </div>
                <div class="floating-element">
                    <i class="fas fa-heart" style="color: var(--coral); font-size: 1.2rem;"></i>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Collections Section -->
<section class="collections fade-in">
    <div class="section-header">        <div class="section-badge">کالکشن‌های ویژه</div>
        <h2 class="section-title">
            سه دنیای <span class="script">زیبایی</span>
        </h2>
        <p class="section-description">
            هر کالکشن داستانی از زیبایی، راحتی و اعتماد به نفس را روایت می‌کند
        </p>
    </div>

    <div class="collections-grid">
        {# توجه: این بخش به بک‌اند متصل شده. شما باید دسته‌بندی‌هایی با این اسلاگ‌ها بسازید #}
        <div class="collection-card fade-in">
            <a href="{% url 'products:category_list' 'classic-chic' %}" class="text-decoration-none">
                <img src="{% static 'images/zima_theme/collection-classic.jpg' %}" alt="کلاسیک" class="collection-image">
                <div class="collection-content">
                    <h3 class="collection-title">کلاسیک و شیک</h3>
                    <p class="collection-description">مجموعه‌ای از طراحی‌های کلاسیک که هرگز از مد نمی‌افتد</p>
                    <div class="collection-link">
                        مشاهده کالکشن <i class="fas fa-arrow-left"></i>
                    </div>
                </div>
            </a>
        </div>

        <div class="collection-card fade-in">
            <a href="{% url 'products:category_list' 'romantic-beautiful' %}" class="text-decoration-none">
                <img src="{% static 'images/zima_theme/collection-romantic.jpg' %}" alt="رمانتیک" class="collection-image">
                <div class="collection-content">
                    <h3 class="collection-title">رمانتیک و زیبا</h3>
                    <p class="collection-description">طراحی‌های رمانتیک برای لحظات خاص زندگی شما</p>
                    <div class="collection-link">
                        مشاهده کالکشن <i class="fas fa-arrow-left"></i>
                    </div>
                </div>
            </a>
        </div>

        <div class="collection-card fade-in">
            <a href="{% url 'products:category_list' 'sporty-comfortable' %}" class="text-decoration-none">
                <img src="{% static 'images/zima_theme/collection-sporty.jpg' %}" alt="اسپرت" class="collection-image">
                <div class="collection-content">
                    <h3 class="collection-title">اسپرت و راحت</h3>
                    <p class="collection-description">راحتی و سبکی برای زندگی پر انرژی شما</p>
                    <div class="collection-link">
                        مشاهده کالکشن <i class="fas fa-arrow-left"></i>
                    </div>
                </div>
            </a>
        </div>
    </div>
</section>

<!-- Featured Products -->
<section class="featured fade-in">
    <div class="products-container">
        <div class="section-header">
            <div class="section-badge">محبوب‌ترین‌ها</div>
            <h2 class="section-title">
                پرفروش‌ترین <span class="script">محصولات</span>
            </h2>
            <p class="section-description">
                محصولاتی که بیشترین رضایت را از مشتریان عزیز دریافت کرده‌اند
            </p>
        </div>
        <div class="products-grid">
            {% for product in featured_products|slice:":8" %} {# نمایش تا 8 محصول ویژه #}
            <div class="product-card fade-in">
                <div class="product-image-container">
                    <div class="product-badge">
                        {% if product.is_new %}
                        <span class="product-badge new">جدید</span>
                        {% endif %}
                        {% if product.has_discount %}
                        <span class="product-badge sale">{{ product.discount_percent }}% تخفیف</span>
                        {% endif %}
                        {% if product.is_featured %}
                        <span class="product-badge">ویژه</span>
                        {% endif %}                    </div>
                    <div class="product-favorite" onclick="toggleWishlist(this, '{{ product.id }}')">
                        <i class="far fa-heart"></i>
                    </div>
                    {% with image=product.get_main_image %}
                    <img src="{% if image %}{{ image.image.url }}{% else %}{% static 'images/zima_theme/product-placeholder.jpg' %}{% endif %}" alt="{{ product.name }}" class="product-image">
                    {% endwith %}
                </div>
                <div class="product-info">
                    <div class="product-brand">{{ product.brand }}</div>
                    <h3 class="product-name">{{ product.name }}</h3>
                    <div class="product-rating">
                        <div class="stars">
                            {% with rating=product.get_average_rating %}
                            {% for i in "12345" %}
                            <i class="fa{% if forloop.counter <= rating %}s{% else %}r{% endif %} fa-star star"></i>
                            {% endfor %}
                            {% endwith %}
                        </div>
                        <span class="rating-text">({{ product.get_rating_count }} نظر)</span>
                    </div>
                    <div class="product-price">
                        {% if product.has_discount %}
                        <span style="text-decoration: line-through; color: var(--warm-gray); font-size: 1rem; margin-left: 10px;">{{ product.price|floatformat:0 }}</span>                        {{ product.get_discount_price|floatformat:0 }} تومان
                        {% else %}
                        {{ product.price|floatformat:0 }} تومان
                        {% endif %}
                    </div>
                    <div class="product-actions">
                        <button class="btn-add-cart" onclick="addToCartHome('{{ product.id }}')">افزودن به سبد</button>
                        <a href="{{ product.get_absolute_url }}" class="btn-quick-view">
                            <i class="fas fa-eye"></i>
                        </a>
                    </div>
                </div>
            </div>
            {% empty %}
            <div class="empty-state">
                <i class="fas fa-box-open"></i>
                <h3>محصول ویژه‌ای برای نمایش وجود ندارد.</h3>
                <p>به زودی محصولات جدیدی اضافه خواهد شد.</p>            </div>
            {% endfor %}
        </div>
    </div>
</section>

<!-- Testimonials -->
<section class="testimonials fade-in">
    <div class="testimonials-container">
        <div class="section-header">
            <div class="section-badge">نظرات مشتریان</div>
            <h2 class="section-title">
                آنچه <span class="script">مشتریان</span> می‌گویند
            </h2>
        </div>
        <div class="testimonials-slider">
            <div class="testimonial-card">
                <p class="testimonial-text">کیفیت محصولات زیما واقعاً فوق‌العاده است. راحتی و زیبایی در کنار هم. من عاشق این برند شدم!</p>
                <div class="testimonial-author">
                    <div class="author-avatar">س</div>
                    <div class="author-info">
                        <h4>سارا احمدی</h4>
                        <p>مشتری وفادار</p>
                    </div>
                </div>
            </div>
            <div class="testimonial-card">
                <p class="testimonial-text">خرید من از زیما تجربه‌ای بی‌نظیر بود. از کیفیت تا خدمات پس از فروش، همه چیز عالی!</p>
                <div class="testimonial-author">
                    <div class="author-avatar">م</div>
                    <div class="author-info">
                        <h4>مریم نوری</h4>
                        <p>مشتری جدید</p>
                    </div>
                </div>
            </div>
            <div class="testimonial-card">
                <p class="testimonial-text">پس از سال‌ها جستجو، بالاخره برندی پیدا کردم که هم راحت باشد هم زیبا. ممنون زیما!</p>
                <div class="testimonial-author">
                    <div class="author-avatar">ن</div>
                    <div class="author-info">
                        <h4>نیلوفر رضایی</h4>
                        <p>مشتری راضی</p>
                    </div>
                </div>            </div>
        </div>
    </div>
</section>
{% endblock %}

{% block extra_js %}
<script>
    // تابع افزودن به سبد خرید برای صفحه اصلی (فقط نمایش Toast)
    function addToCartHome(productId) {
        showLoading();
        // در اینجا می‌توانید یک درخواست AJAX واقعی برای افزودن به سبد خرید ارسال کنید.
        // برای سادگی فعلا فقط یک Toast نمایش داده می‌شود.
        setTimeout(() => {
            hideLoading();
            showToast('محصول به سبد خرید اضافه شد', 'check');
            // در اینجا می‌توانید تعداد آیتم‌های سبد خرید در هدر را به‌روز کنید
            // مثلاً: updateCartBadge();
        }, 1000);
    }

    // Testimonials Auto Scroll
    const testimonialSlider = document.querySelector('.testimonials-slider');
    if (testimonialSlider) {
        let testimonialScrollAmount = 0;
        setInterval(() => {
            // عرض هر کارت + فاصله بین آن‌ها (350px + 40px)
            testimonialScrollAmount += 390;
            if (testimonialScrollAmount >= testimonialSlider.scrollWidth - testimonialSlider.clientWidth) {
                testimonialScrollAmount = 0; // بازگشت به ابتدا
            }
            testimonialSlider.scrollTo({
                left: testimonialScrollAmount,
                behavior: 'smooth'
            });
        }, 4000);
    }
</script>
{% endblock %}

====== FILE: templates/pages/about.html ======

{% extends 'base/base.html' %}
{% load static %}

{% block title %}درباره ما | زیما - زیبایی و اعتماد{% endblock %}

{% block extra_css %}
    <style>
        :root {
            --primary-color: #ff6b6b;
            --secondary-color: #feca57;
            --text-color-dark: #2c3e50;
            --text-color-medium: #5a6c7d;
            --text-color-light: #95a5a6;
            --zima-blush: #fff5f5;
            --zima-pearl: #f8f9fa;
            --zima-champagne: #fef9e7;
            --success-color: #28a745;
            --danger-color: #dc3545;
            --warning-color: #ffc107;
            --info-color: #17a2b8;
        }

        .about-page {
            padding: 140px 0 60px;
            background: linear-gradient(135deg, var(--zima-blush), var(--zima-champagne));
            min-height: 100vh;
            position: relative;
            overflow: hidden;
        }

        .about-page::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: url('{% static "images/patterns/elegant-pattern.png" %}') repeat;
            opacity: 0.02;
            pointer-events: none;
        }

        .about-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 20px;
            position: relative;
            z-index: 2;
        }

        /* Hero Section */
        .hero-section {
            text-align: center;
            margin-bottom: 80px;
            position: relative;
        }

        .hero-section::before {
            content: '';
            position: absolute;
            top: -50px;
            left: 50%;
            transform: translateX(-50%);
            width: 200px;
            height: 200px;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            border-radius: 50%;
            opacity: 0.1;
            z-index: -1;
        }

        .hero-title {
            font-size: 3rem;
            font-weight: 800;
            color: var(--text-color-dark);
            margin-bottom: 20px;
            line-height: 1.2;
        }

        .hero-subtitle {
            font-size: 1.3rem;
            color: var(--text-color-medium);
            margin-bottom: 30px;
            font-weight: 500;
        }

        .hero-description {
            font-size: 1.1rem;
            color: var(--text-color-medium);
            line-height: 1.8;
            max-width: 800px;
            margin: 0 auto;
        }

        /* Brand Story Section */
        .brand-story {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 60px;
            margin-bottom: 80px;
            align-items: center;
        }

        .story-content {
            background: white;
            padding: 40px;
            border-radius: 25px;
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.08);
            border: 3px solid var(--zima-pearl);
            position: relative;
        }

        .story-content::before {
            content: '';
            position: absolute;
            top: -10px;
            left: -10px;
            right: -10px;
            bottom: -10px;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            border-radius: 30px;
            z-index: -1;
            opacity: 0.1;
        }

        .story-title {
            font-size: 2.2rem;
            font-weight: 700;
            color: var(--primary-color);
            margin-bottom: 25px;
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .story-text {
            font-size: 1.1rem;
            line-height: 1.8;
            color: var(--text-color-medium);
            margin-bottom: 20px;
        }

        .story-highlight {
            background: var(--zima-blush);
            padding: 20px;
            border-radius: 15px;
            border-left: 5px solid var(--primary-color);
            margin: 25px 0;
        }

        .story-highlight p {
            margin: 0;
            font-weight: 600;
            color: var(--text-color-dark);
            font-size: 1.1rem;
        }

        .story-image {
            position: relative;
            border-radius: 25px;
            overflow: hidden;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
        }

        .story-image img {
            width: 100%;
            height: 500px;
            object-fit: cover;
            transition: transform 0.5s ease;
        }

        .story-image:hover img {
            transform: scale(1.05);
        }

        .image-overlay {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            background: linear-gradient(transparent, rgba(0,0,0,0.7));
            color: white;
            padding: 30px;
            text-align: center;
        }

        .image-overlay h3 {
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 10px;
        }

        /* Features Section */
        .features-section {
            margin-bottom: 80px;
        }

        .section-title {
            text-align: center;
            font-size: 2.5rem;
            font-weight: 700;
            color: var(--text-color-dark);
            margin-bottom: 50px;
            position: relative;
        }

        .section-title::after {
            content: '';
            position: absolute;
            bottom: -10px;
            left: 50%;
            transform: translateX(-50%);
            width: 80px;
            height: 4px;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            border-radius: 2px;
        }

        .features-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 30px;
        }

        .feature-card {
            background: white;
            padding: 35px;
            border-radius: 20px;
            text-align: center;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.08);
            border: 2px solid var(--zima-pearl);
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .feature-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 107, 107, 0.1), transparent);
            transition: left 0.5s ease;
        }

        .feature-card:hover::before {
            left: 100%;
        }

        .feature-card:hover {
            transform: translateY(-10px);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
            border-color: var(--primary-color);
        }

        .feature-icon {
            width: 80px;
            height: 80px;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 25px;
            font-size: 2rem;
            color: white;
            box-shadow: 0 8px 20px rgba(255, 107, 107, 0.3);
        }

        .feature-title {
            font-size: 1.4rem;
            font-weight: 600;
            color: var(--text-color-dark);
            margin-bottom: 15px;
        }

        .feature-description {
            color: var(--text-color-medium);
            line-height: 1.6;
            font-size: 1rem;
        }

        /* Statistics Section */
        .stats-section {
            background: white;
            border-radius: 25px;
            padding: 50px;
            margin-bottom: 80px;
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.08);
            border: 3px solid var(--zima-pearl);
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 40px;
        }

        .stat-item {
            text-align: center;
            position: relative;
        }

        .stat-number {
            font-size: 3rem;
            font-weight: 800;
            color: var(--primary-color);
            display: block;
            margin-bottom: 10px;
        }

        .stat-label {
            font-size: 1.1rem;
            color: var(--text-color-medium);
            font-weight: 600;
        }

        .stat-item::after {
            content: '';
            position: absolute;
            bottom: -20px;
            left: 50%;
            transform: translateX(-50%);
            width: 50px;
            height: 3px;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            border-radius: 2px;
        }

        /* Location Section */
        .location-section {
            background: white;
            border-radius: 25px;
            padding: 50px;
            margin-bottom: 80px;
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.08);
            border: 3px solid var(--zima-pearl);
        }

        .location-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 50px;
            align-items: center;
        }

        .location-content h2 {
            font-size: 2.2rem;
            font-weight: 700;
            color: var(--text-color-dark);
            margin-bottom: 25px;
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .location-item {
            display: flex;
            align-items: flex-start;
            gap: 15px;
            margin-bottom: 25px;
            padding: 20px;
            background: var(--zima-blush);
            border-radius: 15px;
            border-left: 5px solid var(--primary-color);
        }

        .location-icon {
            width: 50px;
            height: 50px;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 1.2rem;
            flex-shrink: 0;
        }

        .location-text h4 {
            color: var(--text-color-dark);
            font-weight: 600;
            margin-bottom: 8px;
            font-size: 1.2rem;
        }

        .location-text p {
            color: var(--text-color-medium);
            margin: 0;
            line-height: 1.6;
        }

        .map-container {
            position: relative;
            border-radius: 20px;
            overflow: hidden;
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
            background: var(--zima-pearl);
            height: 400px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .map-placeholder {
            text-align: center;
            color: var(--text-color-medium);
        }

        .map-placeholder i {
            font-size: 4rem;
            margin-bottom: 20px;
            color: var(--primary-color);
        }

        /* Values Section */
        .values-section {
            margin-bottom: 80px;
        }

        .values-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 30px;
        }

        .value-card {
            background: linear-gradient(135deg, white, var(--zima-blush));
            padding: 40px;
            border-radius: 20px;
            border: 2px solid var(--zima-pearl);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.08);
            position: relative;
            overflow: hidden;
            transition: all 0.3s ease;
        }

        .value-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 5px;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        }

        .value-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.12);
        }

        .value-header {
            display: flex;
            align-items: center;
            gap: 15px;
            margin-bottom: 20px;
        }

        .value-icon {
            width: 60px;
            height: 60px;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 1.5rem;
        }

        .value-title {
            font-size: 1.4rem;
            font-weight: 600;
            color: var(--text-color-dark);
        }

        .value-description {
            color: var(--text-color-medium);
            line-height: 1.7;
            font-size: 1rem;
        }

        /* CTA Section */
        .cta-section {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            border-radius: 25px;
            padding: 60px;
            text-align: center;
            color: white;
            position: relative;
            overflow: hidden;
        }

        .cta-section::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: url('{% static "images/patterns/elegant-pattern.png" %}') repeat;
            opacity: 0.1;
        }

        .cta-content {
            position: relative;
            z-index: 2;
        }

        .cta-title {
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 20px;
        }

        .cta-subtitle {
            font-size: 1.2rem;
            margin-bottom: 30px;
            opacity: 0.9;
        }

        .cta-buttons {
            display: flex;
            gap: 20px;
            justify-content: center;
            flex-wrap: wrap;
        }

        .cta-btn {
            background: white;
            color: var(--primary-color);
            padding: 15px 30px;
            border-radius: 50px;
            text-decoration: none;
            font-weight: 600;
            font-size: 1rem;
            transition: all 0.3s ease;
            border: 2px solid white;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .cta-btn:hover {
            background: transparent;
            color: white;
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
        }

        .cta-btn.secondary {
            background: transparent;
            color: white;
            border: 2px solid white;
        }

        .cta-btn.secondary:hover {
            background: white;
            color: var(--primary-color);
        }

        /* Timeline Section */
        .timeline-section {
            margin-bottom: 80px;
        }

        .timeline {
            position: relative;
            max-width: 800px;
            margin: 0 auto;
        }

        .timeline::before {
            content: '';
            position: absolute;
            top: 0;
            left: 50%;
            transform: translateX(-50%);
            width: 4px;
            height: 100%;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            border-radius: 2px;
        }

        .timeline-item {
            position: relative;
            margin-bottom: 50px;
        }

        .timeline-item:nth-child(odd) .timeline-content {
            margin-right: 50%;
            padding-right: 30px;
            text-align: right;
        }

        .timeline-item:nth-child(even) .timeline-content {
            margin-left: 50%;
            padding-left: 30px;
        }

        .timeline-marker {
            position: absolute;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            width: 20px;
            height: 20px;
            background: var(--primary-color);
            border: 4px solid white;
            border-radius: 50%;
            box-shadow: 0 0 0 4px var(--primary-color);
        }

        .timeline-content {
            background: white;
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
            border: 2px solid var(--zima-pearl);
        }

        .timeline-date {
            color: var(--primary-color);
            font-weight: 600;
            font-size: 0.9rem;
            margin-bottom: 10px;
        }

        .timeline-title {
            font-size: 1.3rem;
            font-weight: 600;
            color: var(--text-color-dark);
            margin-bottom: 10px;
        }

        .timeline-description {
            color: var(--text-color-medium);
            line-height: 1.6;
        }

        /* Responsive Design */
        @media (max-width: 1200px) {
            .about-container {
                padding: 0 15px;
            }
        }

        @media (max-width: 768px) {
            .about-page {
                padding: 120px 0 40px;
            }
            
            .hero-title {
                font-size: 2.2rem;
            }
            
            .hero-subtitle {
                font-size: 1.1rem;
            }
            
            .brand-story {
                grid-template-columns: 1fr;
                gap: 40px;
            }
            
            .story-content {
                padding: 30px;
            }
            
            .story-title {
                font-size: 1.8rem;
            }
            
            .features-grid {
                grid-template-columns: 1fr;
            }
            
            .stats-section {
                padding: 30px;
            }
            
            .stats-grid {
                grid-template-columns: repeat(2, 1fr);
                gap: 30px;
            }
            
            .stat-number {
                font-size: 2.2rem;
            }
            
            .location-grid {
                grid-template-columns: 1fr;
                gap: 30px;
            }
            
            .values-grid {
                grid-template-columns: 1fr;
            }
            
            .cta-section {
                padding: 40px 30px;
            }
            
            .cta-title {
                font-size: 2rem;
            }
            
            .cta-buttons {
                flex-direction: column;
                align-items: center;
            }
            
            .timeline::before {
                left: 30px;
            }
            
            .timeline-item:nth-child(odd) .timeline-content,
            .timeline-item:nth-child(even) .timeline-content {
                margin: 0;
                margin-left: 60px;
                padding: 25px;
                text-align: right;
            }
            
            .timeline-marker {
                left: 30px;
            }
        }

        @media (max-width: 480px) {
            .hero-title {
                font-size: 1.8rem;
            }
            
            .section-title {
                font-size: 2rem;
            }
            
            .story-content,
            .stats-section,
            .location-section {
                padding: 20px;
            }
            
            .feature-card {
                padding: 25px;
            }
            
            .stats-grid {
                grid-template-columns: 1fr;
            }
            
            .cta-section {
                padding: 30px 20px;
            }
        }
    </style>
{% endblock %}

{% block content %}
    <section class="about-page">
        <div class="about-container">
            <!-- Hero Section -->
            <div class="hero-section">
                <h1 class="hero-title">درباره زیما</h1>
                <p class="hero-subtitle">جایی که زیبایی و کیفیت در کنار هم قرار می‌گیرند</p>
                <p class="hero-description">
                    زیما با هدف ارائه بهترین محصولات زیر پوش زنانه و لباس خواب با کیفیت بالا و طراحی منحصر به فرد آغاز شد. 
                    ما معتقدیم که هر زنی شایسته احساس زیبایی و راحتی در تمام لحظات روز و شب است.
                </p>
            </div>

            <!-- Brand Story Section -->
            <div class="brand-story">
                <div class="story-content">
                    <h2 class="story-title">
                        <i class="fas fa-heart"></i>
                        داستان ما
                    </h2>
                    <p class="story-text">
                        زیما بیش از دو سال پیش با عشق و علاقه به زیبایی و راحتی زنان ایرانی شروع شد. ما باور داریم که لباس خواب و زیر پوش نه تنها باید زیبا باشد، بلکه باید حس اعتماد به نفس و آرامش را نیز به همراه داشته باشد.
                    </p>
                    <div class="story-highlight">
                        <p>
                            <i class="fas fa-quote-left" style="color: var(--primary-color); margin-left: 10px;"></i>
                            "زیبایی حقیقی از درون شروع می‌شود و ما اینجا هستیم تا آن را به بیرون منتقل کنیم"
                        </p>
                    </div>
                    <p class="story-text">
                        تیم ما متشکل از طراحان مجرب و متخصصانی است که با دقت و توجه به جزئیات، محصولاتی با کیفیت بالا و طراحی‌های منحصر به فرد ارائه می‌دهند. هر محصول زیما نتیجه ساعت‌ها تحقیق و توجه به نیازهای واقعی زنان ایرانی است.
                    </p>
                </div>
                
                <div class="story-image">
                    <img src="{% static 'images/about/zima-story.jpg' %}" alt="داستان زیما" loading="lazy">
                    <div class="image-overlay">
                        <h3>بیش از دو سال تجربه</h3>
                        <p>در خدمت زیبایی و راحتی شما</p>
                    </div>
                </div>
            </div>

            <!-- Features Section -->
            <div class="features-section">
                <h2 class="section-title">چرا زیما؟</h2>
                <div class="features-grid">
                    <div class="feature-card">
                        <div class="feature-icon">
                            <i class="fas fa-gem"></i>
                        </div>
                        <h3 class="feature-title">کیفیت برتر</h3>
                        <p class="feature-description">
                            تمامی محصولات ما از بهترین پارچه‌ها و مواد اولیه تهیه شده و استانداردهای کیفی بالایی دارند.
                        </p>
                    </div>

                    <div class="feature-card">
                        <div class="feature-icon">
                            <i class="fas fa-palette"></i>
                        </div>
                        <h3 class="feature-title">طراحی منحصر به فرد</h3>
                        <p class="feature-description">
                            طراحی‌های ما ترکیبی از مد روز و سلیقه ایرانی است که هم زیبا و هم راحت هستند.
                        </p>
                    </div>

                    <div class="feature-card">
                        <div class="feature-icon">
                            <i class="fas fa-shield-alt"></i>
                        </div>
                        <h3 class="feature-title">ضمانت کیفیت</h3>
                        <p class="feature-description">
                            ما به کیفیت محصولاتمان اطمینان کامل داریم و ضمانت بازگشت وجه را ارائه می‌دهیم.
                        </p>
                    </div>

                    <div class="feature-card">
                        <div class="feature-icon">
                            <i class="fas fa-shipping-fast"></i>
                        </div>
                        <h3 class="feature-title">ارسال سریع</h3>
                        <p class="feature-description">
                            ارسال رایگان برای خرید بالای 300 هزار تومان و ارسال سریع به سراسر کشور.
                        </p>
                    </div>

                    <div class="feature-card">
                        <div class="feature-icon">
                            <i class="fas fa-headset"></i>
                        </div>
                        <h3 class="feature-title">پشتیبانی 24/7</h3>
                        <p class="feature-description">
                            تیم پشتیبانی ما آماده پاسخگویی به سوالات شما در تمام ساعات شبانه روز است.
                        </p>
                    </div>

                    <div class="feature-card">
                        <div class="feature-icon">
                            <i class="fas fa-users"></i>
                        </div>
                        <h3 class="feature-title">جامعه بزرگ مشتریان</h3>
                        <p class="feature-description">
                            هزاران مشتری راضی و وفادار که به کیفیت و خدمات ما اعتماد کرده‌اند.
                        </p>
                    </div>
                </div>
            </div>

            <!-- Statistics Section -->
            <div class="stats-section">
                <div class="stats-grid">
                    <div class="stat-item">
                        <span class="stat-number">2+</span>
                        <span class="stat-label">سال تجربه</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-number">5000+</span>
                        <span class="stat-label">مشتری راضی</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-number">150+</span>
                        <span class="stat-label">محصول متنوع</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-number">98%</span>
                        <span class="stat-label">رضایت مشتریان</span>
                    </div>
                </div>
            </div>

            <!-- Location Section -->
            <div class="location-section">
                <div class="location-grid">
                    <div class="location-content">
                        <h2>
                            <i class="fas fa-map-marker-alt"></i>
                            نحوه خرید و ارسال
                        </h2>
                        
                        <div class="location-item">
                            <div class="location-icon">
                                <i class="fas fa-store"></i>
                            </div>
                            <div class="location-text">
                                <h4>خرید حضوری در مشهد</h4>
                                <p>
                                    عزیزان ساکن شهر مقدس مشهد می‌توانند به صورت حضوری از نزدیک محصولات را مشاهده کرده و خریداری نمایند. 
                                    برای هماهنگی با شماره پشتیبانی تماس بگیرید.
                                </p>
                            </div>
                        </div>

                        <div class="location-item">
                            <div class="location-icon">
                                <i class="fas fa-shipping-fast"></i>
                            </div>
                            <div class="location-text">
                                <h4>ارسال پستی به سراسر کشور</h4>
                                <p>
                                    برای سایر شهرهای کشور، ارسال از طریق پست پیشتاز انجام می‌شود. 
                                    ارسال رایگان برای خرید بالای 300 هزار تومان و تضمین کیفیت بسته‌بندی.
                                </p>
                            </div>
                        </div>

                        <div class="location-item">
                            <div class="location-icon">
                                <i class="fas fa-clock"></i>
                            </div>
                            <div class="location-text">
                                <h4>زمان ارسال</h4>
                                <p>
                                    ارسال به مشهد: 1-2 روز کاری<br>
                                    ارسال به سایر شهرها: 2-5 روز کاری<br>
                                    پردازش سفارش: حداکثر 24 ساعت
                                </p>
                            </div>
                        </div>
                    </div>
                    
                    <div class="map-container">
                        <div class="map-placeholder">
                            <i class="fas fa-map-marked-alt"></i>
                            <h3>مشهد مقدس</h3>
                            <p>مرکز اصلی فعالیت زیما</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Values Section -->
            <div class="values-section">
                <h2 class="section-title">ارزش‌های ما</h2>
                <div class="values-grid">
                    <div class="value-card">
                        <div class="value-header">
                            <div class="value-icon">
                                <i class="fas fa-star"></i>
                            </div>
                            <h3 class="value-title">کیفیت</h3>
                        </div>
                        <p class="value-description">
                            ما هرگز در کیفیت محصولاتمان مصالحه نمی‌کنیم. هر محصول قبل از ارسال کنترل کیفیت دقیقی دارد.
                        </p>
                    </div>

                    <div class="value-card">
                        <div class="value-header">
                            <div class="value-icon">
                                <i class="fas fa-handshake"></i>
                            </div>
                            <h3 class="value-title">اعتماد</h3>
                        </div>
                        <p class="value-description">
                            اعتماد شما برای ما بسیار ارزشمند است. ما متعهد هستیم که این اعتماد را حفظ کنیم.
                        </p>
                    </div>

                    <div class="value-card">
                        <div class="value-header">
                            <div class="value-icon">
                                <i class="fas fa-lightbulb"></i>
                            </div>
                            <h3 class="value-title">نوآوری</h3>
                        </div>
                        <p class="value-description">
                            ما همیشه در حال یادگیری و بهبود هستیم تا بتوانیم محصولات بهتری ارائه دهیم.
                        </p>
                    </div>
                </div>
            </div>

            <!-- Timeline Section -->
            <div class="timeline-section">
                <h2 class="section-title">مسیر رشد ما</h2>
                <div class="timeline">
                    <div class="timeline-item">
                        <div class="timeline-marker"></div>
                        <div class="timeline-content">
                            <div class="timeline-date">پاییز 1401</div>
                            <h3 class="timeline-title">شروع کار</h3>
                            <p class="timeline-description">
                                آغاز فعالیت زیما با تمرکز بر کیفیت و رضایت مشتریان
                            </p>
                        </div>
                    </div>

                    <div class="timeline-item">
                        <div class="timeline-marker"></div>
                        <div class="timeline-content">
                            <div class="timeline-date">زمستان 1401</div>
                            <h3 class="timeline-title">اولین مجموعه</h3>
                            <p class="timeline-description">
                                عرضه اولین مجموعه لباس خواب و زیر پوش با استقبال گرم مشتریان
                            </p>
                        </div>
                    </div>

                    <div class="timeline-item">
                        <div class="timeline-marker"></div>
                        <div class="timeline-content">
                            <div class="timeline-date">بهار 1402</div>
                            <h3 class="timeline-title">گسترش محصولات</h3>
                            <p class="timeline-description">
                                افزودن محصولات جدید و متنوع به مجموعه زیما
                            </p>
                        </div>
                    </div>

                    <div class="timeline-item">
                        <div class="timeline-marker"></div>
                        <div class="timeline-content">
                            <div class="timeline-date">امروز</div>
                            <h3 class="timeline-title">آینده روشن</h3>
                            <p class="timeline-description">
                                ادامه مسیر با هدف ارائه بهترین خدمات و محصولات
                            </p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- CTA Section -->
            <div class="cta-section">
                <div class="cta-content">
                    <h2 class="cta-title">آماده تجربه زیما هستید؟</h2>
                    <p class="cta-subtitle">مجموعه متنوع و باکیفیت ما را کشف کنید</p>
                    <div class="cta-buttons">
                        <a href="{% url 'products:list' %}" class="cta-btn">
                            <i class="fas fa-shopping-bag"></i>
                            مشاهده محصولات
                        </a>
                        <a href="#" class="cta-btn secondary">
                            <i class="fas fa-phone"></i>
                            تماس با ما
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </section>
{% endblock %}

{% block extra_js %}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Animate numbers
            const statNumbers = document.querySelectorAll('.stat-number');
            
            const animateNumbers = () => {
                statNumbers.forEach(stat => {
                    const target = parseInt(stat.textContent);
                    const suffix = stat.textContent.replace(/[0-9]/g, '');
                    let current = 0;
                    const increment = target / 100;
                    const timer = setInterval(() => {
                        current += increment;
                        if (current >= target) {
                            current = target;
                            clearInterval(timer);
                        }
                        stat.textContent = Math.floor(current) + suffix;
                    }, 20);
                });
            };

            // Intersection Observer for animations
            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.style.opacity = '1';
                        entry.target.style.transform = 'translateY(0)';
                        
                        // Animate numbers when stats section is visible
                        if (entry.target.classList.contains('stats-section')) {
                            animateNumbers();
                        }
                    }
                });
            }, { threshold: 0.1 });

            // Observe elements for animation
            document.querySelectorAll('.feature-card, .value-card, .timeline-item, .stats-section').forEach(el => {
                el.style.opacity = '0';
                el.style.transform = 'translateY(30px)';
                el.style.transition = 'all 0.6s ease';
                observer.observe(el);
            });

            // Smooth scrolling for anchor links
            document.querySelectorAll('a[href^="#"]').forEach(anchor => {
                anchor.addEventListener('click', function (e) {
                    e.preventDefault();
                    const target = document.querySelector(this.getAttribute('href'));
                    if (target) {
                        target.scrollIntoView({
                            behavior: 'smooth',
                            block: 'start'
                        });
                    }
                });
            });

            // Add parallax effect to hero section
            window.addEventListener('scroll', () => {
                const scrolled = window.pageYOffset;
                const hero = document.querySelector('.hero-section');
                if (hero) {
                    hero.style.transform = `translateY(${scrolled * 0.1}px)`;
                }
            });
        });
    </script>
{% endblock %}

====== FILE: templates/users/profile.html ======

{% extends 'base/base.html' %}
{% load static %}

{% block title %}پروفایل کاربری | زیما{% endblock %}

{% block extra_css %}
<style>
    .profile-section {
        min-height: 100vh;
        background: linear-gradient(135deg, var(--zima-blush), var(--zima-champagne));
        padding: 140px 0 60px;
        position: relative;
        overflow: hidden;
    }

    .profile-section::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: url('{% static "images/patterns/subtle-pattern.png" %}') repeat;
        opacity: 0.03;
        pointer-events: none;
    }

    .profile-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 20px;
        position: relative;
        z-index: 2;
    }

    .profile-wrapper {
        display: grid;
        grid-template-columns: 300px 1fr;
        gap: 40px;
        align-items: flex-start;
    }

    /* Sidebar Styles */
    .profile-sidebar {
        background: white;
        border-radius: 20px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
        overflow: hidden;
        position: sticky;
        top: 160px;
    }

    .sidebar-header {
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        color: white;
        padding: 30px 25px;
        text-align: center;
        position: relative;
    }

    .sidebar-header::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: url('{% static "images/patterns/elegant-pattern.png" %}') repeat;
        opacity: 0.1;
    }

    .user-avatar {
        width: 80px;
        height: 80px;
        border-radius: 50%;
        background: white;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 15px;
        color: var(--primary-color);
        font-size: 2rem;
        font-weight: 600;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        position: relative;
        z-index: 2;
    }

    .user-name {
        font-size: 1.2rem;
        font-weight: 600;
        margin-bottom: 5px;
        position: relative;
        z-index: 2;
    }

    .user-status {
        font-size: 0.9rem;
        opacity: 0.9;
        position: relative;
        z-index: 2;
    }

    .sidebar-nav {
        padding: 0;
    }

    .nav-item {
        border-bottom: 1px solid var(--zima-pearl);
    }

    .nav-item:last-child {
        border-bottom: none;
    }

    .nav-link {
        display: flex;
        align-items: center;
        gap: 15px;
        padding: 18px 25px;
        color: var(--text-color-dark);
        text-decoration: none;
        font-weight: 500;
        transition: all 0.3s ease;
        position: relative;
    }

    .nav-link::before {
        content: '';
        position: absolute;
        left: 0;
        top: 0;
        bottom: 0;
        width: 4px;
        background: var(--primary-color);
        transform: scaleY(0);
        transition: transform 0.3s ease;
    }

    .nav-link:hover,
    .nav-link.active {
        background: var(--zima-blush);
        color: var(--primary-color);
        transform: translateX(5px);
    }

    .nav-link:hover::before,
    .nav-link.active::before {
        transform: scaleY(1);
    }

    .nav-link.logout {
        color: #dc3545;
    }

    .nav-link.logout:hover {
        background: rgba(220, 53, 69, 0.1);
        color: #dc3545;
    }

    .nav-icon {
        font-size: 1.1rem;
        width: 20px;
        text-align: center;
    }

    /* Main Content Styles */
    .profile-content {
        background: white;
        border-radius: 20px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
        overflow: hidden;
    }

    .content-header {
        background: linear-gradient(135deg, var(--zima-blush), var(--zima-champagne));
        padding: 30px 40px;
        border-bottom: 1px solid var(--zima-pearl);
    }

    .content-title {
        font-size: 1.8rem;
        font-weight: 700;
        color: var(--text-color-dark);
        margin: 0;
        font-family: 'Playfair Display', serif;
    }

    .content-subtitle {
        color: var(--text-color-medium);
        margin: 5px 0 0;
        font-size: 1rem;
    }

    .content-body {
        padding: 40px;
    }

    .profile-form {
        max-width: 600px;
    }

    .form-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 25px;
        margin-bottom: 25px;
    }

    .form-group {
        margin-bottom: 25px;
    }

    .form-label {
        display: block;
        margin-bottom: 8px;
        font-weight: 600;
        color: var(--text-color-dark);
        font-size: 0.95rem;
    }

    .form-input {
        width: 100%;
        padding: 15px 20px;
        border: 2px solid var(--zima-pearl);
        border-radius: 12px;
        font-size: 1rem;
        font-family: 'Vazir', sans-serif;
        transition: all 0.3s ease;
        background: white;
        outline: none;
    }

    .form-input:focus {
        border-color: var(--primary-color);
        box-shadow: 0 0 0 3px rgba(255, 107, 107, 0.1);
    }

    .form-input:read-only {
        background: var(--zima-blush);
        color: var(--text-color-medium);
        cursor: not-allowed;
    }

    .form-input.is-invalid {
        border-color: #dc3545;
        box-shadow: 0 0 0 3px rgba(220, 53, 69, 0.1);
    }

    .form-input.is-valid {
        border-color: #28a745;
        box-shadow: 0 0 0 3px rgba(40, 167, 69, 0.1);
    }

    .form-help {
        font-size: 0.85rem;
        color: var(--text-color-medium);
        margin-top: 5px;
    }

    .invalid-feedback {
        display: block;
        color: #dc3545;
        font-size: 0.85rem;
        margin-top: 5px;
    }

    .alert {
        padding: 15px 20px;
        border-radius: 12px;
        margin-bottom: 25px;
        font-size: 0.95rem;
        border: none;
    }

    .alert-success {
        background: rgba(40, 167, 69, 0.1);
        color: #155724;
    }

    .alert-danger {
        background: rgba(220, 53, 69, 0.1);
        color: #721c24;
    }

    .alert-info {
        background: rgba(23, 162, 184, 0.1);
        color: #0c5460;
    }

    .btn-primary {
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        border: none;
        color: white;
        padding: 12px 30px;
        border-radius: 25px;
        font-weight: 600;
        font-size: 1rem;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        display: inline-block;
    }

    .btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(255, 107, 107, 0.4);
    }

    .btn-secondary {
        background: white;
        border: 2px solid var(--zima-pearl);
        color: var(--text-color-dark);
        padding: 12px 30px;
        border-radius: 25px;
        font-weight: 600;
        font-size: 1rem;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        display: inline-block;
    }

    .btn-secondary:hover {
        border-color: var(--primary-color);
        color: var(--primary-color);
        transform: translateY(-2px);
    }

    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    .stat-card {
        background: var(--zima-blush);
        padding: 25px;
        border-radius: 15px;
        text-align: center;
        transition: transform 0.3s ease;
    }

    .stat-card:hover {
        transform: translateY(-5px);
    }

    .stat-number {
        font-size: 2rem;
        font-weight: 700;
        color: var(--primary-color);
        margin-bottom: 5px;
    }

    .stat-label {
        color: var(--text-color-medium);
        font-size: 0.9rem;
    }

    /* Responsive Design */
    @media (max-width: 992px) {
        .profile-wrapper {
            grid-template-columns: 1fr;
            gap: 30px;
        }

        .profile-sidebar {
            position: relative;
            top: auto;
        }

        .sidebar-header {
            padding: 25px 20px;
        }

        .user-avatar {
            width: 60px;
            height: 60px;
            font-size: 1.5rem;
        }

        .content-body {
            padding: 30px 25px;
        }

        .form-row {
            grid-template-columns: 1fr;
            gap: 20px;
        }
    }

    @media (max-width: 768px) {
        .profile-section {
            padding: 120px 0 40px;
        }

        .profile-container {
            padding: 0 15px;
        }

        .content-header {
            padding: 25px 20px;
        }

        .content-title {
            font-size: 1.5rem;
        }

        .content-body {
            padding: 25px 20px;
        }

        .nav-link {
            padding: 15px 20px;
        }

        .stats-grid {
            grid-template-columns: 1fr 1fr;
        }
    }

    @media (max-width: 480px) {
        .stats-grid {
            grid-template-columns: 1fr;
        }

        .stat-card {
            padding: 20px;
        }

        .form-input {
            padding: 12px 16px;
        }
    }
</style>
{% endblock %}

{% block content %}
<section class="profile-section">
    <div class="profile-container">
        <div class="profile-wrapper">
            <!-- Sidebar -->
            <aside class="profile-sidebar">
                <div class="sidebar-header">
                    <div class="user-avatar">
                        {{ user.username|slice:":1"|upper }}
                    </div>
                    <h3 class="user-name">{{ user.get_full_name|default:user.username }}</h3>
                    <p class="user-status">عضو زیما</p>
                </div>

                <nav class="sidebar-nav">
                    <a href="{% url 'users:profile' %}" class="nav-link active">
                        <i class="nav-icon fas fa-user"></i>
                        <span>اطلاعات حساب کاربری</span>
                    </a>
                    <a href="{% url 'users:addresses' %}" class="nav-link">
                        <i class="nav-icon fas fa-map-marker-alt"></i>
                        <span>آدرس‌ها</span>
                    </a>
                    <a href="{% url 'orders:list' %}" class="nav-link">
                        <i class="nav-icon fas fa-shopping-bag"></i>
                        <span>سفارش‌ها</span>
                    </a>
                    <a href="{% url 'users:change_password' %}" class="nav-link">
                        <i class="nav-icon fas fa-key"></i>
                        <span>تغییر رمز عبور</span>
                    </a>
                    <a href="{% url 'users:favorites' %}" class="nav-link">
                        <i class="nav-icon fas fa-heart"></i>
                        <span>علاقه‌مندی‌ها</span>
                    </a>
                    <a href="{% url 'users:logout' %}" class="nav-link logout">
                        <i class="nav-icon fas fa-sign-out-alt"></i>
                        <span>خروج از حساب کاربری</span>
                    </a>
                </nav>
            </aside>

            <!-- Main Content -->
            <main class="profile-content">
                <div class="content-header">
                    <h1 class="content-title">اطلاعات حساب کاربری</h1>
                    <p class="content-subtitle">اطلاعات شخصی و تماس خود را مدیریت کنید</p>
                </div>

                <div class="content-body">
                    <!-- User Stats -->
                    <div class="stats-grid">
                        <div class="stat-card">
                            <div class="stat-number">{{ user.orders.count|default:0 }}</div>
                            <div class="stat-label">سفارش‌های ثبت شده</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-number">{{ user.addresses.count|default:0 }}</div>
                            <div class="stat-label">آدرس‌های ذخیره شده</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-number">{{ user.favorites.count|default:0 }}</div>
                            <div class="stat-label">محصولات موردعلاقه</div>
                        </div>
                    </div>

                    <!-- Messages -->
                    {% if messages %}
                        {% for message in messages %}
                            <div class="alert alert-{{ message.tags }}">
                                {{ message }}
                            </div>
                        {% endfor %}
                    {% endif %}

                    <!-- Profile Form -->
                    <form class="profile-form" method="post" action="{% url 'users:profile' %}">
                        {% csrf_token %}

                        <div class="form-row">
                            <div class="form-group">
                                <label for="id_username" class="form-label">نام کاربری</label>
                                <input type="text"
                                       id="id_username"
                                       class="form-input"
                                       value="{{ user.username }}"
                                       readonly>
                                <div class="form-help">نام کاربری قابل تغییر نیست</div>
                            </div>

                            <div class="form-group">
                                <label for="id_date_joined" class="form-label">تاریخ عضویت</label>
                                <input type="text"
                                       id="id_date_joined"
                                       class="form-input"
                                       value="{{ user.date_joined|date:'Y/m/d' }}"
                                       readonly>
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label for="id_first_name" class="form-label">نام</label>
                                <input type="text"
                                       name="first_name"
                                       id="id_first_name"
                                       class="form-input {% if form.first_name.errors %}is-invalid{% endif %}"
                                       value="{{ user.first_name|default:'' }}"
                                       placeholder="نام خود را وارد کنید">
                                {% if form.first_name.errors %}
                                    <div class="invalid-feedback">
                                        {% for error in form.first_name.errors %}
                                            {{ error }}
                                        {% endfor %}
                                    </div>
                                {% endif %}
                            </div>

                            <div class="form-group">
                                <label for="id_last_name" class="form-label">نام خانوادگی</label>
                                <input type="text"
                                       name="last_name"
                                       id="id_last_name"
                                       class="form-input {% if form.last_name.errors %}is-invalid{% endif %}"
                                       value="{{ user.last_name|default:'' }}"
                                       placeholder="نام خانوادگی خود را وارد کنید">
                                {% if form.last_name.errors %}
                                    <div class="invalid-feedback">
                                        {% for error in form.last_name.errors %}
                                            {{ error }}
                                        {% endfor %}
                                    </div>
                                {% endif %}
                            </div>
                        </div>

                        <div class="form-group">
                            <label for="id_email" class="form-label">ایمیل</label>
                            <input type="email"
                                   name="email"
                                   id="id_email"
                                   class="form-input {% if form.email.errors %}is-invalid{% endif %}"
                                   value="{{ user.email|default:'' }}"
                                   placeholder="ایمیل خود را وارد کنید">
                            {% if form.email.errors %}
                                <div class="invalid-feedback">
                                    {% for error in form.email.errors %}
                                        {{ error }}
                                    {% endfor %}
                                </div>
                            {% endif %}
                        </div>

                        <div class="form-group">
                            <label for="id_phone_number" class="form-label">شماره موبایل</label>
                            <input type="text"
                                   name="phone_number"
                                   id="id_phone_number"
                                   class="form-input {% if form.phone_number.errors %}is-invalid{% endif %}"
                                   value="{{ user.phone_number|default:'' }}"
                                   placeholder="09xxxxxxxxx">
                            {% if form.phone_number.errors %}
                                <div class="invalid-feedback">
                                    {% for error in form.phone_number.errors %}
                                        {{ error }}
                                    {% endfor %}
                                </div>
                            {% endif %}
                        </div>

                        <div style="display: flex; gap: 15px; margin-top: 30px;">
                            <button type="submit" class="btn-primary">
                                <i class="fas fa-save"></i>
                                ذخیره تغییرات
                            </button>
                            <a href="{% url 'users:change_password' %}" class="btn-secondary">
                                <i class="fas fa-key"></i>
                                تغییر رمز عبور
                            </a>
                        </div>
                    </form>
                </div>
            </main>
        </div>
    </div>
</section>
{% endblock %}

{% block extra_js %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Phone number formatting
    const phoneInput = document.getElementById('id_phone_number');
    if (phoneInput) {
        phoneInput.addEventListener('input', function() {
            let value = this.value.replace(/\D/g, '');
            if (value.startsWith('98')) {
                value = value.substring(2);
            }
            if (value.startsWith('0')) {
                value = value.substring(1);
            }
            if (value.length > 0) {
                value = '09' + value.substring(1, 10);
            }
            this.value = value;
        });
    }

    // Form validation
    const inputs = document.querySelectorAll('.form-input:not([readonly])');
    inputs.forEach(input => {
        input.addEventListener('input', function() {
            if (this.value.trim()) {
                this.classList.add('is-valid');
                this.classList.remove('is-invalid');
            } else {
                this.classList.remove('is-valid', 'is-invalid');
            }
        });
    });

    // Auto-hide alerts
    const alerts = document.querySelectorAll('.alert');
    alerts.forEach(alert => {
        setTimeout(() => {
            alert.style.opacity = '0';
            alert.style.transform = 'translateY(-10px)';
            setTimeout(() => alert.remove(), 300);
        }, 5000);
    });
});
</script>
{% endblock %}

====== FILE: templates/users/login.html ======

{% extends 'base/base.html' %}
{% load static %}

{% block title %}ورود به حساب کاربری | زیما{% endblock %}

{% block extra_css %}
<style>
    .auth-section {
        min-height: 100vh;
        background: linear-gradient(135deg, var(--zima-blush), var(--zima-champagne));
        display: flex;
        align-items: center;
        padding: 140px 0 60px;
        position: relative;
        overflow: hidden;
    }

    .auth-section::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: url('{% static "images/patterns/floral-pattern.png" %}') repeat;
        opacity: 0.05;
        pointer-events: none;
    }

    .auth-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 20px;
        position: relative;
        z-index: 2;
    }

    .auth-wrapper {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 80px;
        align-items: center;
        background: white;
        border-radius: 30px;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.1);
        overflow: hidden;
    }

    .auth-visual {
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        padding: 80px 60px;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        text-align: center;
        color: white;
        position: relative;
    }

    .auth-visual::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: url('{% static "images/patterns/elegant-pattern.png" %}') repeat;
        opacity: 0.1;
    }

    .visual-content {
        position: relative;
        z-index: 2;
    }

    .welcome-title {
        font-size: 2.5rem;
        font-weight: 700;
        margin-bottom: 15px;
        font-family: 'Playfair Display', serif;
    }

    .welcome-subtitle {
        font-size: 1.1rem;
        margin-bottom: 30px;
        opacity: 0.9;
        line-height: 1.6;
    }

    .auth-features {
        list-style: none;
        padding: 0;
        margin: 0;
    }

    .auth-features li {
        display: flex;
        align-items: center;
        gap: 12px;
        margin-bottom: 15px;
        font-size: 0.95rem;
        opacity: 0.9;
    }

    .auth-features i {
        color: var(--secondary-color);
        font-size: 1.1rem;
        width: 20px;
    }

    .auth-form-section {
        padding: 80px 60px;
    }

    .form-header {
        text-align: center;
        margin-bottom: 40px;
    }

    .form-title {
        font-size: 2rem;
        font-weight: 700;
        color: var(--text-color-dark);
        margin-bottom: 10px;
        font-family: 'Playfair Display', serif;
    }

    .form-subtitle {
        color: var(--text-color-medium);
        font-size: 1rem;
    }

    .auth-form {
        max-width: 400px;
        margin: 0 auto;
    }

    .form-group {
        margin-bottom: 25px;
        position: relative;
    }

    .form-label {
        display: block;
        margin-bottom: 8px;
        font-weight: 600;
        color: var(--text-color-dark);
        font-size: 0.9rem;
    }

    .form-input {
        width: 100%;
        padding: 15px 20px;
        border: 2px solid var(--zima-pearl);
        border-radius: 15px;
        font-size: 1rem;
        font-family: 'Vazir', sans-serif;
        transition: all 0.3s ease;
        background: white;
        outline: none;
    }

    .form-input:focus {
        border-color: var(--primary-color);
        box-shadow: 0 0 0 3px rgba(255, 107, 107, 0.1);
    }

    .form-input.is-invalid {
        border-color: #dc3545;
        box-shadow: 0 0 0 3px rgba(220, 53, 69, 0.1);
    }

    .form-input.is-valid {
        border-color: #28a745;
        box-shadow: 0 0 0 3px rgba(40, 167, 69, 0.1);
    }

    .input-icon {
        position: absolute;
        left: 20px;
        top: 50%;
        transform: translateY(-50%);
        color: var(--text-color-medium);
        font-size: 1.1rem;
    }

    .form-input:focus + .input-icon {
        color: var(--primary-color);
    }

    .password-toggle {
        position: absolute;
        left: 20px;
        top: 50%;
        transform: translateY(-50%);
        background: none;
        border: none;
        color: var(--text-color-medium);
        cursor: pointer;
        font-size: 1.1rem;
        transition: color 0.3s ease;
    }

    .password-toggle:hover {
        color: var(--primary-color);
    }

    .form-check {
        display: flex;
        align-items: center;
        gap: 10px;
        margin-bottom: 25px;
    }

    .form-check-input {
        width: 18px;
        height: 18px;
        border: 2px solid var(--zima-pearl);
        border-radius: 4px;
        cursor: pointer;
    }

    .form-check-input:checked {
        background: var(--primary-color);
        border-color: var(--primary-color);
    }

    .form-check-label {
        font-size: 0.9rem;
        color: var(--text-color-medium);
        cursor: pointer;
    }

    .invalid-feedback {
        display: block;
        color: #dc3545;
        font-size: 0.85rem;
        margin-top: 5px;
    }

    .alert {
        padding: 15px 20px;
        border-radius: 12px;
        margin-bottom: 25px;
        font-size: 0.9rem;
    }

    .alert-danger {
        background: rgba(220, 53, 69, 0.1);
        color: #721c24;
        border: 1px solid rgba(220, 53, 69, 0.2);
    }

    .alert-success {
        background: rgba(40, 167, 69, 0.1);
        color: #155724;
        border: 1px solid rgba(40, 167, 69, 0.2);
    }

    .btn-auth {
        width: 100%;
        padding: 15px 20px;
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        color: white;
        border: none;
        border-radius: 50px;
        font-size: 1.1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        text-transform: uppercase;
        letter-spacing: 1px;
        margin-bottom: 20px;
    }

    .btn-auth:hover {
        transform: translateY(-2px);
        box-shadow: 0 10px 25px rgba(255, 107, 107, 0.4);
    }

    .btn-auth:active {
        transform: translateY(0);
    }

    .form-links {
        text-align: center;
        margin-bottom: 30px;
    }

    .form-links a {
        color: var(--primary-color);
        text-decoration: none;
        font-weight: 500;
        transition: color 0.3s ease;
    }

    .form-links a:hover {
        color: var(--secondary-color);
        text-decoration: underline;
    }

    .form-divider {
        position: relative;
        text-align: center;
        margin: 30px 0;
    }

    .form-divider::before {
        content: '';
        position: absolute;
        top: 50%;
        left: 0;
        right: 0;
        height: 1px;
        background: var(--zima-pearl);
    }

    .form-divider span {
        background: white;
        padding: 0 20px;
        color: var(--text-color-medium);
        font-size: 0.9rem;
    }

    .auth-switch {
        text-align: center;
        padding: 25px;
        background: var(--zima-blush);
        border-radius: 15px;
    }

    .auth-switch-text {
        color: var(--text-color-medium);
        margin-bottom: 15px;
        font-size: 0.95rem;
    }

    .btn-switch {
        background: white;
        color: var(--primary-color);
        border: 2px solid var(--primary-color);
        padding: 12px 30px;
        border-radius: 25px;
        text-decoration: none;
        font-weight: 600;
        transition: all 0.3s ease;
        display: inline-block;
    }

    .btn-switch:hover {
        background: var(--primary-color);
        color: white;
        transform: translateY(-2px);
    }

    /* Responsive Design */
    @media (max-width: 992px) {
        .auth-wrapper {
            grid-template-columns: 1fr;
            gap: 0;
        }

        .auth-visual {
            padding: 60px 40px;
        }

        .welcome-title {
            font-size: 2rem;
        }

        .auth-form-section {
            padding: 60px 40px;
        }
    }

    @media (max-width: 768px) {
        .auth-section {
            padding: 120px 0 40px;
        }

        .auth-container {
            padding: 0 15px;
        }

        .auth-visual,
        .auth-form-section {
            padding: 40px 30px;
        }

        .welcome-title {
            font-size: 1.8rem;
        }

        .form-title {
            font-size: 1.6rem;
        }
    }

    @media (max-width: 480px) {
        .auth-visual,
        .auth-form-section {
            padding: 30px 20px;
        }

        .welcome-title {
            font-size: 1.5rem;
        }

        .form-title {
            font-size: 1.4rem;
        }

        .form-input {
            padding: 12px 16px;
        }

        .btn-auth {
            padding: 12px 16px;
        }
    }
</style>
{% endblock %}

{% block content %}
<section class="auth-section">
    <div class="auth-container">
        <div class="auth-wrapper">
            <!-- Visual Section -->
            <div class="auth-visual">
                <div class="visual-content">
                    <h1 class="welcome-title">خوش آمدید</h1>
                    <p class="welcome-subtitle">به دنیای زیبایی و راحتی زیما خوش آمدید. تجربه‌ای منحصربه‌فرد از خرید آنلاین را کشف کنید.</p>

                    <ul class="auth-features">
                        <li>
                            <i class="fas fa-gem"></i>
                            <span>دسترسی به کالکشن‌های ویژه</span>
                        </li>
                        <li>
                            <i class="fas fa-percentage"></i>
                            <span>تخفیف‌های اختصاصی اعضا</span>
                        </li>
                        <li>
                            <i class="fas fa-shipping-fast"></i>
                            <span>ارسال سریع و رایگان</span>
                        </li>
                        <li>
                            <i class="fas fa-heart"></i>
                            <span>ذخیره محصولات موردعلاقه</span>
                        </li>
                        <li>
                            <i class="fas fa-headset"></i>
                            <span>پشتیبانی اختصاصی ۲۴/۷</span>
                        </li>
                    </ul>
                </div>
            </div>

            <!-- Form Section -->
            <div class="auth-form-section">
                <div class="form-header">
                    <h2 class="form-title">ورود به حساب</h2>
                    <p class="form-subtitle">لطفاً اطلاعات خود را وارد کنید</p>
                </div>

                <form class="auth-form" method="post" action="{% url 'users:login' %}">
                    {% csrf_token %}

                    {% if form.non_field_errors %}
                        <div class="alert alert-danger">
                            {% for error in form.non_field_errors %}
                                {{ error }}
                            {% endfor %}
                        </div>
                    {% endif %}

                    {% if messages %}
                        {% for message in messages %}
                            <div class="alert alert-{{ message.tags }}">
                                {{ message }}
                            </div>
                        {% endfor %}
                    {% endif %}

                    <div class="form-group">
                        <label for="id_username" class="form-label">نام کاربری، ایمیل یا شماره موبایل</label>
                        <div style="position: relative;">
                            <input type="text"
                                name="username"
                                id="id_username"
                                class="form-input {% if form.username.errors %}is-invalid{% endif %}"
                                placeholder="نام کاربری، ایمیل یا شماره موبایل خود را وارد کنید"
                                required>
                            <i class="fas fa-user input-icon"></i>
                        </div>
                        {% if form.username.errors %}
                            <div class="invalid-feedback">
                                {% for error in form.username.errors %}
                                    {{ error }}
                                {% endfor %}
                            </div>
                        {% endif %}
                    </div>

                    <div class="form-group">
                        <label for="id_password" class="form-label">رمز عبور</label>
                        <div style="position: relative;">
                            <input type="password"
                                name="password"
                                id="id_password"
                                class="form-input {% if form.password.errors %}is-invalid{% endif %}"
                                placeholder="رمز عبور خود را وارد کنید"
                                required>
                            <button type="button" class="password-toggle" onclick="togglePassword('id_password')">
                                <i class="fas fa-eye" id="id_password_icon"></i>
                            </button>
                        </div>
                        {% if form.password.errors %}
                            <div class="invalid-feedback">
                                {% for error in form.password.errors %}
                                    {{ error }}
                                {% endfor %}
                            </div>
                        {% endif %}
                    </div>

                    <div class="form-check">
                        <input type="checkbox" name="remember" id="id_remember" class="form-check-input">
                        <label for="id_remember" class="form-check-label">مرا به خاطر بسپار</label>
                    </div>

                    {% if next %}
                        <input type="hidden" name="next" value="{{ next }}">
                    {% endif %}

                    <button type="submit" class="btn-auth">ورود</button>

                    <div class="form-links">
                        <a href="{% url 'users:password_reset' %}">رمز عبور خود را فراموش کرده‌اید؟</a>
                    </div>

                    <div class="form-divider">
                        <span>یا</span>
                    </div>

                    <div class="auth-switch">
                        <p class="auth-switch-text">حساب کاربری ندارید؟</p>
                        <a href="{% url 'users:signup' %}" class="btn-switch">ثبت‌نام کنید</a>
                    </div>
                </form>
            </div>
        </div>
    </div>
</section>
{% endblock %}

{% block extra_js %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Password toggle functionality
    window.togglePassword = function(inputId) {
        const input = document.getElementById(inputId);
        const icon = document.getElementById(inputId + '_icon');

        if (input.type === 'password') {
            input.type = 'text';
            icon.classList.remove('fa-eye');
            icon.classList.add('fa-eye-slash');
        } else {
            input.type = 'password';
            icon.classList.remove('fa-eye-slash');
            icon.classList.add('fa-eye');
        }
    };

    // Input validation and styling
    const inputs = document.querySelectorAll('.form-input');
    inputs.forEach(input => {
        input.addEventListener('input', function() {
            if (this.value.trim()) {
                this.classList.add('is-valid');
                this.classList.remove('is-invalid');
            } else {
                this.classList.remove('is-valid', 'is-invalid');
            }
        });

        input.addEventListener('blur', function() {
            if (this.hasAttribute('required') && !this.value.trim()) {
                this.classList.add('is-invalid');
                this.classList.remove('is-valid');
            }
        });
    });

    // Auto-hide alerts after 5 seconds
    const alerts = document.querySelectorAll('.alert');
    alerts.forEach(alert => {
        setTimeout(() => {
            alert.style.opacity = '0';
            alert.style.transform = 'translateY(-10px)';
            setTimeout(() => alert.remove(), 300);
        }, 5000);
    });
});
</script>
{% endblock %}

====== FILE: templates/users/addresses.html ======

{% extends 'base/base.html' %}
{% load static %}

{% block title %}آدرس‌های من | زیما{% endblock %}

{% block extra_css %}
<style>
    .profile-section {
        min-height: 100vh;
        background: linear-gradient(135deg, var(--zima-blush), var(--zima-champagne));
        padding: 140px 0 60px;
        position: relative;
        overflow: hidden;
    }

    .profile-section::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: url('{% static "images/patterns/subtle-pattern.png" %}') repeat;
        opacity: 0.03;
        pointer-events: none;
    }

    .profile-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 20px;
        position: relative;
        z-index: 2;
    }

    .profile-wrapper {
        display: grid;
        grid-template-columns: 300px 1fr;
        gap: 40px;
        align-items: flex-start;
    }

    /* Sidebar Styles */
    .profile-sidebar {
        background: white;
        border-radius: 20px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
        overflow: hidden;
        position: sticky;
        top: 160px;
    }

    .sidebar-header {
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        color: white;
        padding: 30px 25px;
        text-align: center;
        position: relative;
    }

    .sidebar-header::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: url('{% static "images/patterns/elegant-pattern.png" %}') repeat;
        opacity: 0.1;
    }

    .user-avatar {
        width: 80px;
        height: 80px;
        border-radius: 50%;
        background: white;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 15px;
        color: var(--primary-color);
        font-size: 2rem;
        font-weight: 600;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        position: relative;
        z-index: 2;
    }

    .user-name {
        font-size: 1.2rem;
        font-weight: 600;
        margin-bottom: 5px;
        position: relative;
        z-index: 2;
    }

    .user-status {
        font-size: 0.9rem;
        opacity: 0.9;
        position: relative;
        z-index: 2;
    }

    .sidebar-nav {
        padding: 0;
    }

    .nav-item {
        border-bottom: 1px solid var(--zima-pearl);
    }

    .nav-item:last-child {
        border-bottom: none;
    }

    .nav-link {
        display: flex;
        align-items: center;
        gap: 15px;
        padding: 18px 25px;
        color: var(--text-color-dark);
        text-decoration: none;
        font-weight: 500;
        transition: all 0.3s ease;
        position: relative;
    }

    .nav-link::before {
        content: '';
        position: absolute;
        left: 0;
        top: 0;
        bottom: 0;
        width: 4px;
        background: var(--primary-color);
        transform: scaleY(0);
        transition: transform 0.3s ease;
    }

    .nav-link:hover,
    .nav-link.active {
        background: var(--zima-blush);
        color: var(--primary-color);
        transform: translateX(5px);
    }

    .nav-link:hover::before,
    .nav-link.active::before {
        transform: scaleY(1);
    }

    .nav-link.logout {
        color: #dc3545;
    }

    .nav-link.logout:hover {
        background: rgba(220, 53, 69, 0.1);
        color: #dc3545;
    }

    .nav-icon {
        font-size: 1.1rem;
        width: 20px;
        text-align: center;
    }

    /* Main Content Styles */
    .profile-content {
        background: white;
        border-radius: 20px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
        overflow: hidden;
    }

    .content-header {
        background: linear-gradient(135deg, var(--zima-blush), var(--zima-champagne));
        padding: 30px 40px;
        border-bottom: 1px solid var(--zima-pearl);
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .header-content {
        flex: 1;
    }

    .content-title {
        font-size: 1.8rem;
        font-weight: 700;
        color: var(--text-color-dark);
        margin: 0;
        font-family: 'Playfair Display', serif;
    }

    .content-subtitle {
        color: var(--text-color-medium);
        margin: 5px 0 0;
        font-size: 1rem;
    }

    .btn-add-address {
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        color: white;
        border: none;
        padding: 12px 25px;
        border-radius: 25px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 8px;
    }

    .btn-add-address:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(255, 107, 107, 0.4);
        color: white;
    }

    .content-body {
        padding: 40px;
    }

    .addresses-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
        gap: 25px;
        margin-top: 20px;
    }

    .address-card {
        background: white;
        border-radius: 15px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
        border: 2px solid var(--zima-pearl);
        transition: all 0.3s ease;
        overflow: hidden;
    }

    .address-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);
        border-color: var(--primary-color);
    }

    .address-header {
        background: var(--zima-blush);
        padding: 20px 25px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .address-title {
        font-weight: 600;
        color: var(--text-color-dark);
        margin: 0;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .address-badge {
        background: var(--primary-color);
        color: white;
        padding: 4px 12px;
        border-radius: 15px;
        font-size: 0.8rem;
        font-weight: 500;
    }

    .address-body {
        padding: 25px;
    }

    .address-text {
        color: var(--text-color-dark);
        line-height: 1.6;
        margin-bottom: 15px;
        font-size: 0.95rem;
    }

    .address-postal {
        color: var(--text-color-medium);
        font-size: 0.9rem;
        display: flex;
        align-items: center;
        gap: 8px;
        margin-bottom: 20px;
    }

    .address-actions {
        display: flex;
        gap: 12px;
    }

    .btn-edit {
        background: #17a2b8;
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 20px;
        font-size: 0.85rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 6px;
    }

    .btn-edit:hover {
        background: #138496;
        transform: translateY(-1px);
    }

    .btn-delete {
        background: #dc3545;
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 20px;
        font-size: 0.85rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 6px;
    }

    .btn-delete:hover {
        background: #c82333;
        transform: translateY(-1px);
    }

    .empty-state {
        text-align: center;
        padding: 60px 40px;
        color: var(--text-color-medium);
    }

    .empty-icon {
        font-size: 4rem;
        color: var(--zima-pearl);
        margin-bottom: 20px;
    }

    .empty-title {
        font-size: 1.5rem;
        font-weight: 600;
        margin-bottom: 10px;
        color: var(--text-color-dark);
    }

    .empty-text {
        font-size: 1rem;
        line-height: 1.6;
        margin-bottom: 30px;
    }

    .alert {
        padding: 15px 20px;
        border-radius: 12px;
        margin-bottom: 25px;
        font-size: 0.95rem;
        border: none;
    }

    .alert-success {
        background: rgba(40, 167, 69, 0.1);
        color: #155724;
    }

    .alert-danger {
        background: rgba(220, 53, 69, 0.1);
        color: #721c24;
    }

    .alert-info {
        background: rgba(23, 162, 184, 0.1);
        color: #0c5460;
    }

    /* Modal Styles */
    .modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.8);
        z-index: 9999;
        align-items: center;
        justify-content: center;
    }

    .modal.show {
        display: flex;
    }

    .modal-content {
        background: white;
        border-radius: 20px;
        max-width: 500px;
        width: 90%;
        max-height: 90vh;
        overflow-y: auto;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
    }

    .modal-header {
        padding: 25px 30px;
        border-bottom: 1px solid var(--zima-pearl);
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .modal-title {
        font-size: 1.3rem;
        font-weight: 600;
        color: var(--text-color-dark);
        margin: 0;
    }

    .btn-close {
        background: none;
        border: none;
        font-size: 1.5rem;
        color: var(--text-color-medium);
        cursor: pointer;
        width: 30px;
        height: 30px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.3s ease;
    }

    .btn-close:hover {
        background: var(--zima-pearl);
        color: var(--text-color-dark);
    }

    .modal-body {
        padding: 30px;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-label {
        display: block;
        margin-bottom: 8px;
        font-weight: 600;
        color: var(--text-color-dark);
        font-size: 0.95rem;
    }

    .form-input,
    .form-textarea {
        width: 100%;
        padding: 12px 16px;
        border: 2px solid var(--zima-pearl);
        border-radius: 12px;
        font-size: 1rem;
        font-family: 'Vazir', sans-serif;
        transition: all 0.3s ease;
        background: white;
        outline: none;
        resize: vertical;
    }

    .form-input:focus,
    .form-textarea:focus {
        border-color: var(--primary-color);
        box-shadow: 0 0 0 3px rgba(255, 107, 107, 0.1);
    }

    .modal-footer {
        padding: 20px 30px;
        border-top: 1px solid var(--zima-pearl);
        display: flex;
        gap: 12px;
        justify-content: flex-end;
    }

    .btn-secondary {
        background: white;
        border: 2px solid var(--zima-pearl);
        color: var(--text-color-dark);
        padding: 10px 20px;
        border-radius: 20px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .btn-secondary:hover {
        border-color: var(--primary-color);
        color: var(--primary-color);
    }

    .btn-primary {
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        border: none;
        color: white;
        padding: 10px 20px;
        border-radius: 20px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .btn-primary:hover {
        transform: translateY(-1px);
        box-shadow: 0 5px 15px rgba(255, 107, 107, 0.4);
    }

    /* Responsive Design */
    @media (max-width: 992px) {
        .profile-wrapper {
            grid-template-columns: 1fr;
            gap: 30px;
        }

        .profile-sidebar {
            position: relative;
            top: auto;
        }

        .content-header {
            flex-direction: column;
            gap: 20px;
            align-items: flex-start;
        }

        .addresses-grid {
            grid-template-columns: 1fr;
        }
    }

    @media (max-width: 768px) {
        .profile-section {
            padding: 120px 0 40px;
        }

        .profile-container {
            padding: 0 15px;
        }

        .content-header {
            padding: 25px 20px;
        }

        .content-body {
            padding: 25px 20px;
        }

        .address-header {
            padding: 15px 20px;
        }

        .address-body {
            padding: 20px;
        }

        .modal-content {
            width: 95%;
        }

        .modal-header,
        .modal-body,
        .modal-footer {
            padding: 20px;
        }
    }
</style>
{% endblock %}

{% block content %}
<section class="profile-section">
    <div class="profile-container">
        <div class="profile-wrapper">
            <!-- Sidebar -->
            <aside class="profile-sidebar">
                <div class="sidebar-header">
                    <div class="user-avatar">
                        {{ user.username|slice:":1"|upper }}
                    </div>
                    <h3 class="user-name">{{ user.get_full_name|default:user.username }}</h3>
                    <p class="user-status">عضو زیما</p>
                </div>

                <nav class="sidebar-nav">
                    <a href="{% url 'users:profile' %}" class="nav-link">
                        <i class="nav-icon fas fa-user"></i>
                        <span>اطلاعات حساب کاربری</span>
                    </a>
                    <a href="{% url 'users:addresses' %}" class="nav-link active">
                        <i class="nav-icon fas fa-map-marker-alt"></i>
                        <span>آدرس‌ها</span>
                    </a>
                    <a href="{% url 'orders:list' %}" class="nav-link">
                        <i class="nav-icon fas fa-shopping-bag"></i>
                        <span>سفارش‌ها</span>
                    </a>
                    <a href="{% url 'users:change_password' %}" class="nav-link">
                        <i class="nav-icon fas fa-key"></i>
                        <span>تغییر رمز عبور</span>
                    </a>
                    <a href="{% url 'users:favorites' %}" class="nav-link">
                        <i class="nav-icon fas fa-heart"></i>
                        <span>علاقه‌مندی‌ها</span>
                    </a>
                    <a href="{% url 'users:logout' %}" class="nav-link logout">
                        <i class="nav-icon fas fa-sign-out-alt"></i>
                        <span>خروج از حساب کاربری</span>
                    </a>
                </nav>
            </aside>

            <!-- Main Content -->
            <main class="profile-content">
                <div class="content-header">
                    <div class="header-content">
                        <h1 class="content-title">آدرس‌های من</h1>
                        <p class="content-subtitle">آدرس‌های ارسال خود را مدیریت کنید</p>
                    </div>
                    <button class="btn-add-address" onclick="openAddModal()">
                        <i class="fas fa-plus"></i>
                        افزودن آدرس جدید
                    </button>
                </div>

                <div class="content-body">
                    <!-- Messages -->
                    {% if messages %}
                        {% for message in messages %}
                            <div class="alert alert-{{ message.tags }}">
                                {{ message }}
                            </div>
                        {% endfor %}
                    {% endif %}

                    <!-- Addresses Grid -->
                    {% if addresses %}
                        <div class="addresses-grid">
                            {% for address in addresses %}
                                <div class="address-card">
                                    <div class="address-header">
                                        <h3 class="address-title">
                                            <i class="fas fa-map-marker-alt"></i>
                                            آدرس {{ forloop.counter }}
                                        </h3>
                                        {% if address.is_default %}
                                            <span class="address-badge">پیش‌فرض</span>
                                        {% endif %}
                                    </div>
                                    <div class="address-body">
                                        <p class="address-text">{{ address.full_address }}</p>
                                        <div class="address-postal">
                                            <i class="fas fa-mail-bulk"></i>
                                            کد پستی: {{ address.postal_code }}
                                        </div>
                                        <div class="address-actions">
                                            <button class="btn-edit" onclick="openEditModal({{ address.id }}, '{{ address.full_address|escapejs }}', '{{ address.postal_code }}')">
                                                <i class="fas fa-edit"></i>
                                                ویرایش
                                            </button>
                                            <button class="btn-delete" onclick="openDeleteModal({{ address.id }}, '{{ address.full_address|escapejs|truncatechars:50 }}')">
                                                <i class="fas fa-trash-alt"></i>
                                                حذف
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            {% endfor %}
                        </div>
                    {% else %}
                        <div class="empty-state">
                            <div class="empty-icon">
                                <i class="fas fa-map-marker-alt"></i>
                            </div>
                            <h3 class="empty-title">هنوز آدرسی ثبت نکرده‌اید</h3>
                            <p class="empty-text">برای سفارش محصولات، ابتدا آدرس ارسال خود را ثبت کنید</p>
                            <button class="btn-add-address" onclick="openAddModal()">
                                <i class="fas fa-plus"></i>
                                افزودن اولین آدرس
                            </button>
                        </div>
                    {% endif %}
                </div>
            </main>
        </div>
    </div>
</section>

<!-- Add Address Modal -->
<div class="modal" id="addModal">
    <div class="modal-content">
        <div class="modal-header">
            <h3 class="modal-title">افزودن آدرس جدید</h3>
            <button class="btn-close" onclick="closeAddModal()">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <form method="post" action="{% url 'users:add_address' %}">
            {% csrf_token %}
            <div class="modal-body">
                <div class="form-group">
                    <label for="add_full_address" class="form-label">آدرس کامل</label>
                    <textarea name="full_address"
                              id="add_full_address"
                              class="form-textarea"
                              rows="4"
                              placeholder="آدرس کامل خود را وارد کنید..."
                              required></textarea>
                </div>
                <div class="form-group">
                    <label for="add_postal_code" class="form-label">کد پستی</label>
                    <input type="text"
                           name="postal_code"
                           id="add_postal_code"
                           class="form-input"
                           placeholder="کد پستی ۱۰ رقمی"
                           maxlength="10"
                           required>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn-secondary" onclick="closeAddModal()">انصراف</button>
                <button type="submit" class="btn-primary">افزودن آدرس</button>
            </div>
        </form>
    </div>
</div>

<!-- Edit Address Modal -->
<div class="modal" id="editModal">
    <div class="modal-content">
        <div class="modal-header">
            <h3 class="modal-title">ویرایش آدرس</h3>
            <button class="btn-close" onclick="closeEditModal()">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <form method="post" id="editForm">
            {% csrf_token %}
            <div class="modal-body">
                <div class="form-group">
                    <label for="edit_full_address" class="form-label">آدرس کامل</label>
                    <textarea name="full_address"
                              id="edit_full_address"
                              class="form-textarea"
                              rows="4"
                              required></textarea>
                </div>
                <div class="form-group">
                    <label for="edit_postal_code" class="form-label">کد پستی</label>
                    <input type="text"
                           name="postal_code"
                           id="edit_postal_code"
                           class="form-input"
                           maxlength="10"
                           required>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn-secondary" onclick="closeEditModal()">انصراف</button>
                <button type="submit" class="btn-primary">ذخیره تغییرات</button>
            </div>
        </form>
    </div>
</div>

<!-- Delete Address Modal -->
<div class="modal" id="deleteModal">
    <div class="modal-content">
        <div class="modal-header">
            <h3 class="modal-title">حذف آدرس</h3>
            <button class="btn-close" onclick="closeDeleteModal()">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="modal-body">
            <div style="text-align: center; padding: 20px;">
                <div style="font-size: 3rem; color: #dc3545; margin-bottom: 20px;">
                    <i class="fas fa-exclamation-triangle"></i>
                </div>
                <h4 style="color: var(--text-color-dark); margin-bottom: 15px;">آیا از حذف این آدرس اطمینان دارید؟</h4>
                <p style="color: var(--text-color-medium); line-height: 1.6;" id="deleteAddressText"></p>
            </div>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn-secondary" onclick="closeDeleteModal()">انصراف</button>
            <form method="post" id="deleteForm" style="display: inline;">
                {% csrf_token %}
                <button type="submit" class="btn-delete">حذف آدرس</button>
            </form>
        </div>
    </div>
</div>
{% endblock %}

{% block extra_js %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Modal functions
    window.openAddModal = function() {
        document.getElementById('addModal').classList.add('show');
        document.getElementById('add_full_address').focus();
    };

    window.closeAddModal = function() {
        document.getElementById('addModal').classList.remove('show');
        document.getElementById('add_full_address').value = '';
        document.getElementById('add_postal_code').value = '';
    };

    window.openEditModal = function(id, address, postalCode) {
        const modal = document.getElementById('editModal');
        const form = document.getElementById('editForm');

        form.action = `/users/addresses/edit/${id}/`;
        document.getElementById('edit_full_address').value = address;
        document.getElementById('edit_postal_code').value = postalCode;

        modal.classList.add('show');
        document.getElementById('edit_full_address').focus();
    };

    window.closeEditModal = function() {
        document.getElementById('editModal').classList.remove('show');
    };

    window.openDeleteModal = function(id, address) {
        const modal = document.getElementById('deleteModal');
        const form = document.getElementById('deleteForm');
        const text = document.getElementById('deleteAddressText');

        form.action = `/users/addresses/delete/${id}/`;
        text.textContent = address;

        modal.classList.add('show');
    };

    window.closeDeleteModal = function() {
        document.getElementById('deleteModal').classList.remove('show');
    };

    // Close modals on outside click
    document.querySelectorAll('.modal').forEach(modal => {
        modal.addEventListener('click', function(e) {
            if (e.target === modal) {
                modal.classList.remove('show');
            }
        });
    });

    // Postal code validation
    const postalInputs = document.querySelectorAll('input[name="postal_code"]');
    postalInputs.forEach(input => {
        input.addEventListener('input', function() {
            this.value = this.value.replace(/\D/g, '').substring(0, 10);
        });
    });

    // Auto-hide alerts
    const alerts = document.querySelectorAll('.alert');
    alerts.forEach(alert => {
        setTimeout(() => {
            alert.style.opacity = '0';
            alert.style.transform = 'translateY(-10px)';
            setTimeout(() => alert.remove(), 300);
        }, 5000);
    });
});
</script>
{% endblock %}

====== FILE: templates/users/password_reset_complete.html ======

{% extends 'base/base.html' %}
{% load static %}

{% block title %}تغییر رمز عبور موفقیت‌آمیز | زیما{% endblock %}

{% block extra_css %}
<style>
    .complete-section {
        min-height: 100vh;
        background: linear-gradient(135deg, var(--zima-blush), var(--zima-champagne));
        padding: 140px 0 60px;
        position: relative;
        overflow: hidden;
    }

    .complete-section::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: url('{% static "images/patterns/subtle-pattern.png" %}') repeat;
        opacity: 0.03;
        pointer-events: none;
    }

    .complete-container {
        max-width: 600px;
        margin: 0 auto;
        padding: 0 20px;
        position: relative;
        z-index: 2;
    }

    .complete-card {
        background: white;
        border-radius: 20px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
        overflow: hidden;
        border: 2px solid var(--zima-pearl);
        text-align: center;
    }

    .complete-header {
        background: linear-gradient(135deg, #28a745, #20c997);
        color: white;
        padding: 40px 30px;
        position: relative;
    }

    .complete-header::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: url('{% static "images/patterns/elegant-pattern.png" %}') repeat;
        opacity: 0.1;
    }

    .complete-icon {
        width: 120px;
        height: 120px;
        background: rgba(255, 255, 255, 0.2);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 25px;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.3);
        position: relative;
        z-index: 2;
        animation: successPulse 2s infinite;
    }

    .complete-icon i {
        font-size: 4rem;
        color: white;
    }

    .complete-title {
        font-size: 2.2rem;
        font-weight: 700;
        margin: 0;
        font-family: 'Playfair Display', serif;
        position: relative;
        z-index: 2;
    }

    .complete-body {
        padding: 40px;
    }

    .success-message {
        background: rgba(40, 167, 69, 0.1);
        border-radius: 15px;
        padding: 30px;
        margin-bottom: 35px;
        border-left: 4px solid #28a745;
    }

    .success-message h5 {
        color: #155724;
        font-weight: 600;
        margin-bottom: 15px;
        font-size: 1.2rem;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 10px;
    }

    .success-message p {
        color: #155724;
        line-height: 1.6;
        margin-bottom: 10px;
        font-size: 1rem;
    }

    .success-message p:last-child {
        margin-bottom: 0;
        font-weight: 500;
    }

    .action-buttons {
        display: flex;
        gap: 15px;
        justify-content: center;
        flex-wrap: wrap;
        margin-bottom: 30px;
    }

    .btn-login {
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        color: white;
        border: none;
        padding: 15px 30px;
        border-radius: 25px;
        font-weight: 600;
        font-size: 1rem;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 10px;
    }

    .btn-login:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(255, 107, 107, 0.4);
        color: white;
    }

    .btn-home {
        background: transparent;
        color: var(--text-color-medium);
        border: 2px solid var(--zima-pearl);
        padding: 13px 30px;
        border-radius: 25px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 8px;
    }

    .btn-home:hover {
        border-color: var(--primary-color);
        color: var(--primary-color);
        transform: translateY(-1px);
    }

    .security-tips {
        background: var(--zima-blush);
        border-radius: 15px;
        padding: 25px;
        text-align: right;
    }

    .security-tips h6 {
        color: var(--text-color-dark);
        font-weight: 600;
        margin-bottom: 15px;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
    }

    .security-tips ul {
        color: var(--text-color-medium);
        font-size: 0.9rem;
        line-height: 1.6;
        margin: 0;
        padding-right: 20px;
    }

    .security-tips li {
        margin-bottom: 8px;
    }

    @keyframes successPulse {
        0% { transform: scale(1); }
        50% { transform: scale(1.05); }
        100% { transform: scale(1); }
    }

    /* Responsive Design */
    @media (max-width: 768px) {
        .complete-section {
            padding: 120px 0 40px;
        }

        .complete-container {
            padding: 0 15px;
        }

        .complete-header {
            padding: 30px 20px;
        }

        .complete-title {
            font-size: 1.8rem;
        }

        .complete-body {
            padding: 25px 20px;
        }

        .complete-icon {
            width: 100px;
            height: 100px;
            margin-bottom: 20px;
        }

        .complete-icon i {
            font-size: 3rem;
        }

        .action-buttons {
            flex-direction: column;
        }

        .success-message {
            padding: 25px 20px;
        }
    }
</style>
{% endblock %}

{% block content %}
<section class="complete-section">
    <div class="complete-container">
        <div class="complete-card">
            <div class="complete-header">
                <div class="complete-icon">
                    <i class="fas fa-check-circle"></i>
                </div>
                <h1 class="complete-title">موفقیت‌آمیز!</h1>
            </div>

            <div class="complete-body">
                <div class="success-message">
                    <h5>
                        <i class="fas fa-shield-alt"></i>
                        رمز عبور شما با موفقیت تغییر یافت
                    </h5>
                    <p>رمز عبور حساب کاربری شما با موفقیت به‌روزرسانی شد.</p>
                    <p>اکنون می‌توانید با رمز عبور جدید وارد حساب کاربری خود شوید.</p>
                </div>

                <div class="action-buttons">
                    <a href="{% url 'users:login' %}" class="btn-login">
                        <i class="fas fa-sign-in-alt"></i>
                        ورود به حساب کاربری
                    </a>
                    <a href="{% url 'home' %}" class="btn-home">
                        <i class="fas fa-home"></i>
                        صفحه اصلی
                    </a>
                </div>

                <div class="security-tips">
                    <h6>
                        <i class="fas fa-lightbulb"></i>
                        نکات امنیتی
                    </h6>
                    <ul>
                        <li>رمز عبور خود را در جای امنی نگهداری کنید</li>
                        <li>هرگز رمز عبور خود را با دیگران به اشتراک نگذارید</li>
                        <li>به طور منظم رمز عبور خود را تغییر دهید</li>
                        <li>از رمزهای عبور قوی و پیچیده استفاده کنید</li>
                        <li>هرگز در کامپیوترهای عمومی وارد حساب خود نشوید</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</section>
{% endblock %}

====== FILE: templates/users/password_reset_confirm.html ======

{% extends 'base/base.html' %}
{% load static %}

{% block title %}تنظیم رمز عبور جدید | زیما{% endblock %}

{% block extra_css %}
<style>
    .confirm-section {
        min-height: 100vh;
        background: linear-gradient(135deg, var(--zima-blush), var(--zima-champagne));
        padding: 140px 0 60px;
        position: relative;
        overflow: hidden;
    }

    .confirm-section::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: url('{% static "images/patterns/subtle-pattern.png" %}') repeat;
        opacity: 0.03;
        pointer-events: none;
    }

    .confirm-container {
        max-width: 500px;
        margin: 0 auto;
        padding: 0 20px;
        position: relative;
        z-index: 2;
    }

    .confirm-card {
        background: white;
        border-radius: 20px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
        overflow: hidden;
        border: 2px solid var(--zima-pearl);
    }

    .confirm-header {
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        color: white;
        padding: 30px;
        text-align: center;
        position: relative;
    }

    .confirm-header::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: url('{% static "images/patterns/elegant-pattern.png" %}') repeat;
        opacity: 0.1;
    }

    .confirm-icon {
        width: 80px;
        height: 80px;
        background: rgba(255, 255, 255, 0.2);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 20px;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.3);
        position: relative;
        z-index: 2;
    }

    .confirm-icon i {
        font-size: 2.5rem;
        color: white;
    }

    .confirm-title {
        font-size: 1.8rem;
        font-weight: 700;
        margin: 0;
        font-family: 'Playfair Display', serif;
        position: relative;
        z-index: 2;
    }

    .confirm-body {
        padding: 40px;
    }

    .confirm-description {
        text-align: center;
        color: var(--text-color-medium);
        margin-bottom: 30px;
        font-size: 1rem;
        line-height: 1.6;
    }

    .form-group {
        margin-bottom: 25px;
    }

    .form-label {
        display: block;
        margin-bottom: 8px;
        font-weight: 600;
        color: var(--text-color-dark);
        font-size: 0.95rem;
    }

    .form-control {
        width: 100%;
        padding: 15px 20px;
        border: 2px solid var(--zima-pearl);
        border-radius: 12px;
        font-size: 1rem;
        transition: all 0.3s ease;
        background: var(--zima-blush);
    }

    .form-control:focus {
        outline: none;
        border-color: var(--primary-color);
        box-shadow: 0 0 0 3px rgba(255, 107, 107, 0.1);
        background: white;
    }

    .form-control.is-invalid {
        border-color: #dc3545;
        background: rgba(220, 53, 69, 0.05);
    }

    .form-control.is-valid {
        border-color: #28a745;
        background: rgba(40, 167, 69, 0.05);
    }

    .invalid-feedback,
    .valid-feedback {
        display: block;
        font-size: 0.875rem;
        margin-top: 5px;
    }

    .invalid-feedback {
        color: #dc3545;
    }

    .valid-feedback {
        color: #28a745;
    }

    .password-strength {
        margin-top: 10px;
        padding: 10px 15px;
        border-radius: 8px;
        font-size: 0.85rem;
        font-weight: 500;
    }

    .strength-weak {
        background: rgba(220, 53, 69, 0.1);
        color: #721c24;
        border-left: 3px solid #dc3545;
    }

    .strength-fair {
        background: rgba(255, 193, 7, 0.1);
        color: #856404;
        border-left: 3px solid #ffc107;
    }

    .strength-good {
        background: rgba(23, 162, 184, 0.1);
        color: #0c5460;
        border-left: 3px solid #17a2b8;
    }

    .strength-strong {
        background: rgba(40, 167, 69, 0.1);
        color: #155724;
        border-left: 3px solid #28a745;
    }

    .form-text {
        font-size: 0.85rem;
        color: var(--text-color-medium);
        margin-top: 8px;
        line-height: 1.4;
    }

    .btn-confirm {
        width: 100%;
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        color: white;
        border: none;
        padding: 15px 25px;
        border-radius: 12px;
        font-weight: 600;
        font-size: 1rem;
        cursor: pointer;
        transition: all 0.3s ease;
        margin-bottom: 20px;
    }

    .btn-confirm:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(255, 107, 107, 0.4);
    }

    .btn-confirm:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        transform: none;
    }

    .error-state {
        text-align: center;
        padding: 40px 20px;
    }

    .error-icon {
        font-size: 4rem;
        color: #dc3545;
        margin-bottom: 20px;
    }

    .error-title {
        font-size: 1.5rem;
        font-weight: 600;
        color: var(--text-color-dark);
        margin-bottom: 15px;
    }

    .error-text {
        color: var(--text-color-medium);
        line-height: 1.6;
        margin-bottom: 25px;
    }

    .btn-retry {
        background: transparent;
        color: var(--primary-color);
        border: 2px solid var(--primary-color);
        padding: 12px 25px;
        border-radius: 25px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 8px;
    }

    .btn-retry:hover {
        background: var(--primary-color);
        color: white;
        transform: translateY(-1px);
    }

    .alert {
        padding: 15px 20px;
        border-radius: 12px;
        margin-bottom: 25px;
        font-size: 0.95rem;
        border: none;
    }

    .alert-danger {
        background: rgba(220, 53, 69, 0.1);
        color: #721c24;
        border-left: 4px solid #dc3545;
    }

    /* Responsive Design */
    @media (max-width: 768px) {
        .confirm-section {
            padding: 120px 0 40px;
        }

        .confirm-container {
            padding: 0 15px;
        }

        .confirm-header {
            padding: 25px 20px;
        }

        .confirm-title {
            font-size: 1.5rem;
        }

        .confirm-body {
            padding: 25px 20px;
        }

        .confirm-icon {
            width: 70px;
            height: 70px;
            margin-bottom: 15px;
        }

        .confirm-icon i {
            font-size: 2rem;
        }
    }
</style>
{% endblock %}

{% block content %}
<section class="confirm-section">
    <div class="confirm-container">
        <div class="confirm-card">
            {% if validlink %}
            <div class="confirm-header">
                <div class="confirm-icon">
                    <i class="fas fa-lock"></i>
                </div>
                <h1 class="confirm-title">تنظیم رمز جدید</h1>
            </div>

            <div class="confirm-body">
                <p class="confirm-description">
                    لطفاً رمز عبور جدید خود را وارد کنید.
                </p>

                <!-- Display form errors -->
                {% if form.non_field_errors %}
                <div class="alert alert-danger">
                    {% for error in form.non_field_errors %}
                    <i class="fas fa-exclamation-triangle"></i> {{ error }}
                    {% endfor %}
                </div>
                {% endif %}

                <form method="post" class="confirm-form">
                    {% csrf_token %}

                    <div class="form-group">
                        <label for="id_new_password1" class="form-label">
                            <i class="fas fa-key"></i>
                            رمز عبور جدید
                        </label>
                        <input
                            type="password"
                            name="new_password1"
                            id="id_new_password1"
                            class="form-control {% if form.new_password1.errors %}is-invalid{% endif %}"
                            required
                            autocomplete="new-password"
                        >
                        {% if form.new_password1.errors %}
                        <div class="invalid-feedback">
                            {% for error in form.new_password1.errors %}
                            {{ error }}
                            {% endfor %}
                        </div>
                        {% endif %}
                        <div id="passwordStrength"></div>
                        {% if form.new_password1.help_text %}
                        <div class="form-text">
                            {{ form.new_password1.help_text|safe }}
                        </div>
                        {% endif %}
                    </div>

                    <div class="form-group">
                        <label for="id_new_password2" class="form-label">
                            <i class="fas fa-check-double"></i>
                            تأیید رمز عبور
                        </label>
                        <input
                            type="password"
                            name="new_password2"
                            id="id_new_password2"
                            class="form-control {% if form.new_password2.errors %}is-invalid{% endif %}"
                            required
                            autocomplete="new-password"
                        >
                        {% if form.new_password2.errors %}
                        <div class="invalid-feedback">
                            {% for error in form.new_password2.errors %}
                            {{ error }}
                            {% endfor %}
                        </div>
                        {% endif %}
                        <div id="passwordMatch"></div>
                    </div>

                    <button type="submit" class="btn-confirm" id="submitBtn">
                        <i class="fas fa-save"></i>
                        تنظیم رمز عبور جدید
                    </button>
                </form>
            </div>

            {% else %}
            <div class="confirm-body">
                <div class="error-state">
                    <div class="error-icon">
                        <i class="fas fa-exclamation-triangle"></i>
                    </div>
                    <h2 class="error-title">لینک نامعتبر</h2>
                    <p class="error-text">
                        لینک بازیابی رمز عبور نامعتبر است یا قبلاً استفاده شده است.<br>
                        لطفاً درخواست بازیابی رمز عبور جدیدی ارسال کنید.
                    </p>
                    <a href="{% url 'users:password_reset' %}" class="btn-retry">
                        <i class="fas fa-redo"></i>
                        درخواست بازیابی جدید
                    </a>
                </div>
            </div>
            {% endif %}
        </div>
    </div>
</section>
{% endblock %}

{% block extra_js %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    const newPasswordInput = document.getElementById('id_new_password1');
    const confirmPasswordInput = document.getElementById('id_new_password2');
    const submitBtn = document.getElementById('submitBtn');
    const form = document.querySelector('.confirm-form');

    if (newPasswordInput && confirmPasswordInput) {
        // Password strength checker
        newPasswordInput.addEventListener('input', function() {
            const password = this.value;
            const strength = checkPasswordStrength(password);
            updatePasswordStrength(strength);
            validatePasswords();
        });

        // Password confirmation validation
        confirmPasswordInput.addEventListener('input', validatePasswords);

        // Form submission
        form.addEventListener('submit', function(e) {
            const newPassword = newPasswordInput.value;
            const confirmPassword = confirmPasswordInput.value;

            if (!newPassword || !confirmPassword) {
                e.preventDefault();
                showError('لطفاً تمام فیلدها را پر کنید');
                return;
            }

            if (newPassword !== confirmPassword) {
                e.preventDefault();
                showError('رمزهای عبور مطابقت ندارند');
                return;
            }

            if (newPassword.length < 8) {
                e.preventDefault();
                showError('رمز عبور باید حداقل ۸ کاراکتر باشد');
                return;
            }

            // Show loading state
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> در حال تنظیم...';
            submitBtn.disabled = true;
        });
    }

    function checkPasswordStrength(password) {
        let score = 0;
        const feedback = [];

        if (password.length >= 8) score += 1;
        else feedback.push('حداقل ۸ کاراکتر');

        if (/[A-Z]/.test(password)) score += 1;
        else feedback.push('حروف بزرگ انگلیسی');

        if (/[a-z]/.test(password)) score += 1;
        else feedback.push('حروف کوچک انگلیسی');

        if (/\d/.test(password)) score += 1;
        else feedback.push('اعداد');

        if (/[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/.test(password)) score += 1;
        else feedback.push('کاراکترهای خاص');

        let level, text;
        if (score <= 1) {
            level = 'weak';
            text = 'ضعیف - ' + feedback.slice(0, 2).join(', ');
        } else if (score <= 2) {
            level = 'fair';
            text = 'متوسط - ' + feedback.slice(0, 1).join(', ');
        } else if (score <= 3) {
            level = 'good';
            text = 'خوب';
        } else {
            level = 'strong';
            text = 'قوی';
        }

        return { level, text };
    }

    function updatePasswordStrength(strength) {
        const strengthDiv = document.getElementById('passwordStrength');
        if (newPasswordInput.value) {
            strengthDiv.innerHTML = `<div class="password-strength strength-${strength.level}">${strength.text}</div>`;
        } else {
            strengthDiv.innerHTML = '';
        }
    }

    function validatePasswords() {
        const newPassword = newPasswordInput.value;
        const confirmPassword = confirmPasswordInput.value;
        const matchDiv = document.getElementById('passwordMatch');

        if (confirmPassword && newPassword !== confirmPassword) {
            confirmPasswordInput.classList.add('is-invalid');
            confirmPasswordInput.classList.remove('is-valid');
            matchDiv.innerHTML = '<div class="invalid-feedback">رمزهای عبور مطابقت ندارند</div>';
            submitBtn.disabled = true;
        } else if (confirmPassword && newPassword === confirmPassword) {
            confirmPasswordInput.classList.remove('is-invalid');
            confirmPasswordInput.classList.add('is-valid');
            matchDiv.innerHTML = '<div class="valid-feedback">رمزهای عبور مطابقت دارند</div>';
            submitBtn.disabled = false;
        } else {
            confirmPasswordInput.classList.remove('is-invalid', 'is-valid');
            matchDiv.innerHTML = '';
        }
    }

    function showError(message) {
        const existingError = document.querySelector('.custom-error');
        if (existingError) existingError.remove();

        const errorDiv = document.createElement('div');
        errorDiv.className = 'alert alert-danger custom-error';
        errorDiv.innerHTML = `<i class="fas fa-exclamation-triangle"></i> ${message}`;

        form.parentNode.insertBefore(errorDiv, form);

        setTimeout(() => errorDiv.remove(), 5000);
    }
});
</script>
{% endblock %}

====== FILE: templates/users/password_reset_subject.txt ======

🔑 بازیابی رمز عبور حساب زیما شما


====== FILE: templates/users/signup.html ======

{% extends 'base/base.html' %}
{% load static %}

{% block title %}ثبت نام | زیما{% endblock %}

{% block extra_css %}
<style>
    .auth-section {
        min-height: 100vh;
        background: linear-gradient(135deg, var(--zima-champagne), var(--zima-blush));
        display: flex;
        align-items: center;
        padding: 140px 0 60px;
        position: relative;
        overflow: hidden;
    }

    .auth-section::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: url('{% static "images/patterns/floral-pattern.png" %}') repeat;
        opacity: 0.05;
        pointer-events: none;
    }

    .auth-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 20px;
        position: relative;
        z-index: 2;
    }

    .auth-wrapper {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 80px;
        align-items: center;
        background: white;
        border-radius: 30px;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.1);
        overflow: hidden;
    }

    .auth-visual {
        background: linear-gradient(135deg, var(--secondary-color), var(--primary-color));
        padding: 80px 60px;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        text-align: center;
        color: white;
        position: relative;
        order: 2;
    }

    .auth-visual::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: url('{% static "images/patterns/elegant-pattern.png" %}') repeat;
        opacity: 0.1;
    }

    .visual-content {
        position: relative;
        z-index: 2;
    }

    .welcome-title {
        font-size: 2.5rem;
        font-weight: 700;
        margin-bottom: 15px;
        font-family: 'Playfair Display', serif;
    }

    .welcome-subtitle {
        font-size: 1.1rem;
        margin-bottom: 30px;
        opacity: 0.9;
        line-height: 1.6;
    }

    .signup-benefits {
        list-style: none;
        padding: 0;
        margin: 0;
    }

    .signup-benefits li {
        display: flex;
        align-items: center;
        gap: 12px;
        margin-bottom: 15px;
        font-size: 0.95rem;
        opacity: 0.9;
    }

    .signup-benefits i {
        color: var(--zima-champagne);
        font-size: 1.1rem;
        width: 20px;
    }

    .auth-form-section {
        padding: 80px 60px;
        order: 1;
    }

    .form-header {
        text-align: center;
        margin-bottom: 40px;
    }

    .form-title {
        font-size: 2rem;
        font-weight: 700;
        color: var(--text-color-dark);
        margin-bottom: 10px;
        font-family: 'Playfair Display', serif;
    }

    .form-subtitle {
        color: var(--text-color-medium);
        font-size: 1rem;
    }

    .auth-form {
        max-width: 400px;
        margin: 0 auto;
    }

    .form-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 15px;
    }

    .form-group {
        margin-bottom: 20px;
        position: relative;
    }

    .form-label {
        display: block;
        margin-bottom: 8px;
        font-weight: 600;
        color: var(--text-color-dark);
        font-size: 0.9rem;
    }

    .form-input {
        width: 100%;
        padding: 15px 20px;
        border: 2px solid var(--zima-pearl);
        border-radius: 15px;
        font-size: 1rem;
        font-family: 'Vazir', sans-serif;
        transition: all 0.3s ease;
        background: white;
        outline: none;
    }

    .form-input:focus {
        border-color: var(--primary-color);
        box-shadow: 0 0 0 3px rgba(255, 107, 107, 0.1);
    }

    .form-input.is-invalid {
        border-color: #dc3545;
        box-shadow: 0 0 0 3px rgba(220, 53, 69, 0.1);
    }

    .form-input.is-valid {
        border-color: #28a745;
        box-shadow: 0 0 0 3px rgba(40, 167, 69, 0.1);
    }

    .input-icon {
        position: absolute;
        left: 20px;
        top: 50%;
        transform: translateY(-50%);
        color: var(--text-color-medium);
        font-size: 1.1rem;
    }

    .form-input:focus + .input-icon {
        color: var(--primary-color);
    }

    .password-toggle {
        position: absolute;
        left: 20px;
        top: 50%;
        transform: translateY(-50%);
        background: none;
        border: none;
        color: var(--text-color-medium);
        cursor: pointer;
        font-size: 1.1rem;
        transition: color 0.3s ease;
    }

    .password-toggle:hover {
        color: var(--primary-color);
    }

    .password-strength {
        margin-top: 8px;
        font-size: 0.8rem;
    }

    .strength-bar {
        height: 4px;
        border-radius: 2px;
        background: #eee;
        margin: 5px 0;
        overflow: hidden;
    }

    .strength-fill {
        height: 100%;
        transition: all 0.3s ease;
        border-radius: 2px;
    }

    .strength-weak { background: #dc3545; width: 25%; }
    .strength-fair { background: #ffc107; width: 50%; }
    .strength-good { background: #17a2b8; width: 75%; }
    .strength-strong { background: #28a745; width: 100%; }

    .form-check {
        display: flex;
        align-items: flex-start;
        gap: 10px;
        margin-bottom: 25px;
    }

    .form-check-input {
        width: 18px;
        height: 18px;
        border: 2px solid var(--zima-pearl);
        border-radius: 4px;
        cursor: pointer;
        margin-top: 2px;
        flex-shrink: 0;
    }

    .form-check-input:checked {
        background: var(--primary-color);
        border-color: var(--primary-color);
    }

    .form-check-label {
        font-size: 0.9rem;
        color: var(--text-color-medium);
        cursor: pointer;
        line-height: 1.4;
    }

    .form-check-label a {
        color: var(--primary-color);
        text-decoration: none;
    }

    .form-check-label a:hover {
        text-decoration: underline;
    }

    .invalid-feedback {
        display: block;
        color: #dc3545;
        font-size: 0.85rem;
        margin-top: 5px;
    }

    .alert {
        padding: 15px 20px;
        border-radius: 12px;
        margin-bottom: 25px;
        font-size: 0.9rem;
    }

    .alert-danger {
        background: rgba(220, 53, 69, 0.1);
        color: #721c24;
        border: 1px solid rgba(220, 53, 69, 0.2);
    }

    .alert-success {
        background: rgba(40, 167, 69, 0.1);
        color: #155724;
        border: 1px solid rgba(40, 167, 69, 0.2);
    }

    .btn-auth {
        width: 100%;
        padding: 15px 20px;
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        color: white;
        border: none;
        border-radius: 50px;
        font-size: 1.1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        text-transform: uppercase;
        letter-spacing: 1px;
        margin-bottom: 20px;
    }

    .btn-auth:hover:not(:disabled) {
        transform: translateY(-2px);
        box-shadow: 0 10px 25px rgba(255, 107, 107, 0.4);
    }

    .btn-auth:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }

    .form-divider {
        position: relative;
        text-align: center;
        margin: 30px 0;
    }

    .form-divider::before {
        content: '';
        position: absolute;
        top: 50%;
        left: 0;
        right: 0;
        height: 1px;
        background: var(--zima-pearl);
    }

    .form-divider span {
        background: white;
        padding: 0 20px;
        color: var(--text-color-medium);
        font-size: 0.9rem;
    }

    .auth-switch {
        text-align: center;
        padding: 25px;
        background: var(--zima-blush);
        border-radius: 15px;
    }

    .auth-switch-text {
        color: var(--text-color-medium);
        margin-bottom: 15px;
        font-size: 0.95rem;
    }

    .btn-switch {
        background: white;
        color: var(--primary-color);
        border: 2px solid var(--primary-color);
        padding: 12px 30px;
        border-radius: 25px;
        text-decoration: none;
        font-weight: 600;
        transition: all 0.3s ease;
        display: inline-block;
    }

    .btn-switch:hover {
        background: var(--primary-color);
        color: white;
        transform: translateY(-2px);
    }

    /* Responsive Design */
    @media (max-width: 992px) {
        .auth-wrapper {
            grid-template-columns: 1fr;
            gap: 0;
        }

        .auth-visual {
            order: 1;
            padding: 60px 40px;
        }

        .auth-form-section {
            order: 2;
            padding: 60px 40px;
        }

        .welcome-title {
            font-size: 2rem;
        }

        .form-row {
            grid-template-columns: 1fr;
            gap: 0;
        }
    }

    @media (max-width: 768px) {
        .auth-section {
            padding: 120px 0 40px;
        }

        .auth-container {
            padding: 0 15px;
        }

        .auth-visual,
        .auth-form-section {
            padding: 40px 30px;
        }

        .welcome-title {
            font-size: 1.8rem;
        }

        .form-title {
            font-size: 1.6rem;
        }
    }

    @media (max-width: 480px) {
        .auth-visual,
        .auth-form-section {
            padding: 30px 20px;
        }

        .welcome-title {
            font-size: 1.5rem;
        }

        .form-title {
            font-size: 1.4rem;
        }

        .form-input {
            padding: 12px 16px;
        }

        .btn-auth {
            padding: 12px 16px;
        }
    }
</style>
{% endblock %}

{% block content %}
<section class="auth-section">
    <div class="auth-container">
        <div class="auth-wrapper">
            <!-- Form Section -->
            <div class="auth-form-section">
                <div class="form-header">
                    <h2 class="form-title">عضویت در زیما</h2>
                    <p class="form-subtitle">اطلاعات خود را برای شروع وارد کنید</p>
                </div>

                <form class="auth-form" method="post" action="{% url 'users:signup' %}">
                    {% csrf_token %}

                    {% if messages %}
                        {% for message in messages %}
                            <div class="alert alert-{{ message.tags }}">
                                {{ message }}
                            </div>
                        {% endfor %}
                    {% endif %}

                    <div class="form-group">
                        <label for="id_username" class="form-label">نام کاربری</label>
                        <div style="position: relative;">
                            <input type="text"
                                name="username"
                                id="id_username"
                                class="form-input {% if form.username.errors %}is-invalid{% endif %}"
                                value="{{ form.username.value|default:'' }}"
                                placeholder="نام کاربری خود را انتخاب کنید"
                                required>
                            <i class="fas fa-user input-icon"></i>
                        </div>
                        {% if form.username.errors %}
                            <div class="invalid-feedback">
                                {% for error in form.username.errors %}
                                    {{ error }}
                                {% endfor %}
                            </div>
                        {% endif %}
                    </div>

                    <div class="form-group">
                        <label for="id_email" class="form-label">ایمیل</label>
                        <div style="position: relative;">
                            <input type="email"
                                name="email"
                                id="id_email"
                                class="form-input {% if form.email.errors %}is-invalid{% endif %}"
                                value="{{ form.email.value|default:'' }}"
                                placeholder="ایمیل خود را وارد کنید"
                                required>
                            <i class="fas fa-envelope input-icon"></i>
                        </div>
                        {% if form.email.errors %}
                            <div class="invalid-feedback">
                                {% for error in form.email.errors %}
                                    {{ error }}
                                {% endfor %}
                            </div>
                        {% endif %}
                    </div>

                    <div class="form-group">
                        <label for="id_phone_number" class="form-label">شماره موبایل</label>
                        <div style="position: relative;">
                            <input type="text"
                                name="phone_number"
                                id="id_phone_number"
                                class="form-input {% if form.phone_number.errors %}is-invalid{% endif %}"
                                value="{{ form.phone_number.value|default:'' }}"
                                placeholder="09xxxxxxxxx"
                                required>
                            <i class="fas fa-mobile-alt input-icon"></i>
                        </div>
                        {% if form.phone_number.errors %}
                            <div class="invalid-feedback">
                                {% for error in form.phone_number.errors %}
                                    {{ error }}
                                {% endfor %}
                            </div>
                        {% endif %}
                    </div>

                    <div class="form-group">
                        <label for="id_password1" class="form-label">رمز عبور</label>
                        <div style="position: relative;">
                            <input type="password"
                                name="password1"
                                id="id_password1"
                                class="form-input {% if form.password1.errors %}is-invalid{% endif %}"
                                placeholder="رمز عبور قوی انتخاب کنید"
                                required>
                            <button type="button" class="password-toggle" onclick="togglePassword('id_password1')">
                                <i class="fas fa-eye" id="id_password1_icon"></i>
                            </button>
                        </div>
                        <div class="password-strength" id="password1Strength" style="display: none;">
                            <div class="strength-bar">
                                <div class="strength-fill" id="strengthFill1"></div>
                            </div>
                            <span id="strengthText1"></span>
                        </div>
                        {% if form.password1.errors %}
                            <div class="invalid-feedback">
                                {% for error in form.password1.errors %}
                                    {{ error }}
                                {% endfor %}
                            </div>
                        {% endif %}
                    </div>

                    <div class="form-group">
                        <label for="id_password2" class="form-label">تکرار رمز عبور</label>
                        <div style="position: relative;">
                            <input type="password"
                                name="password2"
                                id="id_password2"
                                class="form-input {% if form.password2.errors %}is-invalid{% endif %}"
                                placeholder="رمز عبور را دوباره وارد کنید"
                                required>
                            <button type="button" class="password-toggle" onclick="togglePassword('id_password2')">
                                <i class="fas fa-eye" id="id_password2_icon"></i>
                            </button>
                        </div>
                        {% if form.password2.errors %}
                            <div class="invalid-feedback">
                                {% for error in form.password2.errors %}
                                    {{ error }}
                                {% endfor %}
                            </div>
                        {% endif %}
                    </div>

                    <div class="form-check">
                        <input type="checkbox" name="terms" id="id_terms" class="form-check-input" required>
                        <label for="id_terms" class="form-check-label">
                            قوانین و مقررات را می‌پذیرم
                        </label>
                    </div>

                    <button type="submit" class="btn-auth" id="submitBtn">عضویت در زیما</button>

                    <div class="form-divider">
                        <span>یا</span>
                    </div>

                    <div class="auth-switch">
                        <p class="auth-switch-text">قبلاً عضو شده‌اید؟</p>
                        <a href="{% url 'users:login' %}" class="btn-switch">ورود به حساب</a>
                    </div>
                </form>
            </div>

            <!-- Visual Section -->
            <div class="auth-visual">
                <div class="visual-content">
                    <h1 class="welcome-title">به زیما خوش آمدید</h1>
                    <p class="welcome-subtitle">دنیای زیبایی و راحتی را کشف کنید. عضویت در زیما تجربه‌ای منحصربه‌فرد از خرید آنلاین است.</p>

                    <ul class="signup-benefits">
                        <li>
                            <i class="fas fa-gem"></i>
                            <span>دسترسی به کالکشن‌های ویژه</span>
                        </li>
                        <li>
                            <i class="fas fa-percentage"></i>
                            <span>تخفیف‌های اختصاصی اعضا</span>
                        </li>
                        <li>
                            <i class="fas fa-shipping-fast"></i>
                            <span>ارسال سریع و رایگان</span>
                        </li>
                        <li>
                            <i class="fas fa-heart"></i>
                            <span>ذخیره محصولات موردعلاقه</span>
                        </li>
                        <li>
                            <i class="fas fa-headset"></i>
                            <span>پشتیبانی اختصاصی ۲۴/۷</span>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</section>
{% endblock %}

{% block extra_js %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Password toggle functionality
    window.togglePassword = function(inputId) {
        const input = document.getElementById(inputId);
        const icon = document.getElementById(inputId + '_icon');

        if (input.type === 'password') {
            input.type = 'text';
            icon.classList.remove('fa-eye');
            icon.classList.add('fa-eye-slash');
        } else {
            input.type = 'password';
            icon.classList.remove('fa-eye-slash');
            icon.classList.add('fa-eye');
        }
    };

    // Password strength checker
    const password1Input = document.getElementById('id_password1');
    const strengthDiv = document.getElementById('password1Strength');
    const strengthFill = document.getElementById('strengthFill1');
    const strengthText = document.getElementById('strengthText1');

    password1Input.addEventListener('input', function() {
        const password = this.value;
        const strength = checkPasswordStrength(password);

        if (password.length > 0) {
            strengthDiv.style.display = 'block';
            strengthFill.className = 'strength-fill strength-' + strength.level;
            strengthText.textContent = strength.text;
        } else {
            strengthDiv.style.display = 'none';
        }
    });

    function checkPasswordStrength(password) {
        let score = 0;
        let feedback = [];

        if (password.length >= 8) score++;
        else feedback.push('حداقل ۸ کاراکتر');

        if (/[a-z]/.test(password)) score++;
        else feedback.push('حروف کوچک');

        if (/[A-Z]/.test(password)) score++;
        else feedback.push('حروف بزرگ');

        if (/[0-9]/.test(password)) score++;
        else feedback.push('اعداد');

        if (/[^A-Za-z0-9]/.test(password)) score++;
        else feedback.push('کاراکترهای خاص');

        const levels = ['weak', 'fair', 'good', 'strong'];
        const texts = ['ضعیف', 'متوسط', 'خوب', 'قوی'];

        let level, text;
        if (score <= 1) {
            level = 'weak';
            text = 'ضعیف - ' + feedback.slice(0, 2).join(', ');
        } else if (score <= 2) {
            level = 'fair';
            text = 'متوسط - ' + feedback.slice(0, 1).join(', ');
        } else if (score <= 3) {
            level = 'good';
            text = 'خوب';
        } else {
            level = 'strong';
            text = 'قوی';
        }

        return { level, text };
    }

    // Password confirmation check
    const password2Input = document.getElementById('id_password2');
    password2Input.addEventListener('input', function() {
        if (this.value && this.value !== password1Input.value) {
            this.classList.add('is-invalid');
            this.classList.remove('is-valid');
        } else if (this.value) {
            this.classList.add('is-valid');
            this.classList.remove('is-invalid');
        }
    });

    // Input validation and styling
    const inputs = document.querySelectorAll('.form-input');
    inputs.forEach(input => {
        input.addEventListener('input', function() {
            if (this.value.trim()) {
                this.classList.add('is-valid');
                this.classList.remove('is-invalid');
            } else {
                this.classList.remove('is-valid', 'is-invalid');
            }
        });

        input.addEventListener('blur', function() {
            if (this.hasAttribute('required') && !this.value.trim()) {
                this.classList.add('is-invalid');
                this.classList.remove('is-valid');
            }
        });
    });

    // Phone number formatting
    const phoneInput = document.getElementById('id_phone_number');
    phoneInput.addEventListener('input', function() {
        let value = this.value.replace(/\D/g, '');
        if (value.startsWith('98')) {
            value = value.substring(2);
        }
        if (value.startsWith('0')) {
            value = value.substring(1);
        }
        if (value.length > 0) {
            value = '09' + value.substring(1, 10);
        }
        this.value = value;
    });

    // Auto-hide alerts after 5 seconds
    const alerts = document.querySelectorAll('.alert');
    alerts.forEach(alert => {
        setTimeout(() => {
            alert.style.opacity = '0';
            alert.style.transform = 'translateY(-10px)';
            setTimeout(() => alert.remove(), 300);
        }, 5000);
    });
});
</script>
{% endblock %}

====== FILE: templates/users/password_reset.html ======

{% extends 'base/base.html' %}
{% load static %}

{% block title %}بازیابی رمز عبور | زیما{% endblock %}

{% block extra_css %}
<style>
    .password-reset-section {
        min-height: 100vh;
        background: linear-gradient(135deg, var(--zima-blush), var(--zima-champagne));
        padding: 140px 0 60px;
        position: relative;
        overflow: hidden;
    }

    .password-reset-section::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: url('{% static "images/patterns/subtle-pattern.png" %}') repeat;
        opacity: 0.03;
        pointer-events: none;
    }

    .reset-container {
        max-width: 500px;
        margin: 0 auto;
        padding: 0 20px;
        position: relative;
        z-index: 2;
    }

    .reset-card {
        background: white;
        border-radius: 20px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
        overflow: hidden;
        border: 2px solid var(--zima-pearl);
    }

    .reset-header {
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        color: white;
        padding: 30px;
        text-align: center;
        position: relative;
    }

    .reset-header::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: url('{% static "images/patterns/elegant-pattern.png" %}') repeat;
        opacity: 0.1;
    }

    .reset-icon {
        width: 80px;
        height: 80px;
        background: rgba(255, 255, 255, 0.2);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 20px;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.3);
        position: relative;
        z-index: 2;
    }

    .reset-icon i {
        font-size: 2.5rem;
        color: white;
    }

    .reset-title {
        font-size: 1.8rem;
        font-weight: 700;
        margin: 0;
        font-family: 'Playfair Display', serif;
        position: relative;
        z-index: 2;
    }

    .reset-body {
        padding: 40px;
    }

    .reset-description {
        text-align: center;
        color: var(--text-color-medium);
        margin-bottom: 30px;
        font-size: 1rem;
        line-height: 1.6;
    }

    .form-group {
        margin-bottom: 25px;
    }

    .form-label {
        display: block;
        margin-bottom: 8px;
        font-weight: 600;
        color: var(--text-color-dark);
        font-size: 0.95rem;
    }

    .form-control {
        width: 100%;
        padding: 15px 20px;
        border: 2px solid var(--zima-pearl);
        border-radius: 12px;
        font-size: 1rem;
        transition: all 0.3s ease;
        background: var(--zima-blush);
    }

    .form-control:focus {
        outline: none;
        border-color: var(--primary-color);
        box-shadow: 0 0 0 3px rgba(255, 107, 107, 0.1);
        background: white;
    }

    .form-control.is-invalid {
        border-color: #dc3545;
        background: rgba(220, 53, 69, 0.05);
    }

    .invalid-feedback {
        display: block;
        color: #dc3545;
        font-size: 0.875rem;
        margin-top: 5px;
    }

    .btn-reset {
        width: 100%;
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        color: white;
        border: none;
        padding: 15px 25px;
        border-radius: 12px;
        font-weight: 600;
        font-size: 1rem;
        cursor: pointer;
        transition: all 0.3s ease;
        margin-bottom: 20px;
    }

    .btn-reset:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(255, 107, 107, 0.4);
    }

    .btn-reset:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        transform: none;
    }

    .divider {
        height: 1px;
        background: var(--zima-pearl);
        margin: 25px 0;
        position: relative;
    }

    .divider::before {
        content: 'یا';
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: white;
        padding: 0 15px;
        color: var(--text-color-medium);
        font-size: 0.9rem;
    }

    .btn-back {
        width: 100%;
        background: transparent;
        color: var(--primary-color);
        border: 2px solid var(--primary-color);
        padding: 12px 25px;
        border-radius: 12px;
        font-weight: 500;
        font-size: 0.95rem;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
    }

    .btn-back:hover {
        background: var(--primary-color);
        color: white;
        transform: translateY(-1px);
    }

    .alert {
        padding: 15px 20px;
        border-radius: 12px;
        margin-bottom: 25px;
        font-size: 0.95rem;
        border: none;
    }

    .alert-danger {
        background: rgba(220, 53, 69, 0.1);
        color: #721c24;
        border-left: 4px solid #dc3545;
    }

    .security-note {
        background: var(--zima-blush);
        border-radius: 12px;
        padding: 20px;
        margin-top: 25px;
        border-left: 4px solid var(--primary-color);
    }

    .security-note h6 {
        color: var(--text-color-dark);
        font-weight: 600;
        margin-bottom: 10px;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .security-note p {
        color: var(--text-color-medium);
        font-size: 0.9rem;
        line-height: 1.5;
        margin: 0;
    }

    /* Responsive Design */
    @media (max-width: 768px) {
        .password-reset-section {
            padding: 120px 0 40px;
        }

        .reset-container {
            padding: 0 15px;
        }

        .reset-header {
            padding: 25px 20px;
        }

        .reset-title {
            font-size: 1.5rem;
        }

        .reset-body {
            padding: 25px 20px;
        }

        .reset-icon {
            width: 70px;
            height: 70px;
            margin-bottom: 15px;
        }

        .reset-icon i {
            font-size: 2rem;
        }
    }
</style>
{% endblock %}

{% block content %}
<section class="password-reset-section">
    <div class="reset-container">
        <div class="reset-card">
            <div class="reset-header">
                <div class="reset-icon">
                    <i class="fas fa-key"></i>
                </div>
                <h1 class="reset-title">بازیابی رمز عبور</h1>
            </div>

            <div class="reset-body">
                <p class="reset-description">
                    برای بازیابی رمز عبور، آدرس ایمیل خود را وارد کنید.<br>
                    لینک بازیابی رمز عبور برای شما ارسال خواهد شد.
                </p>

                <!-- Display form errors -->
                {% if form.non_field_errors %}
                <div class="alert alert-danger">
                    {% for error in form.non_field_errors %}
                    <i class="fas fa-exclamation-triangle"></i> {{ error }}
                    {% endfor %}
                </div>
                {% endif %}

                <form method="post" class="reset-form">
                    {% csrf_token %}

                    <div class="form-group">
                        <label for="id_email" class="form-label">
                            <i class="fas fa-envelope"></i>
                            آدرس ایمیل
                        </label>
                        <input
                            type="email"
                            name="email"
                            id="id_email"
                            class="form-control {% if form.email.errors %}is-invalid{% endif %}"
                            placeholder="example@email.com"
                            required
                            autocomplete="email"
                        >
                        {% if form.email.errors %}
                        <div class="invalid-feedback">
                            {% for error in form.email.errors %}
                            {{ error }}
                            {% endfor %}
                        </div>
                        {% endif %}
                    </div>

                    <button type="submit" class="btn-reset" id="submitBtn">
                        <i class="fas fa-paper-plane"></i>
                        ارسال لینک بازیابی
                    </button>
                </form>

                <div class="divider"></div>

                <a href="{% url 'users:login' %}" class="btn-back">
                    <i class="fas fa-arrow-right"></i>
                    بازگشت به صفحه ورود
                </a>

                <div class="security-note">
                    <h6>
                        <i class="fas fa-shield-alt"></i>
                        نکته امنیتی
                    </h6>
                    <p>
                        اگر حساب کاربری با این ایمیل وجود داشته باشد، لینک بازیابی رمز عبور برای شما ارسال خواهد شد.
                        لطفاً صندوق ورودی و پوشه اسپم خود را بررسی کنید.
                    </p>
                </div>
            </div>
        </div>
    </div>
</section>
{% endblock %}

{% block extra_js %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    const form = document.querySelector('.reset-form');
    const submitBtn = document.getElementById('submitBtn');
    const emailInput = document.getElementById('id_email');

    // Email validation
    function validateEmail(email) {
        const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return re.test(email);
    }

    // Real-time email validation
    emailInput.addEventListener('input', function() {
        const email = this.value.trim();
        if (email && !validateEmail(email)) {
            this.classList.add('is-invalid');
        } else {
            this.classList.remove('is-invalid');
        }
    });

    // Form submission
    form.addEventListener('submit', function(e) {
        const email = emailInput.value.trim();

        if (!email) {
            e.preventDefault();
            emailInput.classList.add('is-invalid');
            showError('لطفاً آدرس ایمیل خود را وارد کنید');
            return;
        }

        if (!validateEmail(email)) {
            e.preventDefault();
            emailInput.classList.add('is-invalid');
            showError('لطفاً آدرس ایمیل معتبری وارد کنید');
            return;
        }

        // Show loading state
        submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> در حال ارسال...';
        submitBtn.disabled = true;
    });

    function showError(message) {
        // Remove existing error
        const existingError = document.querySelector('.custom-error');
        if (existingError) existingError.remove();

        // Create error element
        const errorDiv = document.createElement('div');
        errorDiv.className = 'alert alert-danger custom-error';
        errorDiv.innerHTML = `<i class="fas fa-exclamation-triangle"></i> ${message}`;

        // Insert before form
        form.parentNode.insertBefore(errorDiv, form);

        // Auto remove after 5 seconds
        setTimeout(() => errorDiv.remove(), 5000);
    }
});
</script>
{% endblock %}

====== FILE: templates/users/password_reset_email.txt ======

سلام {{ user.get_full_name|default:user.username }} عزیز،

شما این ایمیل را دریافت کرده‌اید چون درخواست بازیابی رمز عبور برای حساب کاربری خود در سایت زیما کرده‌اید.

برای تنظیم رمز عبور جدید، روی لینک زیر کلیک کنید:
{{ protocol }}://{{ domain }}{% url 'users:password_reset_confirm' uidb64=uid token=token %}

اگر شما این درخواست را نداده‌اید، این ایمیل را نادیده بگیرید.

نکات مهم:
• این لینک تنها برای مدت محدودی معتبر است
• برای امنیت حساب خود، این ایمیل را با دیگران به اشتراک نگذارید

اطلاعات حساب شما:
• نام کاربری: {{ user.username }}
• ایمیل: {{ user.email }}

با تشکر،
تیم پشتیبانی زیما 🌸

این ایمیل به صورت خودکار ارسال شده است، لطفاً به آن پاسخ ندهید.
© زیما. تمامی حقوق محفوظ است.

====== FILE: templates/users/password_reset_email.html ======

{% load i18n %}{% autoescape off %}
<!DOCTYPE html>
<html lang="fa" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>بازیابی رمز عبور - زیما</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Tahoma', 'Arial', sans-serif;
            line-height: 1.6;
            color: #333;
            background-color: #f8f9fa;
            padding: 20px;
        }
        
        .email-container {
            max-width: 600px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            overflow: hidden;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }
        
        .header {
            background: linear-gradient(135deg, #ff6b6b, #feca57);
            color: white;
            padding: 40px 30px;
            text-align: center;
            position: relative;
        }
        
        .header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><circle cx="50" cy="50" r="2" fill="rgba(255,255,255,0.1)"/></svg>') repeat;
            opacity: 0.3;
        }
        
        .header h1 {
            font-size: 28px;
            font-weight: 700;
            margin-bottom: 10px;
            position: relative;
            z-index: 2;
        }
        
        .header p {
            font-size: 16px;
            opacity: 0.9;
            position: relative;
            z-index: 2;
        }
        
        .content {
            padding: 40px 30px;
        }
        
        .greeting {
            font-size: 20px;
            font-weight: 600;
            color: #2c3e50;
            margin-bottom: 20px;
        }
        
        .message {
            font-size: 16px;
            color: #555;
            margin-bottom: 30px;
            line-height: 1.7;
        }
        
        .button-container {
            text-align: center;
            margin: 30px 0;
        }
        
        .reset-button {
            display: inline-block;
            background: linear-gradient(135deg, #ff6b6b, #feca57);
            color: white !important;
            padding: 18px 35px;
            text-decoration: none;
            border-radius: 25px;
            font-weight: 600;
            font-size: 16px;
            box-shadow: 0 5px 15px rgba(255, 107, 107, 0.3);
            transition: all 0.3s ease;
        }
        
        .reset-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(255, 107, 107, 0.5);
        }
        
        .link-section {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            margin: 25px 0;
            border-left: 4px solid #ff6b6b;
        }
        
        .link-text {
            font-size: 14px;
            color: #666;
            margin-bottom: 10px;
        }
        
        .reset-link {
            word-break: break-all;
            background: white;
            padding: 15px;
            border-radius: 8px;
            font-family: 'Courier New', monospace;
            font-size: 13px;
            color: #333;
            border: 1px solid #ddd;
        }
        
        .warning {
            background: linear-gradient(90deg, #fff3cd, #ffeaa7);
            border: 1px solid #ffeaa7;
            border-radius: 10px;
            padding: 20px;
            margin: 25px 0;
            border-right: 4px solid #ffc107;
        }
        
        .warning-title {
            font-weight: 600;
            color: #856404;
            margin-bottom: 10px;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .warning ul {
            margin: 0;
            padding-right: 20px;
            color: #856404;
        }
        
        .warning li {
            margin-bottom: 8px;
            line-height: 1.5;
        }
        
        .divider {
            height: 1px;
            background: linear-gradient(to right, transparent, #ddd, transparent);
            margin: 30px 0;
        }
        
        .account-info {
            background: #e8f4fd;
            border-radius: 10px;
            padding: 20px;
            border-right: 4px solid #17a2b8;
        }
        
        .account-info h3 {
            color: #0c5460;
            margin-bottom: 15px;
            font-size: 16px;
        }
        
        .account-info ul {
            list-style: none;
            margin: 0;
            padding: 0;
        }
        
        .account-info li {
            padding: 5px 0;
            color: #0c5460;
            font-size: 14px;
        }
        
        .account-info strong {
            color: #17a2b8;
        }
        
        .footer {
            background: linear-gradient(135deg, #2c3e50, #34495e);
            color: white;
            padding: 30px;
            text-align: center;
        }
        
        .footer-content {
            margin-bottom: 20px;
        }
        
        .footer-title {
            font-size: 18px;
            font-weight: 600;
            margin-bottom: 10px;
        }
        
        .footer-text {
            font-size: 14px;
            opacity: 0.8;
            line-height: 1.5;
        }
        
        .footer-bottom {
            font-size: 12px;
            opacity: 0.6;
            border-top: 1px solid rgba(255,255,255,0.1);
            padding-top: 15px;
        }
        
        @media (max-width: 600px) {
            .email-container {
                border-radius: 0;
                margin: 0;
            }
            
            .header {
                padding: 30px 20px;
            }
            
            .header h1 {
                font-size: 24px;
            }
            
            .content {
                padding: 30px 20px;
            }
            
            .reset-button {
                padding: 15px 25px;
                font-size: 14px;
            }
            
            .footer {
                padding: 25px 20px;
            }
        }
    </style>
</head>
<body>
    <div class="email-container">
        <div class="header">
            <h1>🌸 بازیابی رمز عبور</h1>
            <p>فروشگاه آنلاین زیما</p>
        </div>
        
        <div class="content">
            <div class="greeting">
                سلام {{ user.get_full_name|default:user.username }} عزیز! 👋
            </div>
            
            <div class="message">
                شما این ایمیل را دریافت کرده‌اید چون درخواست بازیابی رمز عبور برای حساب کاربری خود در سایت <strong>زیما</strong> ارسال کرده‌اید.
            </div>
            
            <div class="message">
                برای تنظیم رمز عبور جدید، روی دکمه زیر کلیک کنید:
            </div>
            
            <div class="button-container">
                <a href="{{ protocol }}://{{ domain }}{% url 'users:password_reset_confirm' uidb64=uid token=token %}" class="reset-button">
                    🔑 تنظیم رمز عبور جدید
                </a>
            </div>
            
            <div class="link-section">
                <div class="link-text">
                    اگر دکمه بالا کار نمی‌کند، لینک زیر را کپی کرده و در مرورگر خود باز کنید:
                </div>
                <div class="reset-link">
                    {{ protocol }}://{{ domain }}{% url 'users:password_reset_confirm' uidb64=uid token=token %}
                </div>
            </div>
            
            <div class="warning">
                <div class="warning-title">
                    ⚠️ نکات مهم امنیتی
                </div>
                <ul>
                    <li>این لینک تنها برای <strong>24 ساعت</strong> معتبر است</li>
                    <li>اگر شما این درخواست را نداده‌اید، این ایمیل را نادیده بگیرید</li>
                    <li>برای امنیت حساب خود، این ایمیل را با دیگران به اشتراک نگذارید</li>
                    <li>پس از تنظیم رمز جدید، از حساب خود خارج شده و مجدداً وارد شوید</li>
                </ul>
            </div>
            
            <div class="divider"></div>
            
            <div class="account-info">
                <h3>📋 اطلاعات حساب کاربری</h3>
                <ul>
                    <li><strong>نام کاربری:</strong> {{ user.username }}</li>
                    <li><strong>ایمیل:</strong> {{ user.email }}</li>
                    <li><strong>تاریخ ثبت‌نام:</strong> {{ user.date_joined|date:"Y/m/d" }}</li>
                    <li><strong>زمان درخواست:</strong> {% now "Y/m/d - H:i" %}</li>
                </ul>
            </div>
        </div>
        
        <div class="footer">
            <div class="footer-content">
                <div class="footer-title">
                    با تشکر از اعتماد شما 🌸
                </div>
                <div class="footer-text">
                    <strong>تیم پشتیبانی فروشگاه زیما</strong><br>
                    همواره در خدمت شما هستیم
                </div>
            </div>
            <div class="footer-bottom">
                این ایمیل به صورت خودکار ارسال شده است، لطفاً به آن پاسخ ندهید.<br>
                © {% now "Y" %} زیما. تمامی حقوق محفوظ است.
            </div>
        </div>
    </div>
</body>
</html>
{% endautoescape %}

====== FILE: templates/users/favorites.html ======

{% extends 'base/base.html' %}
{% load static %}

{% block title %}علاقه‌مندی‌ها | زیما{% endblock %}

{% block extra_css %}
<style>
    .profile-section {
        min-height: 100vh;
        background: linear-gradient(135deg, var(--zima-blush), var(--zima-champagne));
        padding: 140px 0 60px;
        position: relative;
        overflow: hidden;
    }

    .profile-section::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: url('{% static "images/patterns/subtle-pattern.png" %}') repeat;
        opacity: 0.03;
        pointer-events: none;
    }

    .profile-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 20px;
        position: relative;
        z-index: 2;
    }

    .profile-wrapper {
        display: grid;
        grid-template-columns: 300px 1fr;
        gap: 40px;
        align-items: flex-start;
    }

    /* Sidebar Styles */
    .profile-sidebar {
        background: white;
        border-radius: 20px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
        overflow: hidden;
        position: sticky;
        top: 160px;
    }

    .sidebar-header {
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        color: white;
        padding: 30px 25px;
        text-align: center;
        position: relative;
    }

    .sidebar-header::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: url('{% static "images/patterns/elegant-pattern.png" %}') repeat;
        opacity: 0.1;
    }

    .user-avatar {
        width: 80px;
        height: 80px;
        border-radius: 50%;
        background: white;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 15px;
        color: var(--primary-color);
        font-size: 2rem;
        font-weight: 600;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        position: relative;
        z-index: 2;
    }

    .user-name {
        font-size: 1.2rem;
        font-weight: 600;
        margin-bottom: 5px;
        position: relative;
        z-index: 2;
    }

    .user-status {
        font-size: 0.9rem;
        opacity: 0.9;
        position: relative;
        z-index: 2;
    }

    .sidebar-nav {
        padding: 0;
    }

    .nav-link {
        display: flex;
        align-items: center;
        gap: 15px;
        padding: 18px 25px;
        color: var(--text-color-dark);
        text-decoration: none;
        font-weight: 500;
        transition: all 0.3s ease;
        position: relative;
        border-bottom: 1px solid var(--zima-pearl);
    }

    .nav-link::before {
        content: '';
        position: absolute;
        left: 0;
        top: 0;
        bottom: 0;
        width: 4px;
        background: var(--primary-color);
        transform: scaleY(0);
        transition: transform 0.3s ease;
    }

    .nav-link:hover,
    .nav-link.active {
        background: var(--zima-blush);
        color: var(--primary-color);
        transform: translateX(5px);
    }

    .nav-link:hover::before,
    .nav-link.active::before {
        transform: scaleY(1);
    }

    .nav-link.logout {
        color: #dc3545;
        border-bottom: none;
    }

    .nav-link.logout:hover {
        background: rgba(220, 53, 69, 0.1);
        color: #dc3545;
    }

    .nav-icon {
        font-size: 1.1rem;
        width: 20px;
        text-align: center;
    }

    /* Main Content Styles */
    .profile-content {
        background: white;
        border-radius: 20px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
        overflow: hidden;
    }

    .content-header {
        background: linear-gradient(135deg, var(--zima-blush), var(--zima-champagne));
        padding: 30px 40px;
        border-bottom: 1px solid var(--zima-pearl);
    }

    .content-title {
        font-size: 1.8rem;
        font-weight: 700;
        color: var(--text-color-dark);
        margin: 0;
        font-family: 'Playfair Display', serif;
    }

    .content-subtitle {
        color: var(--text-color-medium);
        margin: 5px 0 0;
        font-size: 1rem;
    }

    .content-body {
        padding: 40px;
    }

    .favorites-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
        gap: 25px;
        margin-top: 20px;
    }

    .favorite-item {
        background: white;
        border-radius: 15px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
        border: 2px solid var(--zima-pearl);
        transition: all 0.3s ease;
        overflow: hidden;
        position: relative;
    }

    .favorite-item:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);
        border-color: var(--primary-color);
    }

    .favorite-image {
        position: relative;
        aspect-ratio: 1;
        overflow: hidden;
    }

    .favorite-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.3s ease;
    }

    .favorite-item:hover .favorite-image img {
        transform: scale(1.05);
    }

    .favorite-badge {
        position: absolute;
        top: 15px;
        left: 15px;
        background: var(--primary-color);
        color: white;
        padding: 6px 12px;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: 500;
    }

    .favorite-remove {
        position: absolute;
        top: 15px;
        right: 15px;
        background: rgba(220, 53, 69, 0.9);
        color: white;
        border: none;
        width: 35px;
        height: 35px;
        border-radius: 50%;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .favorite-remove:hover {
        background: #dc3545;
        transform: scale(1.1);
    }

    .favorite-info {
        padding: 20px;
    }

    .favorite-title {
        font-size: 1.1rem;
        font-weight: 600;
        color: var(--text-color-dark);
        margin-bottom: 8px;
        line-height: 1.4;
    }

    .favorite-brand {
        color: var(--text-color-medium);
        font-size: 0.9rem;
        margin-bottom: 12px;
    }

    .favorite-price {
        font-size: 1.2rem;
        font-weight: 700;
        color: var(--primary-color);
        margin-bottom: 15px;
    }

    .favorite-actions {
        display: flex;
        gap: 10px;
    }

    .btn-view {
        flex: 1;
        background: var(--primary-color);
        color: white;
        border: none;
        padding: 10px 16px;
        border-radius: 20px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        text-align: center;
        font-size: 0.9rem;
    }

    .btn-view:hover {
        background: var(--secondary-color);
        transform: translateY(-1px);
        color: white;
    }

    .btn-cart {
        background: #28a745;
        color: white;
        border: none;
        padding: 10px 16px;
        border-radius: 20px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
        font-size: 0.9rem;
    }

    .btn-cart:hover {
        background: #218838;
        transform: translateY(-1px);
    }

    .empty-state {
        text-align: center;
        padding: 80px 40px;
        color: var(--text-color-medium);
    }

    .empty-icon {
        font-size: 5rem;
        color: var(--zima-pearl);
        margin-bottom: 25px;
    }

    .empty-title {
        font-size: 1.8rem;
        font-weight: 600;
        margin-bottom: 15px;
        color: var(--text-color-dark);
    }

    .empty-text {
        font-size: 1.1rem;
        line-height: 1.6;
        margin-bottom: 30px;
    }

    .btn-browse {
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        color: white;
        border: none;
        padding: 15px 30px;
        border-radius: 25px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 10px;
    }

    .btn-browse:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(255, 107, 107, 0.4);
        color: white;
    }

    .alert {
        padding: 15px 20px;
        border-radius: 12px;
        margin-bottom: 25px;
        font-size: 0.95rem;
        border: none;
    }

    .alert-success {
        background: rgba(40, 167, 69, 0.1);
        color: #155724;
    }

    .alert-info {
        background: rgba(23, 162, 184, 0.1);
        color: #0c5460;
    }

    /* Responsive Design */
    @media (max-width: 992px) {
        .profile-wrapper {
            grid-template-columns: 1fr;
            gap: 30px;
        }

        .profile-sidebar {
            position: relative;
            top: auto;
        }

        .favorites-grid {
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        }
    }

    @media (max-width: 768px) {
        .profile-section {
            padding: 120px 0 40px;
        }

        .profile-container {
            padding: 0 15px;
        }

        .content-header {
            padding: 25px 20px;
        }

        .content-title {
            font-size: 1.5rem;
        }

        .content-body {
            padding: 25px 20px;
        }

        .favorites-grid {
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
        }

        .favorite-info {
            padding: 15px;
        }

        .empty-state {
            padding: 60px 20px;
        }

        .empty-icon {
            font-size: 4rem;
        }

        .empty-title {
            font-size: 1.5rem;
        }
    }
</style>
{% endblock %}

{% block content %}
<section class="profile-section">
    <div class="profile-container">
        <div class="profile-wrapper">
            <!-- Sidebar -->
            <aside class="profile-sidebar">
                <div class="sidebar-header">
                    <div class="user-avatar">
                        {{ user.username|slice:":1"|upper }}
                    </div>
                    <h3 class="user-name">{{ user.get_full_name|default:user.username }}</h3>
                    <p class="user-status">عضو زیما</p>
                </div>
                
                <nav class="sidebar-nav">
                    <a href="{% url 'users:profile' %}" class="nav-link">
                        <i class="nav-icon fas fa-user"></i>
                        <span>اطلاعات حساب کاربری</span>
                    </a>
                    <a href="{% url 'users:addresses' %}" class="nav-link">
                        <i class="nav-icon fas fa-map-marker-alt"></i>
                        <span>آدرس‌ها</span>
                    </a>
                    <a href="{% url 'orders:list' %}" class="nav-link">
                        <i class="nav-icon fas fa-shopping-bag"></i>
                        <span>سفارش‌ها</span>
                    </a>
                    <a href="{% url 'users:change_password' %}" class="nav-link">
                        <i class="nav-icon fas fa-key"></i>
                        <span>تغییر رمز عبور</span>
                    </a>
                    <a href="{% url 'users:favorites' %}" class="nav-link active">
                        <i class="nav-icon fas fa-heart"></i>
                        <span>علاقه‌مندی‌ها</span>
                    </a>
                    <a href="{% url 'users:logout' %}" class="nav-link logout">
                        <i class="nav-icon fas fa-sign-out-alt"></i>
                        <span>خروج از حساب کاربری</span>
                    </a>
                </nav>
            </aside>

            <!-- Main Content -->
            <main class="profile-content">
                <div class="content-header">
                    <h1 class="content-title">علاقه‌مندی‌ها</h1>
                    <p class="content-subtitle">محصولات مورد علاقه خود را مدیریت کنید</p>
                </div>

                <div class="content-body">
                    <!-- Messages -->
                    {% if messages %}
                        {% for message in messages %}
                            <div class="alert alert-{{ message.tags }}">
                                {{ message }}
                            </div>
                        {% endfor %}
                    {% endif %}

                    <!-- Favorites Grid -->
                    {% if favorites %}
                        <div class="favorites-grid">
                            {% for favorite in favorites %}
                                <div class="favorite-item">
                                    <div class="favorite-image">
                                        <img src="{{ favorite.product.image.url }}" alt="{{ favorite.product.name }}">
                                        <div class="favorite-badge">محبوب</div>
                                        <button class="favorite-remove" onclick="removeFavorite({{ favorite.product.id }})">
                                            <i class="fas fa-times"></i>
                                        </button>
                                    </div>
                                    <div class="favorite-info">
                                        <h3 class="favorite-title">{{ favorite.product.name }}</h3>
                                        <p class="favorite-brand">{{ favorite.product.brand|default:"زیما" }}</p>
                                        <div class="favorite-price">
                                            {% if favorite.product.discounted_price %}
                                                {{ favorite.product.discounted_price|floatformat:0 }} تومان
                                            {% else %}
                                                {{ favorite.product.price|floatformat:0 }} تومان
                                            {% endif %}
                                        </div>
                                        <div class="favorite-actions">
                                            <a href="{% url 'products:detail' favorite.product.id %}" class="btn-view">
                                                مشاهده محصول
                                            </a>
                                            <button class="btn-cart" onclick="addToCart({{ favorite.product.id }})">
                                                <i class="fas fa-shopping-cart"></i>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            {% endfor %}
                        </div>
                    {% else %}
                        <div class="empty-state">
                            <div class="empty-icon">
                                <i class="fas fa-heart"></i>
                            </div>
                            <h3 class="empty-title">هنوز محصولی را پسندیده‌اید</h3>
                            <p class="empty-text">محصولات مورد علاقه خود را با کلیک بر روی آیکون قلب اضافه کنید</p>
                            <a href="{% url 'products:list' %}" class="btn-browse">
                                <i class="fas fa-shopping-bag"></i>
                                مشاهده محصولات
                            </a>
                        </div>
                    {% endif %}
                </div>
            </main>
        </div>
    </div>
</section>
{% endblock %}

{% block extra_js %}
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Remove favorite function
        window.removeFavorite = function(productId) {
            if (confirm('آیا از حذف این محصول از علاقه‌مندی‌ها اطمینان دارید؟')) {
                fetch(`/users/favorites/remove/${productId}/`, {
                    method: 'POST',
                    headers: {
                        'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value,
                        'Content-Type': 'application/json',
                    },
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        location.reload();
                    } else {
                        alert('خطا در حذف محصول از علاقه‌مندی‌ها');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('خطا در برقراری ارتباط با سرور');
                });
            }
        };

        // Add to cart function
        window.addToCart = function(productId) {
            fetch(`/cart/add/${productId}/`, {
                method: 'POST',
                headers: {
                    'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value,
                    'Content-Type': 'application/json',
                },
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Show success message
                    showMessage('محصول با موفقیت به سبد خرید اضافه شد', 'success');
                } else {
                    alert(data.message || 'خطا در افزودن محصول به سبد خرید');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('خطا در برقراری ارتباط با سرور');
            });
        };

        // Show message function
        function showMessage(message, type) {
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type}`;
            alertDiv.textContent = message;
            
            const contentBody = document.querySelector('.content-body');
            contentBody.insertBefore(alertDiv, contentBody.firstChild);
            
            setTimeout(() => {
                alertDiv.style.opacity = '0';
                alertDiv.style.transform = 'translateY(-10px)';
                setTimeout(() => alertDiv.remove(), 300);
            }, 3000);
        }

        // Auto-hide alerts
        const alerts = document.querySelectorAll('.alert');
        alerts.forEach(alert => {
            setTimeout(() => {
                alert.style.opacity = '0';
                alert.style.transform = 'translateY(-10px)';
                setTimeout(() => alert.remove(), 300);
            }, 5000);
        });
    });
</script>
{% endblock %}

====== FILE: templates/users/change_password.html ======

{% extends 'base/base.html' %}
{% load static %}

{% block title %}تغییر رمز عبور | زیما{% endblock %}

{% block extra_css %}
<style>
    .profile-section {
        min-height: 100vh;
        background: linear-gradient(135deg, var(--zima-blush), var(--zima-champagne));
        padding: 140px 0 60px;
        position: relative;
        overflow: hidden;
    }

    .profile-section::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: url('{% static "images/patterns/subtle-pattern.png" %}') repeat;
        opacity: 0.03;
        pointer-events: none;
    }

    .profile-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 20px;
        position: relative;
        z-index: 2;
    }

    .profile-wrapper {
        display: grid;
        grid-template-columns: 300px 1fr;
        gap: 40px;
        align-items: flex-start;
    }

    /* Sidebar Styles */
    .profile-sidebar {
        background: white;
        border-radius: 20px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
        overflow: hidden;
        position: sticky;
        top: 160px;
    }

    .sidebar-header {
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        color: white;
        padding: 30px 25px;
        text-align: center;
        position: relative;
    }

    .sidebar-header::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: url('{% static "images/patterns/elegant-pattern.png" %}') repeat;
        opacity: 0.1;
    }

    .user-avatar {
        width: 80px;
        height: 80px;
        border-radius: 50%;
        background: white;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 15px;
        color: var(--primary-color);
        font-size: 2rem;
        font-weight: 600;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        position: relative;
        z-index: 2;
    }

    .user-name {
        font-size: 1.2rem;
        font-weight: 600;
        margin-bottom: 5px;
        position: relative;
        z-index: 2;
    }

    .user-status {
        font-size: 0.9rem;
        opacity: 0.9;
        position: relative;
        z-index: 2;
    }

    .sidebar-nav {
        padding: 0;
    }

    .nav-item {
        border-bottom: 1px solid var(--zima-pearl);
    }

    .nav-item:last-child {
        border-bottom: none;
    }

    .nav-link {
        display: flex;
        align-items: center;
        gap: 15px;
        padding: 18px 25px;
        color: var(--text-color-dark);
        text-decoration: none;
        font-weight: 500;
        transition: all 0.3s ease;
        position: relative;
    }

    .nav-link::before {
        content: '';
        position: absolute;
        left: 0;
        top: 0;
        bottom: 0;
        width: 4px;
        background: var(--primary-color);
        transform: scaleY(0);
        transition: transform 0.3s ease;
    }

    .nav-link:hover,
    .nav-link.active {
        background: var(--zima-blush);
        color: var(--primary-color);
        transform: translateX(5px);
    }

    .nav-link:hover::before,
    .nav-link.active::before {
        transform: scaleY(1);
    }

    .nav-link.logout {
        color: #dc3545;
    }

    .nav-link.logout:hover {
        background: rgba(220, 53, 69, 0.1);
        color: #dc3545;
    }

    .nav-icon {
        font-size: 1.1rem;
        width: 20px;
        text-align: center;
    }

    /* Main Content Styles */
    .profile-content {
        background: white;
        border-radius: 20px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
        overflow: hidden;
    }

    .content-header {
        background: linear-gradient(135deg, var(--zima-blush), var(--zima-champagne));
        padding: 30px 40px;
        border-bottom: 1px solid var(--zima-pearl);
    }

    .content-title {
        font-size: 1.8rem;
        font-weight: 700;
        color: var(--text-color-dark);
        margin: 0;
        font-family: 'Playfair Display', serif;
    }

    .content-subtitle {
        color: var(--text-color-medium);
        margin: 5px 0 0;
        font-size: 1rem;
    }

    .content-body {
        padding: 40px;
    }

    .password-form {
        max-width: 500px;
        margin: 0 auto;
    }

    .security-info {
        background: rgba(23, 162, 184, 0.1);
        border: 1px solid rgba(23, 162, 184, 0.2);
        border-radius: 12px;
        padding: 20px;
        margin-bottom: 30px;
    }

    .security-title {
        color: #0c5460;
        font-weight: 600;
        margin-bottom: 10px;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .security-tips {
        color: #0c5460;
        font-size: 0.9rem;
        line-height: 1.6;
        margin: 0;
        list-style: none;
        padding: 0;
    }

    .security-tips li {
        margin-bottom: 5px;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .security-tips i {
        color: #17a2b8;
        width: 12px;
    }

    .form-group {
        margin-bottom: 25px;
        position: relative;
    }

    .form-label {
        display: block;
        margin-bottom: 8px;
        font-weight: 600;
        color: var(--text-color-dark);
        font-size: 0.95rem;
    }

    .form-input {
        width: 100%;
        padding: 15px 50px 15px 20px;
        border: 2px solid var(--zima-pearl);
        border-radius: 12px;
        font-size: 1rem;
        font-family: 'Vazir', sans-serif;
        transition: all 0.3s ease;
        background: white;
        outline: none;
    }

    .form-input:focus {
        border-color: var(--primary-color);
        box-shadow: 0 0 0 3px rgba(255, 107, 107, 0.1);
    }

    .form-input.is-invalid {
        border-color: #dc3545;
        box-shadow: 0 0 0 3px rgba(220, 53, 69, 0.1);
    }

    .form-input.is-valid {
        border-color: #28a745;
        box-shadow: 0 0 0 3px rgba(40, 167, 69, 0.1);
    }

    .password-toggle {
        position: absolute;
        left: 20px;
        top: 50%;
        transform: translateY(-50%);
        background: none;
        border: none;
        color: var(--text-color-medium);
        cursor: pointer;
        font-size: 1.1rem;
        transition: color 0.3s ease;
        width: 20px;
        height: 20px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .password-toggle:hover {
        color: var(--primary-color);
    }

    .form-help {
        font-size: 0.85rem;
        color: var(--text-color-medium);
        margin-top: 5px;
        line-height: 1.4;
    }

    .password-strength {
        margin-top: 10px;
    }

    .strength-bar {
        height: 4px;
        border-radius: 2px;
        background: #eee;
        margin: 8px 0;
        overflow: hidden;
    }

    .strength-fill {
        height: 100%;
        transition: all 0.3s ease;
        border-radius: 2px;
    }

    .strength-weak { background: #dc3545; width: 25%; }
    .strength-fair { background: #ffc107; width: 50%; }
    .strength-good { background: #17a2b8; width: 75%; }
    .strength-strong { background: #28a745; width: 100%; }

    .strength-text {
        font-size: 0.8rem;
        font-weight: 500;
    }

    .invalid-feedback {
        display: block;
        color: #dc3545;
        font-size: 0.85rem;
        margin-top: 5px;
    }

    .alert {
        padding: 15px 20px;
        border-radius: 12px;
        margin-bottom: 25px;
        font-size: 0.95rem;
        border: none;
    }

    .alert-success {
        background: rgba(40, 167, 69, 0.1);
        color: #155724;
    }

    .alert-danger {
        background: rgba(220, 53, 69, 0.1);
        color: #721c24;
    }

    .btn-primary {
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        border: none;
        color: white;
        padding: 15px 30px;
        border-radius: 25px;
        font-weight: 600;
        font-size: 1rem;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 10px;
        width: 100%;
        justify-content: center;
        margin-bottom: 15px;
    }

    .btn-primary:hover:not(:disabled) {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(255, 107, 107, 0.4);
    }

    .btn-primary:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }

    .btn-secondary {
        background: white;
        border: 2px solid var(--zima-pearl);
        color: var(--text-color-dark);
        padding: 12px 30px;
        border-radius: 25px;
        font-weight: 600;
        font-size: 1rem;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 10px;
        justify-content: center;
        width: 100%;
    }

    .btn-secondary:hover {
        border-color: var(--primary-color);
        color: var(--primary-color);
        transform: translateY(-2px);
    }

    /* Responsive Design */
    @media (max-width: 992px) {
        .profile-wrapper {
            grid-template-columns: 1fr;
            gap: 30px;
        }

        .profile-sidebar {
            position: relative;
            top: auto;
        }

        .content-body {
            padding: 30px 25px;
        }
    }

    @media (max-width: 768px) {
        .profile-section {
            padding: 120px 0 40px;
        }

        .profile-container {
            padding: 0 15px;
        }

        .content-header {
            padding: 25px 20px;
        }

        .content-title {
            font-size: 1.5rem;
        }

        .content-body {
            padding: 25px 20px;
        }
    }
</style>
{% endblock %}

{% block content %}
<section class="profile-section">
    <div class="profile-container">
        <div class="profile-wrapper">
            <!-- Sidebar -->
            <aside class="profile-sidebar">
                <div class="sidebar-header">
                    <div class="user-avatar">
                        {{ user.username|slice:":1"|upper }}
                    </div>
                    <h3 class="user-name">{{ user.get_full_name|default:user.username }}</h3>
                    <p class="user-status">عضو زیما</p>
                </div>

                <nav class="sidebar-nav">
                    <a href="{% url 'users:profile' %}" class="nav-link">
                        <i class="nav-icon fas fa-user"></i>
                        <span>اطلاعات حساب کاربری</span>
                    </a>
                    <a href="{% url 'users:addresses' %}" class="nav-link">
                        <i class="nav-icon fas fa-map-marker-alt"></i>
                        <span>آدرس‌ها</span>
                    </a>
                    <a href="{% url 'orders:list' %}" class="nav-link">
                        <i class="nav-icon fas fa-shopping-bag"></i>
                        <span>سفارش‌ها</span>
                    </a>
                    <a href="{% url 'users:change_password' %}" class="nav-link active">
                        <i class="nav-icon fas fa-key"></i>
                        <span>تغییر رمز عبور</span>
                    </a>
                    <a href="{% url 'users:favorites' %}" class="nav-link">
                        <i class="nav-icon fas fa-heart"></i>
                        <span>علاقه‌مندی‌ها</span>
                    </a>
                    <a href="{% url 'users:logout' %}" class="nav-link logout">
                        <i class="nav-icon fas fa-sign-out-alt"></i>
                        <span>خروج از حساب کاربری</span>
                    </a>
                </nav>
            </aside>

            <!-- Main Content -->
            <main class="profile-content">
                <div class="content-header">
                    <h1 class="content-title">تغییر رمز عبور</h1>
                    <p class="content-subtitle">برای امنیت حساب خود، رمز عبور قوی انتخاب کنید</p>
                </div>

                <div class="content-body">
                    <!-- Security Info -->
                    <div class="security-info">
                        <h4 class="security-title">
                            <i class="fas fa-shield-alt"></i>
                            نکات امنیتی
                        </h4>
                        <ul class="security-tips">
                            <li><i class="fas fa-check"></i> حداقل ۸ کاراکتر استفاده کنید</li>
                            <li><i class="fas fa-check"></i> ترکیبی از حروف بزرگ و کوچک</li>
                            <li><i class="fas fa-check"></i> شامل اعداد و کاراکترهای خاص</li>
                            <li><i class="fas fa-check"></i> از اطلاعات شخصی استفاده نکنید</li>
                        </ul>
                    </div>

                    <!-- Messages -->
                    {% if messages %}
                        {% for message in messages %}
                            <div class="alert alert-{{ message.tags }}">
                                {{ message }}
                            </div>
                        {% endfor %}
                    {% endif %}

                    <!-- Password Change Form -->
                    <form class="password-form" method="post" action="{% url 'users:change_password' %}">
                        {% csrf_token %}

                        <div class="form-group">
                            <label for="id_current_password" class="form-label">رمز عبور فعلی</label>
                            <div style="position: relative;">
                                <input type="password"
                                       name="current_password"
                                       id="id_current_password"
                                       class="form-input"
                                       placeholder="رمز عبور فعلی خود را وارد کنید"
                                       required>
                                <button type="button" class="password-toggle" onclick="togglePassword('id_current_password')">
                                    <i class="fas fa-eye" id="id_current_password_icon"></i>
                                </button>
                            </div>
                        </div>

                        <div class="form-group">
                            <label for="id_new_password" class="form-label">رمز عبور جدید</label>
                            <div style="position: relative;">
                                <input type="password"
                                       name="new_password"
                                       id="id_new_password"
                                       class="form-input"
                                       placeholder="رمز عبور جدید خود را وارد کنید"
                                       required>
                                <button type="button" class="password-toggle" onclick="togglePassword('id_new_password')">
                                    <i class="fas fa-eye" id="id_new_password_icon"></i>
                                </button>
                            </div>
                            <div class="password-strength" id="passwordStrength" style="display: none;">
                                <div class="strength-bar">
                                    <div class="strength-fill" id="strengthFill"></div>
                                </div>
                                <div class="strength-text" id="strengthText"></div>
                            </div>
                            <div class="form-help">
                                رمز عبور باید حداقل ۸ کاراکتر باشد و شامل حروف و اعداد باشد
                            </div>
                        </div>

                        <div class="form-group">
                            <label for="id_confirm_password" class="form-label">تکرار رمز عبور جدید</label>
                            <div style="position: relative;">
                                <input type="password"
                                       name="confirm_password"
                                       id="id_confirm_password"
                                       class="form-input"
                                       placeholder="رمز عبور جدید را دوباره وارد کنید"
                                       required>
                                <button type="button" class="password-toggle" onclick="togglePassword('id_confirm_password')">
                                    <i class="fas fa-eye" id="id_confirm_password_icon"></i>
                                </button>
                            </div>
                        </div>

                        <button type="submit" class="btn-primary" id="submitBtn">
                            <i class="fas fa-save"></i>
                            تغییر رمز عبور
                        </button>

                        <a href="{% url 'users:profile' %}" class="btn-secondary">
                            <i class="fas fa-arrow-right"></i>
                            بازگشت به پروفایل
                        </a>
                    </form>
                </div>
            </main>
        </div>
    </div>
</section>
{% endblock %}

{% block extra_js %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Password toggle functionality
    window.togglePassword = function(inputId) {
        const input = document.getElementById(inputId);
        const icon = document.getElementById(inputId + '_icon');

        if (input.type === 'password') {
            input.type = 'text';
            icon.classList.remove('fa-eye');
            icon.classList.add('fa-eye-slash');
        } else {
            input.type = 'password';
            icon.classList.remove('fa-eye-slash');
            icon.classList.add('fa-eye');
        }
    };

    // Password strength checker
    const newPasswordInput = document.getElementById('id_new_password');
    const strengthDiv = document.getElementById('passwordStrength');
    const strengthFill = document.getElementById('strengthFill');
    const strengthText = document.getElementById('strengthText');

    newPasswordInput.addEventListener('input', function() {
        const password = this.value;
        const strength = checkPasswordStrength(password);

        if (password.length > 0) {
            strengthDiv.style.display = 'block';
            strengthFill.className = 'strength-fill strength-' + strength.level;
            strengthText.textContent = strength.text;
        } else {
            strengthDiv.style.display = 'none';
        }
    });

    function checkPasswordStrength(password) {
        let score = 0;
        let feedback = [];

        if (password.length >= 8) score++;
        else feedback.push('حداقل ۸ کاراکتر');

        if (/[a-z]/.test(password)) score++;
        else feedback.push('حروف کوچک');

        if (/[A-Z]/.test(password)) score++;
        else feedback.push('حروف بزرگ');

        if (/[0-9]/.test(password)) score++;
        else feedback.push('اعداد');

        if (/[^A-Za-z0-9]/.test(password)) score++;
        else feedback.push('کاراکترهای خاص');

        let level, text;
        if (score <= 1) {
            level = 'weak';
            text = 'ضعیف - ' + feedback.slice(0, 2).join(', ');
        } else if (score <= 2) {
            level = 'fair';
            text = 'متوسط - ' + feedback.slice(0, 1).join(', ');
        } else if (score <= 3) {
            level = 'good';
            text = 'خوب';
        } else {
            level = 'strong';
            text = 'قوی';
            }

            return { level, text };
        }

        // Password confirmation validation
        const confirmPasswordInput = document.getElementById('id_confirm_password');
        const submitBtn = document.getElementById('submitBtn');

        function validatePasswords() {
            const newPassword = newPasswordInput.value;
            const confirmPassword = confirmPasswordInput.value;

            if (confirmPassword && newPassword !== confirmPassword) {
                confirmPasswordInput.classList.add('is-invalid');
                confirmPasswordInput.classList.remove('is-valid');
                submitBtn.disabled = true;

                // Show error message
                let errorDiv = confirmPasswordInput.parentNode.querySelector('.invalid-feedback');
                if (!errorDiv) {
                    errorDiv = document.createElement('div');
                    errorDiv.className = 'invalid-feedback';
                    confirmPasswordInput.parentNode.appendChild(errorDiv);
                }
                errorDiv.textContent = 'رمزهای عبور مطابقت ندارند';
            } else if (confirmPassword) {
                confirmPasswordInput.classList.remove('is-invalid');
                confirmPasswordInput.classList.add('is-valid');
                submitBtn.disabled = false;

                // Remove error message
                const errorDiv = confirmPasswordInput.parentNode.querySelector('.invalid-feedback');
                if (errorDiv) {
                    errorDiv.remove();
                }
            }
        }

        newPasswordInput.addEventListener('input', validatePasswords);
        confirmPasswordInput.addEventListener('input', validatePasswords);

        // Form validation on submit
        const form = document.querySelector('.password-form');
        form.addEventListener('submit', function(e) {
            const currentPassword = document.getElementById('id_current_password').value;
            const newPassword = newPasswordInput.value;
            const confirmPassword = confirmPasswordInput.value;

            if (!currentPassword || !newPassword || !confirmPassword) {
                e.preventDefault();
                alert('لطفاً تمام فیلدها را پر کنید');
                return;
            }

            if (newPassword !== confirmPassword) {
                e.preventDefault();
                alert('رمزهای عبور مطابقت ندارند');
                return;
            }

            if (newPassword.length < 8) {
                e.preventDefault();
                alert('رمز عبور باید حداقل ۸ کاراکتر باشد');
                return;
            }

            // Show loading state
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> در حال پردازش...';
            submitBtn.disabled = true;
        });

        // Auto-hide alerts
        const alerts = document.querySelectorAll('.alert');
        alerts.forEach(alert => {
            setTimeout(() => {
                alert.style.opacity = '0';
                alert.style.transform = 'translateY(-10px)';
                setTimeout(() => alert.remove(), 300);
            }, 5000);
        });
    });
</script>
{% endblock %}

====== FILE: templates/users/password_reset_done.html ======

{% extends 'base/base.html' %}
{% load static %}

{% block title %}ارسال ایمیل بازیابی | زیما{% endblock %}

{% block extra_css %}
<style>
    .success-section {
        min-height: 100vh;
        background: linear-gradient(135deg, var(--zima-blush), var(--zima-champagne));
        padding: 140px 0 60px;
        position: relative;
        overflow: hidden;
    }

    .success-section::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: url('{% static "images/patterns/subtle-pattern.png" %}') repeat;
        opacity: 0.03;
        pointer-events: none;
    }

    .success-container {
        max-width: 600px;
        margin: 0 auto;
        padding: 0 20px;
        position: relative;
        z-index: 2;
    }

    .success-card {
        background: white;
        border-radius: 20px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
        overflow: hidden;
        border: 2px solid var(--zima-pearl);
        text-align: center;
    }

    .success-header {
        background: linear-gradient(135deg, #28a745, #20c997);
        color: white;
        padding: 40px 30px;
        position: relative;
    }

    .success-header::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: url('{% static "images/patterns/elegant-pattern.png" %}') repeat;
        opacity: 0.1;
    }

    .success-icon {
        width: 100px;
        height: 100px;
        background: rgba(255, 255, 255, 0.2);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 25px;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.3);
        position: relative;
        z-index: 2;
    }

    .success-icon i {
        font-size: 3rem;
        color: white;
    }

    .success-title {
        font-size: 2rem;
        font-weight: 700;
        margin: 0;
        font-family: 'Playfair Display', serif;
        position: relative;
        z-index: 2;
    }

    .success-body {
        padding: 40px;
    }

    .success-message {
        background: rgba(40, 167, 69, 0.1);
        border-radius: 15px;
        padding: 25px;
        margin-bottom: 30px;
        border-left: 4px solid #28a745;
    }

    .success-message h5 {
        color: #155724;
        font-weight: 600;
        margin-bottom: 15px;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 10px;
    }

    .success-message p {
        color: #155724;
        line-height: 1.6;
        margin-bottom: 10px;
    }

    .success-message p:last-child {
        margin-bottom: 0;
    }

    .action-buttons {
        display: flex;
        gap: 15px;
        justify-content: center;
        flex-wrap: wrap;
    }

    .btn-primary {
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        color: white;
        border: none;
        padding: 12px 25px;
        border-radius: 25px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 8px;
    }

    .btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(255, 107, 107, 0.4);
        color: white;
    }

    .btn-secondary {
        background: transparent;
        color: var(--text-color-medium);
        border: 2px solid var(--zima-pearl);
        padding: 10px 25px;
        border-radius: 25px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 8px;
    }

    .btn-secondary:hover {
        border-color: var(--primary-color);
        color: var(--primary-color);
        transform: translateY(-1px);
    }

    .help-section {
        background: var(--zima-blush);
        border-radius: 15px;
        padding: 25px;
        margin-top: 30px;
    }

    .help-section h6 {
        color: var(--text-color-dark);
        font-weight: 600;
        margin-bottom: 15px;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
    }

    .help-section ul {
        color: var(--text-color-medium);
        font-size: 0.9rem;
        line-height: 1.6;
        text-align: right;
        margin: 0;
        padding-right: 20px;
    }

    .help-section li {
        margin-bottom: 8px;
    }

    /* Responsive Design */
    @media (max-width: 768px) {
        .success-section {
            padding: 120px 0 40px;
        }

        .success-container {
            padding: 0 15px;
        }

        .success-header {
            padding: 30px 20px;
        }

        .success-title {
            font-size: 1.6rem;
        }

        .success-body {
            padding: 25px 20px;
        }

        .success-icon {
            width: 80px;
            height: 80px;
            margin-bottom: 20px;
        }

        .success-icon i {
            font-size: 2.5rem;
        }

        .action-buttons {
            flex-direction: column;
        }
    }
</style>
{% endblock %}

{% block content %}
<section class="success-section">
    <div class="success-container">
        <div class="success-card">
            <div class="success-header">
                <div class="success-icon">
                    <i class="fas fa-envelope-open"></i>
                </div>
                <h1 class="success-title">ایمیل ارسال شد</h1>
            </div>

            <div class="success-body">
                <div class="success-message">
                    <h5>
                        <i class="fas fa-check-circle"></i>
                        درخواست شما با موفقیت ارسال شد
                    </h5>
                    <p>ایمیل حاوی دستورالعمل‌های بازیابی رمز عبور برای شما ارسال شد.</p>
                    <p>اگر حساب کاربری با این ایمیل وجود داشته باشد، به زودی ایمیلی دریافت خواهید کرد.</p>
                    <p><strong>لطفاً صندوق ورودی و پوشه اسپم خود را بررسی کنید.</strong></p>
                </div>

                <div class="action-buttons">
                    <a href="{% url 'users:login' %}" class="btn-primary">
                        <i class="fas fa-sign-in-alt"></i>
                        ورود به حساب کاربری
                    </a>
                    <a href="{% url 'home' %}" class="btn-secondary">
                        <i class="fas fa-home"></i>
                        صفحه اصلی
                    </a>
                </div>

                <div class="help-section">
                    <h6>
                        <i class="fas fa-question-circle"></i>
                        راهنمایی
                    </h6>
                    <ul>
                        <li>معمولاً ایمیل بازیابی ظرف چند دقیقه ارسال می‌شود</li>
                        <li>اگر ایمیل را دریافت نکردید، پوشه اسپم را بررسی کنید</li>
                        <li>لینک بازیابی فقط برای 24 ساعت معتبر است</li>
                        <li>در صورت مشکل، با پشتیبانی تماس بگیرید</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</section>
{% endblock %}

====== FILE: templates/products/search_results.html ======

{% extends "base/base.html" %}
{% load static %}
{% load product_filters %}

{% block title %}{{ page_title }} | زیما{% endblock %}

{% block content %}
<!-- Products Hero -->
<section class="products-hero">
    <div class="hero-content">
        <h1 class="hero-title">{{ page_title }}</h1>
        <p class="hero-subtitle">زیبایی، راحتی و اعتماد به نفس در یک مجموعه</p>
        <nav class="breadcrumb">
            <a href="{% url 'pages:home' %}">خانه</a>
            <span>/</span>
            {% if category %}
                {% if category.parent %}
                    <a href="{% url 'products:category_list' category.parent.slug %}">{{ category.parent.name }}</a>
                    <span>/</span>
                {% endif %}
                <span>{{ category.name }}</span>
            {% else %}
                <span>محصولات</span>
            {% endif %}
        </nav>
    </div>
</section>

<!-- Main Products Section -->
<div class="products-main">
    <!-- Sidebar Filters -->
    <aside class="sidebar" id="sidebar">
        <form method="get" id="filterForm">
            <!-- Search Filter -->
            <div class="filter-section">
                <div class="search-box">
                    <input type="text" name="q" class="search-input" placeholder="جستجو در محصولات..." value="{{ current_filters.q|default:'' }}">
                    <button class="search-btn" type="submit">
                        <i class="fas fa-search"></i>
                    </button>
                </div>
            </div>

            <!-- Category Filter -->
            {% if all_categories %}
            <div class="filter-section">
                <div class="filter-header">
                    <h3 class="filter-title">دسته‌بندی</h3>
                    <i class="fas fa-chevron-down filter-toggle"></i>
                </div>
                <div class="filter-content">
                    <div class="filter-content-inner">
                        <ul class="category-list">
                            {% for cat in all_categories %}
                            <li class="category-item">
                               <label class="category-label">
                                    <input type="checkbox" name="categories" value="{{ cat.id }}" class="category-checkbox"
                                           {% if cat.id|stringformat:'s' in current_filters.categories %}checked{% endif %}>
                                    <span class="category-name">{{ cat.name }}</span>
                                    <span class="category-count">({{ cat.product_count }})</span>
                               </label>
                            </li>
                            {% endfor %}
                        </ul>
                    </div>
                </div>
            </div>
            {% endif %}

            <!-- Size Filter -->
            {% if all_sizes %}
            <div class="filter-section">
                <div class="filter-header">
                    <h3 class="filter-title">سایز</h3>
                    <i class="fas fa-chevron-down filter-toggle"></i>
                </div>
                <div class="filter-content">
                    <div class="filter-content-inner">
                        <div class="size-grid">
                            {% for size in all_sizes %}
                            <label class="size-btn {% if size.id|stringformat:'s' in current_filters.sizes %}active{% endif %}">
                                <input type="checkbox" name="sizes" value="{{ size.id }}" style="display: none;"
                                       {% if size.id|stringformat:"s" in current_filters.sizes %}checked{% endif %}>
                                {{ size.name }}
                            </label>
                            {% endfor %}
                        </div>
                    </div>
                </div>
            </div>
            {% endif %}

            <!-- Color Filter -->
            {% if all_colors %}
            <div class="filter-section">
                <div class="filter-header">
                    <h3 class="filter-title">رنگ</h3>
                    <i class="fas fa-chevron-down filter-toggle"></i>
                </div>
                <div class="filter-content">
                    <div class="filter-content-inner">
                        <div class="color-grid">
                            {% for color in all_colors %}
                            <label class="color-option {% if color.id|stringformat:'s' in current_filters.colors %}active{% endif %}"
                                   style="background: {{ color.hex_code }}; {% if color.hex_code == '#FFFFFF' %}border: 2px solid #ddd;{% endif %}"
                                   title="{{ color.name }}">
                                <input type="checkbox" name="colors" value="{{ color.id }}" style="display: none;"
                                       {% if color.id|stringformat:"s" in current_filters.colors %}checked{% endif %}>
                            </label>
                            {% endfor %}
                        </div>
                    </div>
                </div>
            </div>
            {% endif %}

            <!-- Price Range Filter -->
            {% if price_range.min_price is not None %}
            <div class="filter-section">
                <div class="filter-header">
                    <h3 class="filter-title">محدوده قیمت</h3>
                    <i class="fas fa-chevron-down filter-toggle"></i>
                </div>
                <div class="filter-content">
                    <div class="filter-content-inner">
                        <div class="price-inputs">
                            <input type="number" name="min_price" class="price-input" placeholder="از" value="{{ current_filters.min_price|default:'' }}">
                            <span>تا</span>
                            <input type="number" name="max_price" class="price-input" placeholder="تا" value="{{ current_filters.max_price|default:'' }}">
                        </div>
                    </div>
                </div>
            </div>
            {% endif %}

            <!-- Brand Filter -->
            {% if all_brands %}
            <div class="filter-section">
                <div class="filter-header">
                    <h3 class="filter-title">برند</h3>
                    <i class="fas fa-chevron-down filter-toggle"></i>
                </div>
                <div class="filter-content">
                    <div class="filter-content-inner">
                        <div class="size-grid"> {# از استایل دکمه‌های سایز استفاده می‌کنیم #}
                            {% for brand_name in all_brands %}
                            <label class="size-btn brand-label {% if brand_name in current_filters.brand %}active{% endif %}">
                                <input type="checkbox" name="brand" value="{{ brand_name }}" style="display: none;"
                                       {% if brand_name in current_filters.brand %}checked{% endif %}>
                                {{ brand_name }}
                            </label>
                            {% endfor %}
                        </div>
                    </div>
                </div>
            </div>
            {% endif %}

            <!-- Filter Actions -->
            <div class="filter-actions">
                <button type="submit" class="btn-apply">اعمال فیلتر</button>
                <a href="{{ request.path }}" class="btn-reset">پاک کردن</a>
            </div>
        </form>
    </aside>

    <!-- Products Content -->
    <div class="products-content">
        <!-- Products Header -->
        <div class="products-header">
            <div class="results-count">
                <strong>{{ results_count }}</strong> محصول یافت شد
            </div>
            <div class="header-controls">
                <form method="get" id="sortForm" style="display: inline-block;">
                    {% for key, value in request.GET.items %}
                        {% if key != 'sort' %}
                            {% if value|is_list %} {# از فیلتر کاستوم استفاده شد #}
                                {% for item in value %}
                                    <input type="hidden" name="{{ key }}" value="{{ item }}">
                                {% endfor %}
                            {% else %}
                                <input type="hidden" name="{{ key }}" value="{{ value }}">
                            {% endif %}
                        {% endif %}
                    {% endfor %}
                    <select name="sort" class="sort-dropdown" onchange="this.form.submit()">
                        <option value="newest" {% if current_filters.sort == 'newest' %}selected{% endif %}>جدیدترین</option>
                        <option value="popular" {% if current_filters.sort == 'popular' %}selected{% endif %}>پرفروش‌ترین</option>
                        <option value="price_low" {% if current_filters.sort == 'price_low' %}selected{% endif %}>ارزان‌ترین</option>
                        <option value="price_high" {% if current_filters.sort == 'price_high' %}selected{% endif %}>گران‌ترین</option>
                        <option value="rating" {% if current_filters.sort == 'rating' %}selected{% endif %}>بالاترین امتیاز</option>
                        <option value="discount" {% if current_filters.sort == 'discount' %}selected{% endif %}>بیشترین تخفیف</option>
                    </select>
                </form>
                <div class="view-options">
                    <button class="view-btn active" id="gridViewBtn">
                        <i class="fas fa-th"></i>
                    </button>
                    <button class="view-btn" id="listViewBtn">
                        <i class="fas fa-list"></i>
                    </button>
                </div>
            </div>
        </div>
        <!-- Products Grid -->
        <div class="products-grid" id="productsGrid">
            {% for product in products %}
            <div class="product-card fade-in">
                <div class="product-image-container">
                    <div class="product-badges">
                        {% if product.is_new %}
                        <span class="product-badge new">جدید</span>
                        {% endif %}
                        {% if product.has_discount %}
                        <span class="product-badge sale">{{ product.discount_percent }}% تخفیف</span>
                        {% endif %}
                        {% if product.is_featured %}
                        <span class="product-badge">ویژه</span>
                        {% endif %}
                    </div>
                    <div class="product-actions">
                        <button class="action-btn {% if product.is_favorited %}active{% endif %}" onclick="toggleWishlist(this, '{{ product.id }}')">
                            <i class="fa{% if product.is_favorited %}s{% else %}r{% endif %} fa-heart"></i>
                        </button>
                        <button class="action-btn" onclick="openQuickView('{{ product.id }}')">
                            <i class="fas fa-eye"></i>
                        </button>
                        <button class="action-btn" onclick="shareProduct('{{ product.id }}')">
                            <i class="fas fa-share-alt"></i>
                        </button>
                    </div>
                    <a href="{{ product.get_absolute_url }}">
                        {% with image=product.get_main_image %}
                        <img src="{% if image %}{{ image.image.url }}{% else %}{% static 'images/zima_theme/product-placeholder.jpg' %}{% endif %}"
                             alt="{{ product.name }}" class="product-image">
                        {% endwith %}
                    </a>
                </div>
                <div class="product-info">
                    <div class="product-brand">{{ product.brand }}</div>
                    <a href="{{ product.get_absolute_url }}" class="text-decoration-none">
                        <h3 class="product-name">{{ product.name }}</h3>
                    </a>
                    <div class="product-details">
                        <div class="product-rating">
                            <div class="stars">
                                {% with rating=product.get_average_rating %}
                                {% for i in "12345" %}
                                <i class="fa{% if forloop.counter <= rating %}s{% else %}r{% endif %} fa-star star"></i>
                                {% endfor %}
                                {% endwith %}
                            </div>
                            <span class="rating-count">({{ product.get_rating_count }})</span>
                        </div>
                        <div class="product-sizes">{{ product.get_available_sizes_display }}</div>
                    </div>
                    <div class="product-colors">
                        {% for color in product.get_available_colors %}
                        <div class="color-dot" style="background: {{ color.hex_code }}; {% if color.hex_code == '#FFFFFF' %}border: 2px solid #ddd;{% endif %}" title="{{ color.name }}"></div>
                        {% endfor %}
                    </div>
                    <div class="product-price-container">
                        <div class="product-price">
                            <span class="price-current">{{ product.get_display_price|floatformat:0 }} تومان</span>
                            {% if product.has_discount %}
                            <span class="price-original">{{ product.price|floatformat:0 }} تومان</span>
                            {% endif %}
                        </div>
                        {% if product.has_discount %}
                        <span class="discount-percentage">{{ product.discount_percent }}%</span>
                        {% endif %}
                    </div>
                    {% if product.is_in_stock %}
                        <button class="product-add-cart" onclick="addToCart('{{ product.id }}')">
                            <i class="fas fa-shopping-cart"></i>
                            افزودن به سبد خرید
                        </button>
                    {% else %}
                        <button class="product-add-cart" disabled style="background: #ccc; cursor: not-allowed;">
                            <i class="fas fa-times"></i>
                            ناموجود
                        </button>
                    {% endif %}
                </div>
            </div>
            {% empty %}
            <div class="empty-state">
                <i class="fas fa-search"></i>
                <h3>محصولی یافت نشد</h3>
                <p>لطفاً فیلترهای خود را تغییر دهید یا جستجوی جدیدی انجام دهید.</p>
            </div>
            {% endfor %}
        </div>

        <!-- Pagination -->
        {% if products.has_other_pages %}
        <div class="pagination">
            {% if products.has_previous %}
            <a href="?{% url_replace page=products.previous_page_number %}" class="page-btn">
                <i class="fas fa-chevron-right"></i>
            </a>
            {% else %}
            <span class="page-btn disabled">
                <i class="fas fa-chevron-right"></i>
            </span>
            {% endif %}

            {% for page_num in products.paginator.page_range %}
                {% if page_num == products.number %}
                    <span class="page-btn active">{{ page_num }}</span>
                {% else %}
                    <a href="?{% url_replace page=page_num %}" class="page-btn">{{ page_num }}</a>
                {% endif %}
            {% endfor %}
            {% if products.has_next %}
            <a href="?{% url_replace page=products.next_page_number %}" class="page-btn">
                <i class="fas fa-chevron-left"></i>
            </a>
            {% else %}
            <span class="page-btn disabled">
                <i class="fas fa-chevron-left"></i>
            </span>
            {% endif %}
        </div>
        {% endif %}
    </div>
</div>

<!-- Mobile Filter Toggle -->
<button class="mobile-filter-toggle" onclick="toggleMobileFilter()">
    <i class="fas fa-filter"></i> فیلترها
</button>

<!-- Quick View Modal Structure -->
<div class="quick-view-modal" id="quickViewModal">
    <div class="modal-content-qv">
        <button class="modal-close" onclick="closeQuickView()">
            <i class="fas fa-times"></i>
        </button>
        <div id="quickViewModalContent">
            <p style="text-align: center; padding: 50px;">در حال بارگذاری...</p>
        </div>
    </div>
</div>
{% endblock %}


{% block extra_js %}<script>
    // Share Product function (simple placeholder)
    function shareProduct(productId) {
        // You can implement actual sharing logic here (e.g., copy to clipboard, open share dialog)
        showToast('لینک محصول کپی شد!', 'share-alt');
    }

    document.addEventListener('DOMContentLoaded', function() {

        // Apply Filters button handles search input and general submit (if not already handled by change listener)
        document.querySelector('.btn-apply').addEventListener('click', function(e) {
            e.preventDefault(); // Prevent default form submission on button click
            document.getElementById('filterForm').submit();
        });

        // View Toggle Functionality (Grid vs List)
        const productsGrid = document.getElementById('productsGrid');
        const gridViewBtn = document.getElementById('gridViewBtn');
        const listViewBtn = document.getElementById('listViewBtn');

        function setView(viewType) {
            if (viewType === 'list') {
                productsGrid.style.gridTemplateColumns = '1fr';
                productsGrid.querySelectorAll('.product-card').forEach(card => {
                    card.style.display = 'flex';
                    card.style.flexDirection = 'row';
                    card.style.height = '200px'; // ارتفاع ثابت برای حالت لیست
                    card.querySelector('.product-image-container').style.minWidth = '200px'; // عرض ثابت تصویر
                    card.querySelector('.product-image-container').style.height = '100%'; // ارتفاع تصویر به اندازه کارت
                    card.querySelector('.product-image-container').style.flexShrink = '0'; // جلوگیری از کوچک شدن تصویر
                    card.querySelector('.product-info').style.flex = '1';
                    // تنظیمات خاص برای لیست ویو (مخفی کردن برخی جزئیات، نمایش توضیحات بیشتر و...)
                    const productDetails = card.querySelector('.product-details');
                    const productColors = card.querySelector('.product-colors');
                    if (productDetails) productDetails.style.display = 'none'; // جزئیات مخفی شود
                    if (productColors) productColors.style.display = 'none'; // رنگ‌ها مخفی شود
                });
                listViewBtn.classList.add('active');
                gridViewBtn.classList.remove('active');
            } else { // 'grid'
                productsGrid.style.gridTemplateColumns = 'repeat(auto-fill, minmax(300px, 1fr))';
                productsGrid.querySelectorAll('.product-card').forEach(card => {
                    card.style.display = 'block';
                    card.style.flexDirection = 'column';
                    card.style.height = 'auto'; // ارتفاع خودکار برای حالت گرید
                    card.querySelector('.product-image-container').style.minWidth = 'auto'; // بازگشت به حالت اولیه
                    card.querySelector('.product-image-container').style.height = '380px'; // ارتفاع تصویر پیش‌فرض
                    card.querySelector('.product-image-container').style.flexShrink = 'initial';
                    card.querySelector('.product-info').style.flex = 'initial';
                    // نمایش مجدد جزئیات برای حالت گرید
                    const productDetails = card.querySelector('.product-details');
                    const productColors = card.querySelector('.product-colors');
                    if (productDetails) productDetails.style.display = 'flex';
                    if (productColors) productColors.style.display = 'flex';
                });
                gridViewBtn.classList.add('active');
                listViewBtn.classList.remove('active');
            }
            localStorage.setItem('productView', viewType); // Save preference
        }

        // Load saved view preference
        const savedView = localStorage.getItem('productView');
        if (savedView) {
            setView(savedView);
        } else {
            setView('grid'); // Default view
        }

        gridViewBtn.addEventListener('click', () => setView('grid'));
        listViewBtn.addEventListener('click', () => setView('list'));

        // Handle price input change on keyup (optional, for instant filter apply)
        // document.querySelectorAll('.price-input').forEach(input => {
        //     input.addEventListener('keyup', function() {
        //         // You might want to debounce this or only apply on form submit
        //         // For now, it's tied to the 'Apply Filter' button or form change listener
        //     });
        // });
    });
</script>
{% endblock %}

====== FILE: templates/products/category_detail.html ======

{% extends "base/base.html" %}
{% load static %}
{% load product_filters %}

{% block title %}{{ page_title }} | زیما{% endblock %}

{% block content %}
<!-- Products Hero -->
<section class="products-hero">
    <div class="hero-content">
        <h1 class="hero-title">{{ page_title }}</h1>
        <p class="hero-subtitle">زیبایی، راحتی و اعتماد به نفس در یک مجموعه</p>
        <nav class="breadcrumb">
            <a href="{% url 'pages:home' %}">خانه</a>
            <span>/</span>
            {% if category %}
                {% if category.parent %}
                    <a href="{% url 'products:category_list' category.parent.slug %}">{{ category.parent.name }}</a>
                    <span>/</span>
                {% endif %}
                <span>{{ category.name }}</span>
            {% else %}
                <span>محصولات</span>
            {% endif %}
        </nav>
    </div>
</section>

<!-- Main Products Section -->
<div class="products-main">
    <!-- Sidebar Filters -->
    <aside class="sidebar" id="sidebar">
        <form method="get" id="filterForm">
            <!-- Search Filter -->
            <div class="filter-section">
                <div class="search-box">
                    <input type="text" name="q" class="search-input" placeholder="جستجو در محصولات..." value="{{ current_filters.q|default:'' }}">
                    <button class="search-btn" type="submit">
                        <i class="fas fa-search"></i>
                    </button>
                </div>
            </div>

            <!-- Category Filter -->
            {% if all_categories %}
            <div class="filter-section">
                <div class="filter-header">
                    <h3 class="filter-title">دسته‌بندی</h3>
                    <i class="fas fa-chevron-down filter-toggle"></i>
                </div>
                <div class="filter-content">
                    <div class="filter-content-inner">
                        <ul class="category-list">
                            {% for cat in all_categories %}
                            <li class="category-item">
                               <label class="category-label">
                                    <input type="checkbox" name="categories" value="{{ cat.id }}" class="category-checkbox"
                                           {% if cat.id|stringformat:'s' in current_filters.categories %}checked{% endif %}>
                                    <span class="category-name">{{ cat.name }}</span>
                                    <span class="category-count">({{ cat.product_count }})</span>
                               </label>
                            </li>
                            {% endfor %}
                        </ul>
                    </div>
                </div>
            </div>
            {% endif %}

            <!-- Size Filter -->
            {% if all_sizes %}
            <div class="filter-section">
                <div class="filter-header">
                    <h3 class="filter-title">سایز</h3>
                    <i class="fas fa-chevron-down filter-toggle"></i>
                </div>
                <div class="filter-content">
                    <div class="filter-content-inner">
                        <div class="size-grid">
                            {% for size in all_sizes %}
                            <label class="size-btn {% if size.id|stringformat:'s' in current_filters.sizes %}active{% endif %}">
                                <input type="checkbox" name="sizes" value="{{ size.id }}" style="display: none;"
                                       {% if size.id|stringformat:"s" in current_filters.sizes %}checked{% endif %}>
                                {{ size.name }}
                            </label>
                            {% endfor %}
                        </div>
                    </div>
                </div>
            </div>
            {% endif %}

            <!-- Color Filter -->
            {% if all_colors %}
            <div class="filter-section">
                <div class="filter-header">
                    <h3 class="filter-title">رنگ</h3>
                    <i class="fas fa-chevron-down filter-toggle"></i>
                </div>
                <div class="filter-content">
                    <div class="filter-content-inner">
                        <div class="color-grid">
                            {% for color in all_colors %}
                            <label class="color-option {% if color.id|stringformat:'s' in current_filters.colors %}active{% endif %}"
                                   style="background: {{ color.hex_code }}; {% if color.hex_code == '#FFFFFF' %}border: 2px solid #ddd;{% endif %}"
                                   title="{{ color.name }}">
                                <input type="checkbox" name="colors" value="{{ color.id }}" style="display: none;"
                                       {% if color.id|stringformat:"s" in current_filters.colors %}checked{% endif %}>
                            </label>
                            {% endfor %}
                        </div>
                    </div>
                </div>
            </div>
            {% endif %}

            <!-- Price Range Filter -->
            {% if price_range.min_price is not None %}
            <div class="filter-section">
                <div class="filter-header">
                    <h3 class="filter-title">محدوده قیمت</h3>
                    <i class="fas fa-chevron-down filter-toggle"></i>
                </div>
                <div class="filter-content">
                    <div class="filter-content-inner">
                        <div class="price-inputs">
                            <input type="number" name="min_price" class="price-input" placeholder="از" value="{{ current_filters.min_price|default:'' }}">
                            <span>تا</span>
                            <input type="number" name="max_price" class="price-input" placeholder="تا" value="{{ current_filters.max_price|default:'' }}">
                        </div>
                    </div>
                </div>
            </div>
            {% endif %}

            <!-- Brand Filter -->
            {% if all_brands %}
            <div class="filter-section">
                <div class="filter-header">
                    <h3 class="filter-title">برند</h3>
                    <i class="fas fa-chevron-down filter-toggle"></i>
                </div>
                <div class="filter-content">
                    <div class="filter-content-inner">
                        <div class="size-grid"> {# از استایل دکمه‌های سایز استفاده می‌کنیم #}
                            {% for brand_name in all_brands %}
                            <label class="size-btn brand-label {% if brand_name in current_filters.brand %}active{% endif %}">
                                <input type="checkbox" name="brand" value="{{ brand_name }}" style="display: none;"
                                       {% if brand_name in current_filters.brand %}checked{% endif %}>
                                {{ brand_name }}
                            </label>
                            {% endfor %}
                        </div>
                    </div>
                </div>
            </div>
            {% endif %}

            <!-- Filter Actions -->
            <div class="filter-actions">
                <button type="submit" class="btn-apply">اعمال فیلتر</button>
                <a href="{{ request.path }}" class="btn-reset">پاک کردن</a>
            </div>
        </form>
    </aside>

    <!-- Products Content -->
    <div class="products-content">
        <!-- Products Header -->
        <div class="products-header">
            <div class="results-count">
                <strong>{{ results_count }}</strong> محصول یافت شد
            </div>
            <div class="header-controls">
                <form method="get" id="sortForm" style="display: inline-block;">
                    {% for key, value in request.GET.items %}
                        {% if key != 'sort' %}
                            {% if value|is_list %} {# از فیلتر کاستوم استفاده شد #}
                                {% for item in value %}
                                    <input type="hidden" name="{{ key }}" value="{{ item }}">
                                {% endfor %}
                            {% else %}
                                <input type="hidden" name="{{ key }}" value="{{ value }}">
                            {% endif %}
                        {% endif %}
                    {% endfor %}
                    <select name="sort" class="sort-dropdown" onchange="this.form.submit()">
                        <option value="newest" {% if current_filters.sort == 'newest' %}selected{% endif %}>جدیدترین</option>
                        <option value="popular" {% if current_filters.sort == 'popular' %}selected{% endif %}>پرفروش‌ترین</option>
                        <option value="price_low" {% if current_filters.sort == 'price_low' %}selected{% endif %}>ارزان‌ترین</option>
                        <option value="price_high" {% if current_filters.sort == 'price_high' %}selected{% endif %}>گران‌ترین</option>
                        <option value="rating" {% if current_filters.sort == 'rating' %}selected{% endif %}>بالاترین امتیاز</option>
                        <option value="discount" {% if current_filters.sort == 'discount' %}selected{% endif %}>بیشترین تخفیف</option>
                    </select>
                </form>
                <div class="view-options">
                    <button class="view-btn active" id="gridViewBtn">
                        <i class="fas fa-th"></i>
                    </button>
                    <button class="view-btn" id="listViewBtn">
                        <i class="fas fa-list"></i>
                    </button>
                </div>
            </div>
        </div>
        <!-- Products Grid -->
        <div class="products-grid" id="productsGrid">
            {% for product in products %}
            <div class="product-card fade-in">
                <div class="product-image-container">
                    <div class="product-badges">
                        {% if product.is_new %}
                        <span class="product-badge new">جدید</span>
                        {% endif %}
                        {% if product.has_discount %}
                        <span class="product-badge sale">{{ product.discount_percent }}% تخفیف</span>
                        {% endif %}
                        {% if product.is_featured %}
                        <span class="product-badge">ویژه</span>
                        {% endif %}
                    </div>
                    <div class="product-actions">
                        <button class="action-btn {% if product.is_favorited %}active{% endif %}" onclick="toggleWishlist(this, '{{ product.id }}')">
                            <i class="fa{% if product.is_favorited %}s{% else %}r{% endif %} fa-heart"></i>
                        </button>
                        <button class="action-btn" onclick="openQuickView('{{ product.id }}')">
                            <i class="fas fa-eye"></i>
                        </button>
                        <button class="action-btn" onclick="shareProduct('{{ product.id }}')">
                            <i class="fas fa-share-alt"></i>
                        </button>
                    </div>
                    <a href="{{ product.get_absolute_url }}">
                        {% with image=product.get_main_image %}
                        <img src="{% if image %}{{ image.image.url }}{% else %}{% static 'images/zima_theme/product-placeholder.jpg' %}{% endif %}"
                             alt="{{ product.name }}" class="product-image">
                        {% endwith %}
                    </a>
                </div>
                <div class="product-info">
                    <div class="product-brand">{{ product.brand }}</div>
                    <a href="{{ product.get_absolute_url }}" class="text-decoration-none">
                        <h3 class="product-name">{{ product.name }}</h3>
                    </a>
                    <div class="product-details">
                        <div class="product-rating">
                            <div class="stars">
                                {% with rating=product.get_average_rating %}
                                {% for i in "12345" %}
                                <i class="fa{% if forloop.counter <= rating %}s{% else %}r{% endif %} fa-star star"></i>
                                {% endfor %}
                                {% endwith %}
                            </div>
                            <span class="rating-count">({{ product.get_rating_count }})</span>
                        </div>
                        <div class="product-sizes">{{ product.get_available_sizes_display }}</div>
                    </div>
                    <div class="product-colors">
                        {% for color in product.get_available_colors %}
                        <div class="color-dot" style="background: {{ color.hex_code }}; {% if color.hex_code == '#FFFFFF' %}border: 2px solid #ddd;{% endif %}" title="{{ color.name }}"></div>
                        {% endfor %}
                    </div>
                    <div class="product-price-container">
                        <div class="product-price">
                            <span class="price-current">{{ product.get_display_price|floatformat:0 }} تومان</span>
                            {% if product.has_discount %}
                            <span class="price-original">{{ product.price|floatformat:0 }} تومان</span>
                            {% endif %}
                        </div>
                        {% if product.has_discount %}
                        <span class="discount-percentage">{{ product.discount_percent }}%</span>
                        {% endif %}
                    </div>
                    {% if product.is_in_stock %}
                        <button class="product-add-cart" onclick="addToCart('{{ product.id }}')">
                            <i class="fas fa-shopping-cart"></i>
                            افزودن به سبد خرید
                        </button>
                    {% else %}
                        <button class="product-add-cart" disabled style="background: #ccc; cursor: not-allowed;">
                            <i class="fas fa-times"></i>
                            ناموجود
                        </button>
                    {% endif %}
                </div>
            </div>
            {% empty %}
            <div class="empty-state">
                <i class="fas fa-search"></i>
                <h3>محصولی یافت نشد</h3>
                <p>لطفاً فیلترهای خود را تغییر دهید یا جستجوی جدیدی انجام دهید.</p>
            </div>
            {% endfor %}
        </div>

        <!-- Pagination -->
        {% if products.has_other_pages %}
        <div class="pagination">
            {% if products.has_previous %}
            <a href="?{% url_replace page=products.previous_page_number %}" class="page-btn">
                <i class="fas fa-chevron-right"></i>
            </a>
            {% else %}
            <span class="page-btn disabled">
                <i class="fas fa-chevron-right"></i>
            </span>
            {% endif %}

            {% for page_num in products.paginator.page_range %}
                {% if page_num == products.number %}
                    <span class="page-btn active">{{ page_num }}</span>
                {% else %}
                    <a href="?{% url_replace page=page_num %}" class="page-btn">{{ page_num }}</a>
                {% endif %}
            {% endfor %}
            {% if products.has_next %}
            <a href="?{% url_replace page=products.next_page_number %}" class="page-btn">
                <i class="fas fa-chevron-left"></i>
            </a>
            {% else %}
            <span class="page-btn disabled">
                <i class="fas fa-chevron-left"></i>
            </span>
            {% endif %}
        </div>
        {% endif %}
    </div>
</div>

<!-- Mobile Filter Toggle -->
<button class="mobile-filter-toggle" onclick="toggleMobileFilter()">
    <i class="fas fa-filter"></i> فیلترها
</button>

<!-- Quick View Modal Structure -->
<div class="quick-view-modal" id="quickViewModal">
    <div class="modal-content-qv">
        <button class="modal-close" onclick="closeQuickView()">
            <i class="fas fa-times"></i>
        </button>
        <div id="quickViewModalContent">
            <p style="text-align: center; padding: 50px;">در حال بارگذاری...</p>
        </div>
    </div>
</div>
{% endblock %}


{% block extra_js %}<script>
    // Share Product function (simple placeholder)
    function shareProduct(productId) {
        // You can implement actual sharing logic here (e.g., copy to clipboard, open share dialog)
        showToast('لینک محصول کپی شد!', 'share-alt');
    }

    document.addEventListener('DOMContentLoaded', function() {

        // Apply Filters button handles search input and general submit (if not already handled by change listener)
        document.querySelector('.btn-apply').addEventListener('click', function(e) {
            e.preventDefault(); // Prevent default form submission on button click
            document.getElementById('filterForm').submit();
        });

        // View Toggle Functionality (Grid vs List)
        const productsGrid = document.getElementById('productsGrid');
        const gridViewBtn = document.getElementById('gridViewBtn');
        const listViewBtn = document.getElementById('listViewBtn');

        function setView(viewType) {
            if (viewType === 'list') {
                productsGrid.style.gridTemplateColumns = '1fr';
                productsGrid.querySelectorAll('.product-card').forEach(card => {
                    card.style.display = 'flex';
                    card.style.flexDirection = 'row';
                    card.style.height = '200px'; // ارتفاع ثابت برای حالت لیست
                    card.querySelector('.product-image-container').style.minWidth = '200px'; // عرض ثابت تصویر
                    card.querySelector('.product-image-container').style.height = '100%'; // ارتفاع تصویر به اندازه کارت
                    card.querySelector('.product-image-container').style.flexShrink = '0'; // جلوگیری از کوچک شدن تصویر
                    card.querySelector('.product-info').style.flex = '1';
                    // تنظیمات خاص برای لیست ویو (مخفی کردن برخی جزئیات، نمایش توضیحات بیشتر و...)
                    const productDetails = card.querySelector('.product-details');
                    const productColors = card.querySelector('.product-colors');
                    if (productDetails) productDetails.style.display = 'none'; // جزئیات مخفی شود
                    if (productColors) productColors.style.display = 'none'; // رنگ‌ها مخفی شود
                });
                listViewBtn.classList.add('active');
                gridViewBtn.classList.remove('active');
            } else { // 'grid'
                productsGrid.style.gridTemplateColumns = 'repeat(auto-fill, minmax(300px, 1fr))';
                productsGrid.querySelectorAll('.product-card').forEach(card => {
                    card.style.display = 'block';
                    card.style.flexDirection = 'column';
                    card.style.height = 'auto'; // ارتفاع خودکار برای حالت گرید
                    card.querySelector('.product-image-container').style.minWidth = 'auto'; // بازگشت به حالت اولیه
                    card.querySelector('.product-image-container').style.height = '380px'; // ارتفاع تصویر پیش‌فرض
                    card.querySelector('.product-image-container').style.flexShrink = 'initial';
                    card.querySelector('.product-info').style.flex = 'initial';
                    // نمایش مجدد جزئیات برای حالت گرید
                    const productDetails = card.querySelector('.product-details');
                    const productColors = card.querySelector('.product-colors');
                    if (productDetails) productDetails.style.display = 'flex';
                    if (productColors) productColors.style.display = 'flex';
                });
                gridViewBtn.classList.add('active');
                listViewBtn.classList.remove('active');
            }
            localStorage.setItem('productView', viewType); // Save preference
        }

        // Load saved view preference
        const savedView = localStorage.getItem('productView');
        if (savedView) {
            setView(savedView);
        } else {
            setView('grid'); // Default view
        }

        gridViewBtn.addEventListener('click', () => setView('grid'));
        listViewBtn.addEventListener('click', () => setView('list'));

        // Handle price input change on keyup (optional, for instant filter apply)
        // document.querySelectorAll('.price-input').forEach(input => {
        //     input.addEventListener('keyup', function() {
        //         // You might want to debounce this or only apply on form submit
        //         // For now, it's tied to the 'Apply Filter' button or form change listener
        //     });
        // });
    });
</script>
{% endblock %}

====== FILE: templates/products/product_list.html ======

{% extends "base/base.html" %}
{% load static %}
{% load product_filters %}

{% block title %}{{ page_title }} | زیما{% endblock %}

{% block content %}
<!-- Products Hero -->
<section class="products-hero">
    <div class="hero-content">
        <h1 class="hero-title">{{ page_title }}</h1>
        <p class="hero-subtitle">زیبایی، راحتی و اعتماد به نفس در یک مجموعه</p>
        <nav class="breadcrumb">
            <a href="{% url 'pages:home' %}">خانه</a>
            <span>/</span>
            {% if category %}
                {% if category.parent %}
                    <a href="{% url 'products:category_list' category.parent.slug %}">{{ category.parent.name }}</a>
                    <span>/</span>
                {% endif %}
                <span>{{ category.name }}</span>
            {% else %}
                <span>محصولات</span>
            {% endif %}
        </nav>
    </div>
</section>

<!-- Main Products Section -->
<div class="products-main">
    <!-- Sidebar Filters -->
    <aside class="sidebar" id="sidebar">
        <form method="get" id="filterForm">
            <!-- Search Filter -->
            <div class="filter-section">
                <div class="search-box">
                    <input type="text" name="q" class="search-input" placeholder="جستجو در محصولات..." value="{{ current_filters.q|default:'' }}">
                    <button class="search-btn" type="submit">
                        <i class="fas fa-search"></i>
                    </button>
                </div>
            </div>

            <!-- Category Filter -->
            {% if all_categories %}
            <div class="filter-section">
                <div class="filter-header">
                    <h3 class="filter-title">دسته‌بندی</h3>
                    <i class="fas fa-chevron-down filter-toggle"></i>
                </div>
                <div class="filter-content">
                    <div class="filter-content-inner">
                        <ul class="category-list">
                            {% for cat in all_categories %}
                            <li class="category-item">
                               <label class="category-label">
                                    <input type="checkbox" name="categories" value="{{ cat.id }}" class="category-checkbox"
                                           {% if cat.id|stringformat:'s' in current_filters.categories %}checked{% endif %}>
                                    <span class="category-name">{{ cat.name }}</span>
                                    <span class="category-count">({{ cat.product_count }})</span>
                               </label>
                            </li>
                            {% endfor %}
                        </ul>
                    </div>
                </div>
            </div>
            {% endif %}

            <!-- Size Filter -->
            {% if all_sizes %}
            <div class="filter-section">
                <div class="filter-header">
                    <h3 class="filter-title">سایز</h3>
                    <i class="fas fa-chevron-down filter-toggle"></i>
                </div>
                <div class="filter-content">
                    <div class="filter-content-inner">
                        <div class="size-grid">
                            {% for size in all_sizes %}
                            <label class="size-btn {% if size.id|stringformat:'s' in current_filters.sizes %}active{% endif %}">
                                <input type="checkbox" name="sizes" value="{{ size.id }}" style="display: none;"
                                       {% if size.id|stringformat:"s" in current_filters.sizes %}checked{% endif %}>
                                {{ size.name }}
                            </label>
                            {% endfor %}
                        </div>
                    </div>
                </div>
            </div>
            {% endif %}

            <!-- Color Filter -->
            {% if all_colors %}
            <div class="filter-section">
                <div class="filter-header">
                    <h3 class="filter-title">رنگ</h3>
                    <i class="fas fa-chevron-down filter-toggle"></i>
                </div>
                <div class="filter-content">
                    <div class="filter-content-inner">
                        <div class="color-grid">
                            {% for color in all_colors %}
                            <label class="color-option {% if color.id|stringformat:'s' in current_filters.colors %}active{% endif %}"
                                   style="background: {{ color.hex_code }}; {% if color.hex_code == '#FFFFFF' %}border: 2px solid #ddd;{% endif %}"
                                   title="{{ color.name }}">
                                <input type="checkbox" name="colors" value="{{ color.id }}" style="display: none;"
                                       {% if color.id|stringformat:"s" in current_filters.colors %}checked{% endif %}>
                            </label>
                            {% endfor %}
                        </div>
                    </div>
                </div>
            </div>
            {% endif %}

            <!-- Price Range Filter -->
            {% if price_range.min_price is not None %}
            <div class="filter-section">
                <div class="filter-header">
                    <h3 class="filter-title">محدوده قیمت</h3>
                    <i class="fas fa-chevron-down filter-toggle"></i>
                </div>
                <div class="filter-content">
                    <div class="filter-content-inner">
                        <div class="price-inputs">
                            <input type="number" name="min_price" class="price-input" placeholder="از" value="{{ current_filters.min_price|default:'' }}">
                            <span>تا</span>
                            <input type="number" name="max_price" class="price-input" placeholder="تا" value="{{ current_filters.max_price|default:'' }}">
                        </div>
                    </div>
                </div>
            </div>
            {% endif %}

            <!-- Brand Filter -->
            {% if all_brands %}
            <div class="filter-section">
                <div class="filter-header">
                    <h3 class="filter-title">برند</h3>
                    <i class="fas fa-chevron-down filter-toggle"></i>
                </div>
                <div class="filter-content">
                    <div class="filter-content-inner">
                        <div class="size-grid"> {# از استایل دکمه‌های سایز استفاده می‌کنیم #}
                            {% for brand_name in all_brands %}
                            <label class="size-btn brand-label {% if brand_name in current_filters.brand %}active{% endif %}">
                                <input type="checkbox" name="brand" value="{{ brand_name }}" style="display: none;"
                                       {% if brand_name in current_filters.brand %}checked{% endif %}>
                                {{ brand_name }}
                            </label>
                            {% endfor %}
                        </div>
                    </div>
                </div>
            </div>
            {% endif %}

            <!-- Filter Actions -->
            <div class="filter-actions">
                <button type="submit" class="btn-apply">اعمال فیلتر</button>
                <a href="{{ request.path }}" class="btn-reset">پاک کردن</a>
            </div>
        </form>
    </aside>

    <!-- Products Content -->
    <div class="products-content">
        <!-- Products Header -->
        <div class="products-header">
            <div class="results-count">
                <strong>{{ results_count }}</strong> محصول یافت شد
            </div>
            <div class="header-controls">
                <form method="get" id="sortForm" style="display: inline-block;">
                    {% for key, value in request.GET.items %}
                        {% if key != 'sort' %}
                            {% if value|is_list %} {# از فیلتر کاستوم استفاده شد #}
                                {% for item in value %}
                                    <input type="hidden" name="{{ key }}" value="{{ item }}">
                                {% endfor %}
                            {% else %}
                                <input type="hidden" name="{{ key }}" value="{{ value }}">
                            {% endif %}
                        {% endif %}
                    {% endfor %}
                    <select name="sort" class="sort-dropdown" onchange="this.form.submit()">
                        <option value="newest" {% if current_filters.sort == 'newest' %}selected{% endif %}>جدیدترین</option>
                        <option value="popular" {% if current_filters.sort == 'popular' %}selected{% endif %}>پرفروش‌ترین</option>
                        <option value="price_low" {% if current_filters.sort == 'price_low' %}selected{% endif %}>ارزان‌ترین</option>
                        <option value="price_high" {% if current_filters.sort == 'price_high' %}selected{% endif %}>گران‌ترین</option>
                        <option value="rating" {% if current_filters.sort == 'rating' %}selected{% endif %}>بالاترین امتیاز</option>
                        <option value="discount" {% if current_filters.sort == 'discount' %}selected{% endif %}>بیشترین تخفیف</option>
                    </select>
                </form>
                <div class="view-options">
                    <button class="view-btn active" id="gridViewBtn">
                        <i class="fas fa-th"></i>
                    </button>
                    <button class="view-btn" id="listViewBtn">
                        <i class="fas fa-list"></i>
                    </button>
                </div>
            </div>
        </div>
        <!-- Products Grid -->
        <div class="products-grid" id="productsGrid">
            {% for product in products %}
            <div class="product-card fade-in">
                <div class="product-image-container">
                    <div class="product-badges">
                        {% if product.is_new %}
                        <span class="product-badge new">جدید</span>
                        {% endif %}
                        {% if product.has_discount %}
                        <span class="product-badge sale">{{ product.discount_percent }}% تخفیف</span>
                        {% endif %}
                        {% if product.is_featured %}
                        <span class="product-badge">ویژه</span>
                        {% endif %}
                    </div>
                    <div class="product-actions">
                        <button class="action-btn {% if product.is_favorited %}active{% endif %}" onclick="toggleWishlist(this, '{{ product.id }}')">
                            <i class="fa{% if product.is_favorited %}s{% else %}r{% endif %} fa-heart"></i>
                        </button>
                        <button class="action-btn" onclick="openQuickView('{{ product.id }}')">
                            <i class="fas fa-eye"></i>
                        </button>
                        <button class="action-btn" onclick="shareProduct('{{ product.id }}')">
                            <i class="fas fa-share-alt"></i>
                        </button>
                    </div>
                    <a href="{{ product.get_absolute_url }}">
                        {% with image=product.get_main_image %}
                        <img src="{% if image %}{{ image.image.url }}{% else %}{% static 'images/zima_theme/product-placeholder.jpg' %}{% endif %}"
                             alt="{{ product.name }}" class="product-image">
                        {% endwith %}
                    </a>
                </div>
                <div class="product-info">
                    <div class="product-brand">{{ product.brand }}</div>
                    <a href="{{ product.get_absolute_url }}" class="text-decoration-none">
                        <h3 class="product-name">{{ product.name }}</h3>
                    </a>
                    <div class="product-details">
                        <div class="product-rating">
                            <div class="stars">
                                {% with rating=product.get_average_rating %}
                                {% for i in "12345" %}
                                <i class="fa{% if forloop.counter <= rating %}s{% else %}r{% endif %} fa-star star"></i>
                                {% endfor %}
                                {% endwith %}
                            </div>
                            <span class="rating-count">({{ product.get_rating_count }})</span>
                        </div>
                        <div class="product-sizes">{{ product.get_available_sizes_display }}</div>
                    </div>
                    <div class="product-colors">
                        {% for color in product.get_available_colors %}
                        <div class="color-dot" style="background: {{ color.hex_code }}; {% if color.hex_code == '#FFFFFF' %}border: 2px solid #ddd;{% endif %}" title="{{ color.name }}"></div>
                        {% endfor %}
                    </div>
                    <div class="product-price-container">
                        <div class="product-price">
                            <span class="price-current">{{ product.get_display_price|floatformat:0 }} تومان</span>
                            {% if product.has_discount %}
                            <span class="price-original">{{ product.price|floatformat:0 }} تومان</span>
                            {% endif %}
                        </div>
                        {% if product.has_discount %}
                        <span class="discount-percentage">{{ product.discount_percent }}%</span>
                        {% endif %}
                    </div>
                    {% if product.is_in_stock %}
                        <button class="product-add-cart" onclick="addToCart('{{ product.id }}')">
                            <i class="fas fa-shopping-cart"></i>
                            افزودن به سبد خرید
                        </button>
                    {% else %}
                        <button class="product-add-cart" disabled style="background: #ccc; cursor: not-allowed;">
                            <i class="fas fa-times"></i>
                            ناموجود
                        </button>
                    {% endif %}
                </div>
            </div>
            {% empty %}
            <div class="empty-state">
                <i class="fas fa-search"></i>
                <h3>محصولی یافت نشد</h3>
                <p>لطفاً فیلترهای خود را تغییر دهید یا جستجوی جدیدی انجام دهید.</p>
            </div>
            {% endfor %}
        </div>

        <!-- Pagination -->
        {% if products.has_other_pages %}
        <div class="pagination">
            {% if products.has_previous %}
            <a href="?{% url_replace page=products.previous_page_number %}" class="page-btn">
                <i class="fas fa-chevron-right"></i>
            </a>
            {% else %}
            <span class="page-btn disabled">
                <i class="fas fa-chevron-right"></i>
            </span>
            {% endif %}

            {% for page_num in products.paginator.page_range %}
                {% if page_num == products.number %}
                    <span class="page-btn active">{{ page_num }}</span>
                {% else %}
                    <a href="?{% url_replace page=page_num %}" class="page-btn">{{ page_num }}</a>
                {% endif %}
            {% endfor %}
            {% if products.has_next %}
            <a href="?{% url_replace page=products.next_page_number %}" class="page-btn">
                <i class="fas fa-chevron-left"></i>
            </a>
            {% else %}
            <span class="page-btn disabled">
                <i class="fas fa-chevron-left"></i>
            </span>
            {% endif %}
        </div>
        {% endif %}
    </div>
</div>

<!-- Mobile Filter Toggle -->
<button class="mobile-filter-toggle" onclick="toggleMobileFilter()">
    <i class="fas fa-filter"></i> فیلترها
</button>

<!-- Quick View Modal Structure -->
<div class="quick-view-modal" id="quickViewModal">
    <div class="modal-content-qv">
        <button class="modal-close" onclick="closeQuickView()">
            <i class="fas fa-times"></i>
        </button>
        <div id="quickViewModalContent">
            <p style="text-align: center; padding: 50px;">در حال بارگذاری...</p>
        </div>
    </div>
</div>
{% endblock %}


{% block extra_js %}<script>
    // Share Product function (simple placeholder)
    function shareProduct(productId) {
        // You can implement actual sharing logic here (e.g., copy to clipboard, open share dialog)
        showToast('لینک محصول کپی شد!', 'share-alt');
    }

    document.addEventListener('DOMContentLoaded', function() {

    // ✅ ✅ ✅ کد جدید برای نمایش گزینه‌های انتخاب شده در فیلترها ✅ ✅ ✅

    // تابع برای به‌روزرسانی نمایش گزینه‌های انتخاب شده
    function updateActiveFilters() {
        // برای فیلتر سایز
        document.querySelectorAll('.size-btn').forEach(btn => {
            const checkbox = btn.querySelector('input[type="checkbox"]');
            if (checkbox && checkbox.checked) {
                btn.classList.add('active');
            } else {
                btn.classList.remove('active');
            }
        });

        // برای فیلتر برند
        document.querySelectorAll('.brand-label').forEach(btn => {
            const checkbox = btn.querySelector('input[type="checkbox"]');
            if (checkbox && checkbox.checked) {
                btn.classList.add('active');
            } else {
                btn.classList.remove('active');
            }
        });

        // برای فیلتر رنگ
        document.querySelectorAll('.color-option').forEach(colorBtn => {
            const checkbox = colorBtn.querySelector('input[type="checkbox"]');
            if (checkbox && checkbox.checked) {
                colorBtn.classList.add('active');
            } else {
                colorBtn.classList.remove('active');
            }
        });

        // برای چک‌باکس‌های دسته‌بندی
        document.querySelectorAll('.category-checkbox').forEach(checkbox => {
            const label = checkbox.closest('.category-label');
            if (checkbox.checked) {
                label.classList.add('active');
            } else {
                label.classList.remove('active');
            }
        });
    }

    // اعمال وضعیت فعلی فیلترها هنگام بارگذاری صفحه
    updateActiveFilters();

    // اضافه کردن event listener برای کلیک روی دکمه‌های سایز
    document.querySelectorAll('.size-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const checkbox = this.querySelector('input[type="checkbox"]');
            if (checkbox) {
                checkbox.checked = !checkbox.checked;
                updateActiveFilters();
            }
        });
    });

    // اضافه کردن event listener برای کلیک روی دکمه‌های برند
    document.querySelectorAll('.brand-label').forEach(btn => {
        btn.addEventListener('click', function() {
            const checkbox = this.querySelector('input[type="checkbox"]');
            if (checkbox) {
                checkbox.checked = !checkbox.checked;
                updateActiveFilters();
            }
        });
    });

    // اضافه کردن event listener برای کلیک روی دایره‌های رنگ
    document.querySelectorAll('.color-option').forEach(colorBtn => {
        colorBtn.addEventListener('click', function() {
            const checkbox = this.querySelector('input[type="checkbox"]');
            if (checkbox) {
                checkbox.checked = !checkbox.checked;
                updateActiveFilters();
            }
        });
    });

    // اضافه کردن event listener برای چک‌باکس‌های دسته‌بندی
    document.querySelectorAll('.category-checkbox').forEach(checkbox => {
        checkbox.addEventListener('change', function() {
            updateActiveFilters();
        });
    });

    // ✅ ✅ ✅ پایان کد جدید برای فیلترها ✅ ✅ ✅

    // Apply Filters button handles search input and general submit
    document.querySelector('.btn-apply').addEventListener('click', function(e) {
        e.preventDefault();
        document.getElementById('filterForm').submit();
    });

    // View Toggle Functionality (Grid vs List)
    const productsGrid = document.getElementById('productsGrid');
    const gridViewBtn = document.getElementById('gridViewBtn');
    const listViewBtn = document.getElementById('listViewBtn');

    function setView(viewType) {
        if (viewType === 'list') {
            productsGrid.style.gridTemplateColumns = '1fr';
            productsGrid.querySelectorAll('.product-card').forEach(card => {
                card.style.display = 'flex';
                card.style.flexDirection = 'row';
                card.style.height = '200px';
                card.querySelector('.product-image-container').style.minWidth = '200px';
                card.querySelector('.product-image-container').style.height = '100%';
                card.querySelector('.product-image-container').style.flexShrink = '0';
                card.querySelector('.product-info').style.flex = '1';
                const productDetails = card.querySelector('.product-details');
                const productColors = card.querySelector('.product-colors');
                if (productDetails) productDetails.style.display = 'none';
                if (productColors) productColors.style.display = 'none';
            });
            listViewBtn.classList.add('active');
            gridViewBtn.classList.remove('active');
        } else {
            productsGrid.style.gridTemplateColumns = 'repeat(auto-fill, minmax(300px, 1fr))';
            productsGrid.querySelectorAll('.product-card').forEach(card => {
                card.style.display = 'block';
                card.style.flexDirection = 'column';
                card.style.height = 'auto';
                card.querySelector('.product-image-container').style.minWidth = 'auto';
                card.querySelector('.product-image-container').style.height = '380px';
                card.querySelector('.product-image-container').style.flexShrink = 'initial';
                card.querySelector('.product-info').style.flex = 'initial';
                const productDetails = card.querySelector('.product-details');
                const productColors = card.querySelector('.product-colors');
                if (productDetails) productDetails.style.display = 'flex';
                if (productColors) productColors.style.display = 'flex';
            });
            gridViewBtn.classList.add('active');
            listViewBtn.classList.remove('active');
        }
        localStorage.setItem('productView', viewType);
    }

    // Load saved view preference
    const savedView = localStorage.getItem('productView');
    if (savedView) {
        setView(savedView);
    } else {
        setView('grid');
    }

    gridViewBtn.addEventListener('click', () => setView('grid'));
    listViewBtn.addEventListener('click', () => setView('list'));
});
</script>

{% endblock %}

====== FILE: templates/products/quick_view_modal_content.html ======

{# templates/products/quick_view_modal_content.html #}
{% load static %}
{% load product_filters %}

<div class="modal-images">
    {% with main_image=product.get_main_image %}
    <img src="{% if main_image %}{{ main_image.image.url }}{% else %}{% static 'images/zima_theme/product-placeholder.jpg' %}{% endif %}" alt="Product" class="main-image-qv" id="mainImageQv">
    {% endwith %}
    <div class="thumbnail-list">
        {% for image in product.images.all %}
        <img src="{{ image.image.url }}" alt="Thumb {{ forloop.counter }}" class="thumbnail-qv {% if image.is_main %}active{% endif %}" onclick="changeImage(this)">
        {% endfor %}
    </div>
</div>

<div class="modal-details">
    <div class="modal-brand">{{ product.brand }}</div>
    <h2 class="modal-title-qv">{{ product.name }}</h2>
    <div class="modal-rating">
        <div class="stars">
            {% with rating=product.get_average_rating %}
            {% for i in "12345" %}
            <i class="fa{% if forloop.counter <= rating %}s{% else %}r{% endif %} fa-star star"></i>
            {% endfor %}
            {% endwith %}
        </div>
        <span>({{ product.get_rating_count }} نظر)</span>
    </div>
    <div class="modal-price">{{ product.get_display_price|floatformat:0 }} تومان</div>
    <p class="modal-description">
        {{ product.short_description|default:"توضیحات کوتاه برای این محصول موجود نیست." }}
    </p>

    <div class="modal-options">
        <div class="option-group">
            <div class="option-label">سایز:</div>
            <div class="size-options" id="modalSizeOptions">
                {# سایزها با JS در اینجا رندر می‌شوند #}
            </div>
        </div>

        <div class="option-group">
            <div class="option-label">رنگ:</div>
            <div class="color-options" id="modalColorOptions">
                {# رنگ‌ها با JS در اینجا رندر می‌شوند #}
            </div>
        </div>
    </div>

    <div class="quantity-selector">        <button class="quantity-btn" onclick="decreaseQuantityQv()">-</button>
        <input type="number" class="quantity-input" value="1" min="1" max="{{ product.stock }}" id="quantityInputQv">
        <button class="quantity-btn" onclick="increaseQuantityQv()">+</button>
    </div>

    <div class="modal-actions">
        <button class="btn-add-to-cart" onclick="addToCartFromModal('{{ product.id }}')">
            <i class="fas fa-shopping-bag"></i>
            افزودن به سبد خرید
        </button>
        <button class="btn-wishlist {% if product.is_favorited %}active{% endif %}" onclick="toggleWishlist(this, '{{ product.id }}')">
            <i class="fa{% if product.is_favorited %}s{% else %}r{% endif %} fa-heart"></i>
        </button>
    </div>
</div>

<script>
    // Quick View Modal Specific JS (این اسکریپت فقط برای محتوای داخل مودال است)
    const productDataQv = {
        id: {{ product.id }},
        basePrice: {{ product.get_discount_price }},
        originalPrice: {{ product.price }},
        stock: {{ product.stock }},
        hasDiscount: {{ product.has_discount|yesno:"true,false" }},
        discountPercent: {{ product.discount_percent }},
    };

    const productInventoryQv = [
        {% for inventory in product.inventories.all %}
        {
            id: {{ inventory.id }},
            color: {
                id: {{ inventory.color.id }},
                name: "{{ inventory.color.name }}"
            },
            size: {
                id: {{ inventory.size.id }},
                name: "{{ inventory.size.name }}"
            },            quantity: {{ inventory.quantity }},
        },
        {% endfor %}
    ];

    let selectedColorQv = null;
    let selectedSizeQv = null;
    let selectedInventoryQv = null;

    // استخراج رنگ‌های منحصر به فرد از موجودی محصول
    function getUniqueColorsQv() {
        const colors = new Map();
        productInventoryQv.forEach(item => {            if (!colors.has(item.color.id)) {
                colors.set(item.color.id, item.color);
            }
        });
        return Array.from(colors.values());    }

    // استخراج سایزهای منحصر به فرد از موجودی محصول
    function getUniqueSizesQv() {
        const sizes = new Map();
        productInventoryQv.forEach(item => {
            if (!sizes.has(item.size.id)) {
                sizes.set(item.size.id, item.size);
            }
        });
        return Array.from(sizes.values());
    }

    // رندر رنگ‌ها در مودال
    function renderColorsQv() {
        const colorContainer = document.getElementById('modalColorOptions');
        colorContainer.innerHTML = '';

        const uniqueColors = getUniqueColorsQv();

        if (uniqueColors.length === 0 && productInventoryQv.length > 0) {
            colorContainer.innerHTML = '<p class="small text-muted">فاقد تنوع رنگی</p>';
            return;
        } else if (productInventoryQv.length === 0) {
            colorContainer.innerHTML = '<div class="alert alert-warning small">رنگی برای این محصول ثبت نشده است.</div>';
            return;
        }

        uniqueColors.forEach(color => {
            const colorElement = document.createElement('div');
            colorElement.className = 'color-option-large';
            colorElement.setAttribute('data-color-id', color.id);
            colorElement.setAttribute('data-color-name', color.name);
            colorElement.style.backgroundColor = getColorCode(color.name); // استفاده از تابع getColorCode عمومی
            colorElement.setAttribute('title', color.name);

            colorElement.addEventListener('click', function() {
                selectColorQv(this);
            });
            colorContainer.appendChild(colorElement);
        });
    }

    // رندر سایزها در مودال
    function renderSizesQv() {
        const sizeContainer = document.getElementById('modalSizeOptions');
        sizeContainer.innerHTML = '';

        const uniqueSizes = getUniqueSizesQv();

        if (uniqueSizes.length === 0 && productInventoryQv.length > 0) {
            sizeContainer.innerHTML = '<p class="small text-muted">فاقد تنوع سایزی</p>';
            return;
        } else if (productInventoryQv.length === 0) {
            sizeContainer.innerHTML = '<div class="alert alert-warning small">سایزی برای این محصول ثبت نشده است.</div>';
            return;
        }

        uniqueSizes.forEach(size => {
            const sizeElement = document.createElement('button');
            sizeElement.className = 'size-option';
            sizeElement.setAttribute('data-size-id', size.id);
            sizeElement.setAttribute('data-size-name', size.name);
            sizeElement.textContent = size.name;

            sizeElement.addEventListener('click', function() {
                selectSizeQv(this);
            });
            sizeContainer.appendChild(sizeElement);
        });
    }

    // انتخاب رنگ در مودال
    function selectColorQv(colorElement) {
        document.querySelectorAll('#modalColorOptions .color-option-large').forEach(function(color) {            color.classList.remove('active');
        });
        colorElement.classList.add('active');

        selectedColorQv = {
            id: colorElement.getAttribute('data-color-id'),
            name: colorElement.getAttribute('data-color-name')
        };
        updateAvailableSizesQv();
        updateSelectedInventoryQv();
    }

    // انتخاب سایز در مودال
    function selectSizeQv(sizeElement) {
        document.querySelectorAll('#modalSizeOptions .size-option').forEach(function(size) {
            size.classList.remove('active');
        });
        sizeElement.classList.add('active');

        selectedSizeQv = {
            id: sizeElement.getAttribute('data-size-id'),
            name: sizeElement.getAttribute('data-size-name')
        };
        updateAvailableColorsQv();
        updateSelectedInventoryQv();
    }

    // به‌روزرسانی سایزهای موجود در مودال بر اساس رنگ انتخاب شده
    function updateAvailableSizesQv() {
        if (!selectedColorQv) return;

        const availableSizeIds = new Set();
        productInventoryQv.forEach(item => {
            if (item.color.id == selectedColorQv.id && item.quantity > 0) {
                availableSizeIds.add(item.size.id);
            }
        });

        document.querySelectorAll('#modalSizeOptions .size-option').forEach(sizeElement => {
            const sizeId = sizeElement.getAttribute('data-size-id');
            if (availableSizeIds.has(parseInt(sizeId))) {
                sizeElement.classList.remove('disabled');
            } else {
                sizeElement.classList.add('disabled');
                if (selectedSizeQv && selectedSizeQv.id == sizeId) {
                    sizeElement.classList.remove('active');
                    selectedSizeQv = null;
                }
            }
        });
    }

    // به‌روزرسانی رنگ‌های موجود در مودال بر اساس سایز انتخاب شده
    function updateAvailableColorsQv() {
        if (!selectedSizeQv) return;

        const availableColorIds = new Set();
        productInventoryQv.forEach(item => {
            if (item.size.id == selectedSizeQv.id && item.quantity > 0) {
                availableColorIds.add(item.color.id);
            }
        });

        document.querySelectorAll('#modalColorOptions .color-option-large').forEach(colorElement => {
            const colorId = colorElement.getAttribute('data-color-id');
            if (availableColorIds.has(parseInt(colorId))) {
                colorElement.classList.remove('disabled');
            } else {
                colorElement.classList.add('disabled');
                if (selectedColorQv && selectedColorQv.id == colorId) {
                    colorElement.classList.remove('active');
                    selectedColorQv = null;
                }
            }
        });
    }

    // به‌روزرسانی موجودی انتخاب شده در مودال
    function updateSelectedInventoryQv() {
        selectedInventoryQv = null;
        const addToCartBtn = document.querySelector('#quickViewModal .btn-add-to-cart'); // دکمه سبد خرید مودال
        const quantityInput = document.getElementById('quantityInputQv');

        if (productInventoryQv.length > 0) {
            if (selectedColorQv && selectedSizeQv) {
                selectedInventoryQv = productInventoryQv.find(item =>                    item.color.id == selectedColorQv.id &&
                    item.size.id == selectedSizeQv.id
                );

                if (selectedInventoryQv && selectedInventoryQv.quantity > 0) {
                    quantityInput.setAttribute('max', selectedInventoryQv.quantity);
                    addToCartBtn.disabled = false;
                    addToCartBtn.textContent = 'افزودن به سبد خرید';                } else {
                    quantityInput.setAttribute('max', 0);
                    addToCartBtn.disabled = true;
                    addToCartBtn.textContent = 'ناموجود';
                }
            } else {
                quantityInput.setAttribute('max', 0);
                addToCartBtn.disabled = true;
                addToCartBtn.textContent = 'انتخاب رنگ و سایز';
            }
        } else {
            // اگر محصول تنوع رنگ و سایز ندارد
            quantityInput.setAttribute('max', productDataQv.stock);
            if (productDataQv.stock <= 0) {
                addToCartBtn.disabled = true;
                addToCartBtn.textContent = 'ناموجود';
            } else {
                addToCartBtn.disabled = false;
                addToCartBtn.textContent = 'افزودن به سبد خرید';
            }
        }
        // Reset quantity to 1 if max is less than current value
        if (parseInt(quantityInput.value) > parseInt(quantityInput.max)) {
            quantityInput.value = 1;
        }
    }

    // افزایش تعداد در مودال
    window.increaseQuantityQv = function() {
        const input = document.getElementById('quantityInputQv');
        let value = parseInt(input.value);
        const max = parseInt(input.getAttribute('max'));
        if (value < max) {
            input.value = value + 1;
        }
    };

    // کاهش تعداد در مودال
    window.decreaseQuantityQv = function() {
        const input = document.getElementById('quantityInputQv');
        let value = parseInt(input.value);
        if (value > 1) {
            input.value = value - 1;
        }
    };

    // افزودن به سبد خرید از مودال
    window.addToCartFromModal = function(productId) {
        const quantity = parseInt(document.getElementById('quantityInputQv').value);
        if (productInventoryQv.length > 0) {
            if (!selectedColorQv) {
                showToast('لطفاً یک رنگ انتخاب کنید.', 'exclamation-triangle');
                return;
            }
            if (!selectedSizeQv) {
                showToast('لطفاً یک سایز انتخاب کنید.', 'exclamation-triangle');
                return;
            }            if (!selectedInventoryQv || selectedInventoryQv.quantity <= 0) {
                showToast('این ترکیب رنگ و سایز موجود نیست.', 'exclamation-triangle');
                return;
            }
            if (quantity > selectedInventoryQv.quantity) {
                showToast(`موجودی این محصول با مشخصات انتخاب شده ${selectedInventoryQv.quantity} عدد است.`, 'exclamation-triangle');
                return;
            }
            window.addToCart(productId, quantity, selectedColorQv.id, selectedSizeQv.id, selectedInventoryQv.id);
        } else {
            if (quantity > productDataQv.stock) {
                showToast(`موجودی این محصول ${productDataQv.stock} عدد است.`, 'exclamation-triangle');
                return;
            }
            window.addToCart(productId, quantity);
        }
        window.closeQuickView(); // بستن مودال پس از افزودن به سبد خرید
    };

    // اجرای کدها پس از بارگذاری محتوای مودال (این بخش باید در جایی که Quick View را با AJAX بارگذاری می‌کنید، فراخوانی شود)
    // برای مثال، در تابع openQuickView در zima_theme_v2.js پس از اینکه محتوا به #quickViewModalContent اضافه شد:
    // ...
    // .then(html => {
    //     hideLoading();
    //     document.getElementById('quickViewModalContent').innerHTML = html;
    //     const modal = document.getElementById('quickViewModal');
    //     modal.classList.add('active');
    //     document.body.style.overflow = 'hidden';
    //     // ✅ اضافه شده: اجرای اسکریپت‌های مودال پس از بارگذاری محتوا
    //     // این فراخوانی باید پس از اضافه شدن محتوا به DOM انجام شود
    //     initQuickViewModalContent(); // تابع جدید برای مقداردهی اولیه محتوای مودال
    // })
    // ...

    // تابع مقداردهی اولیه برای محتوای مودال Quick View
    window.initQuickViewModalContent = function() {
        renderColorsQv();
        renderSizesQv();

        // انتخاب اولین رنگ و سایز موجود به صورت پیش‌فرض
        if (productInventoryQv.length > 0) {
            let firstActiveColor = null;
            let firstActiveSize = null;

            const uniqueColors = getUniqueColorsQv();
            for (const color of uniqueColors) {
                const hasAvailableSize = productInventoryQv.some(item => item.color.id == color.id && item.quantity > 0);
                if (hasAvailableSize) {
                    firstActiveColor = document.querySelector(`#modalColorOptions .color-option-large[data-color-id="${color.id}"]`);
                    if (firstActiveColor) {
                        selectColorQv(firstActiveColor);
                        break;
                    }
                }
            }

            if (selectedColorQv) {
                const uniqueSizes = getUniqueSizesQv();
                for (const size of uniqueSizes) {
                    const hasAvailableColor = productInventoryQv.some(item => item.size.id == size.id && item.color.id == selectedColorQv.id && item.quantity > 0);
                    if (hasAvailableColor) {
                        firstActiveSize = document.querySelector(`#modalSizeOptions .size-option[data-size-id="${size.id}"]`);
                        if (firstActiveSize) {
                            selectSizeQv(firstActiveSize);
                            break;
                        }
                    }
                }
            }
        }
        updateSelectedInventoryQv();
    };

    // برای اطمینان از اینکه تابع getColorCode در این اسکریپت نیز قابل دسترسی است
    // فرض می‌کنیم که این تابع قبلاً در zima_theme_v2.js به عنوان window.getColorCode تعریف شده است.
    if (typeof window.getColorCode === 'undefined') {
        window.getColorCode = function(colorName) {
            const colorMap = {
                'سفید': '#FFFFFF', 'مشکی': '#000000', 'خاکستری': '#808080', 'نقره‌ای': '#C0C0C0',
                'قرمز': '#FF0000', 'زرشکی': '#800000', 'صورتی': '#FFC0CB', 'گلبهی': '#FFB6C1',
                'نارنجی': '#FFA500', 'هلویی': '#FFDAB9', 'طلایی': '#FFD700', 'زرد': '#FFFF00', 'لیمویی': '#BFFF00',
                'سبز': '#00FF00', 'سبز لجنی': '#2F4F4F', 'سبز یشمی': '#00A86B', 'سبز زیتونی': '#808000',
                'آبی': '#0000FF', 'آبی آسمانی': '#87CEEB', 'آبی نفتی': '#000080', 'فیروزه‌ای': '#40E0D0',
                'بنفش': '#800080', 'یاسی': '#DDA0DD', 'ارغوانی': '#9370DB',
                'قهوه‌ای': '#A52A2A', 'کرم': '#FFFDD0', 'بژ': '#F5F5DC', 'شکلاتی': '#5C4033', 'عنابی': '#722F37',
                'مسی': '#B87333', 'برنزی': '#CD7F32', 'سرمه‌ای': '#191970', 'کالباسی': '#E34234', 'نباتی': '#FAEBD7', 'آجری': '#B22222',
                'آبی_روشن': '#ADD8E6', 'طوسی': '#808080', 'جگری': '#8B0000', 'آبی_کاربنی': '#003366', 'بنفش_روشن': '#E0B4D6',
                'زیتونی': '#808000', 'آلبالویی': '#8B0000', 'کاهویی': '#ADFF2F', 'آبی_ملایم': '#6495ED', 'بژ_روشن': '#F5F5DC',
                'خاکی': '#C2B280', 'سیلور': '#C0C0C0', 'نارنجی_سیر': '#FF8C00', 'آبی_نفتی_تیره': '#000080', 'بنفش_پررنگ': '#8A2BE2',
                'زرد_طلایی': '#FFD700', 'ارغوانی_روشن': '#D8BFD8', 'یشمی_روشن': '#7FFFD4', 'آبی_دریایی': '#000080', 'براق': '#E0E0E0',
            };
            return colorMap[colorName] || '#CCCCCC';
        };
    }
</script>

====== FILE: templates/products/product_detail.html ======

{% extends "base/base.html" %}
{% load static %}

{% block title %}{{ product.name }} | زیما{% endblock %}

{% block meta_description %}{{ product.description|truncatewords:20 }}{% endblock %}

{% block content %}
<!-- Product Breadcrumb -->
<section class="product-breadcrumb">
    <div class="container">
        <nav class="breadcrumb-nav">
            <a href="{% url 'pages:home' %}">خانه</a>
            <span>/</span>
            <a href="{% url 'products:product_list' %}">محصولات</a>
            {% if product.category %}
                <span>/</span>
                {% if product.category.parent %}
                    <a href="{% url 'products:category_list' product.category.parent.slug %}">{{ product.category.parent.name }}</a>
                    <span>/</span>
                {% endif %}
                <a href="{% url 'products:category_list' product.category.slug %}">{{ product.category.name }}</a>
            {% endif %}
            <span>/</span>
            <span class="current">{{ product.name|truncatewords:3 }}</span>
        </nav>
    </div>
</section>

<!-- Product Detail Section -->
<section class="product-detail-section">
    <div class="container">
        <div class="product-detail-wrapper">
            <!-- Product Images -->
            <div class="product-images">
                <div class="main-image-container">
                    {% with main_image=product.get_main_image %}
                        <img src="{% if main_image %}{{ main_image.image.url }}{% else %}{% static 'images/zima_theme/product-placeholder.jpg' %}{% endif %}"
                             alt="{{ product.name }}"
                             class="main-product-image"
                             id="mainProductImage">
                    {% endwith %}

                    <!-- Product Badges -->
                    <div class="product-badges-detail">
                        {% if product.is_new %}
                            <span class="product-badge new">جدید</span>
                        {% endif %}
                        {% if product.has_discount %}
                            <span class="product-badge sale">{{ product.discount_percent }}% تخفیف</span>
                        {% endif %}
                        {% if product.is_featured %}
                            <span class="product-badge featured">ویژه</span>
                        {% endif %}
                    </div>

                    <!-- Zoom Button -->
                    <button class="zoom-btn" onclick="zoomImage()">
                        <i class="fas fa-search-plus"></i>
                    </button>
                </div>

                <!-- Thumbnail Images -->
                {% if product.images.count > 1 %}
                    <div class="thumbnail-container">
                        {% for image in product.images.all %}
                            <div class="thumbnail-item {% if forloop.first %}active{% endif %}"
                                 onclick="changeMainImage(this, '{{ image.image.url }}')">
                                <img src="{{ image.image.url }}" alt="{{ product.name }}">
                            </div>
                        {% endfor %}
                    </div>
                {% endif %}
            </div>

            <!-- Product Info -->
            <div class="product-info-detail">
                <!-- Product Header -->
                <div class="product-header">
                    <div class="product-brand-detail">{{ product.brand }}</div>
                    <h1 class="product-title-detail">{{ product.name }}</h1>

                    <!-- Product Rating -->
                    <div class="product-rating-detail">
                        <div class="stars-large">
                            {% with rating=product.get_average_rating|default:0 %}
                                {% for i in "12345" %}
                                    <i class="fa{% if forloop.counter <= rating %}s{% else %}r{% endif %} fa-star star"></i>
                                {% endfor %}
                            {% endwith %}
                        </div>
                        <span class="rating-number">({{ product.get_average_rating|default:0|floatformat:1 }})</span>
                        <span class="reviews-count">{{ product.get_rating_count|default:0 }} نظر</span>
                        <a href="#reviews" class="add-review-link">نظر شما</a>
                    </div>
                </div>

                <!-- Price Section -->
                <div class="price-section">
                    <span class="current-price">{{ product.get_display_price|floatformat:0 }} تومان</span>
                    {% if product.has_discount %}
                        <span class="original-price">{{ product.price|floatformat:0 }} تومان</span>
                        <span class="discount-badge">{{ product.discount_percent }}% تخفیف</span>
                    {% endif %}
                </div>

                <!-- Stock Status -->
                <div class="stock-status">
                    {% if total_stock > 0 %}
                        <span class="in-stock">
                            <i class="fas fa-check-circle"></i>
                            موجود در انبار (<span id="current-stock">{{ total_stock }}</span> عدد)
                        </span>
                    {% else %}
                        <span class="out-of-stock">
                            <i class="fas fa-times-circle"></i>
                            ناموجود
                        </span>
                    {% endif %}
                </div>

                <!-- Product Description -->
                <div class="product-description-short">
                    <p>{{ product.description|default:"توضیحاتی برای این محصول ارائه نشده است." }}</p>
                </div>

                <!-- Product Options -->
                <div class="product-options">
                    <!-- Color Selection -->
                    {% if available_colors %}
                        <div class="option-group">
                            <label class="option-label">
                                رنگ: <span class="selected-color-name">انتخاب کنید</span>
                            </label>
                            <div class="color-options-detail">
                                {% for color in available_colors %}
                                    <label class="color-option-detail"
                                           data-color-id="{{ color.id }}"
                                           data-color-name="{{ color.name }}"
                                           style="background: {{ color.hex_code }};">
                                        <input type="radio" name="color" value="{{ color.id }}">
                                    </label>
                                {% endfor %}
                            </div>
                        </div>
                    {% endif %}

                    <!-- Size Selection -->
                    {% if available_sizes %}
                        <div class="option-group">
                            <label class="option-label">سایز:</label>
                            <div class="size-options-detail">
                                {% for size in available_sizes %}
                                    <label class="size-option-detail" data-size-id="{{ size.id }}">
                                        <input type="radio" name="size" value="{{ size.id }}">
                                        <span>{{ size.name }}</span>
                                    </label>
                                {% endfor %}
                            </div>
                        </div>
                    {% endif %}

                    <!-- Quantity Selection -->
                    <div class="option-group">
                        <label class="option-label">تعداد:</label>
                        <div class="quantity-selector-detail">
                            <button type="button" class="quantity-btn" onclick="changeQuantity(-1)">-</button>
                            <input type="number"
                                   id="quantity"
                                   class="quantity-input-detail"
                                   value="1"
                                   min="1"
                                   max="{{ total_stock }}"
                                   readonly>
                            <button type="button" class="quantity-btn" onclick="changeQuantity(1)">+</button>
                        </div>
                    </div>
                </div>

                <!-- Action Buttons -->
                <div class="product-actions-detail">
                    {% if total_stock > 0 %}
                        <button class="btn-add-to-cart-detail" onclick="addToCartDetail('{{ product.id }}')">
                            <i class="fas fa-shopping-cart"></i>
                            افزودن به سبد خرید
                        </button>
                    {% else %}
                        <button class="btn-add-to-cart-detail disabled" disabled>
                            <i class="fas fa-times"></i>
                            ناموجود
                        </button>
                    {% endif %}

                    <button class="btn-wishlist-detail {% if product.is_favorited %}active{% endif %}"
                            onclick="toggleWishlist(this, '{{ product.id }}')">
                        <i class="fa{% if product.is_favorited %}s{% else %}r{% endif %} fa-heart"></i>
                        علاقه‌مندی‌ها
                    </button>
                </div>

                <!-- Social Share -->
                <div class="social-share">
                    <span class="share-label">اشتراک‌گذاری:</span>
                    <div class="share-buttons">
                        <a href="#" class="share-btn telegram" onclick="shareProduct('telegram')">
                            <i class="fab fa-telegram-plane"></i>
                        </a>
                        <a href="#" class="share-btn whatsapp" onclick="shareProduct('whatsapp')">
                            <i class="fab fa-whatsapp"></i>
                        </a>
                        <a href="#" class="share-btn copy" onclick="shareProduct('copy')">
                            <i class="fas fa-copy"></i>
                        </a>
                    </div>
                </div>

                <!-- Product Features -->
                <div class="product-features">
                    <div class="feature-item">
                        <i class="fas fa-truck"></i>
                        <span>ارسال رایگان برای خریدهای بالای ۵۰۰ هزار تومان</span>
                    </div>
                    <div class="feature-item">
                        <i class="fas fa-undo"></i>
                        <span>۷ روز ضمانت بازگشت کالا</span>
                    </div>
                    <div class="feature-item">
                        <i class="fas fa-shield-alt"></i>
                        <span>ضمانت اصالت کالا</span>
                    </div>
                    <div class="feature-item">
                        <i class="fas fa-headset"></i>
                        <span>پشتیبانی ۲۴ ساعته</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Product Tabs Section -->
<section class="product-tabs-section">
    <div class="container">
        <div class="tabs-wrapper">
            <!-- Tab Headers -->
            <div class="tab-headers">
                <button class="tab-header active" data-tab="description">توضیحات</button>
                <button class="tab-header" data-tab="specifications">مشخصات</button>
                <button class="tab-header" data-tab="reviews">نظرات ({{ product.get_rating_count|default:0 }})</button>
                <button class="tab-header" data-tab="qa">پرسش و پاسخ</button>
            </div>

            <!-- Tab Contents -->
            <div class="tab-contents">
                <!-- Description Tab -->
                <div class="tab-content active" id="description">
                    <div class="description-content">
                        <p>{{ product.description|default:"توضیحات کاملی برای این محصول ارائه نشده است." }}</p>
                    </div>
                </div>

                <!-- Specifications Tab -->
                <div class="tab-content" id="specifications">
                    <table class="specs-table">
                        <tr>
                            <td>برند</td>
                            <td>{{ product.brand }}</td>
                        </tr>
                        {% if product.category %}
                        <tr>
                            <td>دسته‌بندی</td>
                            <td>{{ product.category.name }}</td>
                        </tr>
                        {% endif %}
                        <tr>
                            <td>کد محصول</td>
                            <td>{{ product.id }}</td>
                        </tr>
                        <tr>
                            <td>وزن</td>
                            <td>{{ product.weight|default:"مشخص نشده" }}</td>
                        </tr>
                        <tr>
                            <td>رنگ‌های موجود</td>
                            <td>
                                {% for color in available_colors %}
                                    {{ color.name }}{% if not forloop.last %}، {% endif %}
                                {% endfor %}
                            </td>
                        </tr>
                        <tr>
                            <td>سایزهای موجود</td>
                            <td>
                                {% for size in available_sizes %}
                                    {{ size.name }}{% if not forloop.last %}، {% endif %}
                                {% endfor %}
                            </td>
                        </tr>
                    </table>
                </div>

                <!-- Reviews Tab -->
                <div class="tab-content" id="reviews">
                    <div class="reviews-content">
                        <!-- Reviews Summary -->
                        <div class="reviews-summary">
                            <div class="rating-overview">
                                <div class="average-rating">
                                    <span class="rating-number-large">{{ product.get_average_rating|default:0|floatformat:1 }}</span>
                                    <div class="stars-large">
                                        {% with rating=product.get_average_rating|default:0 %}
                                            {% for i in "12345" %}
                                                <i class="fa{% if forloop.counter <= rating %}s{% else %}r{% endif %} fa-star star"></i>
                                            {% endfor %}
                                        {% endwith %}
                                    </div>
                                    <span class="total-reviews">{{ product.get_rating_count|default:0 }} نظر</span>
                                </div>
                                <div class="rating-breakdown">
                                    {% for i in "54321" %}
                                        <div class="rating-bar">
                                            <span>{{ i }} ستاره</span>
                                            <div class="bar">
                                                <div class="fill" style="width: 0%"></div>
                                            </div>
                                            <span>0</span>
                                        </div>
                                    {% endfor %}
                                </div>
                            </div>
                        </div>

                        <!-- Add Review Section -->
                        <div class="add-review-section">
                            <h3>نظر شما</h3>
                            {% if user.is_authenticated %}
                                {% if has_purchased %}
                                    <form class="review-form" id="reviewForm">
                                        {% csrf_token %}
                                        <div class="rating-input">
                                            <label>امتیاز شما:</label>
                                            <div class="star-rating-input">
                                                {% for i in "54321" %}
                                                    <input type="radio" name="rating" value="{{ i }}" id="star{{ i }}">
                                                    <label for="star{{ i }}">★</label>
                                                {% endfor %}
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label>متن نظر:</label>
                                            <textarea name="comment" rows="4" placeholder="نظر خود را بنویسید..."></textarea>
                                        </div>
                                        <button type="submit" class="btn-submit-review">ثبت نظر</button>
                                    </form>
                                {% else %}
                                    <div class="review-restriction">
                                        <p>فقط کاربرانی که این محصول را خریداری کرده‌اند می‌توانند نظر ثبت کنند.</p>
                                    </div>
                                {% endif %}
                            {% else %}
                                <div class="login-required">
                                    <p>برای ثبت نظر ابتدا <a href="{% url 'users:login' %}">وارد حساب کاربری</a> خود شوید.</p>
                                </div>
                            {% endif %}
                        </div>

                        <!-- Reviews List -->
                        <div class="reviews-list">
                            {% for review in product.reviews.all %}
                                <div class="review-item">
                                    <div class="review-header">
                                        <div class="reviewer-info">
                                            <div class="reviewer-avatar">
                                                {{ review.user.first_name.0|default:review.user.username.0|upper }}
                                            </div>
                                            <div class="reviewer-details">
                                                <div class="reviewer-name">{{ review.user.get_full_name|default:review.user.username }}</div>
                                                <div class="review-date">{{ review.created_at|date:"Y/m/d" }}</div>
                                            </div>
                                        </div>
                                        <div class="review-rating">
                                            {% for i in "12345" %}
                                                <i class="fa{% if forloop.counter <= review.rating %}s{% else %}r{% endif %} fa-star star"></i>
                                            {% endfor %}
                                        </div>
                                    </div>
                                    <div class="review-content">
                                        <p>{{ review.comment }}</p>
                                    </div>
                                </div>
                            {% empty %}
                                <div class="no-reviews">
                                    <i class="fas fa-comments"></i>
                                    <p>هنوز نظری ثبت نشده است. اولین نفری باشید که نظر می‌دهد!</p>
                                </div>
                            {% endfor %}
                        </div>
                    </div>
                </div>

                <!-- Q&A Tab -->
                <div class="tab-content" id="qa">
                    <div class="qa-content">
                        <!-- Add Question Section -->
                        <div class="add-question-section">
                            <h3>سوال شما</h3>
                            {% if user.is_authenticated %}
                                <form class="question-form">
                                    <textarea placeholder="سوال خود را بپرسید..."></textarea>
                                    <button type="submit" class="btn-submit-question">ثبت سوال</button>
                                </form>
                            {% else %}
                                <div class="login-required">
                                    <p>برای ثبت سوال ابتدا <a href="{% url 'users:login' %}">وارد حساب کاربری</a> خود شوید.</p>
                                </div>
                            {% endif %}
                        </div>

                        <!-- Questions List -->
                        <div class="questions-list">
                            <!-- Sample Q&A - Replace with actual data -->
                            <div class="question-item">
                                <div class="question">
                                    <div class="question-header">
                                        <span class="questioner">کاربر نمونه</span>
                                        <span class="question-date">1403/05/15</span>
                                    </div>
                                    <p>این محصول چه مدت گارانتی دارد؟</p>
                                </div>
                                <div class="answer">
                                    <div class="answer-header">
                                        <span class="answerer">پشتیبانی زیما</span>
                                        <span class="answer-date">1403/05/16</span>
                                    </div>
                                    <p>این محصول دارای ۱۸ ماه گارانتی شرکتی می‌باشد.</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Related Products -->
{% if related_products %}
<section class="related-products-section">
    <div class="container">
        <div class="section-header text-center">
            <h2 class="section-title">محصولات مرتبط</h2>
            <p class="section-description">محصولات مشابهی که ممکن است علاقه‌مند باشید</p>
        </div>
        <div class="related-products-grid">
            {% for related_product in related_products %}
                <div class="product-card fade-in">
                    <div class="product-image-container">
                        <div class="product-badges">
                            {% if related_product.is_new %}
                                <span class="product-badge new">جدید</span>
                            {% endif %}
                            {% if related_product.has_discount %}
                                <span class="product-badge sale">{{ related_product.discount_percent }}% تخفیف</span>
                            {% endif %}
                        </div>
                        <div class="product-actions">
                            <button class="action-btn" onclick="toggleWishlist(this, '{{ related_product.id }}')">
                                <i class="far fa-heart"></i>
                            </button>
                            <button class="action-btn" onclick="openQuickView('{{ related_product.id }}')">
                                <i class="fas fa-eye"></i>
                            </button>
                        </div>
                        <a href="{% url 'products:product_detail' related_product.id %}">
                            {% with image=related_product.get_main_image %}
                                <img src="{% if image %}{{ image.image.url }}{% else %}{% static 'images/zima_theme/product-placeholder.jpg' %}{% endif %}"
                                     alt="{{ related_product.name }}" class="product-image">
                            {% endwith %}
                        </a>
                    </div>
                    <div class="product-info">
                        <div class="product-brand">{{ related_product.brand }}</div>
                        <a href="{% url 'products:product_detail' related_product.id %}" class="text-decoration-none">
                            <h3 class="product-name">{{ related_product.name }}</h3>
                        </a>
                        <div class="product-rating">
                            <div class="stars">
                                {% with rating=related_product.get_average_rating|default:0 %}
                                    {% for i in "12345" %}
                                        <i class="fa{% if forloop.counter <= rating %}s{% else %}r{% endif %} fa-star star"></i>
                                    {% endfor %}
                                {% endwith %}
                            </div>
                            <span class="rating-text">({{ related_product.get_rating_count|default:0 }})</span>
                        </div>
                        <div class="product-price">
                            <span class="price-current">{{ related_product.get_display_price|floatformat:0 }} تومان</span>
                            {% if related_product.has_discount %}
                                <span class="price-original">{{ related_product.price|floatformat:0 }} تومان</span>
                            {% endif %}
                        </div>
                        <button class="product-add-cart" onclick="addToCart('{{ related_product.id }}')">
                            <i class="fas fa-shopping-cart"></i>
                            افزودن به سبد خرید
                        </button>
                    </div>
                </div>
            {% endfor %}
        </div>
    </div>
</section>
{% endif %}

<!-- Image Zoom Modal -->
<div class="image-zoom-modal" id="imageZoomModal">
    <div class="zoom-modal-content">
        <button class="zoom-close" onclick="closeImageZoom()">
            <i class="fas fa-times"></i>
        </button>
        <div class="zoom-container">
            <img src="" alt="" id="zoomedImage">
        </div>
    </div>
</div>
{% endblock %}

{% block extra_js %}
<script>
// داده‌های موجودی از سرور
const inventoryMapping = {{ inventory_mapping|safe }};
let selectedColor = null;
let selectedSize = null;

document.addEventListener('DOMContentLoaded', function() {
    // Change main image when thumbnail is clicked
    window.changeMainImage = function(thumbnail, imageSrc) {
        const mainImage = document.getElementById('mainProductImage');
        mainImage.src = imageSrc;

        // Update active thumbnail
        document.querySelectorAll('.thumbnail-item').forEach(item => item.classList.remove('active'));
        thumbnail.classList.add('active');
    };

    // Quantity change functionality
    window.changeQuantity = function(change) {
        const quantityInput = document.getElementById('quantity');
        const currentValue = parseInt(quantityInput.value);
        const maxStock = parseInt(quantityInput.max);
        const newValue = currentValue + change;

        if (newValue >= 1 && newValue <= maxStock) {
            quantityInput.value = newValue;
        }
    };

    // Color selection with inventory update
    document.querySelectorAll('.color-option-detail').forEach(option => {
        option.addEventListener('click', function() {
            if (this.style.pointerEvents === 'none') return;

            document.querySelectorAll('.color-option-detail').forEach(opt => opt.classList.remove('active'));
            this.classList.add('active');

            selectedColor = this.dataset.colorId;
            const colorName = this.dataset.colorName;
            document.querySelector('.selected-color-name').textContent = colorName;

            // Reset size selection
            selectedSize = null;
            document.querySelectorAll('.size-option-detail').forEach(opt => {
                opt.classList.remove('active');
                opt.style.opacity = '0.5';
                opt.style.pointerEvents = 'none';
            });

            // Enable available sizes for selected color
            updateAvailableOptions();
        });
    });

    // Size selection with inventory update
    document.querySelectorAll('.size-option-detail').forEach(option => {
        option.addEventListener('click', function() {
            if (this.style.pointerEvents === 'none') return;

            document.querySelectorAll('.size-option-detail').forEach(opt => opt.classList.remove('active'));
            this.classList.add('active');

            selectedSize = this.dataset.sizeId;

            // Reset color selection if needed
            if (!selectedColor) {
                document.querySelectorAll('.color-option-detail').forEach(opt => {
                    opt.classList.remove('active');
                    opt.style.opacity = '0.5';
                    opt.style.pointerEvents = 'none';
                });
            }

            // Enable available colors for selected size
            updateAvailableOptions();
        });
    });

    // Function to update available options based on selection
    function updateAvailableOptions() {
        if (selectedColor && !selectedSize) {
            // Color selected, update available sizes
            const availableSizes = inventoryMapping[selectedColor] || {};

            document.querySelectorAll('.size-option-detail').forEach(sizeOption => {
                const sizeId = sizeOption.dataset.sizeId;
                if (availableSizes[sizeId]) {
                    sizeOption.style.opacity = '1';
                    sizeOption.style.pointerEvents = 'auto';
                } else {
                    sizeOption.style.opacity = '0.3';
                    sizeOption.style.pointerEvents = 'none';
                }
            });
        } else if (selectedSize && !selectedColor) {
            // Size selected, update available colors
            document.querySelectorAll('.color-option-detail').forEach(colorOption => {
                const colorId = colorOption.dataset.colorId;
                const colorInventory = inventoryMapping[colorId] || {};

                if (colorInventory[selectedSize]) {
                    colorOption.style.opacity = '1';
                    colorOption.style.pointerEvents = 'auto';
                } else {
                    colorOption.style.opacity = '0.3';
                    colorOption.style.pointerEvents = 'none';
                }
            });
        }

        // Update stock quantity
        updateStockQuantity();
    }

    // Function to update stock quantity display
    function updateStockQuantity() {
        let totalStock = 0;

        if (selectedColor && selectedSize) {
            const inventory = inventoryMapping[selectedColor]?.[selectedSize];
            totalStock = inventory ? inventory.quantity : 0;
        } else if (selectedColor) {
            const colorInventory = inventoryMapping[selectedColor] || {};
            totalStock = Object.values(colorInventory).reduce((sum, inv) => sum + inv.quantity, 0);
        } else if (selectedSize) {
            Object.values(inventoryMapping).forEach(colorInv => {
                if (colorInv[selectedSize]) {
                    totalStock += colorInv[selectedSize].quantity;
                }
            });
        } else {
            // No selection, show total stock
            Object.values(inventoryMapping).forEach(colorInv => {
                Object.values(colorInv).forEach(inv => {
                    totalStock += inv.quantity;
                });
            });
        }

        document.getElementById('current-stock').textContent = totalStock;
        document.getElementById('quantity').max = totalStock;

        // Reset quantity if it exceeds available stock
        const currentQty = parseInt(document.getElementById('quantity').value);
        if (currentQty > totalStock) {
            document.getElementById('quantity').value = Math.max(1, totalStock);
        }
    }

    // Tab functionality
    document.querySelectorAll('.tab-header').forEach(header => {
        header.addEventListener('click', function() {
            const tabId = this.dataset.tab;

            // Remove active class from all headers and contents
            document.querySelectorAll('.tab-header').forEach(h => h.classList.remove('active'));
            document.querySelectorAll('.tab-content').forEach(c => c.classList.remove('active'));

            // Add active class to clicked header and corresponding content
            this.classList.add('active');
            document.getElementById(tabId).classList.add('active');
        });
    });

    // Star rating functionality for reviews
    document.querySelectorAll('.star-rating-input input').forEach(input => {
        input.addEventListener('change', function() {
            const rating = this.value;
            const labels = this.closest('.star-rating-input').querySelectorAll('label');

            labels.forEach((label, index) => {
                if (labels.length - index <= rating) {
                    label.classList.add('active');
                } else {
                    label.classList.remove('active');
                }
            });
        });
    });

    // Review form submission
    const reviewForm = document.getElementById('reviewForm');
    if (reviewForm) {
        reviewForm.addEventListener('submit', function(e) {
            e.preventDefault();

            const formData = new FormData(this);
            const rating = formData.get('rating');
            const comment = formData.get('comment');

            if (!rating) {
                showToast('لطفاً امتیاز خود را انتخاب کنید', 'exclamation-triangle');
                return;
            }

            if (!comment.trim()) {
                showToast('لطفاً متن نظر خود را وارد کنید', 'exclamation-triangle');
                return;
            }

            // Submit review via AJAX
            fetch(`{% url 'products:add_review' product.id %}`, {
                method: 'POST',
                body: formData,
                headers: {
                    'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showToast(data.message, 'check');
                    setTimeout(() => location.reload(), 2000);
                } else {
                    showToast(data.message, 'exclamation-triangle');
                    if (data.redirect) {
                        setTimeout(() => window.location.href = data.redirect, 2000);
                    }
                }
            })
            .catch(error => {
                showToast('خطا در ثبت نظر', 'exclamation-triangle');
            });
        });
    }

    // Image zoom functionality
    window.zoomImage = function() {
        const mainImage = document.getElementById('mainProductImage');
        const zoomModal = document.getElementById('imageZoomModal');
        const zoomedImage = document.getElementById('zoomedImage');

        zoomedImage.src = mainImage.src;
        zoomModal.classList.add('active');

        // Add zoom and pan functionality
        let scale = 1;
        let panning = false;
        let pointX = 0;
        let pointY = 0;
        let start = { x: 0, y: 0 };

        function setTransform() {
            zoomedImage.style.transform = `translate(${pointX}px, ${pointY}px) scale(${scale})`;
        }

        zoomedImage.onmousedown = function(e) {
            e.preventDefault();
            start = { x: e.clientX - pointX, y: e.clientY - pointY };
            panning = true;
        };

        zoomedImage.onmousemove = function(e) {
            e.preventDefault();
            if (!panning) return;
            pointX = e.clientX - start.x;
            pointY = e.clientY - start.y;
            setTransform();
        };

        zoomedImage.onmouseup = function(e) {
            panning = false;
        };

        zoomedImage.onwheel = function(e) {
            e.preventDefault();
            const xs = (e.clientX - pointX) / scale;
            const ys = (e.clientY - pointY) / scale;
            const delta = e.wheelDelta ? e.wheelDelta : -e.deltaY;

            if (delta > 0) {
                scale *= 1.2;
            } else {
                scale /= 1.2;
            }

            scale = Math.min(Math.max(0.5, scale), 4);

            pointX = e.clientX - xs * scale;
            pointY = e.clientY - ys * scale;

            setTransform();
        };
    };

    window.closeImageZoom = function() {
        document.getElementById('imageZoomModal').classList.remove('active');
    };

    // Add to cart functionality
    window.addToCartDetail = function(productId) {
        const quantity = document.getElementById('quantity').value;

        const requestData = {
            product_id: productId,
            quantity: parseInt(quantity),
            color_id: selectedColor,
            size_id: selectedSize
        };

        fetch('{% url "products:add_to_cart" %}', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value
            },
            body: JSON.stringify(requestData)
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showToast(data.message, 'shopping-cart');
            } else {
                showToast(data.message, 'exclamation-triangle');
                if (data.redirect) {
                    setTimeout(() => window.location.href = data.redirect, 2000);
                }
            }
        })
        .catch(error => {
            showToast('خطا در افزودن به سبد خرید', 'exclamation-triangle');
        });
    };

    // Share product functionality
    window.shareProduct = function(platform) {
        const url = window.location.href;
        const title = document.querySelector('.product-title-detail').textContent;

        switch(platform) {
            case 'telegram':
                window.open(`https://t.me/share/url?url=${encodeURIComponent(url)}&text=${encodeURIComponent(title)}`);
                break;
            case 'whatsapp':
                window.open(`https://wa.me/?text=${encodeURIComponent(title + ' ' + url)}`);
                break;
            case 'copy':
                navigator.clipboard.writeText(url);
                showToast('لینک کپی شد!', 'copy');
                break;
        }
    };
});

// Toast notification function
function showToast(message, icon) {
    // Remove existing toasts
    document.querySelectorAll('.toast').forEach(toast => toast.remove());

    // Create toast element
    const toast = document.createElement('div');
    toast.className = 'toast show';
    toast.innerHTML = `
        <div class="toast-icon">
            <i class="fas fa-${icon}"></i>
        </div>
        <div class="toast-message">${message}</div>
    `;

    document.body.appendChild(toast);

    // Remove after 3 seconds
    setTimeout(() => {
        toast.classList.remove('show');
        setTimeout(() => toast.remove(), 300);
    }, 3000);
}
</script>
{% endblock %}

====== FILE: templates/products/partials/product_card.html ======

<div class="card h-100">
    {% with image=product.get_main_image %}
    {% if image %}
    <img src="{{ image.image.url }}" class="card-img-top" alt="{{ product.name }}" style="height: 200px; object-fit: cover;">
    {% else %}
    <div class="bg-secondary text-white p-4 text-center" style="height: 200px;">بدون تصویر</div>
    {% endif %}
    {% endwith %}
    <div class="card-body d-flex flex-column">
        <h5 class="card-title">{{ product.name }}</h5>
        <p class="card-text flex-grow-1">{{ product.short_description|default:product.description|truncatechars:80 }}</p>
        <div class="d-flex justify-content-between align-items-center mt-auto">
            {% if product.has_discount %}
            <div>
                <span class="text-muted text-decoration-line-through">{{ product.price|floatformat:0 }}</span>
                <span class="text-danger fw-bold">{{ product.get_discount_price|floatformat:0 }} تومان</span>
            </div>
            {% else %}
            <span class="text-danger fw-bold">{{ product.price|floatformat:0 }} تومان</span>
            {% endif %}
            <a href="{{ product.get_absolute_url }}" class="btn btn-primary btn-sm">مشاهده محصول</a>
        </div>
    </div>
</div>

====== FILE: templates/chat/admin_dashboard.html ======

{% extends 'base/base.html' %}
{% load static %}

{% block title %}داشبورد پشتیبانی{% endblock %}

{% block extra_css %}
<link rel="stylesheet" href="{% static 'chat/css/chat.css' %}">
<link rel="stylesheet" href="{% static 'chat/css/admin-dashboard.css' %}">
<link rel="stylesheet" href="{% static 'chat/css/chat-list.css' %}">
{% endblock %}

{% block content %}
<div class="container-fluid mt-4">
    <div class="row">
        <div class="col-md-12">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h2>داشبورد پشتیبانی</h2>
            </div>

            <div class="card mb-4">
                <div class="card-body">
                    <form id="search-form" method="GET" action="{% url 'chat:admin_dashboard' %}">
                        <div class="input-group">
                            <input type="text" class="form-control" id="search-input" name="q" placeholder="جستجو در گفتگوها و پیام‌ها..." value="{{ search_query|default:'' }}">
                            <button class="btn btn-primary" type="submit">
                                <i class="fas fa-search"></i> جستجو
                            </button>
                        </div>
                    </form>                </div>
            </div>
            {% if search_results %}
            <div class="card mb-4">
                <div class="card-header bg-light"><h5 class="mb-0">نتایج جستجو برای: "{{ search_query }}"</h5></div>
                <div class="card-body p-0">                    {% if search_results %}
                        <ul class="list-group list-group-flush">
                            {% for room in search_results %}
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    <div>
                                        <a href="{% url 'chat:room' room_id=room.id %}" class="text-decoration-none text-dark"><b>{{ room.name }}</b> ({{ room.user.username }})</a>
                                        {% if room.matching_message %}                                            <p class="mb-0 text-muted fst-italic">"{{ room.matching_message.content|truncatechars:50 }}"</p>
                                        {% endif %}
                                    </div>
                                    <a href="{% url 'chat:room' room_id=room.id %}" class="btn btn-sm btn-outline-primary"><i class="fas fa-eye"></i> مشاهده</a>
                                </li>                            {% endfor %}
                        </ul>
                    {% else %}
                        <div class="text-center py-4"><p class="text-muted mb-0">هیچ نتیجه‌ای یافت نشد.</p></div>
                    {% endif %}
                </div>
            </div>
            {% endif %}

            <div class="row">
                <div class="col-lg-4 col-md-6">
                    <div class="card mb-4">
                        <div class="card-header bg-danger text-white d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">گفتگوهای بدون پشتیبان</h5>                            <span class="badge bg-light text-dark" id="unassigned-counter">{{ unassigned_rooms.count }}</span>
                        </div>
                        <div class="card-body p-0 dashboard-list">
                            {% if unassigned_rooms %}
                                <ul class="list-group list-group-flush" id="unassigned-rooms-list">
                                    {% for room in unassigned_rooms %}
                                        <li class="list-group-item d-flex justify-content-between align-items-center" data-room-id="{{ room.id }}">
                                            <a href="{% url 'chat:room' room_id=room.id %}" class="text-decoration-none text-dark flex-grow-1">
                                                <div class="d-flex align-items-center">
                                                    <span class="fw-bold">{{ room.name }}</span>
                                                    <div class="user-status online" data-user-id="{{ room.user.id }}"><span class="status-dot online"></span></div>
                                                    <div class="chat-item-badge ms-auto">
                                                        <div class="badge bg-primary unread-room-badge" data-room-id="{{ room.id }}" {% if room.unread_count == 0 %}style="display:none;"{% endif %}>
                                                            {{ room.unread_count }}
                                                        </div>
                                                    </div>
                                                </div>
                                                <small class="text-muted">{{ room.user.username }} - {{ room.created_at|date:"j F Y H:i" }}</small>
                                            </a>
                                            <button class="btn btn-sm btn-primary assign-room ms-2" data-room-id="{{ room.id }}">
                                                <i class="fas fa-user-plus"></i>
                                            </button>
                                        </li>
                                    {% endfor %}
                                </ul>
                                <div class="text-center py-4" id="no-unassigned-placeholder" style="display: none;"></div>
                            {% else %}
                                <ul class="list-group list-group-flush" id="unassigned-rooms-list" style="display: none;"></ul>
                                <div class="text-center py-4" id="no-unassigned-placeholder">
                                    <p class="text-muted mb-0">هیچ گفتگوی بدون پشتیبانی وجود ندارد.</p>
                                </div>
                            {% endif %}
                        </div>
                    </div>
                </div>

                <div class="col-lg-4 col-md-6">
                    <div class="card mb-4">
                        <div class="card-header bg-success text-white d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">گفتگوهای من</h5>
                            <span class="badge bg-light text-dark" id="my-rooms-counter">{{ my_rooms.count }}</span>
                        </div>
                        <div class="card-body p-0 dashboard-list">
                            {% if my_rooms %}
                                <ul class="chat-list" id="my-rooms-list">
                                    {% for room in my_rooms %}                                        <li class="chat-item" data-room-id="{{ room.id }}">
                                            <a href="{% url 'chat:room' room_id=room.id %}" class="text-decoration-none text-dark d-flex w-100 justify-content-between align-items-center">
                                                <div class="chat-item-info">
                                                    <div class="d-flex align-items-center">
                                                        <div class="chat-item-title">{{ room.name }}</div>                                                        <div class="user-status online" data-user-id="{{ room.user.id }}"><span class="status-dot online"></span></div>
                                                    </div>
                                                    <div class="chat-item-last-message">
                                                        {% with last_message=room.messages.last %}
                                                            {% if last_message %}
                                                                {% if last_message.sender == request.user %}<i class="fas {% if last_message.is_read %}fa-check-double{% else %}fa-check{% endif %} text-muted"></i>{% endif %}
                                                                {{ last_message.content|truncatechars:30 }}
                                                            {% else %}بدون پیام{% endif %}
                                                        {% endwith %}
                                                    </div>
                                                </div>
                                                <div class="chat-item-meta">
                                                    <div class="chat-item-time">{{ room.updated_at|date:"H:i" }}</div>
                                                    <div class="chat-item-badge">
                                                        <div class="badge bg-primary unread-room-badge" data-room-id="{{ room.id }}" {% if room.unread_count == 0 %}style="display:none;"{% endif %}>
                                                            {{ room.unread_count }}
                                                        </div>
                                                    </div>
                                                </div>
                                            </a>
                                        </li>
                                    {% endfor %}                                </ul>
                                <div class="text-center py-4" id="no-my-rooms-placeholder" style="display: none;"></div>
                            {% else %}
                                <ul class="chat-list" id="my-rooms-list" style="display: none;"></ul>
                                <div class="text-center py-4" id="no-my-rooms-placeholder">
                                    <p class="text-muted mb-0">هیچ گفتگویی به شما اختصاص داده نشده است.</p>
                                </div>
                            {% endif %}
                        </div>
                    </div>
                </div>

                <div class="col-lg-4 col-md-12">
                     <div class="card mb-4">
                        <div class="card-header bg-info text-white d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">گفتگوهای سایر پشتیبان‌ها</h5>
                            <span class="badge bg-light text-dark" id="assigned-counter">{{ assigned_rooms.count }}</span>
                        </div>                        <div class="card-body p-0 dashboard-list">
                            {% if assigned_rooms %}                                <ul class="list-group list-group-flush" id="assigned-rooms-list">
                                    {% for room in assigned_rooms %}
                                        <li class="list-group-item" data-room-id="{{ room.id }}">
                                            <a href="{% url 'chat:room' room_id=room.id %}" class="text-decoration-none text-dark d-flex justify-content-between align-items-center">
                                                <div>
                                                    <div class="d-flex align-items-center">
                                                        <span class="fw-bold">{{ room.name }}</span>
                                                        <div class="user-status online" data-user-id="{{ room.user.id }}"><span class="status-dot online"></span></div>
                                                    </div>
                                                    <small class="text-muted">{{ room.user.username }} - پشتیبان: {{ room.agent.username }}</small>
                                                </div>
                                                <div class="chat-item-badge ms-auto">
                                                    <div class="badge bg-primary unread-room-badge" data-room-id="{{ room.id }}" {% if room.unread_count == 0 %}style="display:none;"{% endif %}>
                                                        {{ room.unread_count }}
                                                    </div>
                                                </div>
                                            </a>
                                        </li>
                                    {% endfor %}                                </ul>
                            {% else %}
                                <div class="text-center py-4"><p class="text-muted mb-0">هیچ گفتگوی در حال انجامی وجود ندارد.</p></div>
                            {% endif %}
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-12">
                    <div class="card mb-4">                        <div class="card-header bg-secondary text-white d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">گفتگوهای بسته شده</h5>
                            <div class="d-flex align-items-center">
                                <form id="closed-search-form" class="me-2" method="GET" action="{% url 'chat:admin_dashboard' %}">                                    <div class="input-group input-group-sm">
                                        <input type="text" class="form-control form-control-sm" id="closed-search-input" placeholder="جستجو..." value="{{ closed_search_query|default:'' }}" name="closed_q">
                                        <button class="btn btn-sm btn-light" type="submit"><i class="fas fa-search"></i></button>
                                    </div>
                                </form>
                                <span class="badge bg-light text-dark" id="closed-counter">{{ closed_rooms.count }}</span>
                            </div>
                        </div>
                        <div class="card-body p-0 dashboard-list" style="max-height: 300px; overflow-y: auto;">
                             {% if closed_rooms %}
                                <ul class="list-group list-group-flush" id="closed-rooms-list">
                                    {% for room in closed_rooms %}
                                        <li class="list-group-item d-flex justify-content-between align-items-center" data-room-id="{{ room.id }}">
                                            <div>
                                                <span class="fw-bold">{{ room.name }}</span><br>
                                                <small class="text-muted">
                                                    {{ room.user.username }}
                                                    {% if room.agent %}- پشتیبان: {{ room.agent.username }}{% endif %}
                                                    - بسته شده در: {{ room.closed_at|date:"j F Y H:i" }}
                                                </small>
                                            </div>
                                            <a href="{% url 'chat:room' room_id=room.id %}" class="btn btn-sm btn-outline-secondary"><i class="fas fa-eye"></i> مشاهده</a>
                                        </li>
                                    {% endfor %}                                </ul>
                                <div class="text-center py-4" id="no-closed-placeholder" style="display: none;"></div>
                            {% else %}
                                <ul class="list-group list-group-flush" id="closed-rooms-list" style="display: none;"></ul>
                                <div class="text-center py-4" id="no-closed-placeholder">
                                    <p class="text-muted mb-0">هیچ گفتگوی بسته شده‌ای وجود ندارد.</p>
                                </div>
                            {% endif %}
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>{% endblock %}

{% block extra_js %}
<script src="{% static 'chat/js/notifications.js' %}"></script>
<script src="{% static 'chat/js/online-handler.js' %}"></script>
<script src="{% static 'chat/js/admin-dashboard.js' %}"></script>

<script>
document.addEventListener('DOMContentLoaded', function() {
    document.body.addEventListener('click', function(e) {
        if (e.target.matches('.assign-room, .assign-room *')) {
            const button = e.target.closest('.assign-room');
            const roomId = button.getAttribute('data-room-id');
            if (confirm('آیا از اختصاص این گفتگو به خود اطمینان دارید؟')) {
                fetch(`/chat/admin/assign/${roomId}/`, {
                    method: 'POST',
                    headers: {
                        'X-CSRFToken': getCookie('csrftoken'),
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (!data.success) {
                         alert('خطا: ' + data.error);
                    }
                })
                .catch(error => {                    console.error('Error:', error);
                    alert('خطا در اختصاص گفتگو.');
                });
            }
        }
    });

    function getCookie(name) {
        let cookieValue = null;
        if (document.cookie && document.cookie !== '') {
            const cookies = document.cookie.split(';');
            for (let i = 0; i < cookies.length; i++) {
                const cookie = cookies[i].trim();
                if (cookie.substring(0, name.length + 1) === (name + '=')) {
                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                    break;
                }
            }
        }
        return cookieValue;
    }
});
</script>
{% endblock %}

====== FILE: templates/chat/chat_room.html ======

{% extends 'base/base.html' %}
{% load static %}

{% block title %}گفتگو با {{ room.name }}{% endblock %}

{% block extra_css %}
<link rel="stylesheet" href="{% static 'chat/css/chat.css' %}">
<style>
    /* استایل اضافی برای اطمینان از عملکرد صحیح */
    .chat-actions {
        min-height: 38px;
        display: flex;
        gap: 10px;
    }

    .notification-container {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 1000;
    }

    .back-to-list {
        display: block !important;
        margin-bottom: 15px;
    }

    .file-preview {
        background: #f8f9fa;
        border: 1px solid #dee2e6;
        border-radius: 5px;
        padding: 10px;
        margin: 10px 0;
        position: relative;
    }

    .file-preview .image-preview img {
        max-width: 200px;
        max-height: 200px;
        border-radius: 5px;
    }

    .file-preview .remove-file {
        position: absolute;
        top: 5px;
        right: 5px;
    }

    .typing-indicator {
        font-style: italic;
        color: #6c757d;
        padding: 5px 10px;
        display: none;
    }
</style>
{% endblock %}

{% block content %}
<div class="notification-container"></div>

<section class="chat-room-page">
    <div class="chat-room-container">
        <!-- دکمه بازگشت در بالا -->
        <div class="d-flex justify-content-between align-items-center mb-3 back-to-list">
            <h2>گفتگو با {{ room.name|cut:"("|cut:")" }}</h2>
            <a href="{% url 'chat:chat_list' %}" class="btn btn-outline-secondary">
                <i class="fas fa-arrow-right ml-1"></i> بازگشت به لیست گفتگوها
            </a>
        </div>

        <div class="chat-container">
            <div class="chat-header">
                <div class="d-flex align-items-center">
                    <h3>{{ room.name|cut:"("|cut:")" }}</h3>

                    {% if request.user.is_staff %}
                        <!-- اگر کاربر ادمین است، وضعیت کاربر عادی را نمایش بده -->
                        <div class="user-status {% if room.user.online_status.status == 'online' %}online{% else %}offline{% endif %}"
                             data-user-id="{{ room.user.id }}"
                             title="{% if room.user.online_status.status == 'online' %}آنلاین{% else %}آفلاین{% endif %}">
                            <span class="status-dot {% if room.user.online_status.status == 'online' %}online{% else %}offline{% endif %}"></span>
                        </div>
                    {% else %}
                        <!-- اگر کاربر عادی است، وضعیت ادمین/پشتیبان را نمایش بده -->
                        {% if room.agent %}
                            <div class="user-status {% if room.agent.online_status.status == 'online' %}online{% else %}offline{% endif %}"
                                 data-user-id="{{ room.agent.id }}"
                                 title="{% if room.agent.online_status.status == 'online' %}آنلاین{% else %}آفلاین{% endif %}">
                                <span class="status-dot {% if room.agent.online_status.status == 'online' %}online{% else %}offline{% endif %}"></span>
                            </div>
                        {% else %}
                            <div class="user-status offline" title="آفلاین">
                                <span class="status-dot offline"></span>
                            </div>
                        {% endif %}
                    {% endif %}

                    <span class="badge {% if room.status == 'open' %}bg-success{% else %}bg-danger{% endif %} mx-2" id="room-status">
                        {{ room.get_status_display }}
                    </span>
                </div>

                <div class="chat-actions">
                    {% if room.status == 'open' %}
                        <button id="close-room-button" class="btn btn-danger btn-sm">
                            <i class="fas fa-times"></i> بستن گفتگو
                        </button>
                    {% else %}
                        {% if request.user.is_staff or not room.closed_by.is_staff %}
                            <button id="reopen-room-button" class="btn btn-success btn-sm">
                                <i class="fas fa-redo"></i> بازگشایی گفتگو
                            </button>
                        {% endif %}
                    {% endif %}
                </div>
            </div>

            <div class="chat-body" id="message-container">
                {% for message in chat_messages %}
                    <div id="message-{{ message.id }}" class="message {% if message.message_type == 'system' %}system-message{% elif message.sender == request.user %}sent{% else %}received{% endif %} {% if message.is_read %}read{% endif %}">
                        <div class="message-content">
                            {{ message.content|linebreaksbr }}
                        </div>

                        {% if message.file %}
                            {% with file_url=message.file.url|lower %}
                                {% if '.jpg' in file_url or '.jpeg' in file_url or '.png' in file_url or '.gif' in file_url %}
                                    <div class="message-image">
                                        <a href="{{ message.file.url }}" target="_blank">
                                            <img src="{{ message.file.url }}" alt="تصویر پیوست" />
                                        </a>
                                    </div>
                                {% else %}
                                    <div class="message-file">
                                        <a href="{{ message.file.url }}" target="_blank">
                                            <i class="fas fa-file"></i> دانلود فایل
                                        </a>
                                    </div>
                                {% endif %}
                            {% endwith %}
                        {% endif %}

                        <div class="message-info">
                            <span class="message-time">{{ message.created_at|date:"H:i" }} {{ message.created_at|date:"j F" }}</span>

                            {% if message.sender == request.user and message.message_type != 'system' %}
                                <span class="read-indicator" title="{% if message.is_read %}خوانده شده{% else %}ارسال شده{% endif %}">
                                    <i class="fas {% if message.is_read %}fa-check-double{% else %}fa-check{% endif %}"></i>
                                </span>
                            {% endif %}
                        </div>
                    </div>
                {% endfor %}
            </div>

            <div class="typing-indicator" id="typing-indicator"></div>

            <div class="chat-footer">
                <textarea id="message-input" placeholder="پیام خود را بنویسید..." {% if room.status != 'open' %}disabled{% endif %}></textarea>
                <button id="file-upload-button" class="btn btn-light" type="button" {% if room.status != 'open' %}disabled{% endif %}>
                    <i class="fas fa-paperclip"></i>
                </button>
                <button id="send-button" class="btn btn-primary" type="button" {% if room.status != 'open' %}disabled{% endif %}>
                    <i class="fas fa-paper-plane"></i>
                </button>
                <input type="file" id="file-input" style="display: none;">
            </div>
        </div>
    </div>
</section>

<!-- فیلدهای مخفی برای استفاده در JavaScript -->
<input type="hidden" id="room-id" value="{{ room.id }}">
<input type="hidden" id="user-id" value="{{ request.user.id }}">
<input type="hidden" id="is-staff" value="{{ request.user.is_staff|yesno:'True,False' }}">
<audio id="notification-sound" src="{% static 'chat/sounds/notification.mp3' %}" preload="auto"></audio>
{% endblock %}

{% block extra_js %}
<script src="{% static 'chat/js/chat.js' %}"></script>
<script src="{% static 'chat/js/online-handler.js' %}"></script>
{% endblock %}

====== FILE: templates/chat/start_chat.html ======

{% extends 'base/base.html' %}
{% load static %}

{% block title %}شروع گفتگوی جدید | زیما{% endblock %}

{% block extra_css %}
    <link rel="stylesheet" href="{% static 'chat/css/start-chat.css' %}">
{% endblock %}

{% block content %}
<section class="start-chat-page">
    <div class="start-chat-container">
        <div class="start-chat-wrapper">
            <!-- Info Panel -->
            <aside class="info-panel">
                <h2 class="info-title">
                    <i class="fas fa-info-circle"></i>
                    راهنمای گفتگو
                </h2>

                <div class="info-item">
                    <div class="info-icon">
                        <i class="fas fa-clock"></i>
                    </div>
                    <div class="info-content">
                        <h4>ساعات پاسخگویی</h4>
                        <p>پشتیبانان ما در ساعات کاری (شنبه تا پنجشنبه، ۹ صبح تا ۹ شب) آماده پاسخگویی سریع به شما هستند.</p>
                    </div>
                </div>

                <div class="info-item">
                    <div class="info-icon">
                        <i class="fas fa-question-circle"></i>
                    </div>
                    <div class="info-content">
                        <h4>چه سوالاتی بپرسید؟</h4>
                        <p>شما می‌توانید در مورد وضعیت سفارش، اطلاعات محصولات، راهنمای سایز و هر سوال دیگری با ما در ارتباط باشید.</p>
                    </div>
                </div>

                <div class="info-item">
                    <div class="info-icon">
                        <i class="fas fa-shield-alt"></i>
                    </div>
                    <div class="info-content">
                        <h4>حفظ حریم خصوصی</h4>
                        <p>تمامی گفتگوهای شما با ما محرمانه باقی می‌ماند و اطلاعات شما نزد ما محفوظ است.</p>
                    </div>
                </div>
            </aside>

            <!-- Form Container -->
            <div class="form-container">
                <h1 class="form-title">
                    <i class="fas fa-paper-plane"></i>
                    شروع گفتگوی جدید
                </h1>
                <p class="form-description">
                    برای شروع، لطفاً موضوع و پیام خود را وارد کنید. یکی از پشتیبانان ما به زودی به شما ملحق خواهد شد.
                </p>

                <form method="post">
                    {% csrf_token %}

                    <div class="form-group">
                        <label for="id_subject" class="form-label">موضوع گفتگو *</label>
                        <input type="text" class="form-input" id="id_subject" name="subject" required placeholder="مثلاً: پیگیری سفارش شماره ۱۲۳">
                        <div class="form-help">موضوع گفتگو را به صورت مختصر بنویسید.</div>
                    </div>

                    <div class="form-group">
                        <label for="id_message" class="form-label">اولین پیام *</label>
                        <textarea class="form-textarea" id="id_message" name="message" rows="5" required placeholder="سلام، در مورد ... سوال داشتم."></textarea>
                        <div class="form-help">توضیحات خود را بنویسید.</div>
                    </div>

                    <div class="form-actions">
                        <a href="{% url 'chat:chat_list' %}" class="btn-cancel">
                            <i class="fas fa-times"></i>
                            انصراف
                        </a>
                        <button type="submit" class="btn-start-chat">
                            <i class="fas fa-paper-plane"></i>
                            ارسال و شروع گفتگو
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</section>
{% endblock %}

====== FILE: templates/chat/chat_list.html ======

{% extends 'base/base.html' %}
{% load static %}

{% block title %}لیست گفتگوها | زیما{% endblock %}

{% block extra_css %}
    <link rel="stylesheet" href="{% static 'chat/css/chat-list.css' %}">
    <link rel="stylesheet" href="{% static 'chat/css/chat.css' %}">
{% endblock %}

{% block content %}
<section class="chat-list-page">
    <div class="chat-list-container">
        <div class="chat-list-header">
            <h1>گفتگوهای من</h1>
            <div>
                {% if not request.user.is_staff %}
                    <a href="{% url 'chat:start' %}" class="btn-zima-primary">
                        <i class="fas fa-plus"></i> گفتگوی جدید
                    </a>
                {% else %}
                    <a href="{% url 'chat:admin_dashboard' %}" class="btn-zima-secondary">
                        <i class="fas fa-tachometer-alt"></i> داشبورد پشتیبانی
                    </a>
                {% endif %}
            </div>
        </div>

        <div class="chat-list-body">
            {% if rooms %}
                <ul class="chat-list">
                    {% for room in rooms %}
                        <li class="chat-item">
                            <a href="{% url 'chat:room' room_id=room.id %}">
                                <div class="chat-item-avatar">
                                    {% with other_user=room.user %}
                                        {% if other_user.profile_image %}
                                            <img src="{{ other_user.profile_image.url }}" alt="{{ other_user.username }}">
                                        {% else %}
                                            <div class="avatar-placeholder">
                                                {{ other_user.username|first|upper }}
                                            </div>
                                        {% endif %}
                                    {% endwith %}
                                </div>
                                <div class="chat-item-content">
                                    <div class="chat-item-header">
                                        <h3>{{ room.name|cut:"("|cut:")" }}</h3>
                                    </div>
                                    <div class="chat-item-details">
                                        {% if request.user.is_staff %}
                                            <div class="user-status {% if room.user.online_status.status == 'online' %}online{% else %}offline{% endif %}"
                                                 data-user-id="{{ room.user.id }}"
                                                 title="{% if room.user.online_status.status == 'online' %}آنلاین{% else %}آفلاین{% endif %}">
                                                <span class="status-dot {% if room.user.online_status.status == 'online' %}online{% else %}offline{% endif %}"></span>
                                            </div>
                                        {% else %}
                                            {% if room.agent %}
                                                <div class="user-status {% if room.agent.online_status.status == 'online' %}online{% else %}offline{% endif %}"
                                                     data-user-id="{{ room.agent.id }}"
                                                     title="{% if room.agent.online_status.status == 'online' %}آنلاین{% else %}آفلاین{% endif %}">
                                                    <span class="status-dot {% if room.agent.online_status.status == 'online' %}online{% else %}offline{% endif %}"></span>
                                                </div>
                                            {% else %}
                                                <div class="user-status offline" title="آفلاین">
                                                    <span class="status-dot offline"></span>
                                                </div>
                                            {% endif %}
                                        {% endif %}
                                        <span class="status-badge {% if room.status == 'closed' %}closed{% endif %}">
                                            {{ room.get_status_display }}
                                        </span>
                                    </div>
                                    <div class="chat-item-message">
                                        {% with last_message=room.messages.last %}
                                            {% if last_message %}
                                                {% if last_message.sender == request.user %}
                                                    <i class="fas {% if last_message.is_read %}fa-check-double{% else %}fa-check{% endif %}" style="color: #adb5bd; margin-left: 4px;"></i>
                                                {% endif %}
                                                {% if last_message.message_type == 'system' %}
                                                    <span class="system-message-preview">{{ last_message.content|truncatechars:50 }}</span>
                                                {% else %}
                                                    {{ last_message.content|truncatechars:50 }}
                                                {% endif %}
                                            {% else %}
                                                <span class="no-message">هنوز پیامی ارسال نشده است</span>
                                            {% endif %}
                                        {% endwith %}
                                    </div>
                                </div>
                            </a>
                            <div class="chat-item-meta">
                                <div class="chat-item-time">
                                    {{ room.updated_at|date:"H:i" }}
                                </div>
                                <div class="unread-room-badge"
                                     data-room-id="{{ room.id }}"
                                     {% if room.unread_count == 0 %}style="display:none;"{% endif %}>
                                    {{ room.unread_count }}
                                </div>
                            </div>
                            {% if not request.user.is_staff and room.status == 'closed' %}
                                <button class="delete-chat"
                                        data-bs-toggle="modal"
                                        data-bs-target="#deleteChatModal"
                                        data-room-id="{{ room.id }}"
                                        title="حذف گفتگو">
                                    <i class="fas fa-trash-alt fa-lg"></i>
                                </button>
                            {% endif %}
                        </li>
                    {% endfor %}
                </ul>
            {% else %}
                <div class="empty-list">
                    <i class="fas fa-comments"></i>
                    <p>هیچ گفتگویی برای نمایش وجود ندارد.</p>
                    {% if not request.user.is_staff %}
                        <a href="{% url 'chat:start' %}" class="btn-zima-primary">
                            <i class="fas fa-plus"></i> شروع گفتگوی جدید
                        </a>
                    {% endif %}
                </div>
            {% endif %}
        </div>
    </div>
</section>

<!-- مودال تایید حذف گفتگو -->
<div class="modal fade" id="deleteChatModal" tabindex="-1" aria-labelledby="deleteChatModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteChatModalLabel">حذف گفتگو</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                آیا از حذف این گفتگو اطمینان دارید؟
                <p class="text-muted small">توجه: این گفتگو فقط از لیست شما حذف می‌شود و برای پشتیبانی قابل مشاهده خواهد بود.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">انصراف</button>
                <button type="button" class="btn btn-danger" id="confirmDelete">حذف</button>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block extra_js %}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            let selectedRoomId = null;
            const deleteModalElement = document.getElementById('deleteChatModal');

            // اطمینان از اینکه bootstrap آماده است
            if (typeof bootstrap !== 'undefined') {
                const deleteModal = new bootstrap.Modal(deleteModalElement);

                document.querySelectorAll('.delete-chat').forEach(button => {
                    button.addEventListener('click', function(e) {
                        // اینجا فقط data-room-id را برای استفاده بعدی ذخیره می‌کنیم
                        selectedRoomId = this.getAttribute('data-room-id');
                    });
                });

                deleteModalElement.addEventListener('shown.bs.modal', function () {
                    // کاری لازم نیست انجام شود، فقط برای اطمینان
                });

                document.getElementById('confirmDelete').addEventListener('click', function() {
                    if (selectedRoomId) {
                        fetch(`/chat/hide-room/${selectedRoomId}/`, {
                            method: 'POST',
                            headers: {
                                'X-CSRFToken': getCookie('csrftoken'),
                                'Content-Type': 'application/json'
                            }
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                const chatItem = document.querySelector(`.delete-chat[data-room-id="${selectedRoomId}"]`).closest('.chat-item');
                                if (chatItem) {
                                    chatItem.remove();
                                }
                                window.showToast('گفتگو با موفقیت حذف شد.', 'check');
                            } else {
                                window.showToast(data.error || 'خطا در حذف گفتگو.', 'exclamation-triangle');
                            }
                            deleteModal.hide();
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            window.showToast('خطا در ارتباط با سرور.', 'times-circle');
                            deleteModal.hide();
                        });
                    }
                });
            } else {
                console.error("Bootstrap JS is not loaded!");
            }

            function getCookie(name) {
                let cookieValue = null;
                if (document.cookie && document.cookie !== '') {
                    const cookies = document.cookie.split(';');
                    for (let i = 0; i < cookies.length; i++) {
                        const cookie = cookies[i].trim();
                        if (cookie.substring(0, name.length + 1) === (name + '=')) {
                            cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                            break;
                        }
                    }
                }
                return cookieValue;
            }
        });
    </script>
    <script src="{% static 'chat/js/notifications.js' %}"></script>
    <script src="{% static 'chat/js/online-handler.js' %}"></script>

{% endblock %}

====== FILE: templates/chat/notifications.html ======

{% extends 'base/base.html' %}
{% load static %}

{% block title %}اعلان‌های من{% endblock %}

{% block extra_css %}
<link rel="stylesheet" href="{% static 'chat/css/notifications.css' %}">
{% endblock %}

{% block content %}
<div class="container mt-4">
    <div class="row">
        <div class="col-md-12">
            <div class="notification-header">
                <h2>اعلان‌های من</h2>
                <button id="mark-all-read" class="btn btn-outline-primary">
                    <i class="fas fa-check-double ml-1"></i> علامت‌گذاری همه به عنوان خوانده شده
                </button>
            </div>

            <div class="notification-container">
                <div id="notification-list">
                    {% if notifications %}
                        {% for notification in notifications %}
                            <div class="notification-item {% if not notification.is_read %}unread{% endif %}" id="notification-{{ notification.id }}">
                                <div class="notification-header">
                                    <h5>{{ notification.title }}</h5>
                                    <span class="notification-time">{{ notification.created_at|date:"j F Y H:i" }}</span>
                                </div>
                                <div class="notification-body">
                                    <p>{{ notification.message }}</p>
                                </div>
                                <div class="notification-footer">
                                    {% if notification.notification_type == 'chat' and notification.data.room_id %}
                                        <a href="{% url 'chat:room' room_id=notification.data.room_id %}" class="btn btn-sm btn-primary">
                                            مشاهده گفتگو
                                        </a>
                                    {% endif %}

                                    {% if not notification.is_read %}
                                        <button class="btn btn-sm btn-secondary mark-read" data-id="{{ notification.id }}">
                                            علامت‌گذاری به عنوان خوانده شده
                                        </button>
                                    {% endif %}
                                </div>
                            </div>
                        {% endfor %}
                    {% else %}
                        <div class="text-center py-5">
                            <i class="fas fa-bell-slash fa-3x text-muted mb-3"></i>
                            <p>هیچ اعلانی یافت نشد.</p>
                        </div>
                    {% endif %}
                </div>
            </div>
        </div>
    </div>
</div>

<input type="hidden" id="user-id" value="{{ request.user.id }}">
<audio id="notification-sound" src="{% static 'chat/sounds/notification.mp3' %}" preload="auto"></audio>

{% endblock %}

{% block extra_js %}
<script src="{% static 'chat/js/notifications.js' %}"></script>
{% endblock %}

====== FILE: templates/chat/partials/pending_chats.html ======

{% if pending_rooms %}
    {% for room in pending_rooms %}
        <div class="chat-item">
            <div class="chat-header">
                <span class="chat-title">{{ room.name|default:"گفتگو" }} در انتظار</span>
                <span class="chat-time">{{ room.created_at|date:"Y/m/d H:i" }}</span>
            </div>
            <div class="chat-user">
                {% if room.user %}
                    {{ room.user.get_full_name|default:room.user.username }}
                {% else %}
                    کاربر ناشناس
                {% endif %}
            </div>
            {% if room.messages.last %}
                <div class="chat-preview">
                    {{ room.messages.last.content|truncatechars:50 }}
                </div>
            {% endif %}
            <div class="chat-actions">
                <a href="{% url 'chat:chat_room' room.name %}" class="btn btn-primary">پاسخ</a>
            </div>
        </div>
    {% endfor %}
{% else %}
    <div class="empty-state">
        چت در انتظاری وجود ندارد.
    </div>
{% endif %}

====== FILE: templates/chat/partials/active_chats.html ======

{% if admin_active_chats %}
    {% for room in admin_active_chats %}
        <div class="chat-item">
            <div class="chat-header">
                <span class="chat-title">{{ room.name|default:"گفتگو" }} فعال</span>
                {% if room.unread_count > 0 %}
                    <span class="badge bg-danger">{{ room.unread_count }}</span>
                {% endif %}
                <span class="chat-time">{{ room.updated_at|date:"Y/m/d H:i" }}</span>
            </div>
            <div class="chat-user">
                {% if room.user %}
                    {{ room.user.get_full_name|default:room.user.username }}
                {% else %}
                    کاربر ناشناس
                {% endif %}
            </div>
            {% if room.messages.last %}
                <div class="chat-preview">
                    {{ room.messages.last.content|truncatechars:50 }}
                </div>
            {% endif %}
            <div class="chat-actions">
                <a href="{% url 'chat:chat_room' room.name %}" class="btn btn-primary">ادامه چت</a>
            </div>
        </div>
    {% endfor %}
{% else %}
    <div class="empty-state">
        شما هیچ چت فعالی ندارید.
    </div>
{% endif %}

====== FILE: templates/chat/partials/user_closed_chats.html ======

{% if user_closed_chats %}
    {% for room in user_closed_chats %}
        <div class="chat-item">
            <div class="chat-header">
                <span class="chat-title">{{ room.name|default:"گفتگو" }} بسته شده توسط کاربر</span>
                <span class="chat-time">{{ room.updated_at|date:"Y/m/d H:i" }}</span>
            </div>
            <div class="chat-user">
                {% if room.user %}
                    {{ room.user.get_full_name|default:room.user.username }}
                {% else %}
                    کاربر ناشناس
                {% endif %}
            </div>
            {% if room.closed_at %}
                <div class="chat-closed-time">
                    بسته شده در: {{ room.closed_at|date:"Y/m/d H:i" }}
                </div>
            {% endif %}
            {% if room.messages.last %}
                <div class="chat-preview">
                    {{ room.messages.last.content|truncatechars:50 }}
                </div>
            {% endif %}
            <div class="chat-actions">
                <a href="{% url 'chat:chat_room' room.name %}" class="btn btn-secondary">مشاهده</a>
            </div>
        </div>
    {% endfor %}
{% else %}
    <div class="empty-state">
        چت بسته شده‌ای توسط کاربران وجود ندارد.
    </div>
{% endif %}

====== FILE: templates/base/header.html ======

<header class="py-2 bg-light">
    <div class="container d-flex justify-content-between align-items-center">
        <!-- لوگو -->
        <div class="logo">
            <a href="{% url 'home' %}">
                <img src="{% static 'images/logo.png' %}" alt="زیما" height="50">
            </a>
        </div>

        <!-- جستجو -->
        <div class="search-box flex-grow-1 mx-4">
            <form action="{% url 'products:search' %}" method="get" class="d-flex">
                <input type="text" name="search" placeholder="جستجو در محصولات..." class="form-control">
                <button type="submit" class="btn btn-primary me-2">
                    <i class="fa fa-search"></i>
                </button>
            </form>
        </div>

        <!-- آیکون‌های سمت راست -->
        <div class="header-icons d-flex">
            <div class="me-3">
                {% if user.is_authenticated %}
                    <a href="{% url 'users:profile' %}" class="text-dark text-decoration-none">
                        <i class="fas fa-user fa-lg"></i>
                        <span class="d-none d-md-inline">{{ user.username }}</span>
                    </a>
                {% else %}
                    <a href="{% url 'users:login' %}" class="text-dark text-decoration-none">
                        <i class="fas fa-user fa-lg"></i>
                        <span class="d-none d-md-inline">ورود / ثبت‌نام</span>
                    </a>
                {% endif %}
            </div>

            <div class="position-relative me-3">
                <a href="{% url 'cart:summary' %}" class="text-dark text-decoration-none">
                    <i class="fas fa-shopping-cart fa-lg"></i>
                    <span class="badge bg-danger position-absolute top-0 start-100 translate-middle rounded-pill">
                        {{ request.session.cart|default:"0"|length }}
                    </span>
                </a>
            </div>
        </div>
    </div>
</header>

====== FILE: templates/base/base.html ======

<!DOCTYPE html>
<html lang="fa" dir="rtl">
<head>
    <style>
    /* تنظیم padding برای تمام صفحات */
    body {
        padding-top: 40px !important;
        box-sizing: border-box;
    }

    .main-content,
    .container,
    .content,
    main {
        padding-top: 20px;
    }

    .page-content,
    .home-content,
    .product-detail,
    .product-list,
    .chat-room,
    .category-page {
        margin-top: 0 !important;
        padding-top: 20px;
    }

    @media (max-width: 768px) {
        body {
            padding-top: 70px !important;
        }
    }

    @media (max-width: 480px) {
        body {
            padding-top: 60px !important;
        }
    }
    </style>
    {% load static %}
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}زیما | زیبایی خصوصی شما{% endblock %}</title>

    {# فونت‌ها #}
    <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@300;400;600;700;900&family=Vazir:wght@200;300;400;500;600;700;800&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.rtl.min.css">

    {# استایل‌های جدید تم #}
    <link rel="stylesheet" href="{% static 'css/zima_theme_v2.css' %}">
    {# برای استایل‌های خاص هر صفحه (بعدا اضافه می‌شود) #}
    {% block extra_css %}{% endblock %}
</head>
<body>
    <!-- Loading Screen -->
    <div class="loader" id="loader">
        <div class="loader-content">
            <div class="loader-logo">زیما</div>
        </div>
    </div>    <!-- Loading Spinner (برای استفاده در عملیات‌های AJAX) -->
    <div class="loading-spinner" id="loadingSpinner"></div>

    <!-- Toast Notification (برای نمایش پیام‌های موفقیت/خطا) -->
    <div class="toast" id="toast">
        <div class="toast-icon">
            <i class="fas fa-check"></i>
        </div>
        <div class="toast-message"></div>
    </div>

    <!-- Cursor -->
    <div class="cursor" id="cursor"></div>
    <div class="cursor-dot" id="cursorDot"></div>

    <!-- Navigation -->
    <div class="nav-container" id="navbar">
        <nav class="navbar">
            <a href="{% url 'pages:home' %}" class="logo">زیما</a>

            <ul class="nav-menu">
                <li><a href="{% url 'pages:home' %}" class="nav-link">صفحه اصلی</a></li>
                <li><a href="{% url 'products:list' %}" class="nav-link">محصولات</a></li>
                <li><a href="#" class="nav-link">راهنمای سایز</a></li>
                <li><a href="{% url 'pages:about' %}" class="nav-link">درباره ما</a></li>
                <li><a href="{% url 'pages:contact' %}" class="nav-link">تماس</a></li>
            </ul>

            <div class="nav-icons">
                <a href="{% url 'products:search' %}" class="nav-icon"><i class="fas fa-search"></i></a>
                <a href="#" class="nav-icon"><i class="fas fa-heart"></i></a>
                {% if user.is_authenticated %}
                <a href="{% url 'users:profile' %}" class="nav-icon"><i class="fas fa-user"></i></a>
                {% else %}
                <a href="{% url 'users:login' %}" class="nav-icon"><i class="fas fa-user"></i></a>
                {% endif %}
                <a href="{% url 'cart:summary' %}" class="nav-icon">
                    <i class="fas fa-shopping-bag"></i>
                    <span class="cart-badge" id="cart-items-count">{{ cart_items_count|default:0 }}</span>
                </a>
            </div>
        </nav>
    </div>

    <!-- Django Messages -->
    {% if messages %}
    <div class="django-messages">
        {% for message in messages %}
        <div class="alert alert-{{ message.tags }}">
            {{ message }}
        </div>
        {% endfor %}
    </div>
    {% endif %}

    <main>
        {% block content %}
        {% endblock %}
    </main>

    <!-- Newsletter Section -->
    <section class="newsletter-section">
        <div class="newsletter-content">
            <h2 class="newsletter-title">عضو خانواده زیما شوید</h2>
            <p class="newsletter-text">
                از جدیدترین محصولات و تخفیف‌های ویژه مطلع شوید
            </p>
            <form class="newsletter-form" action="{% url 'pages:newsletter' %}" method="post">
                {% csrf_token %}
                <input type="email" name="email" class="newsletter-input" placeholder="آدرس ایمیل شما" required>
                <button type="submit" class="newsletter-submit">عضویت</button>
            </form>
        </div>
    </section>
    <!-- Footer -->
    <footer class="footer">
        <div class="footer-content">
            <div class="footer-brand">
                <h3>زیما</h3>
                <p>
                    زیما، برندی است که زیبایی خصوصی شما را اولویت قرار می‌دهد.                    ما معتقدیم هر زنی شایسته احساس زیبایی، راحتی و اعتماد به نفس است.
                </p>
                <div class="footer-social">
                    <a href="#" class="social-link"><i class="fab fa-instagram"></i></a>
                    <a href="#" class="social-link"><i class="fab fa-telegram"></i></a>
                    <a href="#" class="social-link"><i class="fab fa-whatsapp"></i></a>
                    <a href="#" class="social-link"><i class="fab fa-pinterest"></i></a>
                </div>
            </div>

            <div class="footer-column">
                <h4>خدمات مشتریان</h4>
                <ul class="footer-links">
                    <li><a href="#">راهنمای خرید</a></li>
                    <li><a href="#">راهنمای سایز</a></li>
                    <li><a href="{% url 'pages:shipping' %}">شرایط ارسال</a></li>
                    <li><a href="#">ضمانت بازگشت</a></li>
                    <li><a href="{% url 'pages:contact' %}" target="_blank">پشتیبانی آنلاین</a></li>
                </ul>
            </div>

            <div class="footer-column">
                <h4>درباره زیما</h4>
                <ul class="footer-links">
                    <li><a href="{% url 'pages:about' %}">داستان ما</a></li>
                    <li><a href="#">کیفیت محصولات</a></li>
                    <li><a href="{% url 'pages:privacy' %}">حریم خصوصی</a></li>
                    <li><a href="#">مجله زیما</a></li>
                    <li><a href="#">فرصت‌های شغلی</a></li>
                </ul>
            </div>

            <div class="footer-column">
                <h4>تماس با ما</h4>
                <ul class="footer-links">
                    <li><a href="tel:+982177889900">۰۲۱-۷۷۸۸۹۹۰۰</a></li>
                    <li><a href="mailto:info@zima.ir">info@zima.ir</a></li>
                    <li><a href="#">تهران، ولنجک، برج میلاد</a></li>
                    <li><a href="#">شنبه تا پنجشنبه ۹-۱۸</a></li>
                    <li><a href="#">جمعه ۱۰-۱۶</a></li>
                </ul>
            </div>
        </div>

        <div class="footer-bottom">
            <p>&copy; ۱۴۰۳ زیما. تمامی حقوق محفوظ است. طراحی شده با 💎 برای زنان ایران</p>
        </div>
    </footer>
   <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="{% static 'js/zima_theme_v2.js' %}"></script>
    {% block extra_js %}{% endblock %}

    {# ✅ ✅ ✅ تغییر اصلی: کل منطق چت به داخل این بلاک منتقل شد و ساده‌سازی شد ✅ ✅ ✅ #}
    {% block chat_icon_block %}
        {% if user.is_authenticated %}
            <div class="chat-widget-container">
                {# ✅ تغییر: لینک مستقیم به صفحه لیست چت #}
                <a href="{% if user.is_staff %}{% url 'chat:admin_dashboard' %}{% else %}{% url 'chat:chat_list' %}{% endif %}" class="chat-widget" id="chatIcon">
                    <i class="fas fa-comments"></i>
                    {# ✅ نکته: اعلان زنده حذف شد تا کد ساده‌تر شود، می‌توان بعدا اضافه کرد #}
                </a>
            </div>
            <script>
            document.addEventListener('DOMContentLoaded', function() {
                const chatIcon = document.getElementById('chatIcon');
                if (chatIcon) {
                    const currentPath = window.location.pathname;
                    // فقط در صفحاتی که آدرسشان با /chat/ شروع می‌شود، آیکون را مخفی کن
                    if (currentPath.startsWith('/chat/')) {
                        chatIcon.style.display = 'none';
                    }
                }
            });
            </script>
        {% endif %}
    {% endblock chat_icon_block %}

</body>
</html>

====== FILE: templates/base/navbar.html ======

<nav class="navbar navbar-expand-lg navbar-dark bg-primary">
    <div class="container">
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarMain">
            <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse" id="navbarMain">
            <ul class="navbar-nav me-auto">
                <li class="nav-item">
                    <a class="nav-link" href="{% url 'home' %}">خانه</a>
                </li>

                <!-- دسته‌بندی محصولات مردانه -->
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="#" data-bs-toggle="dropdown">
                        مردانه
                    </a>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" href="{% url 'products:men' %}">همه محصولات مردانه</a></li>
                        <li><a class="dropdown-item" href="{% url 'products:men-underwear' %}">لباس زیر مردانه</a></li>
                        <li><a class="dropdown-item" href="{% url 'products:category_list' slug='mens-tshirts' %}">تی‌شرت</a></li>
                    </ul>
                </li>

                <!-- دسته‌بندی محصولات زنانه -->
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="#" data-bs-toggle="dropdown">
                        زنانه
                    </a>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" href="{% url 'products:women' %}">همه محصولات زنانه</a></li>
                        <li><a class="dropdown-item" href="{% url 'products:women-underwear' %}">لباس زیر زنانه</a></li>
                    </ul>
                </li>

                <!-- برندها -->
                <li class="nav-item">
                    <a class="nav-link" href="{% url 'products:brands' %}">برندها</a>
                </li>

                <!-- فروش ویژه -->
                <li class="nav-item">
                    <a class="nav-link" href="{% url 'products:sale' %}">فروش ویژه</a>
                </li>

                <!-- تماس با ما -->
                <li class="nav-item">
                    <a class="nav-link" href="{% url 'pages:contact' %}">تماس با ما</a>
                </li>

                <!-- درباره ما -->
                <li class="nav-item">
                    <a class="nav-link" href="{% url 'pages:about' %}">درباره ما</a>
                </li>
            </ul>
        </div>
    </div>
</nav>

====== FILE: templates/base/footer.html ======

<footer class="bg-dark text-white py-5 mt-5">
    <div class="container">
        <div class="row">
            <!-- اطلاعات تماس -->
            <div class="col-md-3 mb-4">
                <h5 class="mb-3">تماس با ما</h5>
                <p><i class="fas fa-map-marker-alt me-2"></i> تهران، خیابان ولیعصر</p>
                <p><i class="fas fa-phone me-2"></i> ۰۲۱-۱۲۳۴۵۶۷۸</p>
                <p><i class="fas fa-envelope me-2"></i> info@zima.com</p>

                <!-- شبکه‌های اجتماعی -->
                <div class="social-icons mt-3">
                    <a href="#" class="text-white me-2"><i class="fab fa-instagram fa-lg"></i></a>
                    <a href="#" class="text-white me-2"><i class="fab fa-telegram fa-lg"></i></a>
                    <a href="#" class="text-white me-2"><i class="fab fa-whatsapp fa-lg"></i></a>
                </div>
            </div>

            <!-- لینک‌های سریع -->
            <div class="col-md-3 mb-4">
                <h5 class="mb-3">دسترسی سریع</h5>
                <ul class="list-unstyled">
                    <li class="mb-2"><a href="{% url 'home' %}" class="text-white text-decoration-none">صفحه اصلی</a></li>
                    <li class="mb-2"><a href="{% url 'products:featured' %}" class="text-white text-decoration-none">محصولات ویژه</a></li>
                    <li class="mb-2"><a href="{% url 'products:latest' %}" class="text-white text-decoration-none">جدیدترین محصولات</a></li>
                    <li class="mb-2"><a href="{% url 'pages:faq' %}" class="text-white text-decoration-none">سوالات متداول</a></li>
                </ul>
            </div>

            <!-- خدمات -->
            <div class="col-md-3 mb-4">
                <h5 class="mb-3">خدمات مشتریان</h5>
                <ul class="list-unstyled">
                    <li class="mb-2"><a href="{% url 'pages:shipping' %}" class="text-white text-decoration-none">شیوه‌های ارسال</a></li>
                    <li class="mb-2"><a href="{% url 'pages:returns' %}" class="text-white text-decoration-none">شرایط بازگشت کالا</a></li>
                    <li class="mb-2"><a href="{% url 'pages:privacy' %}" class="text-white text-decoration-none">حریم خصوصی</a></li>
                    <li class="mb-2"><a href="{% url 'pages:terms' %}" class="text-white text-decoration-none">قوانین و مقررات</a></li>
                </ul>
            </div>

            <!-- خبرنامه -->
            <div class="col-md-3 mb-4">
                <h5 class="mb-3">عضویت در خبرنامه</h5>
                <p>برای اطلاع از آخرین محصولات و تخفیف‌ها در خبرنامه عضو شوید</p>
                <form action="{% url 'pages:newsletter' %}" method="post" class="mt-3">
                    {% csrf_token %}
                    <div class="input-group">
                        <input type="email" name="email" placeholder="ایمیل شما" required class="form-control">
                        <button type="submit" class="btn btn-primary">عضویت</button>
                    </div>
                </form>

                <!-- نماد اعتماد -->
                <div class="mt-4">
                    <img src="{% static 'images/enamad.png' %}" alt="نماد اعتماد الکترونیکی" height="60">
                </div>
            </div>
        </div>

        <hr class="my-4">

        <!-- کپی‌رایت -->
        <div class="row">
            <div class="col-md-12 text-center">
                <p>تمامی حقوق این سایت متعلق به فروشگاه زیما می‌باشد &copy; ۱۴۰۴</p>
            </div>
        </div>
    </div>
</footer>

====== FILE: templates/orders/list.html ======

{% extends 'base/base.html' %}
{% load static %}

{% block title %}سفارش‌های من | زیما{% endblock %}

{% block extra_css %}
<style>
    .profile-section {
        min-height: 100vh;
        background: linear-gradient(135deg, var(--zima-blush), var(--zima-champagne));
        padding: 140px 0 60px;
        position: relative;
        overflow: hidden;
    }

    .profile-section::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: url('{% static "images/patterns/subtle-pattern.png" %}') repeat;
        opacity: 0.03;
        pointer-events: none;
    }

    .profile-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 20px;
        position: relative;
        z-index: 2;
    }

    .profile-wrapper {
        display: grid;
        grid-template-columns: 300px 1fr;
        gap: 40px;
        align-items: flex-start;
    }

    /* Sidebar Styles */
    .profile-sidebar {
        background: white;
        border-radius: 20px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
        overflow: hidden;
        position: sticky;
        top: 160px;
    }

    .sidebar-header {
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        color: white;
        padding: 30px 25px;
        text-align: center;
        position: relative;
    }

    .sidebar-header::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: url('{% static "images/patterns/elegant-pattern.png" %}') repeat;
        opacity: 0.1;
    }

    .user-avatar {
        width: 80px;
        height: 80px;
        border-radius: 50%;
        background: white;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 15px;
        color: var(--primary-color);
        font-size: 2rem;
        font-weight: 600;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        position: relative;
        z-index: 2;
    }

    .user-name {
        font-size: 1.2rem;
        font-weight: 600;
        margin-bottom: 5px;
        position: relative;
        z-index: 2;
    }

    .user-status {
        font-size: 0.9rem;
        opacity: 0.9;
        position: relative;
        z-index: 2;
    }

    .sidebar-nav {
        padding: 0;
    }

    .nav-link {
        display: flex;
        align-items: center;
        gap: 15px;
        padding: 18px 25px;
        color: var(--text-color-dark);
        text-decoration: none;
        font-weight: 500;
        transition: all 0.3s ease;
        position: relative;
        border-bottom: 1px solid var(--zima-pearl);
    }

    .nav-link::before {
        content: '';
        position: absolute;
        left: 0;
        top: 0;
        bottom: 0;
        width: 4px;
        background: var(--primary-color);
        transform: scaleY(0);
        transition: transform 0.3s ease;
    }

    .nav-link:hover,
    .nav-link.active {
        background: var(--zima-blush);
        color: var(--primary-color);
        transform: translateX(5px);
    }

    .nav-link:hover::before,
    .nav-link.active::before {
        transform: scaleY(1);
    }

    .nav-link.logout {
        color: #dc3545;
        border-bottom: none;
    }

    .nav-link.logout:hover {
        background: rgba(220, 53, 69, 0.1);
        color: #dc3545;
    }

    .nav-icon {
        font-size: 1.1rem;
        width: 20px;
        text-align: center;
    }

    /* Main Content Styles */
    .profile-content {
        background: white;
        border-radius: 20px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
        overflow: hidden;
    }

    .content-header {
        background: linear-gradient(135deg, var(--zima-blush), var(--zima-champagne));
        padding: 30px 40px;
        border-bottom: 1px solid var(--zima-pearl);
    }

    .content-title {
        font-size: 1.8rem;
        font-weight: 700;
        color: var(--text-color-dark);
        margin: 0;
        font-family: 'Playfair Display', serif;
    }

    .content-subtitle {
        color: var(--text-color-medium);
        margin: 5px 0 0;
        font-size: 1rem;
    }

    .content-body {
        padding: 40px;
    }

    .orders-list {
        display: flex;
        flex-direction: column;
        gap: 25px;
    }

    .order-card {
        background: white;
        border-radius: 15px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
        border: 2px solid var(--zima-pearl);
        transition: all 0.3s ease;
        overflow: hidden;
    }

    .order-card:hover {
        transform: translateY(-3px);
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);
        border-color: var(--primary-color);
    }

    .order-header {
        background: var(--zima-blush);
        padding: 20px 25px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        gap: 15px;
    }

    .order-info {
        display: flex;
        align-items: center;
        gap: 20px;
        flex-wrap: wrap;
    }

    .order-number {
        font-weight: 600;
        color: var(--text-color-dark);
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .order-date {
        color: var(--text-color-medium);
        font-size: 0.9rem;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .order-status {
        padding: 8px 16px;
        border-radius: 20px;
        font-size: 0.85rem;
        font-weight: 500;
        color: white;
    }

    .status-pending {
        background: #ffc107;
    }

    .status-processing {
        background: #17a2b8;
    }

    .status-shipped {
        background: #007bff;
    }

    .status-delivered {
        background: #28a745;
    }

    .status-cancelled {
        background: #dc3545;
    }

    .order-body {
        padding: 25px;
    }

    .order-items {
        display: flex;
        flex-direction: column;
        gap: 15px;
        margin-bottom: 20px;
    }

    .order-item {
        display: flex;
        align-items: center;
        gap: 15px;
        padding: 15px;
        background: var(--zima-blush);
        border-radius: 12px;
    }

    .item-image {
        width: 60px;
        height: 60px;
        border-radius: 8px;
        overflow: hidden;
        flex-shrink: 0;
    }

    .item-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .item-details {
        flex: 1;
    }

    .item-name {
        font-weight: 600;
        color: var(--text-color-dark);
        margin-bottom: 5px;
        font-size: 0.95rem;
    }

    .item-variant {
        color: var(--text-color-medium);
        font-size: 0.85rem;
        margin-bottom: 5px;
    }

    .item-quantity {
        color: var(--text-color-medium);
        font-size: 0.85rem;
    }

    .item-price {
        font-weight: 600;
        color: var(--primary-color);
        font-size: 1rem;
    }

    .order-summary {
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        gap: 15px;
        padding-top: 20px;
        border-top: 1px solid var(--zima-pearl);
    }

    .order-total {
        font-size: 1.2rem;
        font-weight: 700;
        color: var(--text-color-dark);
    }

    .order-actions {
        display: flex;
        gap: 12px;
        flex-wrap: wrap;
    }

    .btn-view {
        background: var(--primary-color);
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 20px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        font-size: 0.9rem;
        display: flex;
        align-items: center;
        gap: 6px;
    }

    .btn-view:hover {
        background: var(--secondary-color);
        transform: translateY(-1px);
        color: white;
    }

    .btn-track {
        background: #17a2b8;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 20px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        font-size: 0.9rem;
        display: flex;
        align-items: center;
        gap: 6px;
    }

    .btn-track:hover {
        background: #138496;
        transform: translateY(-1px);
        color: white;
    }

    .btn-cancel {
        background: #dc3545;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 20px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
        font-size: 0.9rem;
        display: flex;
        align-items: center;
        gap: 6px;
    }

    .btn-cancel:hover {
        background: #c82333;
        transform: translateY(-1px);
    }

    .empty-state {
        text-align: center;
        padding: 80px 40px;
        color: var(--text-color-medium);
    }

    .empty-icon {
        font-size: 5rem;
        color: var(--zima-pearl);
        margin-bottom: 25px;
    }

    .empty-title {
        font-size: 1.8rem;
        font-weight: 600;
        margin-bottom: 15px;
        color: var(--text-color-dark);
    }

    .empty-text {
        font-size: 1.1rem;
        line-height: 1.6;
        margin-bottom: 30px;
    }

    .btn-shop {
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        color: white;
        border: none;
        padding: 15px 30px;
        border-radius: 25px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 10px;
    }

    .btn-shop:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(255, 107, 107, 0.4);
        color: white;
    }

    .alert {
        padding: 15px 20px;
        border-radius: 12px;
        margin-bottom: 25px;
        font-size: 0.95rem;
        border: none;
    }

    .alert-success {
        background: rgba(40, 167, 69, 0.1);
        color: #155724;
    }

    .alert-info {
        background: rgba(23, 162, 184, 0.1);
        color: #0c5460;
    }

    /* Responsive Design */
    @media (max-width: 992px) {
        .profile-wrapper {
            grid-template-columns: 1fr;
            gap: 30px;
        }

        .profile-sidebar {
            position: relative;
            top: auto;
        }

        .order-header {
            flex-direction: column;
            align-items: flex-start;
            gap: 15px;
        }

        .order-info {
            width: 100%;
        }

        .order-summary {
            flex-direction: column;
            align-items: flex-start;
            gap: 20px;
        }
    }

    @media (max-width: 768px) {
        .profile-section {
            padding: 120px 0 40px;
        }

        .profile-container {
            padding: 0 15px;
        }

        .content-header {
            padding: 25px 20px;
        }

        .content-title {
            font-size: 1.5rem;
        }

        .content-body {
            padding: 25px 20px;
        }

        .order-item {
            flex-direction: column;
            align-items: flex-start;
            gap: 12px;
        }

        .order-actions {
            width: 100%;
            justify-content: center;
        }

        .empty-state {
            padding: 60px 20px;
        }

        .empty-icon {
            font-size: 4rem;
        }

        .empty-title {
            font-size: 1.5rem;
        }
    }
</style>
{% endblock %}

{% block content %}
<section class="profile-section">
    <div class="profile-container">
        <div class="profile-wrapper">
            <!-- Sidebar -->
            <aside class="profile-sidebar">
                <div class="sidebar-header">
                    <div class="user-avatar">
                        {{ user.username|slice:":1"|upper }}
                    </div>
                    <h3 class="user-name">{{ user.get_full_name|default:user.username }}</h3>
                    <p class="user-status">عضو زیما</p>
                </div>
                
                <nav class="sidebar-nav">
                    <a href="{% url 'users:profile' %}" class="nav-link">
                        <i class="nav-icon fas fa-user"></i>
                        <span>اطلاعات حساب کاربری</span>
                    </a>
                    <a href="{% url 'users:addresses' %}" class="nav-link">
                        <i class="nav-icon fas fa-map-marker-alt"></i>
                        <span>آدرس‌ها</span>
                    </a>
                    <a href="{% url 'orders:list' %}" class="nav-link active">
                        <i class="nav-icon fas fa-shopping-bag"></i>
                        <span>سفارش‌ها</span>
                    </a>
                    <a href="{% url 'users:change_password' %}" class="nav-link">
                        <i class="nav-icon fas fa-key"></i>
                        <span>تغییر رمز عبور</span>
                    </a>
                    <a href="{% url 'users:favorites' %}" class="nav-link">
                        <i class="nav-icon fas fa-heart"></i>
                        <span>علاقه‌مندی‌ها</span>
                    </a>
                    <a href="{% url 'users:logout' %}" class="nav-link logout">
                        <i class="nav-icon fas fa-sign-out-alt"></i>
                        <span>خروج از حساب کاربری</span>
                    </a>
                </nav>
            </aside>

            <!-- Main Content -->
            <main class="profile-content">
                <div class="content-header">
                    <h1 class="content-title">سفارش‌های من</h1>
                    <p class="content-subtitle">تاریخچه و وضعیت سفارش‌های شما</p>
                </div>

                <div class="content-body">
                    <!-- Messages -->
                    {% if messages %}
                        {% for message in messages %}
                            <div class="alert alert-{{ message.tags }}">
                                {{ message }}
                            </div>
                        {% endfor %}
                    {% endif %}

                    <!-- Orders List -->
                    {% if orders %}
                        <div class="orders-list">
                            {% for order in orders %}
                                <div class="order-card">
                                    <div class="order-header">
                                        <div class="order-info">
                                            <div class="order-number">
                                                <i class="fas fa-receipt"></i>
                                                سفارش #{{ order.id }}
                                            </div>
                                            <div class="order-date">
                                                <i class="fas fa-calendar"></i>
                                                {{ order.created_at|date:"Y/m/d H:i" }}
                                            </div>
                                        </div>
                                        <div class="order-status status-{{ order.status }}">
                                            {{ order.get_status_display }}
                                        </div>
                                    </div>
                                    
                                    <div class="order-body">
                                        <div class="order-items">
                                            {% for item in order.items.all %}
                                                <div class="order-item">
                                                    <div class="item-image">
                                                        <img src="{{ item.product.image.url }}" alt="{{ item.product.name }}">
                                                    </div>
                                                    <div class="item-details">
                                                        <div class="item-name">{{ item.product.name }}</div>
                                                        {% if item.color or item.size %}
                                                            <div class="item-variant">
                                                                {% if item.color %}رنگ: {{ item.color }}{% endif %}
                                                                {% if item.size %} - سایز: {{ item.size }}{% endif %}
                                                            </div>
                                                        {% endif %}
                                                        <div class="item-quantity">تعداد: {{ item.quantity }}</div>
                                                    </div>
                                                    <div class="item-price">
                                                        {{ item.price|floatformat:0 }} تومان
                                                    </div>
                                                </div>
                                            {% endfor %}
                                        </div>
                                        
                                        <div class="order-summary">
                                            <div class="order-total">
                                                مجموع: {{ order.total_amount|floatformat:0 }} تومان
                                            </div>
                                            <div class="order-actions">
                                                <a href="{% url 'orders:detail' order.id %}" class="btn-view">
                                                    <i class="fas fa-eye"></i>
                                                    جزئیات
                                                </a>
                                                {% if order.status != 'cancelled' and order.status != 'delivered' %}
                                                    <a href="{% url 'orders:track' order.id %}" class="btn-track">
                                                        <i class="fas fa-truck"></i>
                                                        پیگیری
                                                    </a>
                                                {% endif %}
                                                {% if order.status == 'pending' %}
                                                    <button class="btn-cancel" onclick="cancelOrder({{ order.id }})">
                                                        <i class="fas fa-times"></i>
                                                        لغو
                                                    </button>
                                                {% endif %}
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            {% endfor %}
                        </div>
                    {% else %}
                        <div class="empty-state">
                            <div class="empty-icon">
                                <i class="fas fa-shopping-bag"></i>
                            </div>
                            <h3 class="empty-title">هنوز سفارشی ثبت نکرده‌اید</h3>
                            <p class="empty-text">از مجموعه زیبای محصولات زیما دیدن کنید و اولین سفارش خود را ثبت کنید</p>
                            <a href="{% url 'products:list' %}" class="btn-shop">
                                <i class="fas fa-shopping-cart"></i>
                                شروع خرید
                            </a>
                        </div>
                    {% endif %}
                </div>
            </main>
        </div>
    </div>
</section>
{% endblock %}

{% block extra_js %}
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Cancel order function
        window.cancelOrder = function(orderId) {
            if (confirm('آیا از لغو این سفارش اطمینان دارید؟')) {
                fetch(`/orders/cancel/${orderId}/`, {
                    method: 'POST',
                    headers: {
                        'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value,
                        'Content-Type': 'application/json',
                    },
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        location.reload();
                    } else {
                        alert(data.message || 'خطا در لغو سفارش');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('خطا در برقراری ارتباط با سرور');
                });
            }
        };

        // Auto-hide alerts
        const alerts = document.querySelectorAll('.alert');
        alerts.forEach(alert => {
            setTimeout(() => {
                alert.style.opacity = '0';
                alert.style.transform = 'translateY(-10px)';
                setTimeout(() => alert.remove(), 300);
            }, 5000);
        });

        // Add loading states to buttons
        const actionButtons = document.querySelectorAll('.btn-view, .btn-track');
        actionButtons.forEach(button => {
            button.addEventListener('click', function() {
                const originalText = this.innerHTML;
                this.innerHTML = '<i class="fas fa-spinner fa-spin"></i> در حال بارگذاری...';
                
                setTimeout(() => {
                    this.innerHTML = originalText;
                }, 2000);
            });
        });
    });
</script>
{% endblock %}

====== FILE: templates/orders/checkout.html ======

{% extends 'base/base.html' %}
{% load static %}

{% block title %}تکمیل سفارش | زیما{% endblock %}

{% block content %}
    <h1 class="h2 mb-4">تکمیل سفارش</h1>
    
    {% if not cart_items %}
        <div class="alert alert-warning">
            سبد خرید شما خالی است. لطفاً ابتدا محصولات مورد نظر خود را به سبد خرید اضافه کنید.
            <a href="{% url 'products:list' %}" class="alert-link">مشاهده محصولات</a>
        </div>
    {% else %}
        <div class="row">
            <!-- فرم اطلاعات ارسال -->
            <div class="col-lg-8 mb-4">
                <div class="card mb-4">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0">آدرس تحویل</h5>
                    </div>
                    <div class="card-body">
                        {% if addresses %}
                            <form method="post" action="{% url 'orders:checkout' %}">
                                {% csrf_token %}
                                <div class="mb-3">
                                    <label class="form-label">انتخاب آدرس:</label>
                                    {% for address in addresses %}
                                        <div class="form-check mb-2">
                                            <input class="form-check-input" type="radio" name="address_id" id="address{{ address.id }}" value="{{ address.id }}" {% if forloop.first %}checked{% endif %}>
                                            <label class="form-check-label" for="address{{ address.id }}">
                                                {{ address.full_address }}
                                                <div class="text-muted small">کد پستی: {{ address.postal_code }}</div>
                                            </label>
                                        </div>
                                    {% endfor %}
                                </div>
                                <div class="d-flex justify-content-between">
                                    <a href="{% url 'users:addresses' %}" class="btn btn-outline-primary">
                                        <i class="fas fa-plus me-1"></i> افزودن آدرس جدید
                                    </a>
                                </div>
                        {% else %}
                            <div class="alert alert-info">
                                شما هنوز آدرسی ثبت نکرده‌اید. لطفاً ابتدا یک آدرس اضافه کنید.
                            </div>
                            <a href="{% url 'users:addresses' %}" class="btn btn-primary">
                                <i class="fas fa-plus me-1"></i> افزودن آدرس
                            </a>
                        {% endif %}
                    </div>
                </div>
                
                {% if addresses %}
                    <div class="card mb-4">
                        <div class="card-header bg-primary text-white">
                            <h5 class="mb-0">روش ارسال</h5>
                        </div>
                        <div class="card-body">
                            <div class="form-check mb-2">
                                <input class="form-check-input" type="radio" name="shipping_method" id="shipping1" value="standard" checked>
                                <label class="form-check-label" for="shipping1">
                                    <div class="d-flex justify-content-between">
                                        <div>
                                            <strong>پست پیشتاز</strong>
                                            <div class="text-muted small">تحویل ۲ تا ۴ روز کاری</div>
                                        </div>
                                        <div>
                                            {% if cart_total.subtotal >= 300000 %}
                                                <span class="text-success">رایگان</span>
                                            {% else %}
                                                <span>۳۰,۰۰۰ تومان</span>
                                            {% endif %}
                                        </div>
                                    </div>
                                </label>
                            </div>
                            <div class="form-check mb-2">
                                <input class="form-check-input" type="radio" name="shipping_method" id="shipping2" value="express">
                                <label class="form-check-label" for="shipping2">
                                    <div class="d-flex justify-content-between">
                                        <div>
                                            <strong>تیپاکس</strong>
                                            <div class="text-muted small">تحویل ۱ تا ۲ روز کاری</div>
                                        </div>
                                        <div>۵۰,۰۰۰ تومان</div>
                                    </div>
                                </label>
                            </div>
                        </div>
                    </div>
                    
                    <div class="card">
                        <div class="card-header bg-primary text-white">
                            <h5 class="mb-0">روش پرداخت</h5>
                        </div>
                        <div class="card-body">
                            <div class="form-check mb-2">
                                <input class="form-check-input" type="radio" name="payment_method" id="payment1" value="online" checked>
                                <label class="form-check-label" for="payment1">
                                    <strong>پرداخت آنلاین</strong>
                                    <div class="text-muted small">پرداخت از طریق درگاه بانکی</div>
                                </label>
                            </div>
                            <div class="form-check mb-4">
                                <input class="form-check-input" type="radio" name="payment_method" id="payment2" value="cash">
                                <label class="form-check-label" for="payment2">
                                    <strong>پرداخت در محل</strong>
                                    <div class="text-muted small">پرداخت هنگام تحویل کالا</div>
                                </label>
                            </div>
                            
                            <div class="mb-3">
                                <label for="description" class="form-label">توضیحات سفارش (اختیاری):</label>
                                <textarea name="description" id="description" rows="3" class="form-control"></textarea>
                            </div>
                            
                            <button type="submit" class="btn btn-success">
                                <i class="fas fa-credit-card me-1"></i> پرداخت و ثبت سفارش
                            </button>
                        </div>
                    </div>
                </form>
                {% endif %}
            </div>
            
            <!-- خلاصه سفارش -->
            <div class="col-lg-4">
                <div class="card">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0">خلاصه سفارش</h5>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <h6>محصولات ({{ cart_total.total_items }})</h6>
                            <ul class="list-group list-group-flush">
                                {% for item in cart_items %}
                                    <li class="list-group-item px-0 d-flex justify-content-between">
                                        <div>
                                            <span>{{ item.name }}</span>
                                            <div class="text-muted small">{{ item.quantity }} × {{ item.price|floatformat:0 }}</div>
                                        </div>
                                        <span>{{ item.total_price|floatformat:0 }} تومان</span>
                                    </li>
                                {% endfor %}
                            </ul>
                        </div>
                        
                        <hr>
                        
                        <div class="d-flex justify-content-between mb-2">
                            <span>مجموع قیمت:</span>
                            <span>{{ cart_total.subtotal|floatformat:0 }} تومان</span>
                        </div>
                        {% if cart_total.discount %}
                            <div class="d-flex justify-content-between mb-2 text-danger">
                                <span>تخفیف:</span>
                                <span>{{ cart_total.discount|floatformat:0 }} تومان</span>
                            </div>
                        {% endif %}
                        <div class="d-flex justify-content-between mb-2">
                            <span>هزینه ارسال:</span>
                            {% if cart_total.shipping_cost > 0 %}
                                <span>{{ cart_total.shipping_cost|floatformat:0 }} تومان</span>
                            {% else %}
                                <span class="text-success">رایگان</span>
                            {% endif %}
                        </div>
                        <hr>
                        <div class="d-flex justify-content-between fw-bold">
                            <span>مبلغ قابل پرداخت:</span>
                            <span>{{ cart_total.total|floatformat:0 }} تومان</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    {% endif %}
{% endblock %}

====== FILE: templates/orders/detail.html ======

{% extends 'base/base.html' %}
{% load static %}

{% block title %}جزئیات سفارش #{{ order.id }} | زیما{% endblock %}

{% block extra_css %}
<style>
    .order-detail-section {
        min-height: 100vh;
        background: linear-gradient(135deg, var(--zima-blush), var(--zima-champagne));
        padding: 140px 0 60px;
        position: relative;
        overflow: hidden;
    }

    .order-detail-section::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: url('{% static "images/patterns/subtle-pattern.png" %}') repeat;
        opacity: 0.03;
        pointer-events: none;
    }

    .order-container {
        max-width: 1000px;
        margin: 0 auto;
        padding: 0 20px;
        position: relative;
        z-index: 2;
    }

    .order-detail-card {
        background: white;
        border-radius: 20px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
        overflow: hidden;
    }

    .order-header {
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        color: white;
        padding: 30px 40px;
        position: relative;
    }

    .order-header::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: url('{% static "images/patterns/elegant-pattern.png" %}') repeat;
        opacity: 0.1;
    }

    .header-content {
        position: relative;
        z-index: 2;
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        gap: 20px;
    }

    .order-title {
        font-size: 1.8rem;
        font-weight: 700;
        margin: 0;
        font-family: 'Playfair Display', serif;
    }

    .order-status {
        padding: 8px 20px;
        border-radius: 25px;
        font-weight: 600;
        font-size: 0.9rem;
        background: rgba(255, 255, 255, 0.2);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.3);
    }

    .order-body {
        padding: 40px;
    }

    .order-info-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 30px;
        margin-bottom: 40px;
    }

    .info-card {
        background: var(--zima-blush);
        padding: 25px;
        border-radius: 15px;
        border: 1px solid var(--zima-pearl);
    }

    .info-title {
        font-weight: 600;
        color: var(--text-color-dark);
        margin-bottom: 15px;
        display: flex;
        align-items: center;
        gap: 10px;
        font-size: 1.1rem;
    }

    .info-content {
        color: var(--text-color-medium);
        line-height: 1.6;
    }

    .order-items-section {
        margin-bottom: 40px;
    }

    .section-title {
        font-size: 1.3rem;
        font-weight: 600;
        color: var(--text-color-dark);
        margin-bottom: 20px;
        padding-bottom: 10px;
        border-bottom: 2px solid var(--zima-pearl);
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .items-list {
        display: flex;
        flex-direction: column;
        gap: 20px;
    }

    .order-item {
        background: var(--zima-blush);
        border-radius: 15px;
        padding: 20px;
        display: flex;
        gap: 20px;
        align-items: center;
        border: 1px solid var(--zima-pearl);
        transition: all 0.3s ease;
    }

    .order-item:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    }

    .item-image {
        width: 100px;
        height: 100px;
        border-radius: 12px;
        object-fit: cover;
        border: 2px solid white;
        box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);
    }

    .item-details {
        flex: 1;
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

    .item-name {
        font-weight: 600;
        color: var(--text-color-dark);
        font-size: 1.1rem;
        line-height: 1.4;
    }

    .item-variant {
        color: var(--text-color-medium);
        font-size: 0.95rem;
        display: flex;
        gap: 15px;
        flex-wrap: wrap;
    }

    .variant-item {
        display: flex;
        align-items: center;
        gap: 5px;
    }

    .item-price-section {
        text-align: left;
        display: flex;
        flex-direction: column;
        gap: 5px;
        align-items: flex-end;
    }

    .item-unit-price {
        color: var(--text-color-medium);
        font-size: 0.9rem;
    }

    .item-total-price {
        font-weight: 600;
        color: var(--primary-color);
        font-size: 1.1rem;
    }

    .item-quantity {
        background: var(--primary-color);
        color: white;
        padding: 4px 12px;
        border-radius: 15px;
        font-size: 0.85rem;
        font-weight: 500;
    }

    .order-summary {
        background: linear-gradient(135deg, var(--zima-blush), var(--zima-champagne));
        border-radius: 15px;
        padding: 30px;
        border: 1px solid var(--zima-pearl);
    }

    .summary-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 12px;
        color: var(--text-color-dark);
        font-size: 1rem;
    }

    .summary-row:last-child {
        margin-bottom: 0;
        font-weight: 700;
        font-size: 1.3rem;
        color: var(--primary-color);
        padding-top: 15px;
        border-top: 2px solid var(--zima-pearl);
        margin-top: 15px;
    }

    .summary-label {
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .back-button {
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        color: white;
        border: none;
        padding: 12px 25px;
        border-radius: 25px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 10px;
        margin-top: 30px;
    }

    .back-button:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(255, 107, 107, 0.4);
        color: white;
    }

    .tracking-section {
        margin-bottom: 40px;
    }

    .tracking-steps {
        display: flex;
        justify-content: space-between;
        align-items: center;
        position: relative;
        margin-top: 30px;
    }

    .tracking-step {
        display: flex;
        flex-direction: column;
        align-items: center;
        position: relative;
        z-index: 2;
        background: white;
        padding: 10px;
        border-radius: 50%;
    }

    .step-icon {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.2rem;
        margin-bottom: 10px;
        transition: all 0.3s ease;
    }

    .step-completed {
        background: var(--primary-color);
        color: white;
    }

    .step-current {
        background: var(--secondary-color);
        color: white;
        animation: pulse 2s infinite;
    }

    .step-pending {
        background: var(--zima-pearl);
        color: var(--text-color-medium);
    }

    .step-label {
        font-size: 0.85rem;
        font-weight: 500;
        color: var(--text-color-dark);
        text-align: center;
        max-width: 80px;
    }

    .tracking-line {
        position: absolute;
        top: 35px;
        left: 10%;
        right: 10%;
        height: 2px;
        background: var(--zima-pearl);
        z-index: 1;
    }

    .tracking-progress {
        height: 100%;
        background: var(--primary-color);
        transition: width 0.5s ease;
    }

    @keyframes pulse {
        0% { transform: scale(1); }
        50% { transform: scale(1.05); }
        100% { transform: scale(1); }
    }

    /* Responsive Design */
    @media (max-width: 768px) {
        .order-detail-section {
            padding: 120px 0 40px;
        }

        .order-container {
            padding: 0 15px;
        }

        .order-header {
            padding: 25px 20px;
        }

        .header-content {
            flex-direction: column;
            align-items: flex-start;
            gap: 15px;
        }

        .order-title {
            font-size: 1.5rem;
        }

        .order-body {
            padding: 25px 20px;
        }

        .order-info-grid {
            grid-template-columns: 1fr;
            gap: 20px;
            margin-bottom: 30px;
        }

        .order-item {
            flex-direction: column;
            text-align: center;
            gap: 15px;
        }

        .item-details {
            align-items: center;
        }

        .item-price-section {
            align-items: center;
        }

        .tracking-steps {
            flex-direction: column;
            gap: 20px;
        }

        .tracking-line {
            display: none;
        }

        .summary-row {
            font-size: 0.9rem;
        }

        .summary-row:last-child {
            font-size: 1.1rem;
        }
    }

    @media (max-width: 480px) {
        .order-item {
            padding: 15px;
        }

        .item-image {
            width: 80px;
            height: 80px;
        }

        .info-card {
            padding: 20px;
        }

        .order-summary {
            padding: 20px;
        }
    }
</style>
{% endblock %}

{% block content %}
<section class="order-detail-section">
    <div class="order-container">
        <div class="order-detail-card">
            <div class="order-header">
                <div class="header-content">
                    <h1 class="order-title">سفارش #{{ order.id }}</h1>
                    <div class="order-status">
                        {{ order.get_status_display }}
                    </div>
                </div>
            </div>

            <div class="order-body">
                <!-- Order Info Grid -->
                <div class="order-info-grid">
                    <div class="info-card">
                        <h3 class="info-title">
                            <i class="fas fa-calendar-alt"></i>
                            تاریخ سفارش
                        </h3>
                        <div class="info-content">
                            {{ order.created_at|date:'Y/m/d H:i' }}
                        </div>
                    </div>

                    <div class="info-card">
                        <h3 class="info-title">
                            <i class="fas fa-map-marker-alt"></i>
                            آدرس ارسال
                        </h3>
                        <div class="info-content">
                            {{ order.shipping_address }}
                        </div>
                    </div>

                    <div class="info-card">
                        <h3 class="info-title">
                            <i class="fas fa-credit-card"></i>
                            روش پرداخت
                        </h3>
                        <div class="info-content">
                            {{ order.get_payment_method_display }}
                        </div>
                    </div>

                    {% if order.tracking_code %}
                        <div class="info-card">
                            <h3 class="info-title">
                                <i class="fas fa-truck"></i>
                                کد رهگیری
                            </h3>
                            <div class="info-content">
                                {{ order.tracking_code }}
                            </div>
                        </div>
                    {% endif %}
                </div>

                <!-- Order Tracking -->
                {% if order.status != 'cancelled' %}
                    <div class="tracking-section">
                        <h2 class="section-title">
                            <i class="fas fa-route"></i>
                            وضعیت ارسال
                        </h2>
                        <div class="tracking-steps">
                            <div class="tracking-line">
                                <div class="tracking-progress" 
                                     style="width: {% if order.status == 'pending' %}25%{% elif order.status == 'processing' %}50%{% elif order.status == 'shipped' %}75%{% elif order.status == 'delivered' %}100%{% endif %}"></div>
                            </div>
                            
                            <div class="tracking-step">
                                <div class="step-icon {% if order.status == 'pending' %}step-current{% else %}step-completed{% endif %}">
                                    <i class="fas fa-receipt"></i>
                                </div>
                                <div class="step-label">ثبت سفارش</div>
                            </div>
                            
                            <div class="tracking-step">
                                <div class="step-icon {% if order.status == 'processing' %}step-current{% elif order.status == 'shipped' or order.status == 'delivered' %}step-completed{% else %}step-pending{% endif %}">
                                    <i class="fas fa-cogs"></i>
                                </div>
                                <div class="step-label">در حال پردازش</div>
                            </div>
                            
                            <div class="tracking-step">
                                <div class="step-icon {% if order.status == 'shipped' %}step-current{% elif order.status == 'delivered' %}step-completed{% else %}step-pending{% endif %}">
                                    <i class="fas fa-truck"></i>
                                </div>
                                <div class="step-label">ارسال شده</div>
                            </div>
                            
                            <div class="tracking-step">
                                <div class="step-icon {% if order.status == 'delivered' %}step-completed{% else %}step-pending{% endif %}">
                                    <i class="fas fa-check-circle"></i>
                                </div>
                                <div class="step-label">تحویل داده شده</div>
                            </div>
                        </div>
                    </div>
                {% endif %}

                <!-- Order Items -->
                <div class="order-items-section">
                    <h2 class="section-title">
                        <i class="fas fa-shopping-cart"></i>
                        محصولات سفارش
                    </h2>
                    <div class="items-list">
                        {% for item in order.items.all %}
                            <div class="order-item">
                                <img src="{{ item.product.image.url }}" 
                                     alt="{{ item.product.name }}" 
                                     class="item-image">
                                <div class="item-details">
                                    <div class="item-name">{{ item.product.name }}</div>
                                    {% if item.size or item.color %}
                                        <div class="item-variant">
                                            {% if item.size %}
                                                <div class="variant-item">
                                                    <i class="fas fa-ruler"></i>
                                                    سایز: {{ item.size }}
                                                </div>
                                            {% endif %}
                                            {% if item.color %}
                                                <div class="variant-item">
                                                    <i class="fas fa-palette"></i>
                                                    رنگ: {{ item.color }}
                                                </div>
                                            {% endif %}
                                        </div>
                                    {% endif %}
                                    <div class="item-quantity">تعداد: {{ item.quantity }}</div>
                                </div>
                                <div class="item-price-section">
                                    <div class="item-unit-price">
                                        {{ item.unit_price|floatformat:0 }} تومان × {{ item.quantity }}
                                    </div>
                                    <div class="item-total-price">
                                        {{ item.total_price|floatformat:0 }} تومان
                                    </div>
                                </div>
                            </div>
                        {% endfor %}
                    </div>
                </div>

                <!-- Order Summary -->
                <div class="order-summary">
                    <h2 class="section-title" style="border: none; margin-bottom: 20px;">
                        <i class="fas fa-calculator"></i>
                        خلاصه سفارش
                    </h2>
                    
                    <div class="summary-row">
                        <div class="summary-label">
                            <i class="fas fa-shopping-bag"></i>
                            مجموع کالاها:
                        </div>
                        <span>{{ order.total_price|floatformat:0 }} تومان</span>
                    </div>
                    
                    {% if order.shipping_cost %}
                        <div class="summary-row">
                            <div class="summary-label">
                                <i class="fas fa-truck"></i>
                                هزینه ارسال:
                            </div>
                            <span>{{ order.shipping_cost|floatformat:0 }} تومان</span>
                        </div>
                    {% endif %}
                    
                    {% if order.discount_amount %}
                        <div class="summary-row">
                            <div class="summary-label">
                                <i class="fas fa-percentage"></i>
                                تخفیف:
                            </div>
                            <span>-{{ order.discount_amount|floatformat:0 }} تومان</span>
                        </div>
                    {% endif %}
                    
                    <div class="summary-row">
                        <div class="summary-label">
                            <i class="fas fa-money-bill-wave"></i>
                            مبلغ نهایی:
                        </div>
                        <span>{{ order.final_price|floatformat:0 }} تومان</span>
                    </div>
                </div>

                <a href="{% url 'orders:list' %}" class="back-button">
                    <i class="fas fa-arrow-right"></i>
                    بازگشت به لیست سفارش‌ها
                </a>
            </div>
        </div>
    </div>
</section>
{% endblock %}
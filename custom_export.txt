

====== FILE: docker-compose.yml ======

services:
  postgres:
    image: postgres:15-alpine
    container_name: zima_postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-zima}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-rezazh79}
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    networks:
      - zima_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-zima}"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: zima_redis
    networks:
      - zima_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  django:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: zima_django
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env.production
    environment:
      - DB_HOST=postgres
      - REDIS_HOST=redis
      - DJANGO_ENV=development
      - SERVICE_TYPE=django
      - USE_FILE_LOGGING=false
    volumes:
      - .:/app
      - ./staticfiles:/app/staticfiles
      - ./media:/app/media
    networks:
      - zima_network
    restart: unless-stopped
    ports:
      - "8002:8000"

  gunicorn:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: zima_gunicorn
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env.production
    environment:
      - DB_HOST=postgres
      - REDIS_HOST=redis
      - DJANGO_ENV=production
      - SERVICE_TYPE=gunicorn
      - USE_FILE_LOGGING=false
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    networks:
      - zima_network
    restart: unless-stopped
    expose:
      - "8000"

  daphne:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: zima_daphne
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env.production
    environment:
      - DB_HOST=postgres
      - REDIS_HOST=redis
      - DJANGO_ENV=production
      - SERVICE_TYPE=daphne
      - USE_FILE_LOGGING=false
    volumes:
      - .:/app
      - static_volume:/app/staticfiles  # استفاده از volume
      - media_volume:/app/media
    networks:
      - zima_network
    restart: unless-stopped
    ports:
      - "8001:8001"

  nginx:
    image: nginx:alpine
    container_name: zima_nginx
    depends_on:
      - gunicorn
      - daphne
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/app/staticfiles:ro  # استفاده از volume
      - media_volume:/app/media:ro
    networks:
      - zima_network
    restart: unless-stopped

volumes:
  postgres_data:
    name: zima_postgres_data
  static_volume:    # volume جدید برای static files
    name: zima_static
  media_volume:     # volume جدید برای media files
    name: zima_media
networks:
  zima_network:
    name: zima_network

====== FILE: Dockerfile ======

FROM python:3.11-alpine

ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=off \
    PIP_DISABLE_PIP_VERSION_CHECK=on \
    APP_HOME=/app

WORKDIR $APP_HOME

RUN apk update && apk add --no-cache --virtual .build-deps \
        postgresql-dev gcc python3-dev musl-dev libffi-dev \
    && apk add --no-cache \
        postgresql-client jpeg-dev zlib-dev gettext bash netcat-openbsd

COPY requirements.txt .
RUN pip install --upgrade pip \
    && pip install -r requirements.txt gunicorn daphne \
    && apk del .build-deps

# ایجاد کاربر قبل از کپی کردن فایل‌ها
RUN addgroup -S app && adduser -S app -G app

COPY . .

# تنظیم مجوزها - اصلاح شده
RUN mkdir -p staticfiles media \
    && chown -R app:app /app \
    && chmod -R 755 /app \
    && chmod -R 777 /app/staticfiles \
    && chmod -R 777 /app/media

COPY --chown=app:app ./config/entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh

USER app

ENTRYPOINT ["/entrypoint.sh"]

====== FILE: chat/consumers.py ======

from django.contrib.auth import get_user_model
from .models import ChatRoom, ChatMessage, UserChatStatus, Notification
from django.utils import timezone
from django.db.models import Q
from channels.db import database_sync_to_async
from django.contrib.auth.models import AnonymousUser

User = get_user_model()
import json
import base64
import uuid
import os
from channels.generic.websocket import AsyncWebsocketConsumer
from django.core.files.base import ContentFile
from django.conf import settings


class ChatConsumer(AsyncWebsocketConsumer):
    async def connect(self):
        self.room_id = self.scope['url_route']['kwargs']['room_id']
        self.room_group_name = f'chat_{self.room_id}'
        self.user = self.scope['user']

        # بررسی احراز هویت کاربر
        if isinstance(self.user, AnonymousUser) or not self.user.is_authenticated:
            await self.close()
            return

        # اول accept کنید، بعد بقیه کارها
        await self.accept()

        # اضافه کردن کاربر به گروه چت
        await self.channel_layer.group_add(
            self.room_group_name,
            self.channel_name
        )

        # تنظیم وضعیت کاربر به آنلاین
        await self.set_user_status('online')
        room = await self.get_room()

        # اعلام به همه کاربران در اتاق که این کاربر آنلاین شده
        await self.channel_layer.group_send(
            self.room_group_name,
            {
                'type': 'user_status_update',
                'user_id': self.user.id,
                'username': self.user.username,
                'status': 'online',
                'is_staff': self.user.is_staff
            }
        )

        # بررسی وضعیت کاربر طرف مقابل
        other_user = await self.get_other_user(room)
        if other_user:
            other_user_status = await self.get_user_status(other_user)
            await self.send(text_data=json.dumps({
                'type': 'user_status_update',
                'user_id': other_user.id,
                'username': other_user.username,
                'status': other_user_status,
                'is_staff': other_user.is_staff
            }))

        # علامت‌گذاری پیام‌های خوانده نشده به عنوان خوانده شده
        if not self.user.is_staff:
            await self.mark_messages_as_read()

    async def disconnect(self, close_code):
        # حذف کاربر از گروه چت
        if hasattr(self, 'room_group_name'):
            await self.channel_layer.group_discard(
                self.room_group_name,
                self.channel_name
            )

        # تنظیم وضعیت کاربر به آفلاین
        if hasattr(self, 'user') and self.user.is_authenticated:
            await self.set_user_status('offline')

            # اعلام به همه کاربران در اتاق که این کاربر آفلاین شده
            await self.channel_layer.group_send(
                self.room_group_name,
                {
                    'type': 'user_status_update',
                    'user_id': self.user.id,
                    'username': self.user.username,
                    'status': 'offline',
                    'is_staff': self.user.is_staff
                }
            )

    async def receive(self, text_data):
        data = json.loads(text_data)
        message_type = data.get('type', 'chat_message')

        if message_type == 'chat_message':
            message = data.get('message', '')
            file_data = data.get('file', None)

            try:
                if file_data:
                    message_obj = await self.save_message_with_file(message, file_data)
                else:
                    message_obj = await self.save_message(message)

                # بررسی نوع message_obj و استخراج اطلاعات مورد نیاز
                if isinstance(message_obj, dict):
                    message_id = message_obj.get('message_id') or message_obj.get('id')
                    timestamp = message_obj.get('timestamp')
                    message_type = message_obj.get('message_type', 'text')
                    file_url = message_obj.get('file_url')
                    file_name = message_obj.get('file_name')
                    file_type = message_obj.get('file_type')
                else:
                    message_id = str(message_obj.id)
                    timestamp = message_obj.created_at.isoformat()
                    message_type = message_obj.message_type
                    file_url = message_obj.file.url if hasattr(message_obj, 'file') and message_obj.file else None
                    file_name = message_obj.file_name if hasattr(message_obj, 'file_name') else None
                    file_type = message_obj.file_type if hasattr(message_obj, 'file_type') else None

                # ارسال پیام به گروه چت
                await self.channel_layer.group_send(
                    self.room_group_name,
                    {
                        'type': 'chat_message',
                        'message': message,
                        'username': self.user.username,
                        'user_id': self.user.id,
                        'message_id': message_id,
                        'timestamp': timestamp,
                        'message_type': message_type,
                        'file_url': file_url,
                        'file_name': file_name,
                        'file_type': file_type,
                        'is_staff': self.user.is_staff,
                    }
                )

                # ارسال اعلان به گیرنده
                receiver = await self.get_receiver()
                if receiver:
                    notification_group_name = f'notifications_{receiver.id}'

                    # ارسال اعلان برای بروزرسانی تعداد پیام‌های خوانده نشده
                    unread_count = await self.get_user_unread_count(receiver)
                    await self.channel_layer.group_send(
                        notification_group_name,
                        {
                            'type': 'unread_count_update',
                            'count': unread_count
                        }
                    )

                    # برای کاربران عادی، اعلان پاپ‌آپ هم ارسال کن
                    if not self.user.is_staff:  # اگر فرستنده ادمین نیست (یعنی کاربر عادی است)
                        if receiver.is_staff:  # و گیرنده ادمین است
                            await self.channel_layer.group_send(
                                notification_group_name,
                                {
                                    'type': 'chat_notification',
                                    'message': message[:50] + ('...' if len(message) > 50 else ''),
                                    'sender': self.user.username,
                                    'room_id': str(self.room_id),
                                    'is_admin': False
                                }
                            )
                    elif not receiver.is_staff:  # اگر فرستنده ادمین است و گیرنده کاربر عادی
                        await self.channel_layer.group_send(
                            notification_group_name,
                            {
                                'type': 'chat_notification',
                                'message': message[:50] + ('...' if len(message) > 50 else ''),
                                'sender': 'پشتیبانی',
                                'room_id': str(self.room_id),
                                'is_admin': True
                            }
                        )
            except Exception as e:
                print(f"Error processing message: {e}")
                await self.send(text_data=json.dumps({
                    'type': 'error',
                    'message': f"خطا در پردازش پیام: {str(e)}"
                }))

        elif message_type == 'typing':
            is_typing = data.get('is_typing', False)
            # ارسال وضعیت تایپ کردن به گروه چت
            await self.channel_layer.group_send(
                self.room_group_name,
                {
                    'type': 'typing_status',
                    'username': self.user.username,
                    'user_id': self.user.id,
                    'is_typing': is_typing,
                    'is_staff': self.user.is_staff
                }
            )

    async def chat_message(self, event):
        await self.send(text_data=json.dumps({
            'type': 'chat_message',
            'message': event['message'],
            'message_id': event['message_id'],
            'username': event['username'],
            'user_id': event['user_id'],
            'message_type': event.get('message_type', 'text'),
            'file_url': event.get('file_url', None),
            'file_name': event.get('file_name', None),
            'file_type': event.get('file_type', None),
            'timestamp': event.get('timestamp', None),
            'is_staff': event.get('is_staff', False)
        }))

    async def typing_status(self, event):
        await self.send(text_data=json.dumps({
            'type': 'typing',
            'username': event['username'],
            'user_id': event['user_id'],
            'is_typing': event['is_typing'],
            'is_staff': event.get('is_staff', False)
        }))

    async def user_status_update(self, event):
        """ارسال بروزرسانی وضعیت کاربر به کلاینت"""
        await self.send(text_data=json.dumps({
            'type': 'user_status_update',
            'user_id': event.get('user_id'),
            'username': event.get('username'),
            'status': event.get('status'),
            'is_staff': event.get('is_staff', False)
        }))

    async def message_read(self, event):
        await self.send(text_data=json.dumps({
            'type': 'message_read',
            'message_id': event['message_id'],
            'read_by_user_id': event['read_by_user_id']
        }))

    async def chat_deleted(self, event):
        await self.send(text_data=json.dumps({
            'type': 'chat_deleted',
            'deleted_by_user_id': event.get('deleted_by_user_id', None)
        }))

    async def chat_status_update(self, event):
        await self.send(text_data=json.dumps({
            'type': 'chat_status_update',
            'is_closed': event['is_closed'],
            'updated_by_user_id': event.get('updated_by_user_id', None)
        }))

    @database_sync_to_async
    def save_message(self, message):
        room = ChatRoom.objects.get(id=self.room_id)
        chat_message = ChatMessage.objects.create(
            room=room,
            sender=self.user,
            content=message,
            message_type='text'
        )
        return chat_message

    @database_sync_to_async
    def get_room(self):
        """دریافت اطلاعات اتاق"""
        try:
            return ChatRoom.objects.get(id=self.room_id)
        except ChatRoom.DoesNotExist:
            return None

    @database_sync_to_async
    def get_other_user(self, room):
        """دریافت کاربر طرف مقابل در چت"""
        if not room:
            return None

        if self.user == room.user:
            return room.admin
        else:
            return room.user

    @database_sync_to_async
    def get_user_status(self, user):
        """دریافت وضعیت واقعی کاربر - اصلاح شده"""
        if not user:
            return 'offline'

        try:
            status_obj = UserChatStatus.objects.get(user=user)

            # استفاده از last_seen به جای last_activity
            if status_obj.last_seen:
                # بررسی زمان آخرین فعالیت
                from datetime import timedelta
                threshold = timezone.now() - timedelta(minutes=2)

                if status_obj.last_seen > threshold:
                    return status_obj.status
                else:
                    return 'offline'
            else:
                return 'offline'

        except UserChatStatus.DoesNotExist:
            return 'offline'
        except Exception as e:
            print(f"Error in get_user_status: {e}")
            return 'offline'

    @database_sync_to_async
    def set_user_status(self, status):
        """تنظیم وضعیت آنلاین/آفلاین کاربر - اصلاح شده"""
        try:
            # اطمینان از اینکه user واقعی است نه LazyObject
            if hasattr(self.user, '_wrapped'):
                # اگر LazyObject است، آن را resolve کنید
                actual_user = self.user._wrapped
            else:
                actual_user = self.user

            if not actual_user or not actual_user.is_authenticated:
                return

            user_status, created = UserChatStatus.objects.get_or_create(
                user=actual_user,
                defaults={'status': status}
            )
            user_status.status = status
            # last_seen خودکار بروزرسانی می‌شود چون auto_now=True دارد
            user_status.save()
        except Exception as e:
            print(f"Error setting user status: {e}")

    @database_sync_to_async
    def get_receiver(self):
        """دریافت کاربر گیرنده پیام"""
        try:
            room = ChatRoom.objects.get(id=self.room_id)
            if self.user == room.user:
                return room.admin
            else:
                return room.user
        except Exception as e:
            print(f"Error in get_receiver: {e}")
            return None

    @database_sync_to_async
    def get_user_unread_count(self, user):
        """محاسبه تعداد پیام‌های خوانده نشده برای یک کاربر خاص"""
        try:
            if user.is_staff:
                return ChatMessage.objects.filter(
                    room__admin=user,
                    is_read=False,
                    sender__is_staff=False
                ).count()
            else:
                return ChatMessage.objects.filter(
                    room__user=user,
                    is_read=False,
                    sender__is_staff=True
                ).count()
        except Exception as e:
            print(f"Error in get_user_unread_count: {e}")
            return 0

    @database_sync_to_async
    def mark_messages_as_read(self):
        """علامت‌گذاری تمام پیام‌های خوانده نشده در این اتاق به عنوان خوانده شده"""
        try:
            room = ChatRoom.objects.get(id=self.room_id)

            # اگر کاربر عادی است، پیام‌های ادمین را خوانده شده علامت‌گذاری کن
            if not self.user.is_staff:
                unread_messages = ChatMessage.objects.filter(
                    room=room,
                    is_read=False,
                    sender__is_staff=True
                )
            else:
                # اگر ادمین است، پیام‌های کاربر را خوانده شده علامت‌گذاری کن
                unread_messages = ChatMessage.objects.filter(
                    room=room,
                    is_read=False,
                    sender__is_staff=False
                )

            for message in unread_messages:
                message.is_read = True
                message.read_at = timezone.now()
                message.save()

            return len(unread_messages)
        except Exception as e:
            print(f"Error marking messages as read: {e}")
            return 0

    @database_sync_to_async
    def save_message_with_file(self, message, file_data):
        room = ChatRoom.objects.get(id=self.room_id)

        file_info = file_data.get('info', {})
        file_name = file_info.get('name', 'unnamed_file')
        file_type = file_info.get('type', 'application/octet-stream')

        max_size = 10 * 1024 * 1024  # 10MB

        file_content_str = file_data.get('content', '')
        if ',' in file_content_str:
            file_content_str = file_content_str.split(',', 1)[1]

        file_content = base64.b64decode(file_content_str)
        file_size = len(file_content)

        if file_size > max_size:
            raise ValueError(f"سایز فایل بیش از حد مجاز است (حداکثر {max_size / (1024 * 1024):.1f} مگابایت)")

        file_ext = os.path.splitext(file_name)[1]
        if not file_ext and '/' in file_type:
            mime_type = file_type.split('/')[1]
            if mime_type == 'jpeg':
                file_ext = '.jpg'
            elif mime_type in ['png', 'gif', 'bmp', 'webp']:
                file_ext = f'.{mime_type}'
            else:
                file_ext = ''

        unique_filename = f"{uuid.uuid4()}{file_ext}"

        chat_message = ChatMessage(
            room=room,
            sender=self.user,
            content=message,
            file_name=file_name,
            file_type=file_type,
            file_size=file_size
        )

        chat_message.file.save(unique_filename, ContentFile(file_content), save=False)

        if file_type.startswith('image/'):
            chat_message.message_type = 'image'
        else:
            chat_message.message_type = 'file'

        chat_message.save()

        if settings.DEBUG:
            file_url = f"{settings.MEDIA_URL}{chat_message.file.name}"
        else:
            file_url = chat_message.file.url

        return chat_message


class NotificationConsumer(AsyncWebsocketConsumer):
    async def connect(self):
        self.user = self.scope["user"]

        # بررسی احراز هویت کاربر
        if isinstance(self.user, AnonymousUser) or not self.user.is_authenticated:
            await self.close()
            return

        self.notification_group_name = f'notifications_{self.user.id}'

        await self.channel_layer.group_add(
            self.notification_group_name,
            self.channel_name
        )

        await self.accept()

        # ارسال تعداد پیام‌های خوانده نشده در هنگام اتصال
        unread_count = await self.get_unread_count()
        await self.send(text_data=json.dumps({
            'type': 'unread_count',
            'count': unread_count
        }))

    async def disconnect(self, close_code):
        if hasattr(self, 'notification_group_name'):
            await self.channel_layer.group_discard(
                self.notification_group_name,
                self.channel_name
            )

    async def receive(self, text_data):
        try:
            data = json.loads(text_data)
            message_type = data.get('type')

            if message_type == 'check_unread':
                unread_count = await self.get_unread_count()
                await self.send(text_data=json.dumps({
                    'type': 'unread_count',
                    'count': unread_count
                }))
            elif message_type == 'ping':
                await self.send(text_data=json.dumps({
                    'type': 'pong',
                    'message': 'Connection is alive'
                }))
        except json.JSONDecodeError:
            pass

    # اضافه کردن handler مفقود
    async def user_status_update(self, event):
        """Handle user status updates"""
        await self.send(text_data=json.dumps({
            'type': 'user_status_update',
            'user_id': event.get('user_id'),
            'username': event.get('username'),
            'status': event.get('status'),
            'is_staff': event.get('is_staff', False)
        }))

    async def chat_notification(self, event):
        await self.send(text_data=json.dumps({
            'type': 'chat_notification',
            'message': event['message'],
            'sender': event['sender'],
            'room_id': event['room_id'],
            'is_admin': event['is_admin']
        }))

    async def unread_count_update(self, event):
        await self.send(text_data=json.dumps({
            'type': 'unread_count',
            'count': event['count']
        }))

    async def notification_message(self, event):
        """Handle general notification messages"""
        await self.send(text_data=json.dumps({
            'type': 'notification',
            'message': event.get('message', ''),
            'title': event.get('title', ''),
            'data': event.get('data', {})
        }))

    @database_sync_to_async
    def get_unread_count(self):
        """محاسبه تعداد پیام‌های خوانده نشده برای کاربر فعلی"""
        if not self.user.is_authenticated:
            return 0

        try:
            if self.user.is_staff:
                # برای ادمین‌ها: پیام‌های خوانده نشده از کاربران عادی
                return ChatMessage.objects.filter(
                    room__admin=self.user,
                    is_read=False,
                    sender__is_staff=False
                ).count()
            else:
                # برای کاربران عادی: پیام‌های خوانده نشده از ادمین‌ها
                return ChatMessage.objects.filter(
                    room__user=self.user,
                    is_read=False,
                    sender__is_staff=True
                ).count()
        except Exception as e:
            print(f"Error in get_unread_count: {e}")
            return 0

====== FILE: templates/cart/summary.html ======

{% extends "base/base.html" %}
{% load static %}

{% block title %}سبد خرید - فروشگاه زیما{% endblock %}

{% block extra_css %}
<style>
    .cart-table {
        margin-top: 2rem;
    }

    .cart-item-image {
        width: 80px;
        height: 80px;
        object-fit: cover;
    }

    .cart-item-details {
        display: flex;
        flex-direction: column;
    }

    .cart-item-title {
        font-weight: bold;
        margin-bottom: 0.5rem;
    }

    .cart-item-attributes {
        font-size: 0.9rem;
        color: #666;
    }

    .quantity-control {
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .quantity-btn {
        width: 30px;
        height: 30px;
        padding: 0;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .quantity-input {
        width: 40px;
        text-align: center;
        margin: 0 5px;
    }

    .cart-summary {
        background-color: #f8f9fa;
        padding: 1.5rem;
        border-radius: 0.25rem;
    }

    .summary-row {
        display: flex;
        justify-content: space-between;
        margin-bottom: 0.75rem;
    }

    .summary-total {
        font-weight: bold;
        font-size: 1.2rem;
        border-top: 1px solid #dee2e6;
        padding-top: 0.75rem;
        margin-top: 0.75rem;
    }

    .empty-cart {
        text-align: center;
        padding: 3rem 0;
    }

    .empty-cart i {
        font-size: 4rem;
        color: #dee2e6;
        margin-bottom: 1rem;
    }

    /* استایل‌های جدید برای تخفیفات */
    .price-info {
        display: flex;
        flex-direction: column;
    }

    .original-price {
        text-decoration: line-through;
        color: #999;
        font-size: 0.9rem;
    }

    .discounted-price {
        color: #dc3545;
        font-weight: bold;
    }

    .discount-badge {
        background-color: #dc3545;
        color: white;
        font-size: 0.75rem;
        padding: 2px 6px;
        border-radius: 3px;
        display: inline-block;
        margin-top: 2px;
    }

    .savings-highlight {
        color: #28a745;
        font-weight: bold;
        font-size: 0.9rem;
    }

    .discount-row {
        color: #dc3545;
    }

    .savings-row {
        color: #28a745;
        font-weight: bold;
    }
</style>
{% endblock %}

{% block content %}
<div class="container my-4">
    <h1 class="mb-4">سبد خرید</h1>

    {% if cart_items %}
    <div class="row">
        <!-- جدول آیتم‌های سبد خرید -->
        <div class="col-lg-8">
            <div class="card cart-table">
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>محصول</th>
                                    <th>قیمت واحد</th>
                                    <th>تعداد</th>
                                    <th>قیمت کل</th>
                                    <th>عملیات</th>
                                </tr>
                            </thead>
                            <tbody>
                                {% for item in cart_items %}
                                <tr>
                                    <td>
                                        <div class="d-flex align-items-center">
                                            {% with image=item.product.get_main_image %}
                                            {% if image %}
                                            <img src="{{ image.image.url }}" alt="{{ item.product.name }}" class="cart-item-image me-3">
                                            {% else %}
                                            <div class="cart-item-image me-3 bg-secondary d-flex align-items-center justify-content-center text-white">بدون تصویر</div>
                                            {% endif %}
                                            {% endwith %}
                                            <div class="cart-item-details">
                                                <div class="cart-item-title">{{ item.product.name }}</div>
                                                <div class="cart-item-attributes">
                                                    <span>رنگ: {{ item.color }}</span>
                                                    <span class="mx-2">|</span>
                                                    <span>سایز: {{ item.size }}</span>
                                                </div>
                                                {% if item.product.has_discount %}
                                                <span class="discount-badge">
                                                    {{ item.product.discount_percent }}% تخفیف
                                                </span>
                                                {% endif %}
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="price-info">
                                            {% if item.product.has_discount %}
                                                <span class="original-price">{{ item.product.price|floatformat:0 }} تومان</span>
                                                <span class="discounted-price">{{ item.get_unit_price|floatformat:0 }} تومان</span>
                                            {% else %}
                                                <span>{{ item.get_unit_price|floatformat:0 }} تومان</span>
                                            {% endif %}
                                        </div>
                                    </td>
                                    <td>
                                        <div class="quantity-control">
                                            <form method="post" action="{% url 'cart:update_cart' item.id %}">
                                                {% csrf_token %}
                                                <input type="hidden" name="action" value="decrease">
                                                <button type="submit" class="btn btn-sm btn-outline-secondary quantity-btn">-</button>
                                            </form>
                                            <span class="quantity-input">{{ item.quantity }}</span>
                                            <form method="post" action="{% url 'cart:update_cart' item.id %}">
                                                {% csrf_token %}
                                                <input type="hidden" name="action" value="increase">
                                                <button type="submit" class="btn btn-sm btn-outline-secondary quantity-btn">+</button>
                                            </form>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="price-info">
                                            {% if item.get_product_discount_amount > 0 %}
                                                <span class="original-price">{{ item.get_original_total_price|floatformat:0 }} تومان</span>
                                                <span class="discounted-price">{{ item.get_total_price|floatformat:0 }} تومان</span>
                                                {% if item.get_coupon_discount_amount > 0 %}
                                                    <span class="savings-highlight">نهایی: {{ item.get_final_price|floatformat:0 }} تومان</span>
                                                {% endif %}
                                            {% else %}
                                                {% if item.get_coupon_discount_amount > 0 %}
                                                    <span class="original-price">{{ item.get_total_price|floatformat:0 }} تومان</span>
                                                    <span class="discounted-price">{{ item.get_final_price|floatformat:0 }} تومان</span>
                                                {% else %}
                                                    <span>{{ item.get_final_price|floatformat:0 }} تومان</span>
                                                {% endif %}
                                            {% endif %}
                                        </div>
                                    </td>
                                    <td>
                                        <form method="post" action="{% url 'cart:remove_from_cart' item.id %}">
                                            {% csrf_token %}
                                            <button type="submit" class="btn btn-sm btn-danger">
                                                <i class="fas fa-trash-alt"></i>
                                            </button>
                                        </form>
                                    </td>
                                </tr>
                                {% endfor %}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <!-- خلاصه سبد خرید -->
        <div class="col-lg-4">
            <div class="card cart-summary">
                <div class="card-body">
                    <h5 class="card-title mb-4">خلاصه سبد خرید</h5>

                    <div class="summary-row">
                        <span>تعداد کل:</span>
                        <span>{{ cart_total.total_items }} عدد</span>
                    </div>

                    <div class="summary-row">
                        <span>قیمت اصلی کالاها:</span>
                        <span>{{ cart_total.original_subtotal|floatformat:0 }} تومان</span>
                    </div>

                    {% if cart_total.product_discount > 0 %}
                    <div class="summary-row discount-row">
                        <span>تخفیف محصولات:</span>
                        <span>-{{ cart_total.product_discount|floatformat:0 }} تومان</span>
                    </div>
                    {% endif %}

                    <div class="summary-row">
                        <span>مجموع قیمت (با تخفیف محصولات):</span>
                        <span>{{ cart_total.subtotal|floatformat:0 }} تومان</span>
                    </div>

                    {% if cart_total.coupon_discount > 0 %}
                    <div class="summary-row discount-row">
                        <span>تخفیف کوپن:</span>
                        <span>-{{ cart_total.coupon_discount|floatformat:0 }} تومان</span>
                    </div>
                    {% endif %}

                    <div class="summary-row">
                        <span>هزینه ارسال:</span>
                        {% if cart_total.shipping_cost > 0 %}
                        <span>{{ cart_total.shipping_cost|floatformat:0 }} تومان</span>
                        {% else %}
                        <span class="text-success">رایگان</span>
                        {% endif %}
                    </div>

                    {% if cart_total.total_savings > 0 %}
                    <div class="summary-row savings-row">
                        <span>مجموع صرفه‌جویی شما:</span>
                        <span>{{ cart_total.total_savings|floatformat:0 }} تومان</span>
                    </div>
                    {% endif %}

                    <div class="summary-row summary-total">
                        <span>مبلغ قابل پرداخت:</span>
                        <span>{{ cart_total.total|floatformat:0 }} تومان</span>
                    </div>

                    <!-- فرم کد تخفیف -->
                    <form method="post" action="{% url 'cart:apply_coupon' %}" class="mt-3">
                        {% csrf_token %}
                        <div class="input-group mb-3">
                            <input type="text" name="code" class="form-control" placeholder="کد تخفیف">
                            <button class="btn btn-outline-secondary" type="submit">اعمال</button>
                        </div>
                    </form>

                    <!-- نمایش پیام‌های موفقیت یا خطا -->
                    {% if messages %}
                        {% for message in messages %}
                            <div class="alert alert-{{ message.tags }} alert-dismissible fade show" role="alert">
                                {{ message }}
                                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                            </div>
                        {% endfor %}
                    {% endif %}

                    <!-- دکمه‌های عملیات -->
                    <div class="d-grid gap-2 mt-3">
                        <a href="#" class="btn btn-primary">ادامه فرایند خرید</a>

                        <form method="post" action="{% url 'cart:clear_cart' %}">
                            {% csrf_token %}
                            <button type="submit" class="btn btn-outline-danger w-100"
                                    onclick="return confirm('آیا از خالی کردن سبد خرید اطمینان دارید؟')">
                                خالی کردن سبد خرید
                            </button>
                        </form>
                    </div>

                    <!-- نمایش اطلاعات اضافی -->
                    {% if cart_total.shipping_cost == 0 and cart_total.subtotal > 0 %}
                    <div class="alert alert-success mt-3" role="alert">
                        <i class="fas fa-truck"></i>
                        ارسال رایگان برای خرید بالای 300,000 تومان
                    </div>
                    {% elif cart_total.free_shipping_remaining > 0 %}
                    <div class="alert alert-info mt-3" role="alert">
                        <i class="fas fa-info-circle"></i>
                        با خرید {{ cart_total.free_shipping_remaining|floatformat:0 }} تومان بیشتر، ارسال رایگان خواهد بود!
                    </div>
                    {% endif %}
                </div>
            </div>
        </div>
    </div>
    {% else %}
    <!-- سبد خرید خالی -->
    <div class="empty-cart">
        <i class="fas fa-shopping-cart"></i>
        <h3>سبد خرید شما خالی است</h3>
        <p>محصولات مورد نظر خود را به سبد خرید اضافه کنید.</p>
        <a href="{% url 'products:list' %}" class="btn btn-primary mt-3">مشاهده محصولات</a>
    </div>
    {% endif %}
</div>
{% endblock %}

====== FILE: templates/pages/home.html ======

{% extends "base/base.html" %}
{% load static %}

{% block title %}صفحه اصلی - فروشگاه زیما{% endblock %}
{% block extra_css %}
<style>
    /* تنظیمات اصلی اسلایدر */
    #mainSlider .carousel-item {
        height: 500px;
        position: relative;
        overflow: hidden;
    }

    /* پس‌زمینه تار */
    .carousel-background {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-size: cover;
        background-position: center;
        filter: blur(15px) brightness(0.6);
        transform: scale(1.1); /* برای جلوگیری از لبه‌های سفید در هنگام تار کردن */
        z-index: 1;
    }

    /* تصویر اصلی */
    #mainSlider .carousel-item img {
        position: relative;
        width: 100%;
        height: 100%;
        object-fit: contain;
        z-index: 2;
    }

    /* متن اسلایدر */
    #mainSlider .carousel-caption {
        position: absolute;
        bottom: 20%;
        left: 10%;
        right: 10%;
        z-index: 3;
        background-color: rgba(0, 0, 0, 0.5);
        padding: 20px;
        border-radius: 10px;
    }

    /* کنترل‌های اسلایدر */
    #mainSlider .carousel-control-prev,
    #mainSlider .carousel-control-next,
    #mainSlider .carousel-indicators {
        z-index: 4;
    }

    /* تنظیمات برای نمایش بهتر در موبایل */
    @media (max-width: 768px) {
        #mainSlider .carousel-item {
            height: 300px;
        }
    }

    /* استایل برای بخش دسته‌بندی‌ها */
    .category-section {
        margin: 30px 0;
    }

    .category-card-link {
        display: block;
        text-decoration: none;
        color: #333;
        transition: all 0.3s ease;
    }

    .category-card {
        background-color: #ffffff;
        border: 1px solid rgba(0, 0, 0, 0.08);
        border-radius: 8px;
        padding: 20px;
        text-align: center;
        height: 100%;
        transition: all 0.3s ease;
        position: relative;
        overflow: visible;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.03);
    }

    .category-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.08);
        border-color: rgba(0, 0, 0, 0.12);
    }

    .category-icon {
        margin: -40px auto 15px;
        width: 100px;
        height: 100px;
        position: relative;
    }

    .category-icon img {
        width: 120%;
        height: 120%;
        object-fit: contain;
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }

    .category-info {
        margin-top: 10px;
    }

    .category-title {
        font-size: 1.5rem;
        font-weight: 600;
        margin-bottom: 5px;
        color: #333;
    }

    .category-subtitle {
        font-size: 0.9rem;
        color: #777;
        margin-bottom: 0;
    }

    /* تنظیمات رنگ برای هر دسته‌بندی */
    .category-section .col-md-3:nth-child(1) .category-icon img {
        color: #1E88E5;
    }

    .category-section .col-md-3:nth-child(2) .category-icon img {
        color: #E91E63;
    }

    .category-section .col-md-3:nth-child(3) .category-icon img {
        color: #4CAF50;
    }

    .category-section .col-md-3:nth-child(4) .category-icon img {
        color: #FF9800;
    }

    /* تنظیمات برای نمایش در موبایل */
    @media (max-width: 767px) {
        .category-icon {
            width: 80px;
            height: 80px;
            margin-top: -30px;
        }

        .category-title {
            font-size: 1.2rem;
        }

        .category-subtitle {
            font-size: 0.8rem;
        }
    }
</style>
{% endblock %}
{% block content %}
<div class="row">
    <div class="col-12">
        <div id="mainSlider" class="carousel slide" data-bs-ride="carousel" data-bs-interval="5000">
            <div class="carousel-indicators">
                {% for slider in sliders %}
                <button type="button" data-bs-target="#mainSlider" data-bs-slide-to="{{ forloop.counter0 }}" {% if forloop.first %}class="active" aria-current="true"{% endif %} aria-label="Slide {{ forloop.counter }}"></button>
                {% endfor %}
            </div>
            <div class="carousel-inner">
                {% for slider in sliders %}
                <div class="carousel-item {% if forloop.first %}active{% endif %}">
                    <!-- پس‌زمینه تار -->
                    <div class="carousel-background" style="background-image: url('{{ slider.image.url }}');"></div>
                    {% if slider.link %}
                    <a href="{{ slider.link }}">
                        <!-- تصویر اصلی -->
                        <img src="{{ slider.image.url }}" class="d-block" alt="{{ slider.title }}">
                        <div class="carousel-caption d-none d-md-block">
                            <h2>{{ slider.title }}</h2>
                            <p>{{ slider.subtitle }}</p>
                            <span class="btn btn-light">مشاهده</span>
                        </div>
                    </a>
                    {% else %}
                    <!-- تصویر اصلی -->
                    <img src="{{ slider.image.url }}" class="d-block" alt="{{ slider.title }}">
                    <div class="carousel-caption d-none d-md-block">
                        <h2>{{ slider.title }}</h2>
                        <p>{{ slider.subtitle }}</p>
                    </div>
                    {% endif %}
                </div>
                {% empty %}
                <div class="carousel-item active">
                    <div class="bg-secondary text-white p-5 text-center" style="height: 500px;">
                        <h2>اسلاید نمونه</h2>
                        <p>هنوز اسلایدی تعریف نشده است</p>
                    </div>
                </div>
                {% endfor %}
            </div>
            <button class="carousel-control-prev" type="button" data-bs-target="#mainSlider" data-bs-slide="prev">
                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                <span class="visually-hidden">قبلی</span>
            </button>
            <button class="carousel-control-next" type="button" data-bs-target="#mainSlider" data-bs-slide="next">
                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                <span class="visually-hidden">بعدی</span>
            </button>
        </div>
    </div>
</div>

<!-- چهار دسته‌بندی اصلی -->
<div class="container my-5">
    <div class="row category-section">
        <div class="col-md-3 col-6 mb-4">
            <a href="{% url 'products:category' 'mens-clothing' %}" class="category-card-link">
                <div class="category-card">
                    <div class="category-icon">
                        <img src="{% static 'images/categories/men.svg' %}" alt="مردانه">
                    </div>
                    <div class="category-info">
                        <h3 class="category-title">مردانه</h3>
                        <p class="category-subtitle">Men's Fashion</p>
                    </div>
                </div>
            </a>
        </div>
        <div class="col-md-3 col-6 mb-4">
            <a href="{% url 'products:category' 'womens-clothing' %}" class="category-card-link">
                <div class="category-card">
                    <div class="category-icon">
                        <img src="{% static 'images/categories/women.svg' %}" alt="زنانه">
                    </div>
                    <div class="category-info">
                        <h3 class="category-title">زنانه</h3>
                        <p class="category-subtitle">Women's Fashion</p>
                    </div>
                </div>
            </a>
        </div>
        <div class="col-md-3 col-6 mb-4">
            <a href="{% url 'products:category' 'boys-clothing' %}" class="category-card-link">
                <div class="category-card">
                    <div class="category-icon">
                        <img src="{% static 'images/categories/boy.svg' %}" alt="پسرانه">
                    </div>
                    <div class="category-info">
                        <h3 class="category-title">پسرانه</h3>
                        <p class="category-subtitle">Boys' Fashion</p>
                    </div>
                </div>
            </a>
        </div>
        <div class="col-md-3 col-6 mb-4">
            <a href="{% url 'products:category' 'girls-clothing' %}" class="category-card-link">
                <div class="category-card">
                    <div class="category-icon">
                        <img src="{% static 'images/categories/girl.svg' %}" alt="دخترانه">
                    </div>
                    <div class="category-info">
                        <h3 class="category-title">دخترانه</h3>
                        <p class="category-subtitle">Girls' Fashion</p>
                    </div>
                </div>
            </a>
        </div>
    </div>
</div>

{% if top_banners %}
<div class="row mt-4">
    {% for banner in top_banners %}
    <div class="col-md-{% if top_banners.count == 1 %}12{% elif top_banners.count == 2 %}6{% elif top_banners.count == 3 %}4{% else %}3{% endif %} mb-3">
        {% if banner.url %}
        <a href="{{ banner.url }}" class="d-block">
            <img src="{{ banner.image.url }}" alt="{{ banner.title }}" class="img-fluid rounded">
        </a>
        {% else %}
        <img src="{{ banner.image.url }}" alt="{{ banner.title }}" class="img-fluid rounded">
        {% endif %}
    </div>
    {% endfor %}
</div>
{% endif %}

<h2 class="my-4">محصولات ویژه</h2>
<div class="row">
    {% for product in featured_products %}
    <div class="col-md-3 mb-4">
        <div class="card h-100">
            {% with image=product.get_main_image %}
            {% if image %}
            <img src="{{ image.image.url }}" class="card-img-top" alt="{{ image.alt_text }}" style="height: 200px; object-fit: cover;">
            {% else %}
            <div class="bg-secondary text-white p-4 text-center">بدون تصویر</div>
            {% endif %}
            {% endwith %}
            <div class="card-body d-flex flex-column">
                <h5 class="card-title">{{ product.name }}</h5>
                <p class="card-text flex-grow-1">{{ product.short_description|default:product.description|truncatechars:80 }}</p>
                <div class="d-flex justify-content-between align-items-center mt-auto">
                    {% if product.has_discount %}
                    <div>
                        <span class="text-muted text-decoration-line-through">{{ product.price|floatformat:0 }}</span>
                        <span class="text-danger fw-bold">{{ product.get_discount_price|floatformat:0 }} تومان</span>
                    </div>
                    {% else %}
                    <span class="text-danger fw-bold">{{ product.price|floatformat:0 }} تومان</span>
                    {% endif %}
                    <a href="{{ product.get_absolute_url }}" class="btn btn-primary btn-sm">مشاهده محصول</a>
                </div>
            </div>
        </div>
    </div>
    {% empty %}
    <div class="col-12">
        <div class="alert alert-info">
            هنوز محصول ویژه‌ای ثبت نشده است.
        </div>
    </div>
    {% endfor %}
</div>

{% if middle_banners %}
<div class="row my-4">
    {% for banner in middle_banners %}
    <div class="col-md-{% if middle_banners.count == 1 %}12{% elif middle_banners.count == 2 %}6{% elif middle_banners.count == 3 %}4{% else %}3{% endif %} mb-3">
        <a href="{{ banner.url }}" class="d-block">
            <img src="{{ banner.image.url }}" alt="{{ banner.title }}" class="img-fluid rounded">
        </a>
    </div>
    {% endfor %}
</div>
{% endif %}

<h2 class="my-4">جدیدترین محصولات</h2>
<div class="row">
    {% for product in new_products %}
    <div class="col-md-3 mb-4">
        <div class="card h-100">
            {% with image=product.get_main_image %}
            {% if image %}
            <img src="{{ image.image.url }}" class="card-img-top" alt="{{ image.alt_text }}" style="height: 200px; object-fit: cover;">
            {% else %}
            <div class="bg-secondary text-white p-4 text-center">بدون تصویر</div>
            {% endif %}
            {% endwith %}
            <div class="card-body d-flex flex-column">
                <h5 class="card-title">{{ product.name }}</h5>
                <p class="card-text flex-grow-1">{{ product.short_description|default:product.description|truncatechars:80 }}</p>
                <div class="d-flex justify-content-between align-items-center mt-auto">
                    {% if product.has_discount %}
                    <div>
                        <span class="text-muted text-decoration-line-through">{{ product.price|floatformat:0 }}</span>
                        <span class="text-danger fw-bold">{{ product.get_discount_price|floatformat:0 }} تومان</span>
                    </div>
                    {% else %}
                    <span class="text-danger fw-bold">{{ product.price|floatformat:0 }} تومان</span>
                    {% endif %}
                    <a href="{{ product.get_absolute_url }}" class="btn btn-primary btn-sm">مشاهده محصول</a>
                </div>
            </div>
        </div>
    </div>
    {% empty %}
    <div class="col-12">
        <div class="alert alert-info">
            هنوز محصولی ثبت نشده است.
        </div>
    </div>
    {% endfor %}
</div>

{% if bottom_banners %}
<div class="row mt-4">
    {% for banner in bottom_banners %}
    <div class="col-md-{% if bottom_banners.count == 1 %}12{% elif bottom_banners.count == 2 %}6{% elif bottom_banners.count == 3 %}4{% else %}3{% endif %} mb-3">
        <a href="{{ banner.url }}" class="d-block">
            <img src="{{ banner.image.url }}" alt="{{ banner.title }}" class="img-fluid rounded">
        </a>
    </div>
    {% endfor %}
</div>
{% endif %}
{% endblock %}

{% block extra_js %}
<script>
    // فعال کردن اسلایدر با تنظیمات سفارشی
    document.addEventListener('DOMContentLoaded', function() {
        var myCarousel = document.getElementById('mainSlider');
        var carousel = new bootstrap.Carousel(myCarousel, {
            interval: 5000,  // زمان تغییر اسلاید (5 ثانیه)
            wrap: true,      // چرخش مجدد پس از آخرین اسلاید
            touch: true,     // پشتیبانی از لمس برای موبایل
            keyboard: true   // پشتیبانی از کلیدهای جهت‌دار
        });
    });
</script>
    {% if sidebar_banners %}
<div class="row mt-4">
    <div class="col-12">
        <h3>بنرهای جانبی</h3>
    </div>
    {% for banner in sidebar_banners %}
    <div class="col-md-4 mb-3">
        {% if banner.url %}
        <a href="{{ banner.url }}" class="d-block">
            <img src="{{ banner.image.url }}" alt="{{ banner.title }}" class="img-fluid rounded">
            {% if banner.title %}
            <div class="text-center mt-2">
                <h5>{{ banner.title }}</h5>
                {% if banner.subtitle %}
                <p class="text-muted">{{ banner.subtitle }}</p>
                {% endif %}
            </div>
            {% endif %}
        </a>
        {% else %}
        <img src="{{ banner.image.url }}" alt="{{ banner.title }}" class="img-fluid rounded">
        {% if banner.title %}
        <div class="text-center mt-2">
            <h5>{{ banner.title }}</h5>
            {% if banner.subtitle %}
            <p class="text-muted">{{ banner.subtitle }}</p>
            {% endif %}
        </div>
        {% endif %}
        {% endif %}
    </div>
    {% endfor %}
</div>
{% endif %}
{% endblock %}

====== FILE: templates/users/profile.html ======

{% extends 'base/base.html' %}
{% load static %}

{% block title %}پروفایل کاربری | زیما{% endblock %}

{% block content %}
    <div class="row">
        <!-- منوی کناری -->
        <div class="col-lg-3 mb-4">
            <div class="list-group">
                <a href="{% url 'users:profile' %}" class="list-group-item list-group-item-action active">
                    <i class="fas fa-user me-2"></i> اطلاعات حساب کاربری
                </a>
                <a href="{% url 'users:addresses' %}" class="list-group-item list-group-item-action">
                    <i class="fas fa-map-marker-alt me-2"></i> آدرس‌ها
                </a>
                <a href="{% url 'orders:list' %}" class="list-group-item list-group-item-action">
                    <i class="fas fa-shopping-bag me-2"></i> سفارش‌ها
                </a>
                <a href="{% url 'users:change_password' %}" class="list-group-item list-group-item-action">
                    <i class="fas fa-key me-2"></i> تغییر رمز عبور
                </a>
                <a href="{% url 'users:logout' %}" class="list-group-item list-group-item-action text-danger">
                    <i class="fas fa-sign-out-alt me-2"></i> خروج از حساب کاربری
                </a>
            </div>
        </div>
        
        <!-- محتوای اصلی -->
        <div class="col-lg-9">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">اطلاعات حساب کاربری</h5>
                </div>
                <div class="card-body">
                    {% if messages %}
                        {% for message in messages %}
                            <div class="alert alert-{{ message.tags }}">{{ message }}</div>
                        {% endfor %}
                    {% endif %}
                    
                    <form method="post" action="{% url 'users:profile' %}">
                        {% csrf_token %}
                        
                        <div class="mb-3">
                            <label for="id_username" class="form-label">نام کاربری</label>
                            <input type="text" id="id_username" class="form-control" value="{{ user.username }}" readonly>
                            <div class="form-text">نام کاربری قابل تغییر نیست.</div>
                        </div>
                        
                        <div class="mb-3">
                            <label for="id_email" class="form-label">ایمیل</label>
                            <input type="email" name="email" id="id_email" class="form-control {% if form.email.errors %}is-invalid{% endif %}" value="{{ user.email|default:'' }}">
                            {% if form.email.errors %}
                                <div class="invalid-feedback">
                                    {% for error in form.email.errors %}
                                        {{ error }}
                                    {% endfor %}
                                </div>
                            {% endif %}
                        </div>
                        
                        <div class="mb-3">
                            <label for="id_phone_number" class="form-label">شماره موبایل</label>
                            <input type="text" name="phone_number" id="id_phone_number" class="form-control {% if form.phone_number.errors %}is-invalid{% endif %}" value="{{ user.phone_number|default:'' }}">
                            {% if form.phone_number.errors %}
                                <div class="invalid-feedback">
                                    {% for error in form.phone_number.errors %}
                                        {{ error }}
                                    {% endfor %}
                                </div>
                            {% endif %}
                        </div>
                        
                        <button type="submit" class="btn btn-primary">ذخیره تغییرات</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

====== FILE: templates/users/login.html ======

{% extends 'base/base.html' %}
{% load static %}

{% block title %}ورود به حساب کاربری | زیما{% endblock %}

{% block content %}
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white text-center py-3">
                    <h4 class="mb-0">ورود به حساب کاربری</h4>
                </div>
                <div class="card-body p-4">
                    <form method="post" action="{% url 'users:login' %}">
                        {% csrf_token %}

                        {% if form.non_field_errors %}
                            <div class="alert alert-danger">
                                {% for error in form.non_field_errors %}
                                    {{ error }}
                                {% endfor %}
                            </div>
                        {% endif %}

                        <div class="mb-3">
                            <label for="id_username" class="form-label">نام کاربری، ایمیل یا شماره موبایل</label>
                            <input type="text" name="username" id="id_username" class="form-control {% if form.username.errors %}is-invalid{% endif %}" required>
                            {% if form.username.errors %}
                                <div class="invalid-feedback">
                                    {% for error in form.username.errors %}
                                        {{ error }}
                                    {% endfor %}
                                </div>
                            {% endif %}
                        </div>

                        <div class="mb-3">
                            <label for="id_password" class="form-label">رمز عبور</label>
                            <input type="password" name="password" id="id_password" class="form-control {% if form.password.errors %}is-invalid{% endif %}" required>
                            {% if form.password.errors %}
                                <div class="invalid-feedback">
                                    {% for error in form.password.errors %}
                                        {{ error }}
                                    {% endfor %}
                                </div>
                            {% endif %}
                        </div>

                        <div class="mb-3 form-check">
                            <input type="checkbox" name="remember" id="id_remember" class="form-check-input">
                            <label for="id_remember" class="form-check-label">مرا به خاطر بسپار</label>
                        </div>

                        {% if next %}
                            <input type="hidden" name="next" value="{{ next }}">
                        {% endif %}

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary">ورود</button>
                        </div>
                    </form>

                    <div class="mt-3 text-center">
                          <a href="{% url 'users:password_reset' %}" class="text-decoration-none">رمز عبور خود را فراموش کرده‌اید؟</a>
                    </div>

                    <hr>

                    <div class="text-center">
                        <p>حساب کاربری ندارید؟</p>
                        <a href="{% url 'users:signup' %}" class="btn btn-outline-primary">ثبت‌نام</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

====== FILE: templates/users/addresses.html ======

{% extends 'base/base.html' %}
{% load static %}

{% block title %}آدرس‌های من | زیما{% endblock %}

{% block content %}
    <div class="row">
        <!-- منوی کناری -->
        <div class="col-lg-3 mb-4">
            <div class="list-group">
                <a href="{% url 'users:profile' %}" class="list-group-item list-group-item-action">
                    <i class="fas fa-user me-2"></i> اطلاعات حساب کاربری
                </a>
                <a href="{% url 'users:addresses' %}" class="list-group-item list-group-item-action active">
                    <i class="fas fa-map-marker-alt me-2"></i> آدرس‌ها
                </a>
                <a href="{% url 'orders:list' %}" class="list-group-item list-group-item-action">
                    <i class="fas fa-shopping-bag me-2"></i> سفارش‌ها
                </a>
                <a href="{% url 'users:change_password' %}" class="list-group-item list-group-item-action">
                    <i class="fas fa-key me-2"></i> تغییر رمز عبور
                </a>
                <a href="{% url 'users:logout' %}" class="list-group-item list-group-item-action text-danger">
                    <i class="fas fa-sign-out-alt me-2"></i> خروج از حساب کاربری
                </a>
            </div>
        </div>

        <!-- محتوای اصلی -->
        <div class="col-lg-9">
            <div class="card">
                <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">آدرس‌های من</h5>
                    <button type="button" class="btn btn-light btn-sm" data-bs-toggle="modal" data-bs-target="#addAddressModal">
                        <i class="fas fa-plus me-1"></i> افزودن آدرس جدید
                    </button>
                </div>
                <div class="card-body">
                    {% if messages %}
                        {% for message in messages %}
                            <div class="alert alert-{{ message.tags }}">{{ message }}</div>
                        {% endfor %}
                    {% endif %}

                    <div class="row">
                        {% for address in addresses %}
                            <div class="col-md-6 mb-3">
                                <div class="card h-100">
                                    <div class="card-body">
                                        <h6 class="card-title">آدرس {{ forloop.counter }}</h6>
                                        <p class="card-text">{{ address.full_address }}</p>
                                        <p class="card-text">کد پستی: {{ address.postal_code }}</p>
                                    </div>
                                    <div class="card-footer bg-white d-flex justify-content-between">
                                        <button type="button" class="btn btn-sm btn-outline-primary"
                                                data-bs-toggle="modal"
                                                data-bs-target="#editAddressModal{{ address.id }}">
                                            <i class="fas fa-edit"></i> ویرایش
                                        </button>
                                        <button type="button" class="btn btn-sm btn-outline-danger"
                                                data-bs-toggle="modal"
                                                data-bs-target="#deleteAddressModal{{ address.id }}">
                                            <i class="fas fa-trash-alt"></i> حذف
                                        </button>
                                    </div>
                                </div>
                            </div>

                            <!-- مودال ویرایش آدرس -->
                            <div class="modal fade" id="editAddressModal{{ address.id }}" tabindex="-1" aria-hidden="true">
                                <div class="modal-dialog">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title">ویرایش آدرس</h5>
                                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                        </div>
                                        <form method="post" action="{% url 'users:edit_address' address.id %}">
                                            {% csrf_token %}
                                            <div class="modal-body">
                                                <div class="mb-3">
                                                    <label for="full_address{{ address.id }}" class="form-label">آدرس کامل</label>
                                                    <textarea name="full_address" id="full_address{{ address.id }}" rows="3" class="form-control" required>{{ address.full_address }}</textarea>
                                                </div>
                                                <div class="mb-3">
                                                    <label for="postal_code{{ address.id }}" class="form-label">کد پستی</label>
                                                    <input type="text" name="postal_code" id="postal_code{{ address.id }}" class="form-control" value="{{ address.postal_code }}" required>
                                                </div>
                                            </div>
                                            <div class="modal-footer">
                                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">انصراف</button>
                                                <button type="submit" class="btn btn-primary">ذخیره تغییرات</button>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>

                            <!-- مودال حذف آدرس -->
                            <div class="modal fade" id="deleteAddressModal{{ address.id }}" tabindex="-1" aria-hidden="true">
                                <div class="modal-dialog">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title">حذف آدرس</h5>
                                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                        </div>
                                        <div class="modal-body">
                                            <p>آیا از حذف این آدرس اطمینان دارید؟</p>
                                            <p class="text-muted">{{ address.full_address }}</p>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">انصراف</button>
                                            <form method="post" action="{% url 'users:delete_address' address.id %}">
                                                {% csrf_token %}
                                                <button type="submit" class="btn btn-danger">حذف</button>
                                            </form>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        {% empty %}
                            <div class="col-12">
                                <div class="alert alert-info">شما هنوز آدرسی ثبت نکرده‌اید.</div>
                            </div>
                        {% endfor %}
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- مودال افزودن آدرس جدید -->
    <div class="modal fade" id="addAddressModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">افزودن آدرس جدید</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form method="post" action="{% url 'users:add_address' %}">
                    {% csrf_token %}
                    <div class="modal-body">
                        <div class="mb-3">
                            <label for="full_address_new" class="form-label">آدرس کامل</label>
                            <textarea name="full_address" id="full_address_new" rows="3" class="form-control" required></textarea>
                        </div>
                        <div class="mb-3">
                            <label for="postal_code_new" class="form-label">کد پستی</label>
                            <input type="text" name="postal_code" id="postal_code_new" class="form-control" required>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">انصراف</button>
                        <button type="submit" class="btn btn-primary">افزودن آدرس</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
{% endblock %}

====== FILE: templates/users/signup.html ======

{% extends 'base/base.html' %}
{% load static %}

{% block title %}ثبت نام | زیما{% endblock %}

{% block content %}
<div class="container my-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white text-center py-3">
                    <h4 class="mb-0">ثبت نام در زیما</h4>
                </div>
                <div class="card-body p-4">
                    {% if messages %}
                        {% for message in messages %}
                            <div class="alert alert-{{ message.tags }}">
                                {{ message }}
                            </div>
                        {% endfor %}
                    {% endif %}

                    <form method="post" action="{% url 'users:signup' %}">
                        {% csrf_token %}

                        <div class="mb-3">
                            <label for="id_username" class="form-label">نام کاربری</label>
                            <input type="text" name="username" id="id_username" class="form-control {% if form.username.errors %}is-invalid{% endif %}" value="{{ form.username.value|default:'' }}" required>
                            {% if form.username.errors %}
                                <div class="invalid-feedback">
                                    {% for error in form.username.errors %}
                                        {{ error }}
                                    {% endfor %}
                                </div>
                            {% endif %}
                        </div>

                        <div class="mb-3">
                            <label for="id_email" class="form-label">ایمیل</label>
                            <input type="email" name="email" id="id_email" class="form-control {% if form.email.errors %}is-invalid{% endif %}" value="{{ form.email.value|default:'' }}" required>
                            {% if form.email.errors %}
                                <div class="invalid-feedback">
                                    {% for error in form.email.errors %}
                                        {{ error }}
                                    {% endfor %}
                                </div>
                            {% endif %}
                        </div>

                        <div class="mb-3">
                            <label for="id_phone_number" class="form-label">شماره موبایل</label>
                            <input type="text" name="phone_number" id="id_phone_number" class="form-control {% if form.phone_number.errors %}is-invalid{% endif %}" value="{{ form.phone_number.value|default:'' }}" required>
                            {% if form.phone_number.errors %}
                                <div class="invalid-feedback">
                                    {% for error in form.phone_number.errors %}
                                        {{ error }}
                                    {% endfor %}
                                </div>
                            {% endif %}
                        </div>

                        <!-- تغییر نام فیلد از password به password1 -->
                        <div class="mb-3">
                            <label for="id_password1" class="form-label">رمز عبور</label>
                            <input type="password" name="password1" id="id_password1" class="form-control {% if form.password1.errors %}is-invalid{% endif %}" required>
                            {% if form.password1.errors %}
                                <div class="invalid-feedback">
                                    {% for error in form.password1.errors %}
                                        {{ error }}
                                    {% endfor %}
                                </div>
                            {% endif %}
                        </div>

                        <!-- اطمینان از نام صحیح فیلد password2 -->
                        <div class="mb-3">
                            <label for="id_password2" class="form-label">تکرار رمز عبور</label>
                            <input type="password" name="password2" id="id_password2" class="form-control {% if form.password2.errors %}is-invalid{% endif %}" required>
                            {% if form.password2.errors %}
                                <div class="invalid-feedback">
                                    {% for error in form.password2.errors %}
                                        {{ error }}
                                    {% endfor %}
                                </div>
                            {% endif %}
                        </div>

                        <div class="mb-3 form-check">
                            <input type="checkbox" name="terms" id="id_terms" class="form-check-input" required>
                            <label for="id_terms" class="form-check-label">قوانین و مقررات را می‌پذیرم</label>
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary">ثبت نام</button>
                        </div>
                    </form>
                </div>
                <div class="card-footer text-center">
                    <p class="mb-0">قبلاً ثبت نام کرده‌اید؟ <a href="{% url 'users:login' %}">ورود</a></p>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

====== FILE: templates/users/change_password.html ======

{% extends 'base/base.html' %}
{% load static %}

{% block title %}تغییر رمز عبور | زیما{% endblock %}

{% block content %}
<div class="container my-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white text-center py-3">
                    <h4 class="mb-0">تغییر رمز عبور</h4>
                </div>
                <div class="card-body p-4">
                    {% if messages %}
                        {% for message in messages %}
                            <div class="alert alert-{{ message.tags }}">
                                {{ message }}
                            </div>
                        {% endfor %}
                    {% endif %}

                    <form method="post" action="{% url 'users:change_password' %}">
                        {% csrf_token %}

                        <div class="mb-3">
                            <label for="id_current_password" class="form-label">رمز عبور فعلی</label>
                            <input type="password" name="current_password" id="id_current_password" class="form-control" required>
                        </div>

                        <div class="mb-3">
                            <label for="id_new_password" class="form-label">رمز عبور جدید</label>
                            <input type="password" name="new_password" id="id_new_password" class="form-control" required>
                            <small class="form-text text-muted">
                                رمز عبور باید حداقل ۸ کاراکتر باشد و شامل حروف و اعداد باشد.
                            </small>
                        </div>

                        <div class="mb-3">
                            <label for="id_confirm_password" class="form-label">تکرار رمز عبور جدید</label>
                            <input type="password" name="confirm_password" id="id_confirm_password" class="form-control" required>
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary">تغییر رمز عبور</button>
                        </div>
                    </form>
                </div>
                <div class="card-footer text-center">
                    <a href="{% url 'users:profile' %}" class="btn btn-outline-secondary">بازگشت به پروفایل</a>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

====== FILE: templates/products/search_results.html ======

<!-- products/templates/products/search_results.html -->
{% extends 'base/base.html' %}
{% load static %}

{% block title %}نتایج جستجو برای: {{ query }} | زیما{% endblock %}

{% block content %}
<div class="container my-4">
    <h1 class="mb-4">نتایج جستجو برای: "{{ query }}"</h1>

    {% if products %}
        <div class="row">
            {% for product in products %}
                <div class="col-md-4 mb-4">
                    <div class="card h-100 product-card">
                        {% with image=product.get_main_image %}
                        {% if image %}
                        <img src="{{ image.image.url }}" class="card-img-top" alt="{{ product.name }}" style="height: 200px; object-fit: cover;">
                        {% else %}
                        <div class="bg-secondary text-white p-4 text-center" style="height: 200px;">بدون تصویر</div>
                        {% endif %}
                        {% endwith %}
                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title">{{ product.name }}</h5>
                            <p class="card-text text-muted small">{{ product.brand }}</p>
                            <p class="card-text flex-grow-1">{{ product.short_description|default:product.description|truncatechars:80 }}</p>
                            <div class="d-flex justify-content-between align-items-center mt-auto">
                                {% if product.has_discount %}
                                <div>
                                    <span class="text-muted text-decoration-line-through">{{ product.price|floatformat:0 }}</span>
                                    <span class="text-danger fw-bold">{{ product.get_discount_price|floatformat:0 }} تومان</span>
                                </div>
                                {% else %}
                                <span class="text-danger fw-bold">{{ product.price|floatformat:0 }} تومان</span>
                                {% endif %}
                                <a href="{{ product.get_absolute_url }}" class="btn btn-primary btn-sm">مشاهده محصول</a>
                            </div>
                        </div>
                    </div>
                </div>
            {% endfor %}
        </div>
    {% else %}
        <div class="alert alert-info">
            محصولی با عبارت "{{ query }}" یافت نشد.
        </div>
    {% endif %}
</div>
{% endblock %}

====== FILE: templates/products/category_detail.html ======

{% extends "base/base.html" %}
{% load static %}
{% load product_filters %}

{% block title %}{{ category.name }} - فروشگاه زیما{% endblock %}

{% block extra_css %}
<style>
    /* استایل برای فیلترها */
    .filter-section {
        margin-bottom: 20px;
    }
    
    .filter-section h5 {
        margin-bottom: 10px;
    }
    
    .filter-select {
        width: 100%;
        margin-bottom: 10px;
    }

    .color-swatch {
        display: inline-block;
        width: 15px;
        height: 15px;
        border-radius: 50%;
        margin-right: 5px;
        vertical-align: middle;
    }

    /* استایل برای کارت محصول */
    .product-card {
        transition: transform 0.3s;
    }

    .product-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

    .filter-badge {
        margin-right: 5px;
        margin-bottom: 5px;
    }

    .active-filters {
        margin-bottom: 15px;
    }
</style>
{% endblock %}

{% block content %}
<nav aria-label="breadcrumb" class="mt-3">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/">صفحه اصلی</a></li>
        {% if category.parent %}
        <li class="breadcrumb-item">
            <a href="{% url 'products:category' category.parent.slug %}">{{ category.parent.name }}</a>
        </li>
        {% endif %}
        <li class="breadcrumb-item active" aria-current="page">{{ category.name }}</li>
    </ol>
</nav>

<div class="row">
    <!-- فیلترها -->
    <div class="col-md-3">
        <div class="card">
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0">فیلترها</h5>
            </div>
            <div class="card-body">
                <form id="filterForm" method="get">
                    <!-- فیلترهای فعال -->
                    {% if filters_applied %}
                    <div class="active-filters">
                        <h6>فیلترهای فعال:</h6>
                        <div>
                            {% if current_filters.brand %}
                            <span class="badge bg-primary filter-badge">
                                برند: {{ current_filters.brand }}
                                <a href="#" onclick="removeFilter('brand')" class="text-white ms-1">&times;</a>
                            </span>
                            {% endif %}

                            {% if current_filters.size %}
                            <span class="badge bg-primary filter-badge">
                                سایز: {{ current_filters.size }}
                                <a href="#" onclick="removeFilter('size')" class="text-white ms-1">&times;</a>
                            </span>
                            {% endif %}

                            {% if current_filters.color %}
                            <span class="badge bg-primary filter-badge">
                                رنگ: {{ current_filters.color }}
                                <a href="#" onclick="removeFilter('color')" class="text-white ms-1">&times;</a>
                            </span>
                            {% endif %}

                            {% if current_filters.min_price or current_filters.max_price %}
                            <span class="badge bg-primary filter-badge">
                                قیمت:
                                {% if current_filters.min_price %}از {{ current_filters.min_price|floatformat:0 }}{% endif %}
                                {% if current_filters.max_price %}تا {{ current_filters.max_price|floatformat:0 }}{% endif %}
                                <a href="#" onclick="removeFilter('price')" class="text-white ms-1">&times;</a>
                            </span>
                            {% endif %}
                        </div>
                    </div>
                    {% endif %}

                    <!-- فیلتر برند -->
                    {% if all_brands %}
                    <div class="filter-section">
                        <h5>برند</h5>
                        <select name="brand" class="form-select filter-select">
                            <option value="none">انتخاب برند</option>
                            {% for brand in all_brands %}
                            <option value="{{ brand }}" {% if current_filters.brand == brand %}selected{% endif %}>{{ brand }}</option>
                            {% endfor %}
                        </select>
                    </div>
                    {% endif %}

                    <!-- فیلتر قیمت -->
                    <div class="filter-section">
                        <h5>قیمت (تومان)</h5>
                        <div class="row">
                            <div class="col-6">
                                <input type="number" class="form-control" name="min_price" placeholder="از" value="{{ current_filters.min_price }}">
                            </div>
                            <div class="col-6">
                                <input type="number" class="form-control" name="max_price" placeholder="تا" value="{{ current_filters.max_price }}">
                            </div>
                        </div>
                    </div>

                    <!-- فیلتر سایز -->
                    {% if all_sizes %}
                    <div class="filter-section">
                        <h5>سایز</h5>
                        <select name="size" class="form-select filter-select">
                            <option value="none">انتخاب سایز</option>
                            {% for size in all_sizes %}
                            <option value="{{ size }}" {% if current_filters.size == size %}selected{% endif %}>{{ size }}</option>
                            {% endfor %}
                        </select>
                    </div>
                    {% endif %}

                    <!-- فیلتر رنگ -->
                    {% if all_colors %}
                    <div class="filter-section">
                        <h5>رنگ</h5>
                        <select name="color" class="form-select filter-select">
                            <option value="none">انتخاب رنگ</option>
                            {% for color in all_colors %}
                            <option value="{{ color }}" {% if current_filters.color == color %}selected{% endif %}>
                                {{ color }}
                            </option>
                            {% endfor %}
                        </select>
                    </div>
                    {% endif %}

                    <!-- مرتب‌سازی -->
                    <div class="filter-section">
                        <h5>مرتب‌سازی</h5>
                        <select name="sort" class="form-select filter-select">
                            <option value="newest" {% if current_filters.sort == 'newest' %}selected{% endif %}>جدیدترین</option>
                            <option value="price_low" {% if current_filters.sort == 'price_low' %}selected{% endif %}>ارزان‌ترین</option>
                            <option value="price_high" {% if current_filters.sort == 'price_high' %}selected{% endif %}>گران‌ترین</option>
                            <option value="popular" {% if current_filters.sort == 'popular' %}selected{% endif %}>پرفروش‌ترین</option>
                        </select>
                    </div>

                    <!-- دکمه‌های اعمال و حذف فیلترها -->
                    <div class="mt-3">
                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary">اعمال فیلترها</button>
                            <a href="{% url 'products:category' category.slug %}" class="btn btn-outline-danger">حذف فیلترها</a>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- محصولات -->
    <div class="col-md-9">
        <h1 class="mb-4">{{ category.name }}</h1>

        {% if subcategories %}
        <div class="mb-4">
            <h5>دسته‌بندی‌های {{ category.name }}</h5>
            <div class="row">
                {% for subcat in subcategories %}
                <div class="col-md-3 mb-3">
                    <a href="{% url 'products:category' subcat.slug %}" class="btn btn-outline-primary w-100">{{ subcat.name }}</a>
                </div>
                {% endfor %}
            </div>
        </div>
        {% endif %}

        <div class="row">
            {% for product in products %}
            <div class="col-md-4 mb-4">
                <div class="card h-100 product-card">
                    {% with image=product.get_main_image %}
                    {% if image %}
                    <img src="{{ image.image.url }}" class="card-img-top" alt="{{ product.name }}" style="height: 200px; object-fit: cover;">
                    {% else %}
                    <div class="bg-secondary text-white p-4 text-center" style="height: 200px;">بدون تصویر</div>
                    {% endif %}
                    {% endwith %}
                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title">{{ product.name }}</h5>
                        <p class="card-text text-muted small">{{ product.brand }}</p>
                        <p class="card-text flex-grow-1">{{ product.short_description|default:product.description|truncatechars:80 }}</p>
                        <div class="d-flex justify-content-between align-items-center mt-auto">
                            {% if product.has_discount %}
                            <div>
                                <span class="text-muted text-decoration-line-through">{{ product.price|floatformat:0 }}</span>
                                <span class="text-danger fw-bold">{{ product.get_discount_price|floatformat:0 }} تومان</span>
                            </div>
                            {% else %}
                            <span class="text-danger fw-bold">{{ product.price|floatformat:0 }} تومان</span>
                            {% endif %}
                            <a href="{{ product.get_absolute_url }}" class="btn btn-primary btn-sm">مشاهده محصول</a>
                        </div>
                    </div>
                </div>
            </div>
            {% empty %}
            <div class="col-12">
                <div class="alert alert-info">
                    محصولی با فیلترهای انتخاب شده یافت نشد.
                </div>
            </div>
            {% endfor %}
        </div>
    </div>
</div>
{% endblock %}

{% block extra_js %}
<script>
    // حذف فیلتر
    function removeFilter(filterName) {
        // حذف فیلتر مورد نظر و ارسال مجدد فرم
        if (filterName === 'price') {
            document.querySelector('input[name="min_price"]').value = '';
            document.querySelector('input[name="max_price"]').value = '';
        } else {
            document.querySelector(`select[name="${filterName}"]`).value = 'none';
        }

        document.getElementById('filterForm').submit();
    }
</script>
{% endblock %}

====== FILE: templates/products/product_list.html ======

{% extends 'base/base.html' %}
{% load static %}

{% block title %}{{ page_title }} | زیما{% endblock %}

{% block content %}
    <div class="row">
        <!-- فیلتر محصولات -->
        <div class="col-lg-3 mb-4">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">فیلترها</h5>
                </div>
                <div class="card-body">
                    <form method="get" action="">
                        <!-- فیلتر قیمت -->
                        <div class="mb-4">
                            <h6>محدوده قیمت</h6>
                            <div class="row">
                                <div class="col-6">
                                    <label for="price_min" class="form-label">از</label>
                                    <input type="number" name="price_min" id="price_min" class="form-control form-control-sm" value="{{ request.GET.price_min }}">
                                </div>
                                <div class="col-6">
                                    <label for="price_max" class="form-label">تا</label>
                                    <input type="number" name="price_max" id="price_max" class="form-control form-control-sm" value="{{ request.GET.price_max }}">
                                </div>
                            </div>
                        </div>
                        
                        <!-- فیلتر سایز -->
                        <div class="mb-4">
                            <h6>سایز</h6>
                            <select name="size" class="form-select form-select-sm">
                                <option value="">همه سایزها</option>
                                {% for size in filter_options.sizes %}
                                    <option value="{{ size }}" {% if request.GET.size == size %}selected{% endif %}>{{ size }}</option>
                                {% endfor %}
                            </select>
                        </div>
                        
                        <!-- فیلتر رنگ -->
                        <div class="mb-4">
                            <h6>رنگ</h6>
                            <select name="color" class="form-select form-select-sm">
                                <option value="">همه رنگ‌ها</option>
                                {% for color in filter_options.colors %}
                                    <option value="{{ color }}" {% if request.GET.color == color %}selected{% endif %}>{{ color }}</option>
                                {% endfor %}
                            </select>
                        </div>
                        
                        <!-- فیلتر برند -->
                        <div class="mb-4">
                            <h6>برند</h6>
                            <select name="brand" class="form-select form-select-sm">
                                <option value="">همه برندها</option>
                                {% for brand in filter_options.brands %}
                                    <option value="{{ brand }}" {% if request.GET.brand == brand %}selected{% endif %}>{{ brand }}</option>
                                {% endfor %}
                            </select>
                        </div>
                        
                        <button type="submit" class="btn btn-primary w-100">اعمال فیلتر</button>
                    </form>
                </div>
            </div>
        </div>
        
        <!-- لیست محصولات -->
        <div class="col-lg-9">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="h2">{{ page_title }}</h1>
                
                <!-- مرتب‌سازی -->
                <div class="sort-container">
                    <form method="get" class="d-flex align-items-center">
                        <!-- حفظ پارامترهای فیلتر -->
                        {% for key, value in request.GET.items %}
                            {% if key != 'sort' %}
                                <input type="hidden" name="{{ key }}" value="{{ value }}">
                            {% endif %}
                        {% endfor %}
                        
                        <label for="sort" class="me-2">مرتب‌سازی:</label>
                        <select name="sort" id="sort" class="form-select form-select-sm" onchange="this.form.submit()">
                            <option value="newest" {% if request.GET.sort == 'newest' %}selected{% endif %}>جدیدترین</option>
                            <option value="price_low" {% if request.GET.sort == 'price_low' %}selected{% endif %}>ارزان‌ترین</option>
                            <option value="price_high" {% if request.GET.sort == 'price_high' %}selected{% endif %}>گران‌ترین</option>
                            <option value="popular" {% if request.GET.sort == 'popular' %}selected{% endif %}>محبوب‌ترین</option>
                        </select>
                    </form>
                </div>
            </div>
            
            <!-- نمایش محصولات -->
            <div class="row">
                {% for product in products %}
                    <div class="col-6 col-md-4 mb-4">
                        {% include 'products/partials/product_card.html' with product=product %}
                    </div>
                {% empty %}
                    <div class="col-12">
                        <div class="alert alert-info">محصولی با این مشخصات یافت نشد.</div>
                    </div>
                {% endfor %}
            </div>
            
            <!-- صفحه‌بندی -->
            {% if products.has_other_pages %}
                <nav aria-label="Page navigation" class="mt-4">
                    <ul class="pagination justify-content-center">
                        {% if products.has_previous %}
                            <li class="page-item">
                                <a class="page-link" href="?page={{ products.previous_page_number }}{% for key, value in request.GET.items %}{% if key != 'page' %}&{{ key }}={{ value }}{% endif %}{% endfor %}">قبلی</a>
                            </li>
                        {% else %}
                            <li class="page-item disabled">
                                <span class="page-link">قبلی</span>
                            </li>
                        {% endif %}
                        
                        {% for i in products.paginator.page_range %}
                            {% if products.number == i %}
                                <li class="page-item active">
                                    <span class="page-link">{{ i }}</span>
                                </li>
                            {% else %}
                                <li class="page-item">
                                    <a class="page-link" href="?page={{ i }}{% for key, value in request.GET.items %}{% if key != 'page' %}&{{ key }}={{ value }}{% endif %}{% endfor %}">{{ i }}</a>
                                </li>
                            {% endif %}
                        {% endfor %}
                        
                        {% if products.has_next %}
                            <li class="page-item">
                                <a class="page-link" href="?page={{ products.next_page_number }}{% for key, value in request.GET.items %}{% if key != 'page' %}&{{ key }}={{ value }}{% endif %}{% endfor %}">بعدی</a>
                            </li>
                        {% else %}
                            <li class="page-item disabled">
                                <span class="page-link">بعدی</span>
                            </li>
                        {% endif %}
                    </ul>
                </nav>
            {% endif %}
        </div>
    </div>
{% endblock %}

====== FILE: templates/products/product_detail.html ======

{% extends "base/base.html" %}
{% load static %}

{% block title %}{{ product.name }} - فروشگاه زیما{% endblock %}

{% block extra_css %}
<style>
    /* استایل برای گالری تصاویر */
    .product-gallery {
        margin-bottom: 2rem;
    }

    .product-main-image {
        width: 100%;
        height: 400px;
        object-fit: contain;
        margin-bottom: 1rem;
        border: 1px solid #dee2e6;
        border-radius: 0.25rem;
    }

    .product-thumbnails {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
    }

    .product-thumbnail {
        width: 80px;
        height: 80px;
        object-fit: cover;
        border: 1px solid #dee2e6;
        border-radius: 0.25rem;
        cursor: pointer;
    }

    .product-thumbnail.active {
        border-color: #0d6efd;
    }

    /* استایل برای انتخاب رنگ */
    .color-options {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
        margin-bottom: 1rem;
    }

    .color-option {
        width: 30px;
        height: 30px;
        border-radius: 50%;
        border: 2px solid #dee2e6;
        cursor: pointer;
        transition: transform 0.2s;
    }

    .color-option:hover {
        transform: scale(1.1);
    }

    .color-option.active {
        border-color: #0d6efd;
        transform: scale(1.1);
    }

    /* استایل برای انتخاب سایز */
    .size-options {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
        margin-bottom: 1rem;
    }

    .size-option {
        padding: 0.5rem 1rem;
        border: 1px solid #dee2e6;
        border-radius: 0.25rem;
        cursor: pointer;
        transition: all 0.2s;
    }

    .size-option:hover {
        background-color: #f8f9fa;
    }

    .size-option.active {
        background-color: #0d6efd;
        color: white;
        border-color: #0d6efd;
    }

    .size-option.disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    /* استایل برای بخش قیمت */
    .product-price {
        font-size: 1.5rem;
        font-weight: bold;
        margin-bottom: 1rem;
    }

    .product-original-price {
        text-decoration: line-through;
        color: #6c757d;
        font-size: 1.2rem;
    }

    .product-discount-price {
        color: #dc3545;
    }

    .product-discount-badge {
        background-color: #dc3545;
        color: white;
        padding: 0.25rem 0.5rem;
        border-radius: 0.25rem;
        font-size: 0.875rem;
        margin-right: 0.5rem;
    }

    /* استایل برای نمایش بهتر عدد انتخابی */
    #quantityInput {
        font-size: 1rem;
        font-weight: bold;
        background-color: #f8f9fa;
    }

</style>
{% endblock %}

{% block content %}
<nav aria-label="breadcrumb" class="mt-3">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/">صفحه اصلی</a></li>
        <li class="breadcrumb-item"><a href="{% url 'products:category' category_slug=product.category.slug %}">{{ product.category.name }}</a>

        <li class="breadcrumb-item active" aria-current="page">{{ product.name }}</li>
    </ol>
</nav>

<div class="row mt-4">
    <!-- گالری تصاویر محصول -->
    <div class="col-md-6">
        <div class="product-gallery">
            {% with main_image=product.get_main_image %}
            <img id="mainImage" src="{% if main_image %}{{ main_image.image.url }}{% else %}{% static 'img/no-image.png' %}{% endif %}" alt="{{ product.name }}" class="product-main-image">
            {% endwith %}

            <div class="product-thumbnails">
                {% for image in product.images.all %}
                <img src="{{ image.image.url }}" alt="{{ image.alt_text|default:product.name }}" class="product-thumbnail {% if image.is_main %}active{% endif %}" onclick="changeMainImage(this, '{{ image.image.url }}')">
                {% empty %}
                <div class="alert alert-warning">تصویری برای این محصول ثبت نشده است.</div>
                {% endfor %}
            </div>
        </div>
    </div>

    <!-- اطلاعات محصول -->
    <div class="col-md-6">
        <h1 class="mb-3">{{ product.name }}</h1>
        <p class="text-muted">برند: {{ product.brand }}</p>

        <!-- قیمت محصول -->
        <div class="product-price" id="productPrice">
            {% if product.has_discount %}
            <span class="product-discount-badge">{{ product.discount_percent }}٪ تخفیف</span>
            <span class="product-original-price">{{ product.price|floatformat:0 }} تومان</span>
            <span class="product-discount-price">{{ product.get_discount_price|floatformat:0 }} تومان</span>
            {% else %}
            <span>{{ product.price|floatformat:0 }} تومان</span>
            {% endif %}
        </div>

        <!-- توضیحات کوتاه -->
        {% if product.short_description %}
        <div class="mb-3">
            <p>{{ product.short_description }}</p>
        </div>
        {% endif %}

        <!-- انتخاب رنگ -->
        <div class="mb-3">
            <h5>انتخاب رنگ:</h5>
            <div class="color-options" id="colorOptions">
                <!-- رنگ‌ها با جاوااسکریپت اضافه می‌شوند -->
            </div>
            <p id="selectedColorName" class="mt-2 small text-muted">رنگ انتخابی: <span>انتخاب نشده</span></p>
        </div>

        <!-- انتخاب سایز -->
        <div class="mb-3">
            <h5>انتخاب سایز:</h5>
            <div class="size-options" id="sizeOptions">
                <!-- سایزها با جاوااسکریپت اضافه می‌شوند -->
            </div>
            <p id="selectedSizeName" class="mt-2 small text-muted">سایز انتخابی: <span>انتخاب نشده</span></p>
        </div>

        <!-- تعداد و دکمه افزودن به سبد خرید -->
        <div class="mb-4">
    <div style="display: flex; align-items: center; gap: 15px;">
        <div style="display: flex; align-items: center; border: 1px solid #dee2e6; border-radius: 5px; overflow: hidden;">
            <button type="button" onclick="decreaseQuantity()"
                style="width: 40px; height: 40px; background-color: #f8f9fa; border: none; cursor: pointer; font-size: 18px; font-weight: bold; display: flex; align-items: center; justify-content: center;">-</button>

            <input type="number" id="quantityInput" value="1" min="1" max="{{ product.stock }}"
                style="width: 50px; height: 40px; border: none; text-align: center; font-size: 16px; font-weight: 500; background-color: white; -moz-appearance: textfield; margin: 0;">

            <button type="button" onclick="increaseQuantity()"
                style="width: 40px; height: 40px; background-color: #f8f9fa; border: none; cursor: pointer; font-size: 18px; font-weight: bold; display: flex; align-items: center; justify-content: center;">+</button>
        </div>

        <button class="btn btn-primary" onclick="addToCart()"
            style="height: 40px; padding: 0 20px; display: flex; align-items: center; justify-content: center;">افزودن به سبد خرید</button>
    </div>
    <p id="stockInfo" class="small text-muted mt-2" style="margin-top: 8px; font-size: 14px; color: #6c757d;">موجودی: {{ product.stock }} عدد</p>
</div>

        <!-- سایر مشخصات محصول -->
        <div class="mb-4">
             <h5>مشخصات محصول:</h5>
                <ul class="list-unstyled">
                    <li><i class="fas fa-tag me-2"></i> دسته‌بندی: {{ product.category.name }}</li>
                    <li><i class="fas fa-venus-mars me-2"></i> جنسیت: {{ product.get_gender_display }}</li>
                    <li id="weightContainer" {% if not product.weight and not product.inventories.first.weight %}style="display: none;"{% endif %}>
                        <i class="fas fa-weight me-2"></i> وزن: <span id="productWeight">{{ product.weight|default:"" }} گرم</span>
                    </li>
                    <li id="dimensionsContainer" {% if not product.dimensions and not product.inventories.first.dimensions %}style="display: none;"{% endif %}>
                        <i class="fas fa-ruler-combined me-2"></i> ابعاد: <span id="productDimensions">{{ product.dimensions|default:"" }}</span>
                    </li>
                </ul>
        </div>
    </div>
</div>

<!-- توضیحات کامل محصول -->
<div class="row mt-5">
    <div class="col-12">
        <h3>توضیحات محصول</h3>
        <hr>
        <div class="product-description">
            {{ product.description|linebreaks }}
        </div>
    </div>
</div>

<!-- محصولات مرتبط -->
<div class="row mt-5">
    <div class="col-12">
        <h3>محصولات مرتبط</h3>
        <hr>
    </div>

    {% for related in related_products %}
    <div class="col-md-3 mb-4">
        <div class="card h-100">
            {% with image=related.get_main_image %}
            {% if image %}
            <img src="{{ image.image.url }}" class="card-img-top" alt="{{ related.name }}" style="height: 200px; object-fit: cover;">
            {% else %}
            <div class="bg-secondary text-white p-4 text-center" style="height: 200px;">بدون تصویر</div>
            {% endif %}
            {% endwith %}
            <div class="card-body d-flex flex-column">
                <h5 class="card-title">{{ related.name }}</h5>
                <p class="card-text flex-grow-1">{{ related.short_description|default:related.description|truncatechars:80 }}</p>
                <div class="d-flex justify-content-between align-items-center mt-auto">
                    {% if related.has_discount %}
                    <div>
                        <span class="text-muted text-decoration-line-through">{{ related.price|floatformat:0 }}</span>
                        <span class="text-danger fw-bold">{{ related.get_discount_price|floatformat:0 }} تومان</span>
                    </div>
                    {% else %}
                    <span class="text-danger fw-bold">{{ related.price|floatformat:0 }} تومان</span>
                    {% endif %}
                    <a href="{{ related.get_absolute_url }}" class="btn btn-primary btn-sm">مشاهده محصول</a>
                </div>
            </div>
        </div>
    </div>
    {% empty %}
    <div class="col-12">
        <div class="alert alert-info">محصول مرتبطی یافت نشد.</div>
    </div>
    {% endfor %}
</div>
{% endblock %}

{% block extra_js %}
<script>
    // اطلاعات محصول
   const productData = {
    id: {{ product.id }},
    basePrice: {{ product.get_discount_price }},
    originalPrice: {{ product.price }},
    stock: {{ product.stock }},
    hasDiscount: {{ product.has_discount|yesno:"true,false" }},
    discountPercent: {{ product.discount_percent }},
    weight: {{ product.weight|default:"null" }},
    dimensions: "{{ product.dimensions|default:'' }}"
};

    const productInventory = [
    {% for inventory in product.inventories.all %}
    {
        id: {{ inventory.id }},
        color: {
            id: {{ inventory.color.id }},
            name: "{{ inventory.color.name }}"
        },
        size: {
            id: {{ inventory.size.id }},
            name: "{{ inventory.size.name }}"
        },
        quantity: {{ inventory.quantity }},
        weight: {{ inventory.weight|default:"null" }},
        dimensions: "{{ inventory.dimensions|default:'' }}"
    },
    {% endfor %}
];


    let selectedColor = null;
    let selectedSize = null;
    let selectedInventory = null;

    // تغییر تصویر اصلی با کلیک روی تصاویر بندانگشتی
    function changeMainImage(thumbnail, imageUrl) {
        // حذف کلاس active از همه تصاویر بندانگشتی
        document.querySelectorAll('.product-thumbnail').forEach(function(thumb) {
            thumb.classList.remove('active');
        });

        // اضافه کردن کلاس active به تصویر انتخاب شده
        thumbnail.classList.add('active');

        // تغییر تصویر اصلی
        document.getElementById('mainImage').src = imageUrl;
    }

    // استخراج رنگ‌های منحصر به فرد از موجودی محصول
    function getUniqueColors() {
        const colors = new Map();
        productInventory.forEach(item => {
            if (!colors.has(item.color.id)) {
                colors.set(item.color.id, item.color);
            }
        });
        return Array.from(colors.values());
    }

    // استخراج سایزهای منحصر به فرد از موجودی محصول
    function getUniqueSizes() {
        const sizes = new Map();
        productInventory.forEach(item => {
            if (!sizes.has(item.size.id)) {
                sizes.set(item.size.id, item.size);
            }
        });
        return Array.from(sizes.values());
    }

    // نمایش رنگ‌ها در صفحه
    function renderColors() {
        const colorContainer = document.getElementById('colorOptions');
        colorContainer.innerHTML = '';

        const uniqueColors = getUniqueColors();

        if (uniqueColors.length === 0) {
            colorContainer.innerHTML = '<div class="alert alert-warning">رنگی برای این محصول ثبت نشده است.</div>';
            return;
        }

        uniqueColors.forEach(color => {
            // برای هر رنگ یک دایره رنگی ایجاد می‌کنیم
            const colorElement = document.createElement('div');
            colorElement.className = 'color-option';
            colorElement.setAttribute('data-color-id', color.id);
            colorElement.setAttribute('data-color-name', color.name);

            // تعیین رنگ پس‌زمینه بر اساس نام رنگ
            colorElement.style.backgroundColor = getColorCode(color.name);

            // اضافه کردن عنوان برای نمایش نام رنگ هنگام هاور
            colorElement.setAttribute('title', color.name);

            // اضافه کردن رویداد کلیک
            colorElement.addEventListener('click', function() {
                selectColor(this);
            });

            colorContainer.appendChild(colorElement);
        });
    }

    // تبدیل نام رنگ فارسی به کد رنگ
    function getColorCode(colorName) {
    const colorMap = {
        // رنگ‌های اصلی
        'سفید': '#FFFFFF',
        'مشکی': '#000000',
        'خاکستری': '#808080',
        'نقره‌ای': '#C0C0C0',

        // طیف قرمز
        'قرمز': '#FF0000',
        'زرشکی': '#800000',
        'صورتی': '#FFC0CB',
        'گلبهی': '#FFB6C1',

        // طیف نارنجی و زرد
        'نارنجی': '#FFA500',
        'هلویی': '#FFDAB9',
        'طلایی': '#FFD700',
        'زرد': '#FFFF00',
        'لیمویی': '#BFFF00',

        // طیف سبز
        'سبز': '#00FF00',
        'سبز لجنی': '#2F4F4F',
        'سبز یشمی': '#00A86B',
        'سبز زیتونی': '#808000',

        // طیف آبی
        'آبی': '#0000FF',
        'آبی آسمانی': '#87CEEB',
        'آبی نفتی': '#000080',
        'فیروزه‌ای': '#40E0D0',

        // طیف بنفش
        'بنفش': '#800080',
        'یاسی': '#DDA0DD',
        'ارغوانی': '#9370DB',

        // طیف قهوه‌ای
        'قهوه‌ای': '#A52A2A',
        'کرم': '#FFFDD0',
        'بژ': '#F5F5DC',
        'شکلاتی': '#5C4033',
        'عنابی': '#722F37',

        // سایر رنگ‌ها
        'مسی': '#B87333',
        'برنزی': '#CD7F32',
        'سرمه‌ای': '#191970',
        'کالباسی': '#E34234',
        'نباتی': '#FAEBD7',
        'آجری': '#B22222'
    };

    return colorMap[colorName] || '#CCCCCC'; // رنگ پیش‌فرض خاکستری روشن
    }

    // نمایش سایزها در صفحه
    function renderSizes() {
        const sizeContainer = document.getElementById('sizeOptions');
        sizeContainer.innerHTML = '';

        const uniqueSizes = getUniqueSizes();

        if (uniqueSizes.length === 0) {
            sizeContainer.innerHTML = '<div class="alert alert-warning">سایزی برای این محصول ثبت نشده است.</div>';
            return;
        }

        uniqueSizes.forEach(size => {
            // برای هر سایز یک المان ایجاد می‌کنیم
            const sizeElement = document.createElement('div');
            sizeElement.className = 'size-option';
            sizeElement.setAttribute('data-size-id', size.id);
            sizeElement.setAttribute('data-size-name', size.name);
            sizeElement.textContent = size.name;

            // اضافه کردن رویداد کلیک
            sizeElement.addEventListener('click', function() {
                selectSize(this);
            });

            sizeContainer.appendChild(sizeElement);
        });
    }

    // انتخاب رنگ
    function selectColor(colorElement) {
        // حذف کلاس active از همه رنگ‌ها
        document.querySelectorAll('.color-option').forEach(function(color) {
            color.classList.remove('active');
        });

        // اضافه کردن کلاس active به رنگ انتخاب شده
        colorElement.classList.add('active');

        // ذخیره رنگ انتخاب شده
        selectedColor = {
            id: colorElement.getAttribute('data-color-id'),
            name: colorElement.getAttribute('data-color-name')
        };

        // نمایش نام رنگ انتخاب شده
        document.querySelector('#selectedColorName span').textContent = selectedColor.name;

        // فعال/غیرفعال کردن سایزها بر اساس موجودی
        updateAvailableSizes();

        // به‌روزرسانی موجودی و قیمت
        updateSelectedInventory();
    }

    // انتخاب سایز
    function selectSize(sizeElement) {
        // حذف کلاس active از همه سایزها
        document.querySelectorAll('.size-option').forEach(function(size) {
            size.classList.remove('active');
        });

        // اضافه کردن کلاس active به سایز انتخاب شده
        sizeElement.classList.add('active');

        // ذخیره سایز انتخاب شده
        selectedSize = {
            id: sizeElement.getAttribute('data-size-id'),
            name: sizeElement.getAttribute('data-size-name')
        };

        // نمایش نام سایز انتخاب شده
        document.querySelector('#selectedSizeName span').textContent = selectedSize.name;

        // فعال/غیرفعال کردن رنگ‌ها بر اساس موجودی
        updateAvailableColors();

        // به‌روزرسانی موجودی و قیمت
        updateSelectedInventory();
    }

    // به‌روزرسانی سایزهای موجود بر اساس رنگ انتخاب شده
    function updateAvailableSizes() {
        if (!selectedColor) return;

        const availableSizeIds = new Set();

        // پیدا کردن تمام سایزهایی که با رنگ انتخاب شده موجودی دارند
        productInventory.forEach(item => {
            if (item.color.id == selectedColor.id && item.quantity > 0) {
                availableSizeIds.add(item.size.id);
            }
        });

        // به‌روزرسانی وضعیت نمایش سایزها
        document.querySelectorAll('.size-option').forEach(sizeElement => {
            const sizeId = sizeElement.getAttribute('data-size-id');

            if (availableSizeIds.has(parseInt(sizeId))) {
                sizeElement.classList.remove('disabled');
            } else {
                sizeElement.classList.add('disabled');

                // اگر سایز انتخاب شده غیرفعال شد، انتخاب را حذف کنیم
                if (selectedSize && selectedSize.id == sizeId) {
                    sizeElement.classList.remove('active');
                    selectedSize = null;
                    document.querySelector('#selectedSizeName span').textContent = 'انتخاب نشده';
                }
            }
        });
    }

    // به‌روزرسانی رنگ‌های موجود بر اساس سایز انتخاب شده
    function updateAvailableColors() {
        if (!selectedSize) return;

        const availableColorIds = new Set();

        // پیدا کردن تمام رنگ‌هایی که با سایز انتخاب شده موجودی دارند
        productInventory.forEach(item => {
            if (item.size.id == selectedSize.id && item.quantity > 0) {
                availableColorIds.add(item.color.id);
            }
        });

        // به‌روزرسانی وضعیت نمایش رنگ‌ها
        document.querySelectorAll('.color-option').forEach(colorElement => {
            const colorId = colorElement.getAttribute('data-color-id');

            if (availableColorIds.has(parseInt(colorId))) {
                colorElement.classList.remove('disabled');
            } else {
                colorElement.classList.add('disabled');

                // اگر رنگ انتخاب شده غیرفعال شد، انتخاب را حذف کنیم
                if (selectedColor && selectedColor.id == colorId) {
                    colorElement.classList.remove('active');
                    selectedColor = null;
                    document.querySelector('#selectedColorName span').textContent = 'انتخاب نشده';
                }
            }
        });
    }

    // به‌روزرسانی موجودی انتخاب شده
   function updateSelectedInventory() {
    selectedInventory = null;

    if (selectedColor && selectedSize) {
        // پیدا کردن موجودی با رنگ و سایز انتخاب شده
        selectedInventory = productInventory.find(item =>
            item.color.id == selectedColor.id &&
            item.size.id == selectedSize.id
        );

        if (selectedInventory) {
            // به‌روزرسانی اطلاعات موجودی
            document.getElementById('stockInfo').textContent = `موجودی: ${selectedInventory.quantity} عدد`;
            document.getElementById('quantityInput').setAttribute('max', selectedInventory.quantity);

            // به‌روزرسانی وزن و ابعاد بر اساس سایز انتخاب شده
            const weightContainer = document.getElementById('weightContainer');
            const dimensionsContainer = document.getElementById('dimensionsContainer');

            if (selectedInventory.weight) {
                document.getElementById('productWeight').textContent = `${selectedInventory.weight} گرم`;
                weightContainer.style.display = 'list-item';
            } else if (productData.weight) {
                document.getElementById('productWeight').textContent = `${productData.weight} گرم`;
                weightContainer.style.display = 'list-item';
            } else {
                weightContainer.style.display = 'none';
            }

            if (selectedInventory.dimensions && selectedInventory.dimensions !== '') {
                document.getElementById('productDimensions').textContent = selectedInventory.dimensions;
                dimensionsContainer.style.display = 'list-item';
            } else if (productData.dimensions && productData.dimensions !== '') {
                document.getElementById('productDimensions').textContent = productData.dimensions;
                dimensionsContainer.style.display = 'list-item';
            } else {
                dimensionsContainer.style.display = 'none';
            }

            // فعال/غیرفعال کردن دکمه افزودن به سبد خرید
            if (selectedInventory.quantity <= 0) {
                document.querySelector('.btn-primary').disabled = true;
                document.querySelector('.btn-primary').textContent = 'ناموجود';
            } else {
                document.querySelector('.btn-primary').disabled = false;
                document.querySelector('.btn-primary').textContent = 'افزودن به سبد خرید';
            }
        } else {
            // اگر موجودی با این ترکیب پیدا نشد
            document.getElementById('stockInfo').textContent = 'موجودی: 0 عدد';
            document.getElementById('quantityInput').setAttribute('max', 0);

            // نمایش وزن و ابعاد پیش‌فرض محصول
            updateDefaultPhysicalAttributes();

            document.querySelector('.btn-primary').disabled = true;
            document.querySelector('.btn-primary').textContent = 'ناموجود';
        }
    } else {
        // اگر رنگ یا سایز انتخاب نشده باشد
        document.getElementById('stockInfo').textContent = `موجودی: ${productData.stock} عدد`;
        document.getElementById('quantityInput').setAttribute('max', productData.stock);

        // نمایش وزن و ابعاد پیش‌فرض محصول
        updateDefaultPhysicalAttributes();

        if (productData.stock <= 0) {
            document.querySelector('.btn-primary').disabled = true;
            document.querySelector('.btn-primary').textContent = 'ناموجود';
        } else {
            document.querySelector('.btn-primary').disabled = false;
            document.querySelector('.btn-primary').textContent = 'افزودن به سبد خرید';
        }
    }
}
    function updateDefaultPhysicalAttributes() {
    const weightContainer = document.getElementById('weightContainer');
    const dimensionsContainer = document.getElementById('dimensionsContainer');

    if (productData.weight) {
        document.getElementById('productWeight').textContent = `${productData.weight} گرم`;
        weightContainer.style.display = 'list-item';
    } else {
        weightContainer.style.display = 'none';
    }

    if (productData.dimensions && productData.dimensions !== '') {
        document.getElementById('productDimensions').textContent = productData.dimensions;
        dimensionsContainer.style.display = 'list-item';
    } else {
        dimensionsContainer.style.display = 'none';
    }
}
    // افزایش تعداد
    function increaseQuantity() {
        const input = document.getElementById('quantityInput');
        const max = parseInt(input.getAttribute('max'));
        let value = parseInt(input.value);

        if (value < max) {
            input.value = value + 1;
        }
    }

    // کاهش تعداد
    function decreaseQuantity() {
        const input = document.getElementById('quantityInput');
        let value = parseInt(input.value);

        if (value > 1) {
            input.value = value - 1;
        }
    }

    // افزودن به سبد خرید
    function addToCart() {
        // بررسی انتخاب رنگ و سایز
        if (productInventory.length > 0 && !selectedColor) {
            alert('لطفاً یک رنگ انتخاب کنید.');
            return;
        }

        if (productInventory.length > 0 && !selectedSize) {
            alert('لطفاً یک سایز انتخاب کنید.');
            return;
        }

        const quantity = parseInt(document.getElementById('quantityInput').value);

        // بررسی موجودی
        if (selectedInventory) {
            if (quantity > selectedInventory.quantity) {
                alert(`موجودی این محصول با مشخصات انتخاب شده ${selectedInventory.quantity} عدد است.`);
                return;
            }
        } else if (quantity > productData.stock) {
            alert(`موجودی این محصول ${productData.stock} عدد است.`);
            return;
        }

        // ارسال درخواست افزودن به سبد خرید
        fetch('/cart/add/', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRFToken': '{{ csrf_token }}'
            },
            body: JSON.stringify({
                product_id: productData.id,
                quantity: quantity,
                color_id: selectedColor ? selectedColor.id : null,
                size_id: selectedSize ? selectedSize.id : null,
                inventory_id: selectedInventory ? selectedInventory.id : null
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert('محصول با موفقیت به سبد خرید اضافه شد.');

                // به‌روزرسانی تعداد آیتم‌های سبد خرید در هدر
                const cartCountElement = document.getElementById('cart-items-count');
                if (cartCountElement) {
                    cartCountElement.textContent = data.cart_items_count;
                }

                // پرسیدن از کاربر برای رفتن به سبد خرید
                if (confirm('محصول به سبد خرید اضافه شد. آیا می‌خواهید به صفحه سبد خرید بروید؟')) {
                    window.location.href = '{% url "cart:summary" %}';
                }

                // اگر کاربر لاگین نکرده باشد و نیاز به ریدایرکت باشد
                if (data.redirect) {
                    window.location.href = data.redirect;
                }
            } else {
                alert(data.error || 'خطا در افزودن محصول به سبد خرید.');

                // اگر کاربر لاگین نکرده باشد و نیاز به ریدایرکت باشد
                if (data.redirect) {
                    window.location.href = data.redirect;
                }
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('خطا در ارتباط با سرور.');
        });
    }

    // اجرای کدها پس از بارگذاری صفحه
    document.addEventListener('DOMContentLoaded', function() {
        // نمایش رنگ‌ها و سایزها
        renderColors();
        renderSizes();

        // انتخاب اولین رنگ و سایز موجود به صورت پیش‌فرض
        if (productInventory.length > 0) {
            const firstColorElement = document.querySelector('.color-option:not(.disabled)');
            if (firstColorElement) {
                selectColor(firstColorElement);

                const firstSizeElement = document.querySelector('.size-option:not(.disabled)');
                if (firstSizeElement) {
                    selectSize(firstSizeElement);
                }
            }
        }
    });
</script>
{% endblock %}

====== FILE: templates/products/partials/product_card.html ======

<div class="card h-100">
    {% with image=product.get_main_image %}
    {% if image %}
    <img src="{{ image.image.url }}" class="card-img-top" alt="{{ product.name }}" style="height: 200px; object-fit: cover;">
    {% else %}
    <div class="bg-secondary text-white p-4 text-center" style="height: 200px;">بدون تصویر</div>
    {% endif %}
    {% endwith %}
    <div class="card-body d-flex flex-column">
        <h5 class="card-title">{{ product.name }}</h5>
        <p class="card-text flex-grow-1">{{ product.short_description|default:product.description|truncatechars:80 }}</p>
        <div class="d-flex justify-content-between align-items-center mt-auto">
            {% if product.has_discount %}
            <div>
                <span class="text-muted text-decoration-line-through">{{ product.price|floatformat:0 }}</span>
                <span class="text-danger fw-bold">{{ product.get_discount_price|floatformat:0 }} تومان</span>
            </div>
            {% else %}
            <span class="text-danger fw-bold">{{ product.price|floatformat:0 }} تومان</span>
            {% endif %}
            <a href="{{ product.get_absolute_url }}" class="btn btn-primary btn-sm">مشاهده محصول</a>
        </div>
    </div>
</div>

====== FILE: templates/registration/password_reset_form.html ======

{% extends 'base/base.html' %}
{% load static %}

{% block title %}بازیابی رمز عبور | زیما{% endblock %}

{% block content %}
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white text-center py-3">
                    <h4 class="mb-0">بازیابی رمز عبور</h4>
                </div>
                <div class="card-body p-4">
                    <p class="mb-3">ایمیل خود را وارد کنید تا لینک بازیابی رمز عبور برای شما ارسال شود.</p>
                    
                    <form method="post">
                        {% csrf_token %}
                        
                        {% if form.non_field_errors %}
                            <div class="alert alert-danger">
                                {% for error in form.non_field_errors %}
                                    {{ error }}
                                {% endfor %}
                            </div>
                        {% endif %}
                        
                        <div class="mb-3">
                            <label for="id_email" class="form-label">ایمیل</label>
                            <input type="email" name="email" id="id_email" class="form-control {% if form.email.errors %}is-invalid{% endif %}" required>
                            {% if form.email.errors %}
                                <div class="invalid-feedback">
                                    {% for error in form.email.errors %}
                                        {{ error }}
                                    {% endfor %}
                                </div>
                            {% endif %}
                        </div>
                        
                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary">ارسال لینک بازیابی</button>
                        </div>
                    </form>
                    
                    <hr>
                    
                    <div class="text-center">
                        <a href="{% url 'users:login' %}" class="btn btn-outline-primary">بازگشت به صفحه ورود</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

====== FILE: templates/registration/password_reset_complete.html ======

{% extends 'base/base.html' %}
{% load static %}

{% block title %}تغییر رمز عبور موفقیت‌آمیز | زیما{% endblock %}

{% block content %}
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white text-center py-3">
                    <h4 class="mb-0">تغییر رمز عبور موفقیت‌آمیز</h4>
                </div>
                <div class="card-body p-4">
                    <div class="alert alert-success">
                        <p>رمز عبور شما با موفقیت تغییر یافت.</p>
                        <p>اکنون می‌توانید با رمز عبور جدید وارد شوید.</p>
                    </div>
                    
                    <div class="text-center mt-3">
                        <a href="{% url 'users:login' %}" class="btn btn-primary">ورود به حساب کاربری</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

====== FILE: templates/registration/password_reset_confirm.html ======

{% extends 'base/base.html' %}
{% load static %}

{% block title %}تنظیم رمز عبور جدید | زیما{% endblock %}

{% block content %}
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white text-center py-3">
                    <h4 class="mb-0">تنظیم رمز عبور جدید</h4>
                </div>
                <div class="card-body p-4">
                    {% if validlink %}
                        <p class="mb-3">لطفاً رمز عبور جدید خود را وارد کنید.</p>
                        
                        <form method="post">
                            {% csrf_token %}
                            
                            {% if form.non_field_errors %}
                                <div class="alert alert-danger">
                                    {% for error in form.non_field_errors %}
                                        {{ error }}
                                    {% endfor %}
                                </div>
                            {% endif %}
                            
                            <div class="mb-3">
                                <label for="id_new_password1" class="form-label">رمز عبور جدید</label>
                                <input type="password" name="new_password1" id="id_new_password1" class="form-control {% if form.new_password1.errors %}is-invalid{% endif %}" required>
                                {% if form.new_password1.errors %}
                                    <div class="invalid-feedback">
                                        {% for error in form.new_password1.errors %}
                                            {{ error }}
                                        {% endfor %}
                                    </div>
                                {% endif %}
                                {% if form.new_password1.help_text %}
                                    <div class="form-text small">
                                        {{ form.new_password1.help_text|safe }}
                                    </div>
                                {% endif %}
                            </div>
                            
                            <div class="mb-3">
                                <label for="id_new_password2" class="form-label">تأیید رمز عبور جدید</label>
                                <input type="password" name="new_password2" id="id_new_password2" class="form-control {% if form.new_password2.errors %}is-invalid{% endif %}" required>
                                {% if form.new_password2.errors %}
                                    <div class="invalid-feedback">
                                        {% for error in form.new_password2.errors %}
                                            {{ error }}
                                        {% endfor %}
                                    </div>
                                {% endif %}
                            </div>
                            
                            <div class="d-grid gap-2">
                                <button type="submit" class="btn btn-primary">تغییر رمز عبور</button>
                            </div>
                        </form>
                    {% else %}
                        <div class="alert alert-danger">
                            <p>لینک بازیابی رمز عبور نامعتبر است یا قبلاً استفاده شده است.</p>
                            <p>لطفاً درخواست بازیابی رمز عبور جدیدی ارسال کنید.</p>
                        </div>
                        
                        <div class="text-center mt-3">
                            <a href="{% url 'password_reset' %}" class="btn btn-outline-primary">درخواست بازیابی جدید</a>
                        </div>
                    {% endif %}
                </div>
            </div>
        </div>
    </div>
{% endblock %}

====== FILE: templates/registration/password_reset_email.html ======

{% load i18n %}{% autoescape off %}
{% blocktranslate %}سلام،

شما این ایمیل را دریافت کرده‌اید چون درخواست بازیابی رمز عبور برای حساب کاربری خود در سایت زیما کرده‌اید.

لطفاً روی لینک زیر کلیک کنید تا رمز عبور جدیدی تنظیم کنید:{% endblocktranslate %}

{{ protocol }}://{{ domain }}{% url 'password_reset_confirm' uidb64=uid token=token %}

{% translate "نام کاربری شما:" %} {{ user.get_username }}

{% blocktranslate %}با تشکر،
تیم پشتیبانی زیما{% endblocktranslate %}

{% endautoescape %}

====== FILE: templates/registration/password_reset_done.html ======

{% extends 'base/base.html' %}
{% load static %}

{% block title %}ارسال ایمیل بازیابی | زیما{% endblock %}

{% block content %}
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white text-center py-3">
                    <h4 class="mb-0">ارسال ایمیل بازیابی</h4>
                </div>
                <div class="card-body p-4">
                    <div class="alert alert-success">
                        <p>ایمیل حاوی دستورالعمل‌های بازیابی رمز عبور برای شما ارسال شد.</p>
                        <p>اگر حساب کاربری با ایمیل وارد شده وجود داشته باشد، به زودی ایمیلی دریافت خواهید کرد.</p>
                        <p>لطفاً صندوق ورودی و پوشه اسپم خود را بررسی کنید.</p>
                    </div>
                    
                    <div class="text-center mt-3">
                        <a href="{% url 'users:login' %}" class="btn btn-outline-primary">بازگشت به صفحه ورود</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

====== FILE: templates/chat/admin_dashboard.html ======

{% extends "base/base.html" %}
{% load static %}

{% block title %}داشبورد چت - مدیریت{% endblock %}

{% block extra_css %}
<style>
    .dashboard-stats {
        margin-bottom: 30px;
    }
    
    .stat-card {
        border-radius: 10px;
        padding: 20px;
        text-align: center;
        margin-bottom: 20px;
        color: white;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    
    .stat-card-blue {
        background: linear-gradient(45deg, #007bff, #0056b3);
    }
    
    .stat-card-green {
        background: linear-gradient(45deg, #28a745, #1e7e34);
    }
    
    .stat-card-orange {
        background: linear-gradient(45deg, #fd7e14, #dc6502);
    }
    
    .stat-card-red {
        background: linear-gradient(45deg, #dc3545, #bd2130);
    }
    
    .stat-card h3 {
        font-size: 2.5rem;
        margin-bottom: 10px;
    }
    
    .stat-card p {
        font-size: 1rem;
        margin: 0;
        opacity: 0.8;
    }
    
    .chat-list {
        margin-bottom: 30px;
    }
    
    .chat-list-item {
        padding: 15px;
        border-radius: 8px;
        margin-bottom: 10px;
        background-color: #f8f9fa;
        border-right: 4px solid #6c757d;
        transition: all 0.3s ease;
    }
    
    .chat-list-item:hover {
        background-color: #e9ecef;
        border-right-color: #007bff;
    }
    
    .chat-list-item.pending {
        border-right-color: #dc3545;
    }
    
    .chat-list-item.active {
        border-right-color: #28a745;
    }
    
    .chat-header {
        display: flex;
        justify-content: space-between;
        margin-bottom: 5px;
    }
    
    .chat-title {
        font-weight: bold;
        color: #333;
    }
    
    .chat-time {
        color: #666;
        font-size: 0.8rem;
    }
    
    .chat-user {
        color: #555;
        font-size: 0.9rem;
    }
    
    .chat-status {
        display: inline-block;
        padding: 2px 8px;
        border-radius: 12px;
        font-size: 0.75rem;
        margin-right: 8px;
    }
    
    .chat-status-pending {
        background-color: #fff3cd;
        color: #856404;
    }
    
    .chat-status-active {
        background-color: #d4edda;
        color: #155724;
    }
    
    .chat-actions {
        margin-top: 10px;
    }

    .refresh-btn {
        position: absolute;
        right: 15px;
        top: 10px;
        color: #6c757d;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .refresh-btn:hover {
        color: #007bff;
        transform: rotate(180deg);
    }

    .empty-state {
        text-align: center;
        padding: 30px 0;
    }

    .empty-state i {
        font-size: 3rem;
        margin-bottom: 15px;
        color: #6c757d;
    }

    .empty-state p {
        font-size: 1.1rem;
        color: #6c757d;
    }

    .card-header {
        position: relative;
    }

    .last-message {
        color: #6c757d;
        font-size: 0.85rem;
        margin-top: 5px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        max-width: 90%;
    }

    .badge-unread {
        background-color: #dc3545;
        color: white;
        font-size: 0.7rem;
        padding: 0.25rem 0.5rem;
        border-radius: 10px;
        margin-right: 5px;
    }
</style>
{% endblock %}

{% block content %}
<div class="container-fluid my-4">
    <h2 class="mb-4">داشبورد مدیریت چت</h2>

    <div class="row dashboard-stats">
        <div class="col-md-3">
            <div class="stat-card stat-card-blue">
                <h3>{{ active_chats }}</h3>
                <p>چت‌های فعال</p>
            </div>
        </div>
        <div class="col-md-3">
            <div class="stat-card stat-card-orange">
                <h3>{{ pending_chats }}</h3>
                <p>چت‌های در انتظار</p>
            </div>
        </div>
        <div class="col-md-3">
            <div class="stat-card stat-card-green">
                <h3>{{ online_users }}</h3>
                <p>کاربران آنلاین</p>
            </div>
        </div>
        <div class="col-md-3">
            <div class="stat-card stat-card-red">
                <h3>{{ admin_active_chats|length }}</h3>
                <p>چت‌های فعال شما</p>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6">
            <div class="card chat-list">
                <div class="card-header">
                    <h5><i class="fas fa-hourglass-half"></i> چت‌های در انتظار پاسخ</h5>
                    <i class="fas fa-sync refresh-btn" id="refresh-pending" title="بارگذاری مجدد"></i>
                </div>
                <div class="card-body" id="pending-chats-container">
                    {% if pending_rooms %}
                        {% for room in pending_rooms %}
                            <div class="chat-list-item pending">
                                <div class="chat-header">
                                    <div>
                                        <span class="chat-title">{{ room.name }}</span>
                                        <span class="chat-status chat-status-pending">در انتظار</span>
                                    </div>
                                    <span class="chat-time">{{ room.created_at|date:"Y/m/d H:i" }}</span>
                                </div>
                                <div class="chat-user">
                                    <i class="fas fa-user"></i>
                                    {% if room.user %}
                                        {{ room.user.get_full_name|default:room.user.username }}
                                    {% else %}
                                        کاربر ناشناس
                                    {% endif %}
                                </div>
                                {% if room.messages.last %}
                                    <div class="last-message">
                                        <i class="fas fa-comment-dots"></i> {{ room.messages.last.content|truncatechars:50 }}
                                    </div>
                                {% endif %}
                                <div class="chat-actions">
                                    <a href="{% url 'chat:chat_room' room.id %}" class="btn btn-sm btn-primary">
                                        <i class="fas fa-reply"></i> پاسخ
                                    </a>
                                    <button class="btn btn-sm btn-success assign-admin-btn" data-id="{{ room.id }}">
                                        <i class="fas fa-user-check"></i> اختصاص به من
                                    </button>
                                </div>
                            </div>
                        {% endfor %}
                    {% else %}
                        <div class="empty-state">
                            <i class="fas fa-check-circle text-success"></i>
                            <p>چت در انتظاری وجود ندارد.</p>
                        </div>
                    {% endif %}
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card chat-list">
                <div class="card-header">
                    <h5><i class="fas fa-comments"></i> چت‌های فعال شما</h5>
                    <i class="fas fa-sync refresh-btn" id="refresh-active" title="بارگذاری مجدد"></i>
                </div>
                <div class="card-body" id="active-chats-container">
                    {% if admin_active_chats %}
                        {% for room in admin_active_chats %}
                            <div class="chat-list-item active">
                                <div class="chat-header">
                                    <div>
                                        <span class="chat-title">{{ room.name }}</span>
                                        <span class="chat-status chat-status-active">فعال</span>
                                        {% if room.unread_count > 0 %}
                                            <span class="badge-unread">{{ room.unread_count }}</span>
                                        {% endif %}
                                    </div>
                                    <span class="chat-time">{{ room.updated_at|date:"Y/m/d H:i" }}</span>
                                </div>
                                <div class="chat-user">
                                    <i class="fas fa-user"></i>
                                    {% if room.user %}
                                        {{ room.user.get_full_name|default:room.user.username }}
                                    {% else %}
                                        کاربر ناشناس
                                    {% endif %}
                                </div>
                                {% if room.messages.last %}
                                    <div class="last-message">
                                        <i class="fas fa-comment-dots"></i> {{ room.messages.last.content|truncatechars:50 }}
                                    </div>
                                {% endif %}
                                <div class="chat-actions">
                                    <a href="{% url 'chat:chat_room' room.id %}" class="btn btn-sm btn-primary">
                                        <i class="fas fa-comments"></i> ادامه چت
                                    </a>
                                    <button class="btn btn-sm btn-danger close-chat-btn" data-id="{{ room.id }}">
                                        <i class="fas fa-times"></i> بستن چت
                                    </button>
                                </div>
                            </div>
                        {% endfor %}
                    {% else %}
                        <div class="empty-state">
                            <i class="fas fa-info-circle text-info"></i>
                            <p>شما هیچ چت فعالی ندارید.</p>
                        </div>
                    {% endif %}
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block extra_js %}
<script>
   document.addEventListener('DOMContentLoaded', function() {
        // دکمه‌های بستن چت
        const closeButtons = document.querySelectorAll('.close-chat-btn');

        closeButtons.forEach(button => {
            button.addEventListener('click', function() {
                if (confirm('آیا از بستن این چت اطمینان دارید؟')) {
                    const roomId = this.getAttribute('data-id');
                    closeChat(roomId);
                }
            });
        });

        // دکمه‌های اختصاص به من
        const assignButtons = document.querySelectorAll('.assign-admin-btn');

        assignButtons.forEach(button => {
            button.addEventListener('click', function() {
                const roomId = this.getAttribute('data-id');
                assignAdmin(roomId);
            });
        });

        // دکمه‌های بارگذاری مجدد
        const refreshPendingBtn = document.getElementById('refresh-pending');
        const refreshActiveBtn = document.getElementById('refresh-active');

        if (refreshPendingBtn) {
            refreshPendingBtn.addEventListener('click', function() {
                refreshPendingChats();
            });
        }

        if (refreshActiveBtn) {
            refreshActiveBtn.addEventListener('click', function() {
                refreshActiveChats();
            });
        }

        // تابع بستن چت
        function closeChat(roomId) {
            fetch(`/chat/close/${roomId}/`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': getCookie('csrftoken')
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // بارگذاری مجدد صفحه برای به‌روزرسانی لیست چت‌ها
                    location.reload();
                } else {
                    alert('خطا: ' + (data.error || 'عملیات با خطا مواجه شد.'));
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('خطا در ارتباط با سرور');
            });
        }

        // تابع اختصاص ادمین
        function assignAdmin(roomId) {
            fetch(`/chat/assign-admin/${roomId}/`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': getCookie('csrftoken')
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // بارگذاری مجدد صفحه برای به‌روزرسانی لیست چت‌ها
                    location.reload();
                } else {
                    alert('خطا: ' + (data.error || 'عملیات با خطا مواجه شد.'));
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('خطا در ارتباط با سرور');
            });
        }

        // تابع بارگذاری مجدد چت‌های در انتظار
        function refreshPendingChats() {
            fetch('/chat/api/pending-chats/')
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        const container = document.getElementById('pending-chats-container');
                        if (container) {
                            container.innerHTML = data.html;
                            // اضافه کردن مجدد event listener ها
                            addEventListeners();
                        }
                    } else {
                        console.error('Error refreshing pending chats:', data.error);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        }

        // تابع بارگذاری مجدد چت‌های فعال
        function refreshActiveChats() {
            fetch('/chat/api/active-chats/')
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        const container = document.getElementById('active-chats-container');
                        if (container) {
                            container.innerHTML = data.html;
                            // اضافه کردن مجدد event listener ها
                            addEventListeners();
                        }
                    } else {
                        console.error('Error refreshing active chats:', data.error);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        }

        // تابع اضافه کردن مجدد event listener ها
        function addEventListeners() {
            // دکمه‌های بستن چت
            document.querySelectorAll('.close-chat-btn').forEach(button => {
                button.addEventListener('click', function() {
                    if (confirm('آیا از بستن این چت اطمینان دارید؟')) {
                        const roomId = this.getAttribute('data-id');
                        closeChat(roomId);
                    }
                });
            });

            // دکمه‌های اختصاص به من
            document.querySelectorAll('.assign-admin-btn').forEach(button => {
                button.addEventListener('click', function() {
                    const roomId = this.getAttribute('data-id');
                    assignAdmin(roomId);
                });
            });
        }

        // تابع دریافت توکن CSRF از کوکی‌ها
        function getCookie(name) {
            let cookieValue = null;
            if (document.cookie && document.cookie !== '') {
                const cookies = document.cookie.split(';');
                for (let i = 0; i < cookies.length; i++) {
                    const cookie = cookies[i].trim();
                    if (cookie.substring(0, name.length + 1) === (name + '=')) {
                        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                        break;
                    }
                }
            }
            return cookieValue;
        }

        // بررسی چت‌های جدید هر 30 ثانیه
        setInterval(function() {
            refreshPendingChats();
            refreshActiveChats();
        }, 30000);
    });
</script>
{% endblock %}

====== FILE: templates/chat/chat_room.html ======

    {% extends "base/base.html" %}
    {% load static %}

    {% block title %}گفتگو با پشتیبانی{% endblock %}

    {% block extra_css %}
    <style>
        .chat-container {
            max-width: 900px;
            margin: 0 auto;
            height: calc(100vh - 250px);
            min-height: 500px;
            display: flex;
            flex-direction: column;
            border: 1px solid #dee2e6;
            border-radius: 10px;
            overflow: hidden;
        }

        .chat-header {
            background-color: #f8f9fa;
            padding: 15px;
            border-bottom: 1px solid #dee2e6;
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-shrink: 0;
        }

        .chat-title {
            font-weight: bold;
            font-size: 1.2rem;
        }

        .chat-status {
            padding: 5px 10px;
            border-radius: 15px;
            font-size: 0.8rem;
            margin-right: 10px;
        }

        .chat-status-active {
            background-color: #d4edda;
            color: #155724;
        }

        .chat-status-closed {
            background-color: #f8d7da;
            color: #721c24;
        }

        .chat-status-deleted {
            background-color: #f8d7da;
            color: #721c24;
        }

        .chat-messages {
            flex: 1;
            overflow-y: auto;
            padding: 15px;
            background-color: #f9f9f9;
            display: flex;
            flex-direction: column;
        }

        .message {
            max-width: 70%;
            margin-bottom: 15px;
            padding: 10px 15px;
            border-radius: 15px;
            position: relative;
            word-wrap: break-word;
        }

        .message-user {
            align-self: flex-end;
            background-color: #dcf8c6;
            border-bottom-right-radius: 5px;
            text-align: right;
        }

        .message-admin {
            align-self: flex-start;
            background-color: #fff;
            border-bottom-left-radius: 5px;
            box-shadow: 0 1px 2px rgba(0,0,0,0.1);
        }

        .message-system {
            align-self: center;
            background-color: #f1f1f1;
            border-radius: 20px;
            padding: 5px 15px;
            font-size: 0.85rem;
            color: #666;
            margin: 10px 0;
        }

        .message-time {
            font-size: 0.7rem;
            color: #777;
            margin-top: 5px;
            display: flex;
            justify-content: flex-end;
            align-items: center;
        }

        .message-time i {
            margin-right: 3px;
        }

        .chat-form {
            padding: 15px;
            background-color: #f8f9fa;
            border-top: 1px solid #dee2e6;
            flex-shrink: 0;
        }

        .chat-input-group {
            display: flex;
            align-items: center;
        }

        .chat-input {
            flex-grow: 1;
            border-radius: 20px;
            padding: 10px 15px;
            border: 1px solid #ced4da;
        }

        .chat-send-btn {
            margin-right: 10px;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .chat-attachment-btn {
            background-color: #f8f9fa;
            border: 1px solid #ced4da;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-left: 10px;
            cursor: pointer;
        }

        .chat-attachment-btn:hover {
            background-color: #e9ecef;
        }

        .chat-closed-notice {
            background-color: #f8d7da;
            color: #721c24;
            padding: 10px 15px;
            border-radius: 5px;
            text-align: center;
        }

        /* نشانگر تایپ کردن */
        .typing-indicator {
            background-color: #e6e6e6;
            border-radius: 15px;
            padding: 8px 15px;
            margin-bottom: 15px;
            max-width: 70%;
            position: relative;
        }

        .typing-indicator.admin-typing {
            align-self: flex-start;
            background-color: #fff;
            border-bottom-left-radius: 5px;
            box-shadow: 0 1px 2px rgba(0,0,0,0.1);
        }

        .typing-indicator.user-typing {
            align-self: flex-end;
            background-color: #dcf8c6;
            border-bottom-right-radius: 5px;
        }

        .typing-bubble {
            display: flex;
            align-items: center;
            justify-content: center;
            height: 20px;
        }

        .dot {
            height: 8px;
            width: 8px;
            background-color: #999;
            display: inline-block;
            border-radius: 50%;
            animation: typing 1.4s infinite both;
            margin: 0 2px;
        }

        .dot:nth-child(2) {
            animation-delay: 0.2s;
        }

        .dot:nth-child(3) {
            animation-delay: 0.4s;
        }

        @keyframes typing {
            0% { transform: translateY(0); }
            50% { transform: translateY(-5px); }
            100% { transform: translateY(0); }
        }

        /* استایل برای نشانگر خوانده شدن پیام */
        .message-read-status {
            margin-right: 5px;
            color: #777;
        }

        .message-delivered {
            color: #777;
        }

        .message-read {
            color: #0d6efd;
        }

        /* استایل برای دکمه برگشت */
        .back-button {
            display: flex;
            align-items: center;
            margin-left: 15px;
            margin-right: 15px;
            font-size: 0.9rem;
            color: #6c757d;
            text-decoration: none;
            cursor: pointer;
            padding: 5px 10px;
            border-radius: 5px;
            background-color: #f0f0f0;
        }

        .back-button:hover {
            color: #343a40;
            background-color: #e0e0e0;
            text-decoration: none;
        }

        .back-button i {
            margin-left: 5px;
        }

        .chat-title-container {
            display: flex;
            align-items: center;
        }

        .mr-2 {
            margin-right: 10px;
        }

        /* استایل برای پیام‌های حاوی فایل */
        .message-file {
            display: flex;
            flex-direction: column;
            margin-bottom: 10px;
        }

        .file-preview {
            max-width: 100%;
            max-height: 200px;
            margin-bottom: 5px;
            border-radius: 5px;
        }

        .file-info {
            display: flex;
            align-items: center;
            padding: 5px 10px;
            background-color: rgba(0,0,0,0.05);
            border-radius: 5px;
            margin-top: 5px;
        }

        .file-icon {
            margin-left: 10px;
            font-size: 1.2rem;
        }

        .file-name {
            flex-grow: 1;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            direction: ltr;
            text-align: left;
        }

        .file-size {
            margin-right: 10px;
            font-size: 0.8rem;
            color: #666;
        }

        .file-download {
            color: #0d6efd;
            text-decoration: none;
        }

        .file-download:hover {
            text-decoration: underline;
        }

        /* استایل برای نمایش فایل انتخاب شده قبل از ارسال */
        .selected-file {
            display: flex;
            align-items: center;
            padding: 5px 10px;
            background-color: #f0f0f0;
            border-radius: 5px;
            margin-bottom: 10px;
        }

        .selected-file-name {
            flex-grow: 1;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            direction: ltr;
            text-align: left;
        }

        .selected-file-remove {
            color: #dc3545;
            cursor: pointer;
            margin-right: 10px;
        }

        .selected-file-preview {
            max-width: 100px;
            max-height: 100px;
            margin-left: 10px;
            border-radius: 5px;
        }

        /* نمایش پیش‌نمایش فایل انتخاب شده */
        #file-preview-container {
            margin-bottom: 10px;
            display: none;
        }

        /* استایل برای وضعیت آنلاین/آفلاین کاربر */
        .user-status {
            display: inline-block;
            padding: 3px 8px;
            border-radius: 10px;
            font-size: 12px;
            margin-right: 10px;
        }

        .user-status.online {
            background-color: #28a745;
            color: white;
        }

        .user-status.offline {
            background-color: #6c757d;
            color: white;
        }

        .chat-header-info {
            display: flex;
            align-items: center;
        }

        /* استایل برای پیام های چند خطی */
        .message-text {
            white-space: pre-wrap;
            word-break: break-word;
        }

        /* استایل برای نشانگر تایپ کردن */
        .typing-indicator {
            padding: 8px 15px;
            border-radius: 15px;
            margin-top: 5px;
            margin-bottom: 10px;
            display: flex;
            align-items: center;
        }
    </style>
    {% endblock %}

    {% block content %}
    <div class="container mt-4">
        <div class="chat-container">
            <div class="chat-header">
                <div class="chat-title-container">
                    <a href="{% if user.is_staff %}{% url 'chat:admin_dashboard' %}{% else %}{% url 'chat:chat_list' %}{% endif %}" class="back-button">
                        <i class="fas fa-arrow-right"></i>
                        برگشت
                    </a>
                    <div class="chat-header-info">
                        <span class="chat-title mr-2">
                            {% if is_deleted_by_user %}
                                گفتگوی حذف شده توسط کاربر
                            {% else %}
                                {% if user.is_staff %}
                                    {{ room.user.username }}
                                {% else %}
                                    پشتیبانی
                                {% endif %}
                            {% endif %}
                        </span>
                        <div id="user-status" class="user-status offline"
                             data-user-id="{% if user.is_staff %}{{ room.user.id }}{% else %}{% if room.admin %}{{ room.admin.id }}{% else %}0{% endif %}{% endif %}">
                            آفلاین
                        </div>
                    </div>
                    {% if room.is_active and not is_deleted_by_user %}
                        <span class="chat-status chat-status-active">فعال</span>
                    {% elif is_deleted_by_user %}
                        <span class="chat-status chat-status-deleted">حذف شده</span>
                    {% else %}
                        <span class="chat-status chat-status-closed">بسته شده</span>
                    {% endif %}
                </div>
                {% if user.is_staff %}
                    <div class="dropdown">
                        <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" id="chatActions" data-bs-toggle="dropdown" aria-expanded="false">
                            عملیات
                        </button>
                        <ul class="dropdown-menu" aria-labelledby="chatActions">
                            {% if room.is_active and not is_deleted_by_user %}
                                <li><button class="dropdown-item close-chat-btn" data-id="{{ room.id }}">بستن گفتگو</button></li>
                            {% elif not is_deleted_by_user %}
                                <li><button class="dropdown-item reopen-chat-btn" data-id="{{ room.id }}">بازگشایی گفتگو</button></li>
                            {% endif %}
                            <li><button class="dropdown-item delete-chat-btn" data-id="{{ room.id }}">حذف گفتگو</button></li>
                        </ul>
                    </div>
                {% else %}
                    <button class="btn btn-sm btn-outline-danger delete-chat-btn" data-id="{{ room.id }}">حذف گفتگو</button>
                {% endif %}
            </div>

            <div class="chat-messages" id="chat-messages">
                {% for message in chat_messages %}
                    {% if message.message_type == 'system' %}
                        <div class="message message-system">
                            {{ message.content }}
                        </div>
                    {% else %}
                        <div class="message {% if message.sender == request.user %}message-user{% else %}message-admin{% endif %}" id="message-{{ message.id }}" data-message-id="{{ message.id }}">
                            {% if message.message_type == 'image' %}
                                <div class="message-file">
                                    <img src="{{ message.file.url }}" alt="تصویر" class="file-preview">
                                    {% if message.content %}
                                        <div>{{ message.content }}</div>
                                    {% endif %}
                                    <div class="file-info">
                                        <i class="fas fa-image file-icon"></i>
                                        <span class="file-name">{{ message.file_name }}</span>
                                        <a href="{{ message.file.url }}" class="file-download" download="{{ message.file_name }}">
                                            <i class="fas fa-download"></i>
                                        </a>
                                    </div>
                                </div>
                            {% elif message.message_type == 'file' %}
                                <div class="message-file">
                                    {% if message.content %}
                                        <div>{{ message.content }}</div>
                                    {% endif %}
                                    <div class="file-info">
                                        <i class="fas fa-file file-icon"></i>
                                        <span class="file-name">{{ message.file_name }}</span>
                                        <span class="file-size">{{ message.file_size|filesizeformat }}</span>
                                        <a href="{{ message.file.url }}" class="file-download" download="{{ message.file_name }}">
                                            <i class="fas fa-download"></i>
                                        </a>
                                    </div>
                                </div>
                            {% else %}
                                <div class="message-text">{{ message.content }}</div>
                            {% endif %}
                            <div class="message-time">
                                {{ message.created_at|date:"H:i" }}
                                {% if message.sender == request.user %}
                                    <span class="message-read-status">
                                        {% if message.is_read %}
                                            <i class="fas fa-check-double message-read" title="خوانده شده"></i>
                                        {% else %}
                                            <i class="fas fa-check message-delivered" title="تحویل داده شده"></i>
                                        {% endif %}
                                    </span>
                                {% endif %}
                            </div>
                        </div>
                    {% endif %}
                {% endfor %}
            </div>

            <div class="chat-form">
                {% if room.is_active and not is_deleted_by_user %}
                    <form id="chat-form">
                        <!-- نمایش پیش‌نمایش فایل انتخاب شده -->
                        <div id="file-preview-container" class="selected-file" style="display: none;">
                            <img id="selected-file-preview" class="selected-file-preview">
                            <div class="selected-file-name" id="selected-file-name"></div>
                            <span class="selected-file-remove" id="remove-file">
                                <i class="fas fa-times"></i>
                            </span>
                        </div>

                        <div class="chat-input-group">
                            <input type="file" id="chat-attachment" style="display: none;">
                            <button type="button" class="chat-attachment-btn" id="attachment-btn">
                                <i class="fas fa-paperclip"></i>
                            </button>
                            <input type="text" id="chat-input" class="form-control chat-input" placeholder="پیام خود را بنویسید...">
                            <button type="submit" class="btn btn-primary chat-send-btn">
                                <i class="fas fa-paper-plane"></i>
                            </button>
                        </div>
                    </form>
                {% elif is_deleted_by_user %}
                    <div class="chat-closed-notice">
                        این گفتگو توسط کاربر حذف شده است و امکان ارسال پیام جدید وجود ندارد.
                    </div>
                {% else %}
                    <div class="chat-closed-notice">
                        این گفتگو بسته شده است و امکان ارسال پیام جدید وجود ندارد.
                    </div>
                {% endif %}
            </div>
        </div>
    </div>
    {% endblock %}

    {% block extra_js %}
    <script>
        const roomId = '{{ room.id }}';
        const currentUser = '{{ request.user.username }}';
        const currentUserId = {{ request.user.id }};
        const isStaff = {% if request.user.is_staff %}true{% else %}false{% endif %};
        const csrftoken = getCookie('csrftoken');
        let chatSocket;
        let selectedFile = null;
        let typingTimeout;
        let isTyping = false;
        const MAX_FILE_SIZE = 10 * 1024 * 1024; // 10MB

        document.addEventListener('DOMContentLoaded', function() {
            console.log("DOM fully loaded");

            // اسکرول به پایین صفحه
            scrollToBottom();
            checkOtherUserStatus();

            // اتصال به WebSocket
            connectWebSocket();

            // فرم ارسال پیام
            const chatForm = document.getElementById('chat-form');
            if (chatForm) {
                console.log("Chat form found");
                chatForm.addEventListener('submit', function(e) {
                    e.preventDefault();
                    sendMessage();
                });
            } else {
                console.log("Chat form not found or chat is closed/deleted");
            }

            // دکمه حذف چت
            const deleteBtn = document.querySelector('.delete-chat-btn');
            if (deleteBtn) {
                deleteBtn.addEventListener('click', function() {
                    const chatId = this.getAttribute('data-id');
                    if (confirm('آیا از حذف این گفتگو اطمینان دارید؟')) {
                        deleteChat(chatId);
                    }
                });
            }

            // دکمه بستن چت
            const closeBtn = document.querySelector('.close-chat-btn');
            if (closeBtn) {
                closeBtn.addEventListener('click', function() {
                    const chatId = this.getAttribute('data-id');
                    if (confirm('آیا از بستن این گفتگو اطمینان دارید؟')) {
                        closeChat(chatId);
                    }
                });
            }

            // دکمه بازگشایی چت
            const reopenBtn = document.querySelector('.reopen-chat-btn');
            if (reopenBtn) {
                reopenBtn.addEventListener('click', function() {
                    const chatId = this.getAttribute('data-id');
                    if (confirm('آیا از بازگشایی این گفتگو اطمینان دارید؟')) {
                        reopenChat(chatId);
                    }
                });
            }

            // نمایش نشانگر تایپ کردن
            const chatInput = document.getElementById('chat-input');
            if (chatInput) {
                chatInput.addEventListener('input', function() {
                    if (chatSocket && chatSocket.readyState === WebSocket.OPEN) {
                        if (!isTyping) {
                            isTyping = true;
                            chatSocket.send(JSON.stringify({
                                'type': 'typing',
                                'is_typing': true
                            }));
                        }

                        // تنظیم مجدد تایمر
                        clearTimeout(typingTimeout);

                        // پس از 2 ثانیه، وضعیت تایپ کردن را متوقف کن
                        typingTimeout = setTimeout(() => {
                            isTyping = false;
                            if (chatSocket && chatSocket.readyState === WebSocket.OPEN) {
                                chatSocket.send(JSON.stringify({
                                    'type': 'typing',
                                    'is_typing': false
                                }));
                            }
                        }, 2000);
                    }
                });
            }

            // مدیریت انتخاب فایل
            const fileInput = document.getElementById('chat-attachment');
            const fileButton = document.getElementById('attachment-btn');
            const filePreviewContainer = document.getElementById('file-preview-container');
            const selectedFilePreview = document.getElementById('selected-file-preview');
            const selectedFileName = document.getElementById('selected-file-name');
            const removeFileBtn = document.getElementById('remove-file');

            // اضافه کردن رویداد کلیک به دکمه انتخاب فایل
            if (fileButton && fileInput) {
                fileButton.addEventListener('click', function(e) {
                    e.preventDefault();
                    fileInput.click();
                });
            }

            if (fileInput) {
                fileInput.addEventListener('change', function(e) {
                    if (this.files && this.files[0]) {
                        selectedFile = this.files[0];

                        // بررسی سایز فایل
                        if (selectedFile.size > MAX_FILE_SIZE) {
                            alert(`حجم فایل انتخاب شده بیش از حد مجاز است (حداکثر ${formatFileSize(MAX_FILE_SIZE)})`);
                            this.value = '';
                            selectedFile = null;
                            return;
                        }

                        selectedFileName.textContent = selectedFile.name;

                        // نمایش پیش‌نمایش برای تصاویر
                        if (selectedFile.type.startsWith('image/')) {
                            const reader = new FileReader();
                            reader.onload = function(e) {
                                selectedFilePreview.src = e.target.result;
                                selectedFilePreview.style.display = 'block';
                            }
                            reader.readAsDataURL(selectedFile);
                        } else {
                            selectedFilePreview.style.display = 'none';
                        }

                        filePreviewContainer.style.display = 'flex';
                    }
                });
            }

            if (removeFileBtn) {
                removeFileBtn.addEventListener('click', function() {
                    selectedFile = null;
                    if (fileInput) fileInput.value = '';
                    filePreviewContainer.style.display = 'none';
                });
            }

            // علامت‌گذاری پیام‌های خوانده نشده با تأخیر
            setTimeout(markMessagesAsRead, 1000);
        });

        // اتصال به WebSocket
        function connectWebSocket() {
            const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
            const wsUrl = `${wsProtocol}//${window.location.host}/ws/chat/${roomId}/`;
            console.log("Connecting to WebSocket:", wsUrl);

            try {
                chatSocket = new WebSocket(wsUrl);

                chatSocket.onopen = function(e) {
                    console.log('WebSocket connection established');
                };

                chatSocket.onmessage = function(e) {
                    const data = JSON.parse(e.data);
                    console.log("Received message:", data);

                    if (data.type === 'chat_message') {
                        // افزودن پیام به صفحه چت
                        addMessage(data);

                        // اگر پیام از طرف مقابل است، علامت‌گذاری به عنوان خوانده شده
                        if (data.user_id !== currentUserId) {
                            setTimeout(() => markMessageAsRead(data.message_id), 500);
                        }

                        // حذف نشانگر تایپ کردن
                        removeTypingIndicator();

                        // اسکرول به پایین
                        scrollToBottom();
                    } else if (data.type === 'typing') {
                        // نمایش یا حذف نشانگر تایپ کردن
                        if (data.user_id !== currentUserId) {
                            if (data.is_typing) {
                                showTypingIndicator(data.is_staff);
                            } else {
                                removeTypingIndicator();
                            }
                        }
                    } else if (data.type === 'user_status_update') {
                        // بروزرسانی وضعیت کاربر
                        updateUserStatus(data.status);
                    } else if (data.type === 'message_read') {
                        // بروزرسانی وضعیت خوانده شدن پیام
                        updateMessageReadStatus(data.message_id);
                    } else if (data.type === 'chat_deleted') {
                        // چت حذف شده است
                        if (confirm('این گفتگو توسط طرف مقابل حذف شده است. صفحه بارگذاری مجدد خواهد شد.')) {
                            location.reload();
                        }
                    } else if (data.type === 'chat_status_update') {
                        // وضعیت چت تغییر کرده است
                        if (confirm('وضعیت گفتگو تغییر کرده است. صفحه بارگذاری مجدد خواهد شد.')) {
                            location.reload();
                        }
                    }
                };

                chatSocket.onclose = function(e) {
                    console.log('WebSocket connection closed');
                    // تلاش مجدد برای اتصال پس از 5 ثانیه
                    setTimeout(connectWebSocket, 5000);
                };

                chatSocket.onerror = function(e) {
                    console.error("WebSocket error:", e);
                };
            } catch (error) {
                console.error("Error creating WebSocket:", error);
            }
        }

        // نمایش نشانگر تایپ کردن
        function showTypingIndicator(isAdmin) {
            // حذف نشانگر قبلی اگر وجود دارد
            removeTypingIndicator();

            const messagesContainer = document.getElementById('chat-messages');
            const typingIndicator = document.createElement('div');

            typingIndicator.id = 'typing-indicator';
            typingIndicator.className = isAdmin ?
                'typing-indicator admin-typing' :
                'typing-indicator user-typing';

            typingIndicator.innerHTML = `
                <div class="typing-bubble">
                    <span class="dot"></span>
                    <span class="dot"></span>
                    <span class="dot"></span>
                </div>
            `;

            messagesContainer.appendChild(typingIndicator);
            scrollToBottom();
        }

        // حذف نشانگر تایپ کردن
        function removeTypingIndicator() {
            const typingIndicator = document.getElementById('typing-indicator');
            if (typingIndicator) {
                typingIndicator.remove();
            }
        }


        // بروزرسانی وضعیت آنلاین/آفلاین کاربر
        function updateUserStatus(status) {
        const userStatus = document.getElementById('user-status');
        if (userStatus) {
            userStatus.className = `user-status ${status}`;
            userStatus.textContent = status === 'online' ? 'آنلاین' : 'آفلاین';
            console.log(`User status updated to: ${status}`);
        }
    }

        // ارسال پیام
        function sendMessage() {
            const messageInput = document.getElementById('chat-input');
            const message = messageInput.value.trim();

            // اگر نه پیام داریم و نه فایل، کاری انجام نده
            if (!message && !selectedFile) {
                return;
            }

            if (selectedFile) {
                // ارسال پیام با فایل
                const reader = new FileReader();
                reader.onload = function(e) {
                    try {
                        const fileData = {
                            info: {
                                name: selectedFile.name,
                                type: selectedFile.type,
                                size: selectedFile.size
                            },
                            content: e.target.result
                        };

                        if (chatSocket && chatSocket.readyState === WebSocket.OPEN) {
                            chatSocket.send(JSON.stringify({
                                'type': 'chat_message',
                                'message': message,
                                'file': fileData
                            }));

                            // پاک کردن فیلدها
                            messageInput.value = '';
                            selectedFile = null;
                            document.getElementById('chat-attachment').value = '';
                            document.getElementById('file-preview-container').style.display = 'none';
                        } else {
                            alert("خطا در ارتباط با سرور. لطفا صفحه را رفرش کنید.");
                        }
                    } catch (error) {
                        console.error("Error sending file:", error);
                        alert("خطا در ارسال فایل: " + error.message);
                    }
                };

                reader.onerror = function(e) {
                    console.error("Error reading file:", e);
                    alert("خطا در خواندن فایل");
                };

                try {
                    reader.readAsDataURL(selectedFile);
                } catch (error) {
                    console.error("Error starting file read:", error);
                    alert("خطا در خواندن فایل: " + error.message);
                }
            } else {
                // ارسال پیام متنی
                if (chatSocket && chatSocket.readyState === WebSocket.OPEN) {
                    chatSocket.send(JSON.stringify({
                        'type': 'chat_message',
                        'message': message
                    }));

                    messageInput.value = '';
                } else {
                    alert("خطا در ارتباط با سرور. لطفا صفحه را رفرش کنید.");
                }
            }
        }

        // افزودن پیام به لیست پیام‌ها
        function addMessage(data) {
            const messageContainer = document.getElementById('chat-messages');
            const messageDiv = document.createElement('div');

            // تنظیم کلاس‌ها بر اساس فرستنده پیام
            const isOwnMessage = data.user_id === currentUserId;
            messageDiv.className = isOwnMessage ? 'message message-user' : 'message message-admin';
            messageDiv.id = `message-${data.message_id}`;
            messageDiv.setAttribute('data-message-id', data.message_id);

            // تنظیم محتوای پیام بر اساس نوع آن
            let messageContent = '';

            if (data.message_type === 'image') {
                messageContent = `
                    <div class="message-file">
                        <img src="${data.file_url}" alt="تصویر" class="file-preview">
                        ${data.message ? `<div class="message-text">${data.message}</div>` : ''}
                        <div class="file-info">
                            <i class="fas fa-image file-icon"></i>
                            <span class="file-name">${data.file_name}</span>
                            <a href="${data.file_url}" class="file-download" download="${data.file_name}">
                                <i class="fas fa-download"></i>
                            </a>
                        </div>
                    </div>
                `;
            } else if (data.message_type === 'file') {
                messageContent = `
                    <div class="message-file">
                        ${data.message ? `<div class="message-text">${data.message}</div>` : ''}
                        <div class="file-info">
                            <i class="fas fa-file file-icon"></i>
                            <span class="file-name">${data.file_name}</span>
                            <a href="${data.file_url}" class="file-download" download="${data.file_name}">
                                <i class="fas fa-download"></i>
                            </a>
                        </div>
                    </div>
                `;
            } else {
                messageContent = `<div class="message-text">${data.message}</div>`;
            }

            // افزودن زمان و وضعیت خوانده شدن
            messageContent += `
                <div class="message-time">
                    ${formatTime(data.timestamp)}
                    ${isOwnMessage ? '<span class="message-read-status"><i class="fas fa-check message-delivered" title="تحویل داده شده"></i></span>' : ''}
                </div>
            `;

            messageDiv.innerHTML = messageContent;
            messageContainer.appendChild(messageDiv);

            // اسکرول به پایین
            scrollToBottom();
        }

        // فرمت‌بندی زمان
        function formatTime(timestamp) {
            if (!timestamp) return '';

            const date = new Date(timestamp);
            const hours = date.getHours().toString().padStart(2, '0');
            const minutes = date.getMinutes().toString().padStart(2, '0');

            return `${hours}:${minutes}`;
        }

        // اسکرول به پایین صفحه
        function scrollToBottom() {
            const messagesContainer = document.getElementById('chat-messages');
            if (messagesContainer) {
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
            }
        }

        // علامت‌گذاری پیام‌ها به عنوان خوانده شده
        function markMessagesAsRead() {
            // فقط پیام‌های دریافتی را علامت‌گذاری کن
            const unreadMessages = document.querySelectorAll(isStaff ? '.message-user' : '.message-admin');

            if (unreadMessages.length > 0) {
                unreadMessages.forEach(msg => {
                    const messageId = msg.getAttribute('data-message-id');
                    if (messageId) {
                        markMessageAsRead(messageId);
                    }
                });
            }
        }

        // علامت‌گذاری یک پیام به عنوان خوانده شده
        function markMessageAsRead(messageId) {
            fetch(`/chat/mark-read/${messageId}/`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': csrftoken
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    // بروزرسانی وضعیت خوانده شدن در رابط کاربری
                    updateMessageReadStatus(messageId);
                }
            })
            .catch(error => console.error('Error marking message as read:', error));
        }

        // بروزرسانی نشانگر خوانده شدن پیام در رابط کاربری
        function updateMessageReadStatus(messageId) {
            const message = document.querySelector(`[data-message-id="${messageId}"]`);
            if (message) {
                const statusIcon = message.querySelector('.message-read-status i');
                if (statusIcon) {
                    statusIcon.className = 'fas fa-check-double message-read';
                    statusIcon.setAttribute('title', 'خوانده شده');
                }
            }
        }

        // حذف چت
        function deleteChat(chatId) {
            fetch(`/chat/delete/${chatId}/`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': csrftoken
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // هدایت به لیست چت‌ها یا دشبورد ادمین
                    if (isStaff) {
                        window.location.href = "{% url 'chat:admin_dashboard' %}";
                    } else {
                        window.location.href = "{% url 'chat:chat_list' %}";
                    }
                } else {
                    alert('خطا در حذف گفتگو: ' + (data.error || 'خطای نامشخص'));
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('خطا در ارتباط با سرور');
            });
        }

        // بستن چت
        function closeChat(chatId) {
            fetch(`/chat/close/${chatId}/`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': csrftoken
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // بارگذاری مجدد صفحه
                    location.reload();
                } else {
                    alert('خطا در بستن گفتگو: ' + (data.error || 'خطای نامشخص'));
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('خطا در ارتباط با سرور');
            });
        }

        // بازگشایی چت
        function reopenChat(chatId) {
            fetch(`/chat/reopen/${chatId}/`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': csrftoken
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // بارگذاری مجدد صفحه
                    location.reload();
                } else {
                    alert('خطا در بازگشایی گفتگو: ' + (data.error || 'خطای نامشخص'));
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('خطا در ارتباط با سرور');
            });
        }

        // تبدیل سایز فایل به فرمت خوانا
        function formatFileSize(bytes) {
            if (bytes === 0) return '0 بایت';

            const k = 1024;
            const sizes = ['بایت', 'کیلوبایت', 'مگابایت', 'گیگابایت'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));

            return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];
        }
        function checkOtherUserStatus() {
            const otherUserId = document.getElementById('user-status').getAttribute('data-user-id');

            if (!otherUserId || otherUserId === '') {
                console.log('No other user ID found');
                return;
            }

            fetch(`/chat/user-status/${otherUserId}/`)
                .then(response => response.json())
                .then(data => {
                    if (data.status) {
                        updateUserStatus(data.status);
                    }
                })
                .catch(error => console.error('Error fetching user status:', error));
        }
        setInterval(checkOtherUserStatus, 30000);

        // دریافت توکن CSR  F از کوکی‌ها
        function getCookie(name) {
            let cookieValue = null;
            if (document.cookie && document.cookie !== '') {
                const cookies = document.cookie.split(';');
                for (let i = 0; i < cookies.length; i++) {
                    const cookie = cookies[i].trim();
                    if (cookie.substring(0, name.length + 1) === (name + '=')) {
                        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                        break;
                    }
                }
            }
            return cookieValue;
        }
    </script>
    {% endblock %}

====== FILE: templates/chat/start_chat.html ======

{% extends "base/base.html" %}
{% load static %}

{% block title %}شروع چت جدید{% endblock %}

{% block content %}
<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0">شروع گفتگو با پشتیبانی</h4>
                </div>
                <div class="card-body">
                    <p class="lead">برای شروع گفتگو با پشتیبانی زیما، لطفاً روی دکمه زیر کلیک کنید.</p>
                    <p>کارشناسان ما آماده پاسخگویی به سوالات شما هستند.</p>
                    
                    <form method="post" action="{% url 'chat:start_chat' %}">
                        {% csrf_token %}
                        <div class="text-center mt-4">
                            <button type="submit" class="btn btn-primary btn-lg">
                                <i class="fas fa-comments me-2"></i>
                                شروع گفتگو
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

====== FILE: templates/chat/chat_list.html ======

{% extends "base/base.html" %}
{% load static %}

{% block title %}گفتگوهای من{% endblock %}

{% block extra_css %}
<style>
    .chat-list-container {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
    }

    .chat-item {
        background-color: #fff;
        border-radius: 10px;
        padding: 15px;
        margin-bottom: 15px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .chat-item:hover {
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        transform: translateY(-2px);
    }

    .chat-info {
        flex-grow: 1;
    }

    .chat-title {
        font-weight: bold;
        font-size: 1.1rem;
        margin-bottom: 5px;
    }

    .chat-meta {
        color: #777;
        font-size: 0.85rem;
    }

    .chat-status {
        margin-left: 10px;
        padding: 3px 10px;
        border-radius: 15px;
        font-size: 0.8rem;
    }

    .chat-status-active {
        background-color: #d4edda;
        color: #155724;
    }

    .chat-status-closed {
        background-color: #f8d7da;
        color: #721c24;
    }

    .chat-actions {
        display: flex;
        align-items: center;
    }

    .chat-unread {
        background-color: #007bff;
        color: white;
        border-radius: 50%;
        width: 24px;
        height: 24px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 0.8rem;
        margin-right: 15px;
    }

    .btn-chat-action {
        margin-left: 5px;
        padding: 5px 10px;
        border-radius: 5px;
        font-size: 0.9rem;
    }

    .empty-state {
        text-align: center;
        padding: 40px 20px;
        background-color: #f9f9f9;
        border-radius: 10px;
        color: #666;
    }

    .empty-state i {
        font-size: 3rem;
        margin-bottom: 15px;
        color: #ccc;
    }

    .btn-new-chat {
        background: linear-gradient(135deg, #0b93f6, #0a84e0);
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 30px;
        font-size: 1rem;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.3s ease;
        box-shadow: 0 4px 6px rgba(10, 132, 224, 0.3);
    }

    .btn-new-chat:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 10px rgba(10, 132, 224, 0.4);
        color: white;
    }

    .btn-new-chat i {
        margin-right: 8px;
    }
</style>
{% endblock %}

{% block content %}
<div class="container mt-4">
    <div class="chat-list-container">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h3>گفتگوهای من</h3>
            <a href="{% url 'chat:start_chat' %}" class="btn btn-new-chat">
                <i class="fas fa-plus"></i>
                گفتگوی جدید
            </a>
        </div>

        {% if user_chats %}
            <div class="chat-list">
                {% for chat in user_chats %}
                    <div class="chat-item" id="chat-item-{{ chat.id }}">
                        <div class="chat-info">
                            <div class="chat-title">
                                گفتگوی پشتیبانی
                                <span class="chat-status chat-status-active">فعال</span>
                            </div>
                            <div class="chat-meta">
                                <i class="far fa-clock"></i> آخرین بروزرسانی: {{ chat.updated_at|date:"Y/m/d H:i" }}
                            </div>
                        </div>
                        <div class="chat-actions">
                            {% if chat.unread_count > 0 %}
                                <div class="chat-unread">{{ chat.unread_count }}</div>
                            {% endif %}
                            <a href="{% url 'chat:chat_room' room_id=chat.id %}" class="btn btn-primary btn-sm btn-chat-action">
                                <i class="fas fa-comment"></i> مشاهده
                            </a>
                            <button class="btn btn-danger btn-sm btn-chat-action delete-chat-btn" data-id="{{ chat.id }}">
                                <i class="fas fa-trash"></i> حذف
                            </button>
                        </div>
                    </div>
                {% endfor %}
            </div>
        {% else %}
            <div class="empty-state">
                <i class="far fa-comments"></i>
                <h4>هیچ گفتگویی ندارید</h4>
                <p>برای شروع گفتگو با پشتیبانی، روی دکمه گفتگوی جدید کلیک کنید.</p>
                <a href="{% url 'chat:start_chat' %}" class="btn btn-primary mt-3">
                    <i class="fas fa-plus"></i> شروع گفتگوی جدید
                </a>
            </div>
        {% endif %}
    </div>
</div>
{% endblock %}

{% block extra_js %}
<script>
    // حذف چت
    document.addEventListener('DOMContentLoaded', function() {
        const csrftoken = getCookie('csrftoken');

        document.querySelectorAll('.delete-chat-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const chatId = this.getAttribute('data-id');
                if (confirm('آیا از حذف این گفتگو اطمینان دارید؟')) {
                    deleteChat(chatId);
                }
            });
        });

        function deleteChat(chatId) {
            fetch(`/chat/delete/${chatId}/`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': csrftoken
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // حذف المان از صفحه
                    const chatElement = document.getElementById(`chat-item-${chatId}`);
                    chatElement.style.height = chatElement.offsetHeight + 'px';
                    chatElement.style.opacity = '0';
                    chatElement.style.transform = 'translateX(100%)';
                    setTimeout(() => {
                        chatElement.remove();
                        // اگر دیگر چتی وجود ندارد، صفحه را رفرش کن
                        if (document.querySelectorAll('.chat-item').length === 0) {
                            location.reload();
                        }
                    }, 300);
                } else {
                    alert('خطا در حذف گفتگو: ' + (data.error || 'خطای نامشخص'));
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('خطا در ارتباط با سرور');
            });
        }

        // دریافت توکن CSRF از کوکی‌ها
        function getCookie(name) {
            let cookieValue = null;
            if (document.cookie && document.cookie !== '') {
                const cookies = document.cookie.split(';');
                for (let i = 0; i < cookies.length; i++) {
                    const cookie = cookies[i].trim();
                    if (cookie.substring(0, name.length + 1) === (name + '=')) {
                        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                        break;
                    }
                }
            }
            return cookieValue;
        }
    });
</script>
{% endblock %}

====== FILE: templates/chat/notifications.html ======

{% extends "base/base.html" %}
{% load static %}

{% block title %}اعلان‌های من{% endblock %}

{% block extra_css %}
<style>
    .notifications-container {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
    }

    .notification-item {
        background-color: #fff;
        border-radius: 10px;
        padding: 15px;
        margin-bottom: 15px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        transition: all 0.3s ease;
        position: relative;
    }

    .notification-item:hover {
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        transform: translateY(-2px);
    }

    .notification-unread {
        border-right: 4px solid #007bff;
    }

    .notification-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
    }

    .notification-title {
        font-weight: bold;
        font-size: 1.1rem;
    }

    .notification-time {
        color: #777;
        font-size: 0.8rem;
    }

    .notification-content {
        color: #555;
    }

    .notification-type {
        display: inline-block;
        padding: 3px 10px;
        border-radius: 15px;
        font-size: 0.8rem;
        margin-right: 10px;
    }

    .notification-type-chat {
        background-color: #d4edda;
        color: #155724;
    }

    .notification-type-order {
        background-color: #cce5ff;
        color: #004085;
    }

    .notification-type-product {
        background-color: #fff3cd;
        color: #856404;
    }

    .notification-type-system {
        background-color: #f8d7da;
        color: #721c24;
    }

    .notification-mark-read {
        position: absolute;
        top: 15px;
        left: 15px;
        color: #6c757d;
        cursor: pointer;
        transition: color 0.3s ease;
    }

    .notification-mark-read:hover {
        color: #007bff;
    }

    .empty-state {
        text-align: center;
        padding: 40px 20px;
        background-color: #f9f9f9;
        border-radius: 10px;
        color: #666;
    }

    .empty-state i {
        font-size: 3rem;
        margin-bottom: 15px;
        color: #ccc;
    }
</style>
{% endblock %}

{% block content %}
<div class="container mt-4">
    <div class="notifications-container">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h3>اعلان‌های من</h3>
        </div>

        {% if notifications %}
            <div class="notifications-list">
                {% for notification in notifications %}
                    <div class="notification-item {% if not notification.is_read %}notification-unread{% endif %}" id="notification-{{ notification.id }}">
                        <div class="notification-header">
                            <div>
                                <span class="notification-title">{{ notification.title }}</span>
                                <span class="notification-type notification-type-{{ notification.notification_type }}">
                                    {% if notification.notification_type == 'chat' %}
                                        <i class="fas fa-comment"></i> پیام چت
                                    {% elif notification.notification_type == 'order' %}
                                        <i class="fas fa-shopping-cart"></i> سفارش
                                    {% elif notification.notification_type == 'product' %}
                                        <i class="fas fa-box"></i> محصول
                                    {% else %}
                                        <i class="fas fa-bell"></i> سیستم
                                    {% endif %}
                                </span>
                            </div>
                            <span class="notification-time">{{ notification.created_at|date:"Y/m/d H:i" }}</span>
                        </div>
                        <div class="notification-content">
                            {{ notification.message }}
                        </div>
                        {% if not notification.is_read %}
                            <div class="notification-mark-read" data-id="{{ notification.id }}" title="علامت‌گذاری به عنوان خوانده شده">
                                <i class="fas fa-check-circle"></i>
                            </div>
                        {% endif %}
                    </div>
                {% endfor %}
            </div>
        {% else %}
            <div class="empty-state">
                <i class="fas fa-bell-slash"></i>
                <h4>هیچ اعلانی ندارید</h4>
                <p>اعلان‌های جدید در اینجا نمایش داده می‌شوند.</p>
            </div>
        {% endif %}
    </div>
</div>
{% endblock %}

{% block extra_js %}
<script>
    // علامت‌گذاری اعلان به عنوان خوانده شده
    document.querySelectorAll('.notification-mark-read').forEach(btn => {
        btn.addEventListener('click', function() {
            const notificationId = this.getAttribute('data-id');
            markNotificationAsRead(notificationId);
        });
    });

    function markNotificationAsRead(notificationId) {
        fetch(`/chat/notifications/${notificationId}/read/`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRFToken': getCookie('csrftoken')
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                const notification = document.getElementById(`notification-${notificationId}`);
                notification.classList.remove('notification-unread');
                const markReadBtn = notification.querySelector('.notification-mark-read');
                if (markReadBtn) {
                    markReadBtn.remove();
                }
            }
        });
    }

    // دریافت توکن CSRF از کوکی‌ها
    function getCookie(name) {
        let cookieValue = null;
        if (document.cookie && document.cookie !== '') {
            const cookies = document.cookie.split(';');
            for (let i = 0; i < cookies.length; i++) {
                const cookie = cookies[i].trim();
                if (cookie.substring(0, name.length + 1) === (name + '=')) {
                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                    break;
                }
            }
        }
        return cookieValue;
    }
</script>
{% endblock %}

====== FILE: templates/chat/partials/pending_chats.html ======

{% if pending_rooms %}
    {% for room in pending_rooms %}
        <div class="chat-list-item pending">
            <div class="chat-header">
                <div>
                    <span class="chat-title">{{ room.name }}</span>
                    <span class="chat-status chat-status-pending">در انتظار</span>
                </div>
                <span class="chat-time">{{ room.created_at|date:"Y/m/d H:i" }}</span>
            </div>
            <div class="chat-user">
                <i class="fas fa-user"></i>
                {% if room.user %}
                    {{ room.user.get_full_name|default:room.user.username }}
                {% else %}
                    کاربر ناشناس
                {% endif %}
            </div>
            {% if room.last_message %}
                <div class="last-message">
                    <i class="fas fa-comment-dots"></i> {{ room.last_message.content|truncatechars:50 }}
                </div>
            {% endif %}
            <div class="chat-actions">
                <a href="{% url 'chat:chat_room' room.id %}" class="btn btn-sm btn-primary">
                    <i class="fas fa-reply"></i> پاسخ
                </a>
                <button class="btn btn-sm btn-success assign-admin-btn" data-id="{{ room.id }}">
                    <i class="fas fa-user-check"></i> اختصاص به من
                </button>
            </div>
        </div>
    {% endfor %}
{% else %}
    <div class="empty-state">
        <i class="fas fa-check-circle text-success"></i>
        <p>چت در انتظاری وجود ندارد.</p>
    </div>
{% endif %}

====== FILE: templates/chat/partials/active_chats.html ======

{% if admin_active_chats %}
    {% for room in admin_active_chats %}
        <div class="chat-list-item active">
            <div class="chat-header">
                <div>
                    <span class="chat-title">{{ room.name }}</span>
                    <span class="chat-status chat-status-active">فعال</span>
                    {% if room.unread_count > 0 %}
                        <span class="badge-unread">{{ room.unread_count }}</span>
                    {% endif %}
                </div>
                <span class="chat-time">{{ room.updated_at|date:"Y/m/d H:i" }}</span>
            </div>
            <div class="chat-user">
                <i class="fas fa-user"></i>
                {% if room.user %}
                    {{ room.user.get_full_name|default:room.user.username }}
                {% else %}
                    کاربر ناشناس
                {% endif %}
            </div>
            {% if room.last_message %}
                <div class="last-message">
                    <i class="fas fa-comment-dots"></i> {{ room.last_message.content|truncatechars:50 }}
                </div>
            {% endif %}
            <div class="chat-actions">
                <a href="{% url 'chat:chat_room' room.id %}" class="btn btn-sm btn-primary">
                    <i class="fas fa-comments"></i> ادامه چت
                </a>
                <button class="btn btn-sm btn-danger close-chat-btn" data-id="{{ room.id }}">
                    <i class="fas fa-times"></i> بستن چت
                </button>
            </div>
        </div>
    {% endfor %}
{% else %}
    <div class="empty-state">
        <i class="fas fa-info-circle text-info"></i>
        <p>شما هیچ چت فعالی ندارید.</p>
    </div>
{% endif %}

====== FILE: templates/base/header.html ======

<header class="py-2 bg-light">
    <div class="container d-flex justify-content-between align-items-center">
        <!-- لوگو -->
        <div class="logo">
            <a href="{% url 'home' %}">
                <img src="{% static 'images/logo.png' %}" alt="زیما" height="50">
            </a>
        </div>

        <!-- جستجو -->
        <div class="search-box flex-grow-1 mx-4">
            <form action="{% url 'products:search' %}" method="get" class="d-flex">
                <input type="text" name="search" placeholder="جستجو در محصولات..." class="form-control">
                <button type="submit" class="btn btn-primary me-2">
                    <i class="fa fa-search"></i>
                </button>
            </form>
        </div>

        <!-- آیکون‌های سمت راست -->
        <div class="header-icons d-flex">
            <div class="me-3">
                {% if user.is_authenticated %}
                    <a href="{% url 'users:profile' %}" class="text-dark text-decoration-none">
                        <i class="fas fa-user fa-lg"></i>
                        <span class="d-none d-md-inline">{{ user.username }}</span>
                    </a>
                {% else %}
                    <a href="{% url 'users:login' %}" class="text-dark text-decoration-none">
                        <i class="fas fa-user fa-lg"></i>
                        <span class="d-none d-md-inline">ورود / ثبت‌نام</span>
                    </a>
                {% endif %}
            </div>

            <div class="position-relative me-3">
                <a href="{% url 'cart:summary' %}" class="text-dark text-decoration-none">
                    <i class="fas fa-shopping-cart fa-lg"></i>
                    <span class="badge bg-danger position-absolute top-0 start-100 translate-middle rounded-pill">
                        {{ request.session.cart|default:"0"|length }}
                    </span>
                </a>
            </div>
        </div>
    </div>
</header>

====== FILE: templates/base/base.html ======

<!DOCTYPE html>
<html lang="fa" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}فروشگاه زیما{% endblock %}</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.rtl.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        /* استایل برای آیکون سبد خرید */
        .cart-icon {
            position: relative;
            display: inline-block;
            margin-right: 15px;
            color: white;
            font-size: 1.2rem;
            text-decoration: none;
        }

        .cart-count {
            position: absolute;
            top: -8px;
            right: -8px;
            background-color: #dc3545;
            color: white;
            border-radius: 50%;
            width: 18px;
            height: 18px;
            font-size: 0.7rem;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .cart-icon:hover {
            color: #f8f9fa;
        }

        /* استایل برای دکمه چت */
        .floating-chat-btn {
            position: fixed;
            bottom: 20px;
            left: 20px;
            width: 60px;
            height: 60px;
            background: linear-gradient(45deg, #007bff, #0056b3);
            color: white;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 4px 12px rgba(0,123,255,0.3);
            cursor: pointer;
            z-index: 1000;
            transition: all 0.3s ease;
        }

        .floating-chat-btn:hover {
            transform: scale(1.1);
            box-shadow: 0 6px 16px rgba(0,123,255,0.4);
        }

        /* استایل برای نشانگر تعداد پیام‌های خوانده نشده روی دکمه چت */
        .floating-chat-badge {
            position: absolute;
            top: -5px;
            right: -5px;
            background: #dc3545;
            color: white;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.8rem;
        }

        .notification-badge {
            font-size: 0.7rem;
            padding: 0.25rem 0.5rem;
        }

        /* استایل برای اعلان‌ها */
        .notification-container {
            position: fixed;
            top: 20px;
            left: 20px;
            z-index: 1001;
            width: 300px;
        }

        .notification {
            background-color: white;
            border-right: 4px solid #007bff;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            padding: 15px;
            margin-bottom: 10px;
            border-radius: 4px;
            animation: slideIn 0.3s ease-out;
            display: flex;
            flex-direction: column;
        }

        .notification-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 5px;
        }

        .notification-title {
            font-weight: bold;
            color: #333;
        }

        .notification-close {
            cursor: pointer;
            color: #999;
        }

        .notification-message {
            color: #666;
        }

        .notification-action {
            margin-top: 10px;
            text-align: left;
        }

        .notification-action a {
            color: #007bff;
            text-decoration: none;
            font-size: 0.9em;
        }

        @keyframes slideIn {
            from {
                transform: translateX(-100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }

        @keyframes fadeOut {
            from {
                opacity: 1;
            }
            to {
                opacity: 0;
            }
        }

        /* استایل برای اعلان‌های چت */
        .chat-notification {
            position: fixed;
            bottom: 90px;
            left: 20px;
            width: 300px;
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            padding: 15px;
            z-index: 1000;
            transform: translateY(20px);
            opacity: 0;
            transition: transform 0.3s ease, opacity 0.3s ease;
        }

        .chat-notification.show {
            transform: translateY(0);
            opacity: 1;
        }

        .chat-notification-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
        }

        .chat-notification-body {
            margin-bottom: 10px;
            color: #555;
        }

        .chat-notification-footer {
            text-align: right;
        }

        .close-btn {
            background: none;
            border: none;
            font-size: 18px;
            cursor: pointer;
            color: #999;
        }

        .view-btn {
            background-color: #007bff;
            color: white;
            border: none;
            padding: 5px 10px;
            border-radius: 4px;
            cursor: pointer;
        }

        .view-btn:hover {
            background-color: #0056b3;
        }
    </style>
    {% block extra_css %}{% endblock %}
</head>
<body>
    <header class="bg-dark text-white py-3">
        <div class="container">
            <div class="row align-items-center">
                <div class="col-md-3">
                    <h1 class="h4 mb-0"><a href="/" class="text-white text-decoration-none">فروشگاه زیما</a></h1>
                </div>
                <div class="col-md-6">
                    <form class="d-flex" action="{% url 'products:search' %}" method="GET">
                    <input class="form-control me-2" type="search" name="q" placeholder="جستجو..." aria-label="Search" value="{{ request.GET.q|default:'' }}">
                    <button class="btn btn-outline-light" type="submit">جستجو</button>
                    </form>
                </div>
                <div class="col-md-3 text-end d-flex align-items-center justify-content-end">
                    <!-- آیکون سبد خرید -->
                    <a href="{% url 'cart:summary' %}" class="cart-icon me-3">
                        <i class="fas fa-shopping-cart"></i>
                        <span class="cart-count" id="cart-items-count">
                            {% if user.is_authenticated %}
                                {{ user.cart_items.count }}
                            {% else %}
                                0
                            {% endif %}
                        </span>
                    </a>

                    <!-- آیکون نوتیفیکیشن -->
                    {% if user.is_authenticated %}
                    <a href="{% url 'chat:notifications' %}" class="cart-icon me-3">
                        <i class="fas fa-bell"></i>
                        <span class="cart-count" id="notification-count" style="display: none;">0</span>
                    </a>
                    {% endif %}

                    {% if user.is_authenticated %}
                        <div class="dropdown">
                            <button class="btn btn-outline-light dropdown-toggle" type="button" id="userDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                {{ user.username }}
                            </button>
                            <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="userDropdown">
                                <li><a class="dropdown-item" href="{% url 'users:profile' %}">پروفایل</a></li>
                                <li><a class="dropdown-item" href="#">سفارشات من</a></li>
                                <li><a class="dropdown-item" href="{% url 'chat:chat_list' %}">
                                    <i class="fas fa-comments"></i> چت‌های من
                                    <span class="badge bg-danger notification-badge" id="chat-notification-badge" style="display: none;">0</span>
                                </a></li>
                                {% if user.is_staff %}
                                    <li><a class="dropdown-item" href="{% url 'admin:index' %}">پنل مدیریت</a></li>
                                    <li><a class="dropdown-item" href="{% url 'chat:admin_dashboard' %}">داشبورد چت</a></li>
                                {% endif %}
                                <li><hr class="dropdown-divider"></li>
                                <li><a class="dropdown-item" href="{% url 'users:logout' %}">خروج</a></li>
                            </ul>
                        </div>
                    {% else %}
                        <a href="{% url 'users:login' %}" class="btn btn-outline-light me-2">ورود</a>
                        <a href="{% url 'users:signup' %}" class="btn btn-light">ثبت‌نام</a>
                    {% endif %}
                </div>
            </div>
        </div>
    </header>

    <main class="container my-4">
        {% load i18n %}
        {% if messages %}
        <div class="django-messages">
            {% for message in messages %}
            <div class="alert alert-{{ message.tags }}">
                {{ message }}
            </div>
            {% endfor %}
        </div>
        {% endif %}

        {% block content %}{% endblock %}
    </main>

    <footer class="bg-dark text-white py-4 mt-5">
        <div class="container">
            <div class="row">
                <div class="col-md-4">
                    <h5>فروشگاه زیما</h5>
                    <p>فروشگاه آنلاین محصولات با کیفیت</p>
                </div>
                <div class="col-md-4">
                    <h5>لینک‌های مفید</h5>
                    <ul class="list-unstyled">
                        <li><a href="#" class="text-white">درباره ما</a></li>
                        <li><a href="#" class="text-white">تماس با ما</a></li>
                        <li><a href="#" class="text-white">قوانین و مقررات</a></li>
                    </ul>
                </div>
                <div class="col-md-4">
                    <h5>تماس با ما</h5>
                    <address>
                        <p>آدرس: تهران، خیابان ولیعصر</p>
                        <p>تلفن: 021-12345678</p>
                        <p>ایمیل: info@zima.com</p>
                    </address>
                </div>
            </div>
            <hr>
            <div class="text-center">
                <p>&copy; 1404 فروشگاه زیما. تمامی حقوق محفوظ است.</p>
            </div>
        </div>
    </footer>

    <!-- دکمه چت پشتیبانی - تغییر مسیر بر اساس نوع کاربر -->
    {% if user.is_authenticated %}
    <div class="floating-chat-btn" id="floating-chat-btn" title="{% if user.is_staff %}داشبورد چت{% else %}چت‌های من{% endif %}">
        <i class="fas {% if user.is_staff %}fa-headset{% else %}fa-comments{% endif %} fa-lg"></i>
        <span class="floating-chat-badge" id="unread-count" style="display: none;">0</span>
    </div>

    <!-- کانتینر اعلان‌ها -->
    <div id="notification-container" class="notification-container"></div>
    {% endif %}

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    {% if user.is_authenticated %}
    <script>
        // بررسی پیام‌ها و نوتیفیکیشن‌های خوانده نشده
        function checkUnreadCounts() {
            fetch('/chat/unread-count/')
                .then(response => response.json())
                .then(data => {
                    const unreadBadge = document.getElementById('unread-count');
                    if (unreadBadge) {
                        if (data.count > 0) {
                            unreadBadge.textContent = data.count;
                            unreadBadge.style.display = 'flex';
                        } else {
                            unreadBadge.style.display = 'none';
                        }
                    }

                    // همچنین بروزرسانی نشانگر در منوی کاربر
                    const chatNotificationBadge = document.getElementById('chat-notification-badge');
                    if (chatNotificationBadge) {
                        if (data.count > 0) {
                            chatNotificationBadge.textContent = data.count;
                            chatNotificationBadge.style.display = 'inline-block';
                        } else {
                            chatNotificationBadge.style.display = 'none';
                        }
                    }
                })
                .catch(error => console.error('Error fetching unread counts:', error));
        }

        function updateUserStatus(userId, status) {
            // پیدا کردن تمام المان‌های نشان‌دهنده وضعیت کاربر با این شناسه
            const statusIndicators = document.querySelectorAll(`.user-status-indicator[data-user-id="${userId}"]`);

            statusIndicators.forEach(indicator => {
                // حذف کلاس‌های قبلی
                indicator.classList.remove('online', 'offline');

                // اضافه کردن کلاس جدید بر اساس وضعیت
                indicator.classList.add(status);

                // بروزرسانی متن نمایش داده شده (اگر وجود دارد)
                const statusText = indicator.querySelector('.status-text');
                if (statusText) {
                    statusText.textContent = status === 'online' ? 'آنلاین' : 'آفلاین';
                }
            });
        }

        // اتصال به WebSocket برای نوتیفیکیشن‌ها
        function connectNotificationSocket() {
            const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
            const notificationSocket = new WebSocket(
                wsProtocol + '//' + window.location.host + '/ws/notifications/'
            );

            notificationSocket.onopen = function(e) {
                console.log('Notification socket connected');
            };

            notificationSocket.onmessage = function(e) {
                const data = JSON.parse(e.data);

                if (data.type === 'unread_count') {
                    // بروزرسانی تعداد پیام‌های خوانده نشده روی آیکن چت
                    const unreadBadge = document.getElementById('unread-count');
                    if (unreadBadge) {
                        if (data.count > 0) {
                            unreadBadge.textContent = data.count;
                            unreadBadge.style.display = 'flex';
                        } else {
                            unreadBadge.style.display = 'none';
                        }
                    }
                } else if (data.type === 'chat_notification') {
                    // نمایش اعلان پاپ‌آپ برای پیام جدید
                    showChatNotification(data.message, data.sender, data.room_id);
                } else if (data.type === 'user_status_update') {
                    // بروزرسانی وضعیت کاربر (آنلاین/آفلاین)
                    updateUserStatus(data.user_id, data.status);
                }
            };

            function showChatNotification(message, sender, roomId) {
                // اگر اعلان‌ها پشتیبانی می‌شوند
                if ("Notification" in window) {
                    if (Notification.permission === "granted") {
                        const notification = new Notification(`پیام جدید از ${sender}`, {
                            body: message,
                            icon: '/static/images/chat-icon.png'
                        });

                        notification.onclick = function() {
                            window.open(`/chat/room/${roomId}/`, '_blank');
                        };
                    } else if (Notification.permission !== "denied") {
                        Notification.requestPermission();
                    }
                }

                // همچنین نمایش اعلان در صفحه
                const notificationDiv = document.createElement('div');
                notificationDiv.className = 'chat-notification';
                notificationDiv.innerHTML = `
                    <div class="chat-notification-header">
                        <strong>پیام جدید از ${sender}</strong>
                        <button class="close-btn">&times;</button>
                    </div>
                    <div class="chat-notification-body">${message}</div>
                    <div class="chat-notification-footer">
                        <button class="view-btn">مشاهده</button>
                    </div>
                `;

                document.body.appendChild(notificationDiv);

                // نمایش اعلان با انیمیشن
                setTimeout(() => {
                    notificationDiv.classList.add('show');
                }, 100);

                // دکمه بستن اعلان
                notificationDiv.querySelector('.close-btn').addEventListener('click', function() {
                    notificationDiv.classList.remove('show');
                    setTimeout(() => {
                        notificationDiv.remove();
                    }, 300);
                });

                // دکمه مشاهده چت
                notificationDiv.querySelector('.view-btn').addEventListener('click', function() {
                    window.location.href = `/chat/room/${roomId}/`;
                });

                // حذف خودکار اعلان بعد از 10 ثانیه
                setTimeout(() => {
                    if (notificationDiv.parentNode) {
                        notificationDiv.classList.remove('show');
                        setTimeout(() => {
                            if (notificationDiv.parentNode) {
                                notificationDiv.remove();
                            }
                        }, 300);
                    }
                }, 10000);
            }

            notificationSocket.onclose = function(e) {
                console.log('Notification socket closed. Reconnecting in 5s...');
                setTimeout(connectNotificationSocket, 5000);
            };

            notificationSocket.onerror = function(e) {
                console.error('Notification socket error:', e);
                notificationSocket.close();
            };
        }

        // بروزرسانی نمایش تعداد پیام‌های خوانده نشده
        function updateUnreadBadge(count) {
            const unreadBadge = document.getElementById('unread-count');
            if (unreadBadge) {
                if (count > 0) {
                    unreadBadge.textContent = count > 99 ? '99+' : count;
                    unreadBadge.style.display = 'flex';
                } else {
                    unreadBadge.style.display = 'none';
                }
            }
        }

        // نمایش اعلان پاپ‌آپ
        function showNotification(sender, message, roomId) {
            const container = document.getElementById('notification-container');
            if (!container) return;

            const notificationId = 'notification-' + Date.now();
            const notification = document.createElement('div');
            notification.className = 'notification';
            notification.id = notificationId;

            notification.innerHTML = `
                <div class="notification-header">
                    <div class="notification-title">${sender}</div>
                    <div class="notification-close" onclick="closeNotification('${notificationId}')">&times;</div>
                </div>
                <div class="notification-message">${message}</div>
                <div class="notification-action">
                    <a href="/chat/room/${roomId}/">مشاهده پیام</a>
                </div>
            `;

            container.appendChild(notification);

            // حذف اعلان پس از 5 ثانیه
            setTimeout(() => {
                if (document.getElementById(notificationId)) {
                    closeNotification(notificationId);
                }
            }, 5000);
        }

        // بستن اعلان
        function closeNotification(id) {
            const notification = document.getElementById(id);
            if (notification) {
                notification.style.animation = 'fadeOut 0.3s ease-out forwards';
                setTimeout(() => {
                    if (notification.parentNode) {
                        notification.parentNode.removeChild(notification);
                    }
                }, 300);
            }
        }

        // نمایش نوتیفیکیشن مرورگر
        function showBrowserNotification(title, message) {
            if (!("Notification" in window)) {
                console.log("This browser does not support desktop notifications");
                return;
            }

            if (Notification.permission === "granted") {
                const notification = new Notification(title, {
                    body: message,
                    icon: '/static/images/logo.png'
                });

                notification.onclick = function() {
                    window.focus();
                    notification.close();
                };
            } else if (Notification.permission !== "denied") {
                Notification.requestPermission().then(function(permission) {
                    if (permission === "granted") {
                        showBrowserNotification(title, message);
                    }
                });
            }
        }

        // درخواست دسترسی به نوتیفیکیشن
        function requestNotificationPermission() {
            if ("Notification" in window && Notification.permission !== "granted" && Notification.permission !== "denied") {
                Notification.requestPermission();
            }
        }

        // مدیریت وضعیت آنلاین/آفلاین کاربر
        let activityTimeout;
        const INACTIVE_TIMEOUT = 2 * 60 * 1000; // 2 دقیقه

        function resetActivityTimer() {
        clearTimeout(activityTimeout);

        // ارسال وضعیت آنلاین
        fetch('/chat/set-online/', {
            method: 'POST',
            headers: {
                'X-CSRFToken': getCookie('csrftoken'),
                'Content-Type': 'application/json'
            }
        }).catch(error => console.error('Error updating online status:', error));

            // تنظیم تایمر جدید
             activityTimeout = setTimeout(() => {
            // تغییر وضعیت به آفلاین پس از عدم فعالیت
            fetch('/chat/set-offline/', {
                method: 'POST',
                headers: {
                    'X-CSRFToken': getCookie('csrftoken'),
                    'Content-Type': 'application/json'
                }
            }).catch(error => console.error('Error updating offline status:', error));
        }, INACTIVE_TIMEOUT);
    }

        // رویدادهای فعالیت کاربر
          ['mousedown', 'keypress', 'scroll', 'touchstart', 'mousemove'].forEach(evt => {
        document.addEventListener(evt, resetActivityTimer);
    });


        // تغییر وضعیت به آفلاین هنگام بستن صفحه
         window.addEventListener('beforeunload', function() {
        // ارسال درخواست برای تغییر وضعیت به آفلاین
        navigator.sendBeacon('/chat/set-offline/', '');
    });
        setInterval(resetActivityTimer, 30000);

        // اجرای توابع در زمان بارگذاری صفحه
        document.addEventListener('DOMContentLoaded', function() {
            checkUnreadCounts();
            try {
                connectNotificationSocket();
            } catch (e) {
                console.error("Error connecting to notification socket:", e);
            }
            requestNotificationPermission();
            resetActivityTimer(); // راه‌اندازی اولیه تایمر فعالیت

            // بررسی هر 30 ثانیه
            setInterval(checkUnreadCounts, 30000);

            // تنظیم عملکرد دکمه چت شناور بر اساس نوع کاربر
            const chatBtn = document.getElementById('floating-chat-btn');
            if (chatBtn) {
                chatBtn.addEventListener('click', function() {
                    {% if user.is_staff %}
                        // هدایت ادمین به داشبورد چت
                        window.location.href = "{% url 'chat:admin_dashboard' %}";
                    {% else %}
                        // هدایت کاربر عادی به لیست چت‌ها
                        window.location.href = "{% url 'chat:chat_list' %}";
                    {% endif %}
                });
            }
        });

        // دریافت توکن CSRF از کوکی‌ها
        function getCookie(name) {
            let cookieValue = null;
            if (document.cookie && document.cookie !== '') {
                const cookies = document.cookie.split(';');
                for (let i = 0; i < cookies.length; i++) {
                    const cookie = cookies[i].trim();
                    if (cookie.substring(0, name.length + 1) === (name + '=')) {
                        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                        break;
                    }
                }
            }
            return cookieValue;
        }

        // بروزرسانی وضعیت آنلاین به صورت منظم
        setInterval(function() {
            fetch('/chat/set-online/', {
                method: 'POST',
                headers: {
                    'X-CSRFToken': getCookie('csrftoken'),
                    'Content-Type': 'application/json'
                }
            }).catch(error => console.error('Error updating online status:', error));
        }, 60000); // هر 60 ثانیه به جای 30 ثانیه
    </script>
    {% endif %}

    {% block extra_js %}{% endblock %}
</body>
</html>

====== FILE: templates/base/navbar.html ======

<nav class="navbar navbar-expand-lg navbar-dark bg-primary">
    <div class="container">
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarMain">
            <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse" id="navbarMain">
            <ul class="navbar-nav me-auto">
                <li class="nav-item">
                    <a class="nav-link" href="{% url 'home' %}">خانه</a>
                </li>

                <!-- دسته‌بندی محصولات مردانه -->
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="#" data-bs-toggle="dropdown">
                        مردانه
                    </a>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" href="{% url 'products:men' %}">همه محصولات مردانه</a></li>
                        <li><a class="dropdown-item" href="{% url 'products:men-underwear' %}">لباس زیر مردانه</a></li>
                        <li><a class="dropdown-item" href="{% url 'products:category' slug='mens-tshirts' %}">تی‌شرت</a></li>
                    </ul>
                </li>

                <!-- دسته‌بندی محصولات زنانه -->
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="#" data-bs-toggle="dropdown">
                        زنانه
                    </a>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" href="{% url 'products:women' %}">همه محصولات زنانه</a></li>
                        <li><a class="dropdown-item" href="{% url 'products:women-underwear' %}">لباس زیر زنانه</a></li>
                    </ul>
                </li>

                <!-- برندها -->
                <li class="nav-item">
                    <a class="nav-link" href="{% url 'products:brands' %}">برندها</a>
                </li>

                <!-- فروش ویژه -->
                <li class="nav-item">
                    <a class="nav-link" href="{% url 'products:sale' %}">فروش ویژه</a>
                </li>

                <!-- تماس با ما -->
                <li class="nav-item">
                    <a class="nav-link" href="{% url 'pages:contact' %}">تماس با ما</a>
                </li>

                <!-- درباره ما -->
                <li class="nav-item">
                    <a class="nav-link" href="{% url 'pages:about' %}">درباره ما</a>
                </li>
            </ul>
        </div>
    </div>
</nav>

====== FILE: templates/base/footer.html ======

<footer class="bg-dark text-white py-5 mt-5">
    <div class="container">
        <div class="row">
            <!-- اطلاعات تماس -->
            <div class="col-md-3 mb-4">
                <h5 class="mb-3">تماس با ما</h5>
                <p><i class="fas fa-map-marker-alt me-2"></i> تهران، خیابان ولیعصر</p>
                <p><i class="fas fa-phone me-2"></i> ۰۲۱-۱۲۳۴۵۶۷۸</p>
                <p><i class="fas fa-envelope me-2"></i> info@zima.com</p>

                <!-- شبکه‌های اجتماعی -->
                <div class="social-icons mt-3">
                    <a href="#" class="text-white me-2"><i class="fab fa-instagram fa-lg"></i></a>
                    <a href="#" class="text-white me-2"><i class="fab fa-telegram fa-lg"></i></a>
                    <a href="#" class="text-white me-2"><i class="fab fa-whatsapp fa-lg"></i></a>
                </div>
            </div>

            <!-- لینک‌های سریع -->
            <div class="col-md-3 mb-4">
                <h5 class="mb-3">دسترسی سریع</h5>
                <ul class="list-unstyled">
                    <li class="mb-2"><a href="{% url 'home' %}" class="text-white text-decoration-none">صفحه اصلی</a></li>
                    <li class="mb-2"><a href="{% url 'products:featured' %}" class="text-white text-decoration-none">محصولات ویژه</a></li>
                    <li class="mb-2"><a href="{% url 'products:latest' %}" class="text-white text-decoration-none">جدیدترین محصولات</a></li>
                    <li class="mb-2"><a href="{% url 'pages:faq' %}" class="text-white text-decoration-none">سوالات متداول</a></li>
                </ul>
            </div>

            <!-- خدمات -->
            <div class="col-md-3 mb-4">
                <h5 class="mb-3">خدمات مشتریان</h5>
                <ul class="list-unstyled">
                    <li class="mb-2"><a href="{% url 'pages:shipping' %}" class="text-white text-decoration-none">شیوه‌های ارسال</a></li>
                    <li class="mb-2"><a href="{% url 'pages:returns' %}" class="text-white text-decoration-none">شرایط بازگشت کالا</a></li>
                    <li class="mb-2"><a href="{% url 'pages:privacy' %}" class="text-white text-decoration-none">حریم خصوصی</a></li>
                    <li class="mb-2"><a href="{% url 'pages:terms' %}" class="text-white text-decoration-none">قوانین و مقررات</a></li>
                </ul>
            </div>

            <!-- خبرنامه -->
            <div class="col-md-3 mb-4">
                <h5 class="mb-3">عضویت در خبرنامه</h5>
                <p>برای اطلاع از آخرین محصولات و تخفیف‌ها در خبرنامه عضو شوید</p>
                <form action="{% url 'pages:newsletter' %}" method="post" class="mt-3">
                    {% csrf_token %}
                    <div class="input-group">
                        <input type="email" name="email" placeholder="ایمیل شما" required class="form-control">
                        <button type="submit" class="btn btn-primary">عضویت</button>
                    </div>
                </form>

                <!-- نماد اعتماد -->
                <div class="mt-4">
                    <img src="{% static 'images/enamad.png' %}" alt="نماد اعتماد الکترونیکی" height="60">
                </div>
            </div>
        </div>

        <hr class="my-4">

        <!-- کپی‌رایت -->
        <div class="row">
            <div class="col-md-12 text-center">
                <p>تمامی حقوق این سایت متعلق به فروشگاه زیما می‌باشد &copy; ۱۴۰۴</p>
            </div>
        </div>
    </div>
</footer>

====== FILE: templates/orders/checkout.html ======

{% extends 'base/base.html' %}
{% load static %}

{% block title %}تکمیل سفارش | زیما{% endblock %}

{% block content %}
    <h1 class="h2 mb-4">تکمیل سفارش</h1>
    
    {% if not cart_items %}
        <div class="alert alert-warning">
            سبد خرید شما خالی است. لطفاً ابتدا محصولات مورد نظر خود را به سبد خرید اضافه کنید.
            <a href="{% url 'products:list' %}" class="alert-link">مشاهده محصولات</a>
        </div>
    {% else %}
        <div class="row">
            <!-- فرم اطلاعات ارسال -->
            <div class="col-lg-8 mb-4">
                <div class="card mb-4">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0">آدرس تحویل</h5>
                    </div>
                    <div class="card-body">
                        {% if addresses %}
                            <form method="post" action="{% url 'orders:checkout' %}">
                                {% csrf_token %}
                                <div class="mb-3">
                                    <label class="form-label">انتخاب آدرس:</label>
                                    {% for address in addresses %}
                                        <div class="form-check mb-2">
                                            <input class="form-check-input" type="radio" name="address_id" id="address{{ address.id }}" value="{{ address.id }}" {% if forloop.first %}checked{% endif %}>
                                            <label class="form-check-label" for="address{{ address.id }}">
                                                {{ address.full_address }}
                                                <div class="text-muted small">کد پستی: {{ address.postal_code }}</div>
                                            </label>
                                        </div>
                                    {% endfor %}
                                </div>
                                <div class="d-flex justify-content-between">
                                    <a href="{% url 'users:addresses' %}" class="btn btn-outline-primary">
                                        <i class="fas fa-plus me-1"></i> افزودن آدرس جدید
                                    </a>
                                </div>
                        {% else %}
                            <div class="alert alert-info">
                                شما هنوز آدرسی ثبت نکرده‌اید. لطفاً ابتدا یک آدرس اضافه کنید.
                            </div>
                            <a href="{% url 'users:addresses' %}" class="btn btn-primary">
                                <i class="fas fa-plus me-1"></i> افزودن آدرس
                            </a>
                        {% endif %}
                    </div>
                </div>
                
                {% if addresses %}
                    <div class="card mb-4">
                        <div class="card-header bg-primary text-white">
                            <h5 class="mb-0">روش ارسال</h5>
                        </div>
                        <div class="card-body">
                            <div class="form-check mb-2">
                                <input class="form-check-input" type="radio" name="shipping_method" id="shipping1" value="standard" checked>
                                <label class="form-check-label" for="shipping1">
                                    <div class="d-flex justify-content-between">
                                        <div>
                                            <strong>پست پیشتاز</strong>
                                            <div class="text-muted small">تحویل ۲ تا ۴ روز کاری</div>
                                        </div>
                                        <div>
                                            {% if cart_total.subtotal >= 300000 %}
                                                <span class="text-success">رایگان</span>
                                            {% else %}
                                                <span>۳۰,۰۰۰ تومان</span>
                                            {% endif %}
                                        </div>
                                    </div>
                                </label>
                            </div>
                            <div class="form-check mb-2">
                                <input class="form-check-input" type="radio" name="shipping_method" id="shipping2" value="express">
                                <label class="form-check-label" for="shipping2">
                                    <div class="d-flex justify-content-between">
                                        <div>
                                            <strong>تیپاکس</strong>
                                            <div class="text-muted small">تحویل ۱ تا ۲ روز کاری</div>
                                        </div>
                                        <div>۵۰,۰۰۰ تومان</div>
                                    </div>
                                </label>
                            </div>
                        </div>
                    </div>
                    
                    <div class="card">
                        <div class="card-header bg-primary text-white">
                            <h5 class="mb-0">روش پرداخت</h5>
                        </div>
                        <div class="card-body">
                            <div class="form-check mb-2">
                                <input class="form-check-input" type="radio" name="payment_method" id="payment1" value="online" checked>
                                <label class="form-check-label" for="payment1">
                                    <strong>پرداخت آنلاین</strong>
                                    <div class="text-muted small">پرداخت از طریق درگاه بانکی</div>
                                </label>
                            </div>
                            <div class="form-check mb-4">
                                <input class="form-check-input" type="radio" name="payment_method" id="payment2" value="cash">
                                <label class="form-check-label" for="payment2">
                                    <strong>پرداخت در محل</strong>
                                    <div class="text-muted small">پرداخت هنگام تحویل کالا</div>
                                </label>
                            </div>
                            
                            <div class="mb-3">
                                <label for="description" class="form-label">توضیحات سفارش (اختیاری):</label>
                                <textarea name="description" id="description" rows="3" class="form-control"></textarea>
                            </div>
                            
                            <button type="submit" class="btn btn-success">
                                <i class="fas fa-credit-card me-1"></i> پرداخت و ثبت سفارش
                            </button>
                        </div>
                    </div>
                </form>
                {% endif %}
            </div>
            
            <!-- خلاصه سفارش -->
            <div class="col-lg-4">
                <div class="card">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0">خلاصه سفارش</h5>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <h6>محصولات ({{ cart_total.total_items }})</h6>
                            <ul class="list-group list-group-flush">
                                {% for item in cart_items %}
                                    <li class="list-group-item px-0 d-flex justify-content-between">
                                        <div>
                                            <span>{{ item.name }}</span>
                                            <div class="text-muted small">{{ item.quantity }} × {{ item.price|floatformat:0 }}</div>
                                        </div>
                                        <span>{{ item.total_price|floatformat:0 }} تومان</span>
                                    </li>
                                {% endfor %}
                            </ul>
                        </div>
                        
                        <hr>
                        
                        <div class="d-flex justify-content-between mb-2">
                            <span>مجموع قیمت:</span>
                            <span>{{ cart_total.subtotal|floatformat:0 }} تومان</span>
                        </div>
                        {% if cart_total.discount %}
                            <div class="d-flex justify-content-between mb-2 text-danger">
                                <span>تخفیف:</span>
                                <span>{{ cart_total.discount|floatformat:0 }} تومان</span>
                            </div>
                        {% endif %}
                        <div class="d-flex justify-content-between mb-2">
                            <span>هزینه ارسال:</span>
                            {% if cart_total.shipping_cost > 0 %}
                                <span>{{ cart_total.shipping_cost|floatformat:0 }} تومان</span>
                            {% else %}
                                <span class="text-success">رایگان</span>
                            {% endif %}
                        </div>
                        <hr>
                        <div class="d-flex justify-content-between fw-bold">
                            <span>مبلغ قابل پرداخت:</span>
                            <span>{{ cart_total.total|floatformat:0 }} تومان</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    {% endif %}
{% endblock %}

====== FILE: zima/settings.py ======

"""
Django settings for zima project.
"""
import os
import socket
from pathlib import Path
from datetime import timedelta
from decouple import config, Csv, UndefinedValueError

def is_running_in_docker():
    try:
        with open('/proc/1/cgroup', 'rt') as f:
            return 'docker' in f.read()
    except:
        return False

def is_production():
    env_value = os.environ.get('DJANGO_ENV', '').lower()
    if env_value:
        return env_value == 'production'

    hostname = socket.gethostname()
    return is_running_in_docker() or hostname in ['gunicorn', 'postgres', 'nginx']

DJANGO_ENV = 'production' if is_production() else 'development'
print(f"Detected environment: {DJANGO_ENV}")

BASE_DIR = Path(__file__).resolve().parent.parent

ENV_FILE = '.env.production' if DJANGO_ENV == 'production' else '.env.local'
ENV_PATH = os.path.join(BASE_DIR, ENV_FILE)

if os.path.exists(ENV_PATH):
    print(f"Loading settings from {ENV_FILE}")
    from dotenv import load_dotenv
    load_dotenv(ENV_PATH)

SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-key-for-development')

DEBUG = os.environ.get('DEBUG', 'True' if DJANGO_ENV == 'development' else 'False').lower() in ('true', '1', 't')

ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', '*').split(',')

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'channels',
    # My apps
    'users',
    'products',
    'orders',
    'cart',
    'pages',
    'chat',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'chat.middleware.UserActivityMiddleware',
]

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# تنظیمات CORS
CORS_ALLOWED_ORIGINS = os.environ.get('CORS_ALLOWED_ORIGINS', 'http://localhost:8000').split(',')
CORS_ALLOW_CREDENTIALS = True

ROOT_URLCONF = 'zima.urls'

# تنظیمات تمپلیت
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'cart.context_processors.cart_items_count',
                'cart.context_processors.banners',
            ],
        },
    },
]

# تنظیمات رسانه‌ها و فایل‌های استاتیک
MEDIA_URL = os.environ.get('MEDIA_URL', '/media/')
MEDIA_ROOT = os.path.join(BASE_DIR, os.environ.get('MEDIA_ROOT', 'media'))

STATIC_URL = os.environ.get('STATIC_URL', '/static/')
STATIC_ROOT = os.path.join(BASE_DIR, os.environ.get('STATIC_ROOT', 'staticfiles'))
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# استفاده از WhiteNoise برای سرو فایل‌های استاتیک در محیط تولید
if DJANGO_ENV == 'production':
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

WSGI_APPLICATION = 'zima.wsgi.application'

# تنظیمات پایگاه داده - اصلاح شده برای Docker
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('DB_NAME', 'zima'),
        'USER': os.environ.get('DB_USER', 'postgres'),
        'PASSWORD': os.environ.get('DB_PASSWORD', 'rezazh79'),
        'HOST': os.environ.get('DB_HOST', 'postgres'),
        'PORT': os.environ.get('DB_PORT', '5432'),
        'OPTIONS': {
            'sslmode': 'disable',
            'connect_timeout': 10,
        },
        'CONN_MAX_AGE': 600,
    }
}

ASGI_APPLICATION = 'zima.asgi.application'
REDIS_HOST = os.environ.get('REDIS_HOST', 'redis' if is_running_in_docker() else 'localhost')
REDIS_PORT = int(os.environ.get('REDIS_PORT', 6379))
REDIS_DB = int(os.environ.get('REDIS_DB', 0))

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [(REDIS_HOST, REDIS_PORT)],
            "capacity": 1500,
            "expiry": 10,
        },
    },
}

CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': f'redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'SOCKET_CONNECT_TIMEOUT': 5,
            'SOCKET_TIMEOUT': 5,
            'CONNECTION_POOL_KWARGS': {'max_connections': 100},
            'RETRY_ON_TIMEOUT': True,
            'IGNORE_EXCEPTIONS': True,
        }
    }
}

SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"
WEBSOCKET_URL = '/ws/'

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 10,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
LANGUAGE_CODE = os.environ.get('LANGUAGE_CODE', 'fa-ir')
TIME_ZONE = os.environ.get('TIME_ZONE', 'Asia/Tehran')
USE_I18N = os.environ.get('USE_I18N', 'True').lower() in ('true', '1', 't')
USE_TZ = os.environ.get('USE_TZ', 'True').lower() in ('true', '1', 't')

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# تنظیمات REST Framework
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ) if DJANGO_ENV == 'production' else (
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ),
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': os.environ.get('THROTTLE_ANON', '100/day'),
        'user': os.environ.get('THROTTLE_USER', '1000/day')
    },
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
}

# تنظیمات آپلود فایل
FILE_UPLOAD_PERMISSIONS = 0o644
FILE_UPLOAD_MAX_MEMORY_SIZE = 12 * 1024 * 1024  # 12MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB
PILLOW_FILE_TYPES = ['jpg', 'jpeg', 'png', 'gif', 'bmp', 'webp', 'svg']

AUTH_USER_MODEL = 'users.CustomUser'
ALLOWED_IMAGE_TYPES = [
    'image/jpeg', 'image/png', 'image/gif', 'image/bmp',
    'image/webp', 'image/svg+xml', 'image/tiff', 'image/heic', 'image/x-icon'
]

# تنظیمات JWT
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=int(os.environ.get('SIMPLE_JWT_ACCESS_TOKEN_LIFETIME', '7'))),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=int(os.environ.get('SIMPLE_JWT_REFRESH_TOKEN_LIFETIME', '30'))),
    'ROTATE_REFRESH_TOKENS': os.environ.get('SIMPLE_JWT_ROTATE_REFRESH_TOKENS', 'True').lower() in ('true', '1', 't'),
    'BLACKLIST_AFTER_ROTATION': os.environ.get('SIMPLE_JWT_BLACKLIST_AFTER_ROTATION', 'True').lower() in ('true', '1', 't'),
    'UPDATE_LAST_LOGIN': os.environ.get('SIMPLE_JWT_UPDATE_LAST_LOGIN', 'True').lower() in ('true', '1', 't'),
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'JTI_CLAIM': 'jti',
    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}

# تنظیمات ایمیل
EMAIL_BACKEND = os.environ.get('EMAIL_BACKEND', 'django.core.mail.backends.smtp.EmailBackend')
EMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp.gmail.com')
EMAIL_PORT = int(os.environ.get('EMAIL_PORT', '587'))
EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'True').lower() in ('true', '1', 't')
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', f'Zima Shop <{os.environ.get("EMAIL_HOST_USER", "")}>')

# تنظیمات امنیتی - ساده شده برای Docker
ALLOWED_HOSTS = ['*']
SECURE_SSL_REDIRECT = False
SESSION_COOKIE_SECURE = False
CSRF_COOKIE_SECURE = False
SECURE_HSTS_SECONDS = 0
SECURE_HSTS_INCLUDE_SUBDOMAINS = False
SECURE_HSTS_PRELOAD = False

# تنظیمات CSRF
CSRF_TRUSTED_ORIGINS = [
    'https://zimabestshop.ir',
    'https://www.zimabestshop.ir',
    'http://localhost',
    'http://127.0.0.1',
    'http://localhost:8001',
]
CSRF_COOKIE_SAMESITE = 'Lax'
CSRF_COOKIE_HTTPONLY = False
SESSION_COOKIE_SAMESITE = 'Lax'

# تنظیمات لاگ - ساده شده برای Docker
USE_FILE_LOGGING = os.environ.get('USE_FILE_LOGGING', 'false').lower() == 'true'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '[{levelname}] {asctime} {name} {message}',
            'style': '{',
        },
        'simple': {
            'format': '[{levelname}] {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

print(f"Settings loaded for {DJANGO_ENV} environment")
print("Django settings configured for Docker deployment")
# Override settings for Docker deployment
import os

# اجازه دادن به تمام میزبان‌ها
ALLOWED_HOSTS = ['*']

# تنظیم پایگاه داده برای Docker
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('DB_NAME', 'zima'),
        'USER': os.environ.get('DB_USER', 'postgres'),
        'PASSWORD': os.environ.get('DB_PASSWORD', 'rezazh79'),
        'HOST': os.environ.get('DB_HOST', 'postgres'),
        'PORT': os.environ.get('DB_PORT', '5432'),
        'OPTIONS': {
            'sslmode': 'disable',
            'connect_timeout': 10,
        },
        'CONN_MAX_AGE': 600,
    }
}

# غیرفعال کردن تنظیمات HTTPS در محیط توسعه
SECURE_SSL_REDIRECT = False
SESSION_COOKIE_SECURE = False
CSRF_COOKIE_SECURE = False
SECURE_HSTS_SECONDS = 0
SECURE_HSTS_INCLUDE_SUBDOMAINS = False
SECURE_HSTS_PRELOAD = False

print("Django settings overridden for Docker deployment")


====== FILE: zima/asgi.py ======

import os
import django
from django.core.asgi import get_asgi_application
from channels.routing import ProtocolTypeRouter, URLRouter
from channels.auth import AuthMiddlewareStack

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'zima.settings')
django.setup()

from chat.routing import websocket_urlpatterns

application = ProtocolTypeRouter({
    "http": get_asgi_application(),
    "websocket": AuthMiddlewareStack(
        URLRouter(
            websocket_urlpatterns
        )
    ),
})

====== FILE: zima/__init__.py ======



====== FILE: zima/urls.py ======

from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static
from pages.views import home

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', home, name='home'),
    path('pages/', include('pages.urls', namespace='pages')),
    path('products/', include('products.urls', namespace='products')),
    path('users/', include('users.urls', namespace='users')),
    path('cart/', include('cart.urls', namespace='cart')),
    path('orders/', include('orders.urls', namespace='orders')),
    path('chat/', include('chat.urls')),  # اضافه شد

]

# اضافه کردن مسیرهای فایل‌های رسانه‌ای در محیط توسعه
if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)


====== FILE: zima/celery.py ======

from celery import Celery

app = Celery('zima')

@app.task
def clean_expired_cart_items():
    from orders.tasks import delete_expired_cart_items
    delete_expired_cart_items()

====== FILE: zima/wsgi.py ======

"""
WSGI config for zima project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'zima.settings')

application = get_wsgi_application()


====== FILE: config/gunicorn-entrypoint.sh ======

#!/bin/bash
set -e

echo "=== Gunicorn Production Server Entrypoint ==="

mkdir -p /app/static /app/staticfiles /app/media /app/logs
export DJANGO_ENV=production
export PYTHONPATH=/app
cd /app

echo "Waiting for database..."
until nc -z -v -w30 postgres 5432
do
  echo "Waiting for postgres database connection..."
  sleep 2
done
echo "PostgreSQL is ready!"

echo "Checking database for potential issues..."
if [ -f "/app/config/db_cleanup.sql" ]; then
  PGPASSWORD=$DB_PASSWORD psql -h postgres -U $DB_USER -d $DB_NAME -f /app/config/db_cleanup.sql || echo "Cleanup script execution failed, continuing..."
fi

echo "Running migrations with safe strategy..."
python /app/config/migration_utils.py safe || (
  echo "Safe migration failed, trying alternative approach..." &&

  MIGRATIONS_TABLE_EXISTS=$(python -c "
import os
import psycopg2
try:
    conn = psycopg2.connect(
        dbname=os.environ.get('DB_NAME', 'zima'),
        user=os.environ.get('DB_USER', 'postgres'),
        password=os.environ.get('DB_PASSWORD', 'rezazh79'),
        host=os.environ.get('DB_HOST', 'postgres'),
        port=os.environ.get('DB_PORT', '5432')
    )
    cursor = conn.cursor()
    cursor.execute(\"\"\"
        SELECT EXISTS (
            SELECT FROM information_schema.tables
            WHERE table_name = 'django_migrations'
        );
    \"\"\")
    result = cursor.fetchone()[0]
    print('true' if result else 'false')
    conn.close()
except Exception as e:
    print('false')
")

  if [ "$MIGRATIONS_TABLE_EXISTS" = "true" ]; then
      echo "Database initialized, using --fake-initial..."
      python manage.py migrate --fake-initial
  else
      echo "New database detected, running initial migrations..."
      python manage.py migrate
  fi
)

echo "Collecting static files..."
python manage.py collectstatic --noinput

echo "Starting Gunicorn server..."
exec gunicorn zima.wsgi:application \
    --bind 0.0.0.0:8000 \
    --workers 3 \
    --threads 2 \
    --worker-class gthread \
    --log-level info \
    --access-logfile - \
    --error-logfile - \
    --capture-output \
    --forwarded-allow-ips='*'

====== FILE: config/nginx.conf ======

server_names_hash_bucket_size 128;

upstream gunicorn_backend {
    server gunicorn:8000;
}

upstream daphne_backend {
    server daphne:8001;
}

server {
    listen 80;
    server_name zimabestshop.ir www.zimabestshop.ir;

    client_max_body_size 50M;

    location /static/ {
        alias /app/staticfiles/;
        expires 30d;
    }

    location /media/ {
        alias /app/media/;
        expires 30d;
    }

    location /health {
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    location /ws/ {
        proxy_pass http://daphne_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 86400;
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
    }

    location / {
        proxy_pass http://gunicorn_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }
}

server {
    listen 80;
    server_name localhost 127.0.0.1;

    client_max_body_size 50M;

    location /static/ {
        alias /app/staticfiles/;
        expires 30d;
    }

    location /media/ {
        alias /app/media/;
        expires 30d;
    }

    location /health {
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    location /ws/ {
        proxy_pass http://daphne_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 86400;
    }

    location / {
        proxy_pass http://gunicorn_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

====== FILE: config/migration_utils.py ======

# config/migration_utils.py
import os
import sys
import django
from django.db import connection
from django.core.management import call_command

def setup_django():
    """تنظیم محیط جنگو"""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'zima.settings')
    django.setup()

def clean_app_migrations(app_name):
    """پاکسازی مایگریشن‌های یک اپلیکیشن خاص"""
    setup_django()

    print(f"Cleaning migrations for {app_name}...")

    # حذف رکوردهای مایگریشن از دیتابیس
    with connection.cursor() as cursor:
        cursor.execute("DELETE FROM django_migrations WHERE app = %s", [app_name])

    # حذف جداول مرتبط
    with connection.cursor() as cursor:
        cursor.execute("""
        DO $$
        DECLARE
            r RECORD;
        BEGIN
            FOR r IN (SELECT table_name FROM information_schema.tables WHERE table_name LIKE %s AND table_schema='public')
            LOOP
                EXECUTE 'DROP TABLE IF EXISTS ' || quote_ident(r.table_name) || ' CASCADE';
                RAISE NOTICE 'Dropped table: %%', r.table_name;
            END LOOP;
        END
        $$;
        """, [f"{app_name}_%"])

    # حذف نوع‌های مرتبط
    with connection.cursor() as cursor:
        cursor.execute("""
        DO $$
        DECLARE
            r RECORD;
        BEGIN
            FOR r IN (SELECT typname FROM pg_type WHERE typname LIKE %s)
            LOOP
                EXECUTE 'DROP TYPE IF EXISTS ' || quote_ident(r.typname) || ' CASCADE';
                RAISE NOTICE 'Dropped type: %%', r.typname;
            END LOOP;
        END
        $$;
        """, [f"{app_name}_%"])

    print(f"Successfully cleaned migrations for {app_name}")

def fake_migrations(app_name=None):
    """اجرای fake migrations برای یک اپلیکیشن یا همه اپلیکیشن‌ها"""
    setup_django()

    if app_name:
        print(f"Fake migrating {app_name}...")
        call_command('migrate', app_name, '--fake')
    else:
        print("Fake migrating all apps...")
        call_command('migrate', '--fake')

    print("Fake migrations completed")

def check_migrations():
    """بررسی وضعیت مایگریشن‌ها"""
    setup_django()
    call_command('showmigrations')

def safe_migrate(app_name=None):
    """اجرای مایگریشن با استراتژی امن"""
    setup_django()

    if app_name:
        print(f"Safely migrating {app_name}...")
        try:
            # اول سعی می‌کنیم با fake-initial
            call_command('migrate', app_name, '--fake-initial')
        except Exception as e:
            print(f"Error with fake-initial: {e}")
            print("Trying with normal migrate...")
            call_command('migrate', app_name)
    else:
        print("Safely migrating all apps...")
        try:
            # اول سعی می‌کنیم با fake-initial
            call_command('migrate', '--fake-initial')
        except Exception as e:
            print(f"Error with fake-initial: {e}")
            print("Trying with normal migrate...")
            call_command('migrate')

    print("Safe migration completed")

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: python migration_utils.py [clean|fake|check|safe] [app_name]")
        sys.exit(1)

    action = sys.argv[1]
    app_name = sys.argv[2] if len(sys.argv) > 2 else None

    if action == 'clean' and app_name:
        clean_app_migrations(app_name)
    elif action == 'fake':
        fake_migrations(app_name)
    elif action == 'check':
        check_migrations()
    elif action == 'safe':
        safe_migrate(app_name)
    else:
        print(f"Unknown action: {action}")
        print("Available actions: clean, fake, check, safe")
        sys.exit(1)

====== FILE: config/entrypoint.sh ======

#!/bin/bash
set -e

echo "=== Starting service: ${SERVICE_TYPE:-gunicorn} ==="

# ایجاد و تنظیم مجوزهای دایرکتوری‌ها
mkdir -p /app/static /app/staticfiles /app/media
chmod 755 /app/staticfiles /app/media 2>/dev/null || echo "Permission adjustment failed, continuing..."

export PYTHONPATH=/app
cd /app

SERVICE_TYPE=${SERVICE_TYPE:-gunicorn}

# انتظار برای دیتابیس
echo "Checking database connection..."
timeout=60
while ! nc -z postgres 5432 && [ $timeout -gt 0 ]; do
  sleep 2
  timeout=$((timeout-2))
done

if [ $timeout -le 0 ]; then
  echo "⚠️  Database connection timeout, but continuing..."
else
  echo "✅ Database is ready!"
fi

# تنظیم logging برای Docker
export USE_FILE_LOGGING=false

# مایگریشن ساده
echo "Running migrations..."
python manage.py migrate --run-syncdb || echo "Migration failed, continuing..."

# جمع‌آوری static files بدون clear
echo "Collecting static files..."
python manage.py collectstatic --noinput || echo "Static collection failed, continuing..."

# اجرای سرویس
case $SERVICE_TYPE in
    "django")
        echo "Starting Django development server..."
        exec python manage.py runserver 0.0.0.0:8000
        ;;
    "daphne")
        echo "Starting Daphne server..."
        exec daphne -b 0.0.0.0 -p 8001 zima.asgi:application
        ;;
    *)
        echo "Starting Gunicorn server..."
        exec gunicorn zima.wsgi:application \
            --bind 0.0.0.0:8000 \
            --workers 2 \
            --timeout 60 \
            --log-level info \
            --access-logfile - \
            --error-logfile - \
            --capture-output
        ;;
esac

====== FILE: config/db_cleanup.sql ======

-- config/db_cleanup.sql
-- اسکریپت هوشمند برای پاکسازی جداول مشکل‌دار

-- بررسی وجود جداول chat و تصمیم‌گیری برای پاکسازی
DO $$
DECLARE
    chat_tables_count INTEGER;
    chat_migrations_count INTEGER;
    duplicate_types_count INTEGER;
BEGIN
    -- بررسی وجود جدول django_migrations
    PERFORM 1 FROM information_schema.tables WHERE table_name = 'django_migrations';
    IF NOT FOUND THEN
        RAISE NOTICE 'Table django_migrations does not exist. Skipping cleanup.';
        RETURN;
    END IF;

    -- بررسی تعداد جداول chat
    SELECT COUNT(*) INTO chat_tables_count
    FROM information_schema.tables
    WHERE table_name LIKE 'chat_%' AND table_schema='public';

    -- بررسی تعداد رکوردهای مایگریشن chat
    BEGIN
        SELECT COUNT(*) INTO chat_migrations_count
        FROM django_migrations
        WHERE app='chat';
    EXCEPTION WHEN OTHERS THEN
        chat_migrations_count := 0;
    END;

    -- بررسی وجود نوع‌های تکراری
    SELECT COUNT(*) INTO duplicate_types_count
    FROM (
        SELECT typname, typnamespace, COUNT(*) as count
        FROM pg_type
        WHERE typname LIKE 'chat_%'
        GROUP BY typname, typnamespace
        HAVING COUNT(*) > 1
    ) as subquery;

    -- اگر مشکلی وجود دارد، پاکسازی را انجام می‌دهیم
    IF (chat_tables_count > 0 AND chat_migrations_count = 0) OR duplicate_types_count > 0 THEN
        RAISE NOTICE 'Detected inconsistency in chat tables. Cleaning up...';

        -- حذف رکوردهای مایگریشن مربوط به chat
        DELETE FROM django_migrations WHERE app='chat';

        -- حذف نوع‌های موجود در پایگاه داده
        FOR r IN (SELECT typname FROM pg_type WHERE typname LIKE 'chat_%') LOOP
            EXECUTE 'DROP TYPE IF EXISTS ' || quote_ident(r.typname) || ' CASCADE';
            RAISE NOTICE 'Dropped type: %', r.typname;
        END LOOP;

        -- حذف جداول چت
        FOR r IN (SELECT table_name FROM information_schema.tables WHERE table_name LIKE 'chat_%' AND table_schema='public') LOOP
            EXECUTE 'DROP TABLE IF EXISTS ' || quote_ident(r.table_name) || ' CASCADE';
            RAISE NOTICE 'Dropped table: %', r.table_name;
        END LOOP;

        RAISE NOTICE 'Cleanup completed successfully.';
    ELSE
        RAISE NOTICE 'No inconsistency detected in chat tables. Skipping cleanup.';
    END IF;
EXCEPTION WHEN OTHERS THEN
    RAISE NOTICE 'Error during cleanup: %', SQLERRM;
END
$$;

====== FILE: config/django-entrypoint.sh ======

#!/bin/bash
set -e

echo "=== Django Development Server Entrypoint ==="

mkdir -p /app/static /app/staticfiles /app/media /app/logs
export DJANGO_ENV=development
export PYTHONPATH=/app
cd /app

echo "Waiting for database..."
while ! nc -z postgres 5432; do
    echo "Waiting for PostgreSQL..."
    sleep 2
done
echo "PostgreSQL is ready!"

echo "Checking database for potential issues..."
if [ -f "/app/config/db_cleanup.sql" ]; then
  PGPASSWORD=$DB_PASSWORD psql -h postgres -U $DB_USER -d $DB_NAME -f /app/config/db_cleanup.sql || echo "Cleanup script execution failed, continuing..."
fi

echo "Running migrations with safe strategy..."
python /app/config/migration_utils.py safe || (
  echo "Safe migration failed, trying alternative approach..." &&
  python manage.py migrate --fake-initial || python manage.py migrate
)

echo "Collecting static files..."
python manage.py collectstatic --no-input

echo "Starting Django development server..."
exec python manage.py runserver 0.0.0.0:8000

====== FILE: chat/consumers.py ======

from django.contrib.auth import get_user_model
from .models import ChatRoom, ChatMessage, UserChatStatus, Notification
from django.utils import timezone
from django.db.models import Q
from channels.db import database_sync_to_async
from django.contrib.auth.models import AnonymousUser

User = get_user_model()
import json
import base64
import uuid
import os
from channels.generic.websocket import AsyncWebsocketConsumer
from django.core.files.base import ContentFile
from django.conf import settings


class ChatConsumer(AsyncWebsocketConsumer):
    async def connect(self):
        self.room_id = self.scope['url_route']['kwargs']['room_id']
        self.room_group_name = f'chat_{self.room_id}'
        self.user = self.scope['user']

        # بررسی احراز هویت کاربر
        if isinstance(self.user, AnonymousUser) or not self.user.is_authenticated:
            await self.close()
            return

        # اول accept کنید، بعد بقیه کارها
        await self.accept()

        # اضافه کردن کاربر به گروه چت
        await self.channel_layer.group_add(
            self.room_group_name,
            self.channel_name
        )

        # تنظیم وضعیت کاربر به آنلاین
        await self.set_user_status('online')
        room = await self.get_room()

        # اعلام به همه کاربران در اتاق که این کاربر آنلاین شده
        await self.channel_layer.group_send(
            self.room_group_name,
            {
                'type': 'user_status_update',
                'user_id': self.user.id,
                'username': self.user.username,
                'status': 'online',
                'is_staff': self.user.is_staff
            }
        )

        # بررسی وضعیت کاربر طرف مقابل
        other_user = await self.get_other_user(room)
        if other_user:
            other_user_status = await self.get_user_status(other_user)
            await self.send(text_data=json.dumps({
                'type': 'user_status_update',
                'user_id': other_user.id,
                'username': other_user.username,
                'status': other_user_status,
                'is_staff': other_user.is_staff
            }))

        # علامت‌گذاری پیام‌های خوانده نشده به عنوان خوانده شده
        if not self.user.is_staff:
            await self.mark_messages_as_read()

    async def disconnect(self, close_code):
        # حذف کاربر از گروه چت
        if hasattr(self, 'room_group_name'):
            await self.channel_layer.group_discard(
                self.room_group_name,
                self.channel_name
            )

        # تنظیم وضعیت کاربر به آفلاین
        if hasattr(self, 'user') and self.user.is_authenticated:
            await self.set_user_status('offline')

            # اعلام به همه کاربران در اتاق که این کاربر آفلاین شده
            await self.channel_layer.group_send(
                self.room_group_name,
                {
                    'type': 'user_status_update',
                    'user_id': self.user.id,
                    'username': self.user.username,
                    'status': 'offline',
                    'is_staff': self.user.is_staff
                }
            )

    async def receive(self, text_data):
        data = json.loads(text_data)
        message_type = data.get('type', 'chat_message')

        if message_type == 'chat_message':
            message = data.get('message', '')
            file_data = data.get('file', None)

            try:
                if file_data:
                    message_obj = await self.save_message_with_file(message, file_data)
                else:
                    message_obj = await self.save_message(message)

                # بررسی نوع message_obj و استخراج اطلاعات مورد نیاز
                if isinstance(message_obj, dict):
                    message_id = message_obj.get('message_id') or message_obj.get('id')
                    timestamp = message_obj.get('timestamp')
                    message_type = message_obj.get('message_type', 'text')
                    file_url = message_obj.get('file_url')
                    file_name = message_obj.get('file_name')
                    file_type = message_obj.get('file_type')
                else:
                    message_id = str(message_obj.id)
                    timestamp = message_obj.created_at.isoformat()
                    message_type = message_obj.message_type
                    file_url = message_obj.file.url if hasattr(message_obj, 'file') and message_obj.file else None
                    file_name = message_obj.file_name if hasattr(message_obj, 'file_name') else None
                    file_type = message_obj.file_type if hasattr(message_obj, 'file_type') else None

                # ارسال پیام به گروه چت
                await self.channel_layer.group_send(
                    self.room_group_name,
                    {
                        'type': 'chat_message',
                        'message': message,
                        'username': self.user.username,
                        'user_id': self.user.id,
                        'message_id': message_id,
                        'timestamp': timestamp,
                        'message_type': message_type,
                        'file_url': file_url,
                        'file_name': file_name,
                        'file_type': file_type,
                        'is_staff': self.user.is_staff,
                    }
                )

                # ارسال اعلان به گیرنده
                receiver = await self.get_receiver()
                if receiver:
                    notification_group_name = f'notifications_{receiver.id}'

                    # ارسال اعلان برای بروزرسانی تعداد پیام‌های خوانده نشده
                    unread_count = await self.get_user_unread_count(receiver)
                    await self.channel_layer.group_send(
                        notification_group_name,
                        {
                            'type': 'unread_count_update',
                            'count': unread_count
                        }
                    )

                    # برای کاربران عادی، اعلان پاپ‌آپ هم ارسال کن
                    if not self.user.is_staff:  # اگر فرستنده ادمین نیست (یعنی کاربر عادی است)
                        if receiver.is_staff:  # و گیرنده ادمین است
                            await self.channel_layer.group_send(
                                notification_group_name,
                                {
                                    'type': 'chat_notification',
                                    'message': message[:50] + ('...' if len(message) > 50 else ''),
                                    'sender': self.user.username,
                                    'room_id': str(self.room_id),
                                    'is_admin': False
                                }
                            )
                    elif not receiver.is_staff:  # اگر فرستنده ادمین است و گیرنده کاربر عادی
                        await self.channel_layer.group_send(
                            notification_group_name,
                            {
                                'type': 'chat_notification',
                                'message': message[:50] + ('...' if len(message) > 50 else ''),
                                'sender': 'پشتیبانی',
                                'room_id': str(self.room_id),
                                'is_admin': True
                            }
                        )
            except Exception as e:
                print(f"Error processing message: {e}")
                await self.send(text_data=json.dumps({
                    'type': 'error',
                    'message': f"خطا در پردازش پیام: {str(e)}"
                }))

        elif message_type == 'typing':
            is_typing = data.get('is_typing', False)
            # ارسال وضعیت تایپ کردن به گروه چت
            await self.channel_layer.group_send(
                self.room_group_name,
                {
                    'type': 'typing_status',
                    'username': self.user.username,
                    'user_id': self.user.id,
                    'is_typing': is_typing,
                    'is_staff': self.user.is_staff
                }
            )

    async def chat_message(self, event):
        await self.send(text_data=json.dumps({
            'type': 'chat_message',
            'message': event['message'],
            'message_id': event['message_id'],
            'username': event['username'],
            'user_id': event['user_id'],
            'message_type': event.get('message_type', 'text'),
            'file_url': event.get('file_url', None),
            'file_name': event.get('file_name', None),
            'file_type': event.get('file_type', None),
            'timestamp': event.get('timestamp', None),
            'is_staff': event.get('is_staff', False)
        }))

    async def typing_status(self, event):
        await self.send(text_data=json.dumps({
            'type': 'typing',
            'username': event['username'],
            'user_id': event['user_id'],
            'is_typing': event['is_typing'],
            'is_staff': event.get('is_staff', False)
        }))

    async def user_status_update(self, event):
        """ارسال بروزرسانی وضعیت کاربر به کلاینت"""
        await self.send(text_data=json.dumps({
            'type': 'user_status_update',
            'user_id': event.get('user_id'),
            'username': event.get('username'),
            'status': event.get('status'),
            'is_staff': event.get('is_staff', False)
        }))

    async def message_read(self, event):
        await self.send(text_data=json.dumps({
            'type': 'message_read',
            'message_id': event['message_id'],
            'read_by_user_id': event['read_by_user_id']
        }))

    async def chat_deleted(self, event):
        await self.send(text_data=json.dumps({
            'type': 'chat_deleted',
            'deleted_by_user_id': event.get('deleted_by_user_id', None)
        }))

    async def chat_status_update(self, event):
        await self.send(text_data=json.dumps({
            'type': 'chat_status_update',
            'is_closed': event['is_closed'],
            'updated_by_user_id': event.get('updated_by_user_id', None)
        }))

    @database_sync_to_async
    def save_message(self, message):
        room = ChatRoom.objects.get(id=self.room_id)
        chat_message = ChatMessage.objects.create(
            room=room,
            sender=self.user,
            content=message,
            message_type='text'
        )
        return chat_message

    @database_sync_to_async
    def get_room(self):
        """دریافت اطلاعات اتاق"""
        try:
            return ChatRoom.objects.get(id=self.room_id)
        except ChatRoom.DoesNotExist:
            return None

    @database_sync_to_async
    def get_other_user(self, room):
        """دریافت کاربر طرف مقابل در چت"""
        if not room:
            return None

        if self.user == room.user:
            return room.admin
        else:
            return room.user

    @database_sync_to_async
    def get_user_status(self, user):
        """دریافت وضعیت واقعی کاربر - اصلاح شده"""
        if not user:
            return 'offline'

        try:
            status_obj = UserChatStatus.objects.get(user=user)

            # استفاده از last_seen به جای last_activity
            if status_obj.last_seen:
                # بررسی زمان آخرین فعالیت
                from datetime import timedelta
                threshold = timezone.now() - timedelta(minutes=2)

                if status_obj.last_seen > threshold:
                    return status_obj.status
                else:
                    return 'offline'
            else:
                return 'offline'

        except UserChatStatus.DoesNotExist:
            return 'offline'
        except Exception as e:
            print(f"Error in get_user_status: {e}")
            return 'offline'

    @database_sync_to_async
    def set_user_status(self, status):
        """تنظیم وضعیت آنلاین/آفلاین کاربر - اصلاح شده"""
        try:
            # اطمینان از اینکه user واقعی است نه LazyObject
            if hasattr(self.user, '_wrapped'):
                # اگر LazyObject است، آن را resolve کنید
                actual_user = self.user._wrapped
            else:
                actual_user = self.user

            if not actual_user or not actual_user.is_authenticated:
                return

            user_status, created = UserChatStatus.objects.get_or_create(
                user=actual_user,
                defaults={'status': status}
            )
            user_status.status = status
            # last_seen خودکار بروزرسانی می‌شود چون auto_now=True دارد
            user_status.save()
        except Exception as e:
            print(f"Error setting user status: {e}")

    @database_sync_to_async
    def get_receiver(self):
        """دریافت کاربر گیرنده پیام"""
        try:
            room = ChatRoom.objects.get(id=self.room_id)
            if self.user == room.user:
                return room.admin
            else:
                return room.user
        except Exception as e:
            print(f"Error in get_receiver: {e}")
            return None

    @database_sync_to_async
    def get_user_unread_count(self, user):
        """محاسبه تعداد پیام‌های خوانده نشده برای یک کاربر خاص"""
        try:
            if user.is_staff:
                return ChatMessage.objects.filter(
                    room__admin=user,
                    is_read=False,
                    sender__is_staff=False
                ).count()
            else:
                return ChatMessage.objects.filter(
                    room__user=user,
                    is_read=False,
                    sender__is_staff=True
                ).count()
        except Exception as e:
            print(f"Error in get_user_unread_count: {e}")
            return 0

    @database_sync_to_async
    def mark_messages_as_read(self):
        """علامت‌گذاری تمام پیام‌های خوانده نشده در این اتاق به عنوان خوانده شده"""
        try:
            room = ChatRoom.objects.get(id=self.room_id)

            # اگر کاربر عادی است، پیام‌های ادمین را خوانده شده علامت‌گذاری کن
            if not self.user.is_staff:
                unread_messages = ChatMessage.objects.filter(
                    room=room,
                    is_read=False,
                    sender__is_staff=True
                )
            else:
                # اگر ادمین است، پیام‌های کاربر را خوانده شده علامت‌گذاری کن
                unread_messages = ChatMessage.objects.filter(
                    room=room,
                    is_read=False,
                    sender__is_staff=False
                )

            for message in unread_messages:
                message.is_read = True
                message.read_at = timezone.now()
                message.save()

            return len(unread_messages)
        except Exception as e:
            print(f"Error marking messages as read: {e}")
            return 0

    @database_sync_to_async
    def save_message_with_file(self, message, file_data):
        room = ChatRoom.objects.get(id=self.room_id)

        file_info = file_data.get('info', {})
        file_name = file_info.get('name', 'unnamed_file')
        file_type = file_info.get('type', 'application/octet-stream')

        max_size = 10 * 1024 * 1024  # 10MB

        file_content_str = file_data.get('content', '')
        if ',' in file_content_str:
            file_content_str = file_content_str.split(',', 1)[1]

        file_content = base64.b64decode(file_content_str)
        file_size = len(file_content)

        if file_size > max_size:
            raise ValueError(f"سایز فایل بیش از حد مجاز است (حداکثر {max_size / (1024 * 1024):.1f} مگابایت)")

        file_ext = os.path.splitext(file_name)[1]
        if not file_ext and '/' in file_type:
            mime_type = file_type.split('/')[1]
            if mime_type == 'jpeg':
                file_ext = '.jpg'
            elif mime_type in ['png', 'gif', 'bmp', 'webp']:
                file_ext = f'.{mime_type}'
            else:
                file_ext = ''

        unique_filename = f"{uuid.uuid4()}{file_ext}"

        chat_message = ChatMessage(
            room=room,
            sender=self.user,
            content=message,
            file_name=file_name,
            file_type=file_type,
            file_size=file_size
        )

        chat_message.file.save(unique_filename, ContentFile(file_content), save=False)

        if file_type.startswith('image/'):
            chat_message.message_type = 'image'
        else:
            chat_message.message_type = 'file'

        chat_message.save()

        if settings.DEBUG:
            file_url = f"{settings.MEDIA_URL}{chat_message.file.name}"
        else:
            file_url = chat_message.file.url

        return chat_message


class NotificationConsumer(AsyncWebsocketConsumer):
    async def connect(self):
        self.user = self.scope["user"]

        # بررسی احراز هویت کاربر
        if isinstance(self.user, AnonymousUser) or not self.user.is_authenticated:
            await self.close()
            return

        self.notification_group_name = f'notifications_{self.user.id}'

        await self.channel_layer.group_add(
            self.notification_group_name,
            self.channel_name
        )

        await self.accept()

        # ارسال تعداد پیام‌های خوانده نشده در هنگام اتصال
        unread_count = await self.get_unread_count()
        await self.send(text_data=json.dumps({
            'type': 'unread_count',
            'count': unread_count
        }))

    async def disconnect(self, close_code):
        if hasattr(self, 'notification_group_name'):
            await self.channel_layer.group_discard(
                self.notification_group_name,
                self.channel_name
            )

    async def receive(self, text_data):
        try:
            data = json.loads(text_data)
            message_type = data.get('type')

            if message_type == 'check_unread':
                unread_count = await self.get_unread_count()
                await self.send(text_data=json.dumps({
                    'type': 'unread_count',
                    'count': unread_count
                }))
            elif message_type == 'ping':
                await self.send(text_data=json.dumps({
                    'type': 'pong',
                    'message': 'Connection is alive'
                }))
        except json.JSONDecodeError:
            pass

    # اضافه کردن handler مفقود
    async def user_status_update(self, event):
        """Handle user status updates"""
        await self.send(text_data=json.dumps({
            'type': 'user_status_update',
            'user_id': event.get('user_id'),
            'username': event.get('username'),
            'status': event.get('status'),
            'is_staff': event.get('is_staff', False)
        }))

    async def chat_notification(self, event):
        await self.send(text_data=json.dumps({
            'type': 'chat_notification',
            'message': event['message'],
            'sender': event['sender'],
            'room_id': event['room_id'],
            'is_admin': event['is_admin']
        }))

    async def unread_count_update(self, event):
        await self.send(text_data=json.dumps({
            'type': 'unread_count',
            'count': event['count']
        }))

    async def notification_message(self, event):
        """Handle general notification messages"""
        await self.send(text_data=json.dumps({
            'type': 'notification',
            'message': event.get('message', ''),
            'title': event.get('title', ''),
            'data': event.get('data', {})
        }))

    @database_sync_to_async
    def get_unread_count(self):
        """محاسبه تعداد پیام‌های خوانده نشده برای کاربر فعلی"""
        if not self.user.is_authenticated:
            return 0

        try:
            if self.user.is_staff:
                # برای ادمین‌ها: پیام‌های خوانده نشده از کاربران عادی
                return ChatMessage.objects.filter(
                    room__admin=self.user,
                    is_read=False,
                    sender__is_staff=False
                ).count()
            else:
                # برای کاربران عادی: پیام‌های خوانده نشده از ادمین‌ها
                return ChatMessage.objects.filter(
                    room__user=self.user,
                    is_read=False,
                    sender__is_staff=True
                ).count()
        except Exception as e:
            print(f"Error in get_unread_count: {e}")
            return 0

====== FILE: chat/middleware.py ======

from django.utils import timezone
from .models import UserChatStatus


class UserActivityMiddleware:
    def __init__(self, get_response):
        self.get_response = get_response

    def __call__(self, request):
        response = self.get_response(request)

        # بروزرسانی آخرین زمان فعالیت کاربر
        if request.user.is_authenticated:
            try:
                status, created = UserChatStatus.objects.get_or_create(user=request.user)
                status.last_seen = timezone.now()
                if request.path != '/chat/set-offline/':  # اگر درخواست برای آفلاین شدن نیست
                    status.status = 'online'
                status.save(update_fields=['last_seen', 'status'])
            except Exception as e:
                pass

        return response

====== FILE: chat/__init__.py ======



====== FILE: chat/admin.py ======

# chat/admin.py
from django.contrib import admin
from .models import ChatRoom, ChatMessage, UserChatStatus, Notification


@admin.register(ChatRoom)
class ChatRoomAdmin(admin.ModelAdmin):
    list_display = ('name', 'room_type', 'is_active', 'created_at')
    list_filter = ('room_type', 'is_active')
    search_fields = ('name',)
    filter_horizontal = ('participants',)


@admin.register(ChatMessage)
class ChatMessageAdmin(admin.ModelAdmin):
    list_display = ('sender', 'room', 'message_type', 'content_preview', 'created_at')
    list_filter = ('message_type', 'is_read')
    search_fields = ('content',)

    def content_preview(self, obj):
        return obj.content[:50] + '...' if len(obj.content) > 50 else obj.content

    content_preview.short_description = 'محتوا'


@admin.register(UserChatStatus)
class UserChatStatusAdmin(admin.ModelAdmin):
    list_display = ('user', 'status', 'last_seen', 'is_staff_available')
    list_filter = ('status', 'is_staff_available')
    search_fields = ('user__username',)


@admin.register(Notification)
class NotificationAdmin(admin.ModelAdmin):
    list_display = ('user', 'notification_type', 'title', 'is_read', 'created_at')
    list_filter = ('notification_type', 'is_read')
    search_fields = ('title', 'message')

====== FILE: chat/signals.py ======

from django.contrib.auth import user_logged_in, user_logged_out
from django.dispatch import receiver
from django.db.models.signals import post_save
from django.contrib.auth import get_user_model
from channels.layers import get_channel_layer
from asgiref.sync import async_to_sync
from .models import UserChatStatus, ChatRoom

User = get_user_model()


@receiver(post_save, sender=User)
def create_user_chat_status(sender, instance, created, **kwargs):
    """ایجاد وضعیت چت برای کاربران جدید"""
    if created:
        UserChatStatus.objects.create(user=instance)


@receiver(user_logged_in)
def user_logged_in_handler(sender, request, user, **kwargs):
    """تغییر وضعیت کاربر به آنلاین هنگام ورود"""
    try:
        status, created = UserChatStatus.objects.get_or_create(user=user)
        status.status = 'online'
        status.save()

        # اطلاع‌رسانی به اتاق‌های چت کاربر
        notify_status_change(user, 'online')
    except Exception as e:
        print(f"Error updating user status on login: {e}")


@receiver(user_logged_out)
def user_logged_out_handler(sender, request, user, **kwargs):
    """تغییر وضعیت کاربر به آفلاین هنگام خروج"""
    if user and not user.is_anonymous:
        try:
            status = UserChatStatus.objects.filter(user=user).first()
            if status:
                status.status = 'offline'
                status.save()

                # اطلاع‌رسانی به اتاق‌های چت کاربر
                notify_status_change(user, 'offline')
        except Exception as e:
            print(f"Error updating user status on logout: {e}")


def notify_status_change(user, status):
    """اطلاع‌رسانی تغییر وضعیت کاربر به اتاق‌های چت مرتبط"""
    try:
        channel_layer = get_channel_layer()

        # دریافت تمام اتاق‌های چت کاربر
        if user.is_staff:
            chat_rooms = ChatRoom.objects.filter(admin=user)
        else:
            chat_rooms = ChatRoom.objects.filter(user=user)

        # ارسال اطلاعیه به هر اتاق
        for room in chat_rooms:
            async_to_sync(channel_layer.group_send)(
                f'chat_{room.id}',
                {
                    'type': 'user_status_update',
                    'user_id': user.id,
                    'username': user.username,
                    'status': status,
                    'is_staff': user.is_staff
                }
            )

        # همچنین اطلاع‌رسانی به کانال اعلان‌های کاربر برای بروزرسانی آیکن وضعیت
        notification_group = f'notifications_{user.id}'
        async_to_sync(channel_layer.group_send)(
            notification_group,
            {
                'type': 'user_status_update',
                'user_id': user.id,
                'username': user.username,
                'status': status,
                'is_staff': user.is_staff
            }
        )
    except Exception as e:
        print(f"Error notifying status change: {e}")

====== FILE: chat/models.py ======

import os

from django.db import models
from django.conf import settings  # برای دسترسی به AUTH_USER_MODEL
from django.utils import timezone
import uuid


class ChatRoom(models.Model):
    """اتاق چت"""
    ROOM_TYPES = [
        ('support', 'پشتیبانی'),
        ('general', 'عمومی'),
        ('private', 'خصوصی'),
    ]

    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    name = models.CharField('نام اتاق', max_length=100)
    room_type = models.CharField('نوع اتاق', max_length=20, choices=ROOM_TYPES, default='support')
    participants = models.ManyToManyField(settings.AUTH_USER_MODEL, related_name='chat_rooms', blank=True)
    is_active = models.BooleanField('فعال', default=True)
    created_at = models.DateTimeField('تاریخ ایجاد', auto_now_add=True)
    updated_at = models.DateTimeField('تاریخ بروزرسانی', auto_now=True)
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='user_chat_rooms', null=True, blank=True)
    admin = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='admin_chat_rooms', null=True, blank=True)

    class Meta:
        verbose_name = 'اتاق چت'
        verbose_name_plural = 'اتاق‌های چت'
        ordering = ['-updated_at']

    def __str__(self):
        return f"{self.name} ({self.get_room_type_display()})"

    @property
    def group_name(self):
        """نام گروه برای channels"""
        return f'chat_{self.id}'


class ChatMessage(models.Model):
    MESSAGE_TYPE_CHOICES = [
        ('text', 'Text'),
        ('image', 'Image'),
        ('file', 'File'),
        ('system', 'System'),
    ]

    # id فعلی را حفظ کنید (تغییر ندهید)
    room = models.ForeignKey(ChatRoom, on_delete=models.CASCADE, related_name='messages')
    sender = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    content = models.TextField()
    file = models.FileField(upload_to='chat_files/', null=True, blank=True)
    file_name = models.CharField(max_length=255, null=True, blank=True)
    file_size = models.IntegerField(null=True, blank=True)  # در بایت
    file_type = models.CharField(max_length=50, null=True, blank=True)  # مثلا image/jpeg یا application/pdf
    message_type = models.CharField(max_length=10, choices=MESSAGE_TYPE_CHOICES, default='text')
    is_read = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ['created_at']

    def __str__(self):
        return f"{self.sender.username}: {self.content[:50]}"

    def save(self, *args, **kwargs):
        # اگر فایل آپلود شده و نوع پیام مشخص نشده، نوع پیام را تعیین کن
        if self.file and (not self.message_type or self.message_type == 'text'):
            file_ext = os.path.splitext(self.file.name)[1].lower()
            image_extensions = ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp']

            if file_ext in image_extensions:
                self.message_type = 'image'
            else:
                self.message_type = 'file'

            # ذخیره نام فایل و سایز آن
            if not self.file_name:
                self.file_name = os.path.basename(self.file.name)

            # سایز فایل را ذخیره کن
            if not self.file_size and hasattr(self.file, 'size'):
                self.file_size = self.file.size

            # نوع فایل را ذخیره کن
            if not self.file_type:
                import mimetypes
                self.file_type = mimetypes.guess_type(self.file.name)[0] or 'application/octet-stream'

        super().save(*args, **kwargs)


class UserChatStatus(models.Model):
    """وضعیت آنلاین کاربران"""
    STATUS_CHOICES = [
        ('online', 'آنلاین'),
        ('away', 'غایب'),
        ('busy', 'مشغول'),
        ('offline', 'آفلاین'),
    ]

    user = models.OneToOneField(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='chat_status')
    status = models.CharField('وضعیت', max_length=20, choices=STATUS_CHOICES, default='offline')
    last_seen = models.DateTimeField('آخرین بازدید', auto_now=True)
    is_staff_available = models.BooleanField('ادمین در دسترس', default=False)

    class Meta:
        verbose_name = 'وضعیت چت کاربر'
        verbose_name_plural = 'وضعیت چت کاربران'

    def __str__(self):
        return f"{self.user.username} - {self.get_status_display()}"


class Notification(models.Model):
    """نوتیفیکیشن‌ها"""
    NOTIFICATION_TYPES = [
        ('chat', 'پیام چت'),
        ('order', 'بروزرسانی سفارش'),
        ('product', 'موجود شدن محصول'),
        ('system', 'سیستم'),
    ]

    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='notifications')
    notification_type = models.CharField('نوع نوتیفیکیشن', max_length=30, choices=NOTIFICATION_TYPES)
    title = models.CharField('عنوان', max_length=200)
    message = models.TextField('پیام')
    data = models.JSONField('داده‌های اضافی', default=dict, blank=True)
    is_read = models.BooleanField('خوانده شده', default=False)
    created_at = models.DateTimeField('تاریخ ایجاد', auto_now_add=True)

    class Meta:
        verbose_name = 'نوتیفیکیشن'
        verbose_name_plural = 'نوتیفیکیشن‌ها'
        ordering = ['-created_at']

    def __str__(self):
        return f"{self.user.username}: {self.title}"


class DeletedChat(models.Model):
    """مدل برای ذخیره چت‌هایی که کاربر حذف کرده است"""
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    room = models.ForeignKey(ChatRoom, on_delete=models.CASCADE, related_name='del_messages')
    deleted_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        unique_together = ('user', 'room')

    def __str__(self):
        return f"{self.user.username} deleted chat {self.room.id}"



====== FILE: chat/apps.py ======

from django.apps import AppConfig


class ChatConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'chat'

    def ready(self):
        import chat.signals

====== FILE: chat/views.py ======

from datetime import timedelta

from asgiref.sync import async_to_sync
from channels.layers import get_channel_layer
from django.contrib.auth.mixins import LoginRequiredMixin
from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from django.http import JsonResponse
from django.contrib import messages
from django.db.models import Q, Count
from django.template.loader import render_to_string
from django.contrib.auth import get_user_model
from django.utils import timezone
from django.views import View
from django.views.decorators.http import require_POST

from .models import ChatRoom, ChatMessage, UserChatStatus, Notification, DeletedChat
import uuid
from django.views.decorators.csrf import csrf_exempt
from django.utils.decorators import method_decorator
User = get_user_model()


@login_required
def chat_list(request):
    user_chats = ChatRoom.objects.filter(
        user=request.user,
        is_active=True,
    ).exclude(
        id__in=DeletedChat.objects.filter(user=request.user).values('room_id')  # حذف چت‌های حذف شده توسط کاربر
    ).order_by('-updated_at')

    for chat in user_chats:
        chat.unread_count = ChatMessage.objects.filter(
            room=chat,
            is_read=False
        ).exclude(sender=request.user).count()

    context = {
        'user_chats': user_chats,
    }

    return render(request, 'chat/chat_list.html', context)


@login_required
def chat_room(request, room_id):
    try:
        room = ChatRoom.objects.get(id=room_id)

        # بررسی دسترسی کاربر
        if not request.user.is_staff and request.user != room.user:
            from django.contrib import messages as django_messages
            django_messages.error(request, 'شما اجازه دسترسی به این چت را ندارید.')
            return redirect('chat:chat_list')

        is_deleted_by_user = DeletedChat.objects.filter(room=room, user=room.user).exists()

        if request.user.is_staff:
            unread_messages = room.messages.filter(is_read=False, sender=room.user)
        else:
            unread_messages = room.messages.filter(is_read=False).exclude(sender=request.user)

        channel_layer = None
        try:
            from channels.layers import get_channel_layer
            from asgiref.sync import async_to_sync
            channel_layer = get_channel_layer()
        except Exception as e:
            print(f"Error getting channel layer: {e}")

        for message in unread_messages:
            message.is_read = True
            message.save()

            if channel_layer:
                try:
                    async_to_sync(channel_layer.group_send)(
                        f'chat_{room.id}',
                        {
                            'type': 'message_read',
                            'message_id': str(message.id),
                            'read_by_user_id': request.user.id
                        }
                    )
                    print(f"Sent message_read event for message {message.id}")
                except Exception as e:
                    print(f"Error sending to channel: {e}")

        chat_messages = room.messages.all().order_by('created_at')

        online_users = UserChatStatus.objects.filter(
            status='online',
            user__in=[room.user, room.admin] if room.admin else [room.user]
        )

        context = {
            'room': room,
            'room_id_str': str(room.id),
            'chat_messages': chat_messages,
            'online_users': online_users,
            'is_deleted_by_user': is_deleted_by_user,
        }

        return render(request, 'chat/chat_room.html', context)

    except ChatRoom.DoesNotExist:
        from django.contrib import messages as django_messages
        django_messages.error(request, 'چت مورد نظر یافت نشد.')
        return redirect('chat:chat_list')


@login_required
@require_POST
def mark_message_as_read(request, message_id):
    try:
        message = ChatMessage.objects.get(id=message_id)

        if not request.user.is_staff and request.user != message.room.user:
            return JsonResponse({'success': False, 'error': 'شما اجازه دسترسی به این پیام را ندارید.'})

        if message.is_read:
            return JsonResponse({'success': True, 'already_read': True})

        message.is_read = True
        message.save()

        try:
            channel_layer = get_channel_layer()
            async_to_sync(channel_layer.group_send)(
                f'chat_{message.room.id}',
                {
                    'type': 'message_read',
                    'message_id': str(message.id),
                    'read_by_user_id': request.user.id
                }
            )
        except Exception as e:
            print(f"Error sending to channel: {e}")

        return JsonResponse({'success': True})

    except ChatMessage.DoesNotExist:
        return JsonResponse({'success': False, 'error': 'پیام مورد نظر یافت نشد.'})
    except Exception as e:
        return JsonResponse({'success': False, 'error': str(e)})

@login_required
def start_chat(request):
    if request.user.is_staff:
        return redirect('chat:admin_dashboard')

    if request.method == 'POST':
        existing_active_chat = ChatRoom.objects.filter(
            user=request.user,
            is_active=True
        ).exclude(
            id__in=DeletedChat.objects.filter(user=request.user).values('room_id')
        ).first()

        if existing_active_chat:
            return redirect('chat:chat_room', room_id=existing_active_chat.id)

        new_chat = ChatRoom.objects.create(
            user=request.user,
            is_active=True
        )

        admin_user = User.objects.filter(is_staff=True).first()
        sender = admin_user if admin_user else request.user

        ChatMessage.objects.create(
            room=new_chat,
            content="به پشتیبانی زیما خوش آمدید. چگونه می‌توانیم به شما کمک کنیم؟",
            message_type="system",
            sender=sender
        )

        admins = User.objects.filter(is_staff=True)
        for admin in admins:
            pass

        return redirect('chat:chat_room', room_id=new_chat.id)

    if request.user.is_staff:
        return redirect('chat:admin_dashboard')

    return render(request, 'chat/start_chat.html')

@login_required
@require_POST
def delete_chat(request, room_id):
    """حذف (مخفی کردن) چت برای کاربر"""
    try:
        room = ChatRoom.objects.get(id=room_id)

        if room.user != request.user and not request.user.is_staff:
            return JsonResponse({
                'success': False,
                'error': 'شما اجازه حذف این گفتگو را ندارید'
            })

        try:
            from channels.layers import get_channel_layer
            from asgiref.sync import async_to_sync

            channel_layer = get_channel_layer()
            async_to_sync(channel_layer.group_send)(
                f'chat_{room_id}',
                {
                    'type': 'chat_deleted',
                    'deleted_by': request.user.username,
                    'deleted_by_id': request.user.id,
                    'is_staff': request.user.is_staff
                }
            )
        except Exception as e:
            print(f"Error sending delete notification: {e}")

        if request.user.is_staff:
            room.delete()
            return JsonResponse({'success': True})
        else:
            DeletedChat.objects.get_or_create(user=request.user, room=room)
            return JsonResponse({'success': True})

    except ChatRoom.DoesNotExist:
        return JsonResponse({
            'success': False,
            'error': 'گفتگوی مورد نظر یافت نشد'
        })
    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': str(e)
        })

@login_required
@require_POST
def close_chat(request, room_id):
    if not request.user.is_staff:
        return JsonResponse({'success': False, 'error': 'شما اجازه بستن این چت را ندارید'})

    try:
        room = ChatRoom.objects.get(id=room_id)

        room.is_active = False
        room.save()

        ChatMessage.objects.create(
            room=room,
            content='این گفتگو توسط پشتیبانی بسته شده است.',
            message_type='system',
            sender=request.user
        )

        try:
            from channels.layers import get_channel_layer
            from asgiref.sync import async_to_sync

            channel_layer = get_channel_layer()
            async_to_sync(channel_layer.group_send)(
                f'chat_{room_id}',
                {
                    'type': 'chat_status_update',
                    'is_closed': True,
                    'message': 'این گفتگو توسط پشتیبانی بسته شده است.'
                }
            )
        except ImportError:
            pass

        return JsonResponse({'success': True})

    except ChatRoom.DoesNotExist:
        return JsonResponse({'success': False, 'error': 'گفتگوی مورد نظر یافت نشد'})
    except Exception as e:
        return JsonResponse({'success': False, 'error': str(e)})



@login_required
def assign_admin(request, room_id):
    if not request.user.is_staff:
        return JsonResponse({'success': False, 'error': 'دسترسی غیرمجاز'})

    try:
        room = ChatRoom.objects.get(id=room_id)
        room.admin = request.user
        room.save()

        room.participants.add(request.user)

        ChatMessage.objects.create(
            room=room,
            content=f'این چت به {request.user.get_full_name() or request.user.username} اختصاص یافت.',
            message_type='system',
            sender=request.user
        )

        channel_layer = get_channel_layer()
        async_to_sync(channel_layer.group_send)(
            f'chat_{room_id}',
            {
                'type': 'user_status_update',
                'message': f'این چت به {request.user.get_full_name() or request.user.username} اختصاص یافت.'
            }
        )

        return JsonResponse({'success': True})

    except ChatRoom.DoesNotExist:
        return JsonResponse({'success': False, 'error': 'چت مورد نظر یافت نشد'})
    except Exception as e:
        return JsonResponse({'success': False, 'error': str(e)})


@login_required
def admin_dashboard(request):
    if not request.user.is_staff:
        return redirect('chat:chat_list')

    active_chats = ChatRoom.objects.filter(is_active=True).count()

    pending_rooms = ChatRoom.objects.filter(
        is_active=True,
        admin__isnull=True
    ).order_by('-created_at')

    for room in pending_rooms:
        room.last_message = room.messages.order_by('-created_at').first()

    pending_chats = pending_rooms.count()

    online_users = UserChatStatus.objects.filter(status='online').count()

    admin_active_chats = ChatRoom.objects.filter(
        is_active=True,
        admin=request.user
    ).order_by('-updated_at')

    for room in admin_active_chats:
        room.unread_count = room.messages.filter(
            is_read=False,
            sender=room.user
        ).count()
        room.last_message = room.messages.order_by('-created_at').first()

    context = {
        'active_chats': active_chats,
        'pending_chats': pending_chats,
        'online_users': online_users,
        'pending_rooms': pending_rooms,
        'admin_active_chats': admin_active_chats,
    }

    return render(request, 'chat/admin_dashboard.html', context)


# @login_required
# @require_POST
# def mark_message_read(request, message_id):
#     """علامت‌گذاری پیام به عنوان خوانده شده"""
#     try:
#         message = ChatMessage.objects.get(id=message_id)
#
#         # فقط پیام‌هایی که برای کاربر فعلی هستند را علامت‌گذاری کن
#         if message.room.user == request.user or request.user.is_staff:
#             if not message.is_read and message.sender != request.user:
#                 message.is_read = True
#                 message.save()
#
#                 # ارسال وضعیت خوانده شدن به وب‌سوکت
#                 try:
#                     from channels.layers import get_channel_layer
#                     from asgiref.sync import async_to_sync
#
#                     channel_layer = get_channel_layer()
#                     async_to_sync(channel_layer.group_send)(
#                         f'chat_{message.room.id}',
#                         {
#                             'type': 'message_read',
#                             'message_id': str(message_id),
#                             'read_by_user_id': request.user.id
#                         }
#                     )
#                 except Exception as e:
#                     print(f"Error sending to channel: {e}")
#
#                 return JsonResponse({'success': True})
#             else:
#                 return JsonResponse({'success': True, 'info': 'پیام قبلاً خوانده شده است'})
#         else:
#             return JsonResponse({'success': False, 'error': 'شما اجازه دسترسی به این پیام را ندارید'})
#
#     except ChatMessage.DoesNotExist:
#         return JsonResponse({'success': False, 'error': 'پیام مورد نظر یافت نشد'})
#     except Exception as e:
#         return JsonResponse({'success': False, 'error': str(e)})


def api_pending_chats(request):
    if not request.user.is_staff:
        return JsonResponse({'success': False, 'error': 'دسترسی غیرمجاز'})

    pending_rooms = ChatRoom.objects.filter(is_active=True, admin=None).order_by('-created_at')

    for room in pending_rooms:
        room.last_message = room.messages.order_by('-created_at').first()

    html = render_to_string('chat/partials/pending_chats.html', {'pending_rooms': pending_rooms})

    return JsonResponse({'success': True, 'html': html})


def api_active_chats(request):
    if not request.user.is_staff:
        return JsonResponse({'success': False, 'error': 'دسترسی غیرمجاز'})

    admin_active_chats = ChatRoom.objects.filter(is_active=True, admin=request.user).order_by('-updated_at')

    for room in admin_active_chats:
        room.unread_count = room.messages.filter(is_read=False, sender=room.user).count()
        room.last_message = room.messages.order_by('-created_at').first()

    # تبدیل به HTML
    html = render_to_string('chat/partials/active_chats.html', {'admin_active_chats': admin_active_chats})

    return JsonResponse({'success': True, 'html': html})


@login_required
def notifications(request):
    user_notifications = Notification.objects.filter(
        user=request.user
    ).order_by('-created_at')[:20]

    context = {
        'notifications': user_notifications
    }
    return render(request, 'chat/notifications.html', context)


@login_required
@require_POST
def mark_notification_read(request, notification_id):
    try:
        notification = Notification.objects.get(id=notification_id, user=request.user)
        notification.is_read = True
        notification.save()
        return JsonResponse({'success': True})
    except Notification.DoesNotExist:
        return JsonResponse({'success': False, 'error': 'نوتیفیکیشن یافت نشد'})


@login_required
def notification_count(request):
    count = Notification.objects.filter(user=request.user, is_read=False).count()
    return JsonResponse({'count': count})


@login_required
def create_support_chat(request):
    if request.user.is_staff:
        return redirect('chat:admin_dashboard')

    existing_active_chat = ChatRoom.objects.filter(
        user=request.user,
        is_active=True
    ).first()

    if existing_active_chat:
        return redirect('chat:chat_room', room_id=existing_active_chat.id)

    new_chat = ChatRoom.objects.create(
        user=request.user,
        is_active=True
    )

    ChatMessage.objects.create(
        room=new_chat,
        content="به پشتیبانی زیما خوش آمدید. چگونه می‌توانیم به شما کمک کنیم؟",
        message_type="system",
        sender=request.user  # تعیین کاربر فعلی به عنوان فرستنده
    )

    return redirect('chat:chat_room', room_id=new_chat.id)


@login_required
def reopen_chat(request, room_id):
    if not request.user.is_staff:
        return JsonResponse({'success': False, 'error': 'شما اجازه بازگشایی این چت را ندارید'})

    try:
        room = ChatRoom.objects.get(id=room_id)

        room.is_active = True
        room.save()

        ChatMessage.objects.create(
            room=room,
            content='این چت بازگشایی شده است.',
            message_type='system',
            sender=request.user
        )

        # ارسال پیام به کانال وب‌سوکت
        channel_layer = get_channel_layer()
        async_to_sync(channel_layer.group_send)(
            f'chat_{room_id}',
            {
                'type': 'chat_status_update',
                'is_closed': False,
                'message': 'این چت توسط ادمین بازگشایی شده است.'
            }
        )

        return JsonResponse({'success': True})

    except ChatRoom.DoesNotExist:
        return JsonResponse({'success': False, 'error': 'چت مورد نظر یافت نشد'})
    except Exception as e:
        return JsonResponse({'success': False, 'error': str(e)})

def api_unread_counts(request):
    if not request.user.is_authenticated:
        return JsonResponse({'success': False, 'error': 'دسترسی غیرمجاز'})

    user_unread_count = 0
    admin_unread_count = 0

    if request.user.is_staff:
        admin_unread_count = ChatMessage.objects.filter(
            room__admin=request.user,
            is_read=False,
            sender__is_staff=False
        ).count()

        pending_count = ChatRoom.objects.filter(
            is_active=True,
            admin=None
        ).count()

        admin_unread_count += pending_count
    else:
        user_unread_count = ChatMessage.objects.filter(
            room__user=request.user,
            is_read=False
        ).exclude(sender=request.user).count()

    return JsonResponse({
        'success': True,
        'user_unread_count': user_unread_count,
        'admin_unread_count': admin_unread_count
    })


class SetUserOfflineView(View):
    @method_decorator(csrf_exempt)
    def dispatch(self, request, *args, **kwargs):
        return super().dispatch(request, *args, **kwargs)

    def post(self, request):
        if not request.user.is_authenticated:
            return JsonResponse({'success': False, 'error': 'Authentication required'}, status=403)

        try:
            status, created = UserChatStatus.objects.get_or_create(user=request.user)
            status.status = 'offline'
            status.save()

            # اطلاع‌رسانی به اتاق‌های چت
            from .signals import notify_status_change
            notify_status_change(request.user, 'offline')

            return JsonResponse({'success': True})
        except Exception as e:
            return JsonResponse({'success': False, 'error': str(e)}, status=500)


def check_online_status():
    # زمان فعلی منهای 2 دقیقه
    threshold = timezone.now() - timedelta(minutes=2)

    # کاربرانی که آخرین فعالیت آنها قبل از threshold است را آفلاین کن
    offline_users = UserChatStatus.objects.filter(
        status='online',
        last_activity__lt=threshold
    )

    for user_status in offline_users:
        user_status.status = 'offline'
        user_status.save()

        # اطلاع‌رسانی به اتاق‌های چت
        from .signals import notify_status_change
        notify_status_change(user_status.user, 'offline')

class SetUserOnlineView(View):
    @method_decorator(csrf_exempt)
    def dispatch(self, request, *args, **kwargs):
        return super().dispatch(request, *args, **kwargs)

    def post(self, request):
        if not request.user.is_authenticated:
            return JsonResponse({'success': False, 'error': 'Authentication required'}, status=403)

        try:
            status, created = UserChatStatus.objects.get_or_create(user=request.user)
            status.status = 'online'
            status.last_activity = timezone.now()
            status.save()

            # اطلاع‌رسانی به اتاق‌های چت
            from .signals import notify_status_change
            notify_status_change(request.user, 'online')

            return JsonResponse({'success': True})
        except Exception as e:
            return JsonResponse({'success': False, 'error': str(e)}, status=500)

def unread_count(request):
    """دریافت تعداد پیام‌های خوانده نشده"""
    if not request.user.is_authenticated:
        return JsonResponse({'count': 0})

    try:
        if request.user.is_staff:
            # برای ادمین: تعداد کل پیام‌های خوانده نشده در تمام چت‌ها
            admin_unread_count = ChatMessage.objects.filter(
                room__admin=request.user,
                is_read=False,
                sender__is_staff=False  # فقط پیام‌های کاربران عادی
            ).count()

            # اضافه کردن تعداد چت‌های در انتظار
            pending_count = ChatRoom.objects.filter(
                is_active=True,
                admin=None
            ).count()

            count = admin_unread_count + pending_count
        else:
            # برای کاربر عادی: تعداد پیام‌های خوانده نشده در چت‌های خودش
            count = ChatMessage.objects.filter(
                room__user=request.user,
                is_read=False,
                sender__is_staff=True  # فقط پیام‌های ادمین
            ).count()

        return JsonResponse({'count': count})
    except Exception as e:
        return JsonResponse({'count': 0, 'error': str(e)})


@login_required
def get_user_status(request, user_id):
    """API برای دریافت وضعیت آنلاین/آفلاین یک کاربر"""
    try:
        user = User.objects.get(id=user_id)
        status_obj = UserChatStatus.objects.filter(user=user).first()

        if status_obj:
            return JsonResponse({'status': status_obj.status})
        else:
            return JsonResponse({'status': 'offline'})
    except User.DoesNotExist:
        return JsonResponse({'error': 'User not found'}, status=404)
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)








====== FILE: chat/urls.py ======

# chat/urls.py
from django.urls import path
from . import views
from .views import SetUserOfflineView, SetUserOnlineView

app_name = 'chat'

urlpatterns = [
    path('', views.chat_list, name='chat_list'),
    path('start/', views.start_chat, name='start_chat'),
    path('room/<uuid:room_id>/', views.chat_room, name='chat_room'),
    path('support/create/', views.create_support_chat, name='create_support_chat'),

    # اصلاح مسیر notifications
    path('notifications/', views.notifications, name='notifications'),
    path('notifications/<uuid:notification_id>/read/', views.mark_notification_read, name='mark_notification_read'),
    path('notifications/count/', views.notification_count, name='notification_count'),

    path('admin/dashboard/', views.admin_dashboard, name='admin_dashboard'),
    path('assign-admin/<uuid:room_id>/', views.assign_admin, name='assign_admin'),
    path('close/<uuid:room_id>/', views.close_chat, name='close_chat'),
    path('reopen/<uuid:room_id>/', views.reopen_chat, name='reopen_chat'),
    path('delete/<uuid:room_id>/', views.delete_chat, name='delete_chat'),
    path('mark-read/<int:message_id>/', views.mark_message_as_read, name='mark_message_as_read'),

    path('api/pending-chats/', views.api_pending_chats, name='api_pending_chats'),
    path('api/active-chats/', views.api_active_chats, name='api_active_chats'),
    path('api/unread-counts/', views.api_unread_counts, name='api_unread_counts'),
    path('set-online/', views.SetUserOnlineView.as_view(), name='set_online_status'),
    path('set-offline/', views.SetUserOfflineView.as_view(), name='set_offline_status'),
    path('unread-count/', views.unread_count, name='unread_count'),
    path('user-status/<int:user_id>/', views.get_user_status, name='get_user_status'),



]

====== FILE: chat/tests.py ======

from django.test import TestCase

# Create your tests here.


====== FILE: chat/routing.py ======

# chat/routing.py
from django.urls import re_path
from . import consumers

websocket_urlpatterns = [
    re_path(r'ws/chat/(?P<room_id>[^/]+)/$', consumers.ChatConsumer.as_asgi()),
    re_path(r'ws/notifications/$', consumers.NotificationConsumer.as_asgi()),
]

====== FILE: chat/services.py ======

from channels.layers import get_channel_layer
from asgiref.sync import async_to_sync
from .models import Notification, UserChatStatus


def send_notification(user, title, message, notification_type='system', data=None):
    """ارسال نوتیفیکیشن به کاربر"""
    if data is None:
        data = {}

    # ذخیره نوتیفیکیشن در دیتابیس
    notification = Notification.objects.create(
        user=user,
        title=title,
        message=message,
        notification_type=notification_type,
        data=data
    )

    # ارسال از طریق WebSocket اگر کاربر آنلاین باشد
    channel_layer = get_channel_layer()

    try:
        # ارسال به گروه نوتیفیکیشن کاربر
        async_to_sync(channel_layer.group_send)(
            f'notifications_{user.id}',
            {
                'type': 'notification',
                'id': str(notification.id),
                'title': title,
                'message': message,
                'notification_type': notification_type,
                'created_at': notification.created_at.isoformat(),
                'data': data
            }
        )
        return True
    except Exception as e:
        print(f"Error sending notification: {e}")
        return False


def send_chat_notification(room, message_obj):
    """ارسال نوتیفیکیشن برای پیام چت جدید"""
    # ارسال نوتیفیکیشن به همه کاربران اتاق به جز فرستنده پیام
    for user in room.participants.all():
        if user != message_obj.user:
            send_notification(
                user=user,
                title="پیام جدید",
                message=f"پیام جدید از {message_obj.user.get_full_name() or message_obj.user.username}: {message_obj.content[:50]}...",
                notification_type='chat_message',
                data={
                    'room_id': str(room.id),
                    'message_id': str(message_obj.id)
                }
            )
    return True



====== FILE: chat/migrations/__init__.py ======



====== FILE: chat/migrations/0001_initial.py ======

# Generated by Django 5.1.5 on 2025-06-07 10:43

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ChatRoom',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, verbose_name='نام اتاق')),
                ('room_type', models.CharField(choices=[('support', 'پشتیبانی'), ('general', 'عمومی'), ('private', 'خصوصی')], default='support', max_length=20, verbose_name='نوع اتاق')),
                ('is_active', models.BooleanField(default=True, verbose_name='فعال')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='تاریخ ایجاد')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='تاریخ بروزرسانی')),
                ('admin', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='admin_chat_rooms', to=settings.AUTH_USER_MODEL)),
                ('participants', models.ManyToManyField(blank=True, related_name='chat_rooms', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_chat_rooms', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'اتاق چت',
                'verbose_name_plural': 'اتاق\u200cهای چت',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='ChatMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('file', models.FileField(blank=True, null=True, upload_to='chat_files/')),
                ('file_name', models.CharField(blank=True, max_length=255, null=True)),
                ('file_size', models.IntegerField(blank=True, null=True)),
                ('file_type', models.CharField(blank=True, max_length=50, null=True)),
                ('message_type', models.CharField(choices=[('text', 'Text'), ('image', 'Image'), ('file', 'File'), ('system', 'System')], default='text', max_length=10)),
                ('is_read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='chat.chatroom')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('chat', 'پیام چت'), ('order', 'بروزرسانی سفارش'), ('product', 'موجود شدن محصول'), ('system', 'سیستم')], max_length=30, verbose_name='نوع نوتیفیکیشن')),
                ('title', models.CharField(max_length=200, verbose_name='عنوان')),
                ('message', models.TextField(verbose_name='پیام')),
                ('data', models.JSONField(blank=True, default=dict, verbose_name='داده\u200cهای اضافی')),
                ('is_read', models.BooleanField(default=False, verbose_name='خوانده شده')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='تاریخ ایجاد')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'نوتیفیکیشن',
                'verbose_name_plural': 'نوتیفیکیشن\u200cها',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserChatStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('online', 'آنلاین'), ('away', 'غایب'), ('busy', 'مشغول'), ('offline', 'آفلاین')], default='offline', max_length=20, verbose_name='وضعیت')),
                ('last_seen', models.DateTimeField(auto_now=True, verbose_name='آخرین بازدید')),
                ('is_staff_available', models.BooleanField(default=False, verbose_name='ادمین در دسترس')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='chat_status', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'وضعیت چت کاربر',
                'verbose_name_plural': 'وضعیت چت کاربران',
            },
        ),
        migrations.CreateModel(
            name='DeletedChat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted_at', models.DateTimeField(auto_now_add=True)),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='del_messages', to='chat.chatroom')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'room')},
            },
        ),
    ]

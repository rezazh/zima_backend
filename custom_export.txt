

====== FILE: pages/__init__.py ======



====== FILE: pages/admin.py ======

# در فایل pages/admin.py
from django.contrib import admin
from django.utils.html import format_html
from .models import Slider

from django.contrib import admin
from django.utils.html import format_html
from .models import Slider


@admin.register(Slider)
class SliderAdmin(admin.ModelAdmin):
    list_display = ('title', 'thumbnail', 'is_active', 'order')
    list_filter = ('is_active',)
    search_fields = ('title', 'subtitle')
    readonly_fields = ('preview_image',)

    fieldsets = (
        ('اطلاعات اصلی', {
            'fields': ('title', 'subtitle', 'link')
        }),
        ('تصویر', {
            'fields': ('image', 'preview_image'),
            'description': 'برای بهترین نتیجه، تصویری با نسبت 16:9 (مثلاً 1920×1080) و کیفیت بالا آپلود کنید.'
        }),
        ('تنظیمات نمایش', {
            'fields': ('order', 'is_active')
        }),
    )

    def thumbnail(self, obj):
        if obj.image:
            return format_html('<img src="{}" width="100" style="max-height: 60px; width: auto;" />', obj.image.url)
        return "بدون تصویر"

    thumbnail.short_description = "تصویر"

    def preview_image(self, obj):
        if obj.image:
            # نمایش تصویر با اندازه واقعی و مقیاس مناسب (بدون برش)
            return format_html('''
                <div style="margin-top: 10px; margin-bottom: 10px;">
                    <img src="{}" style="max-width: 100%; max-height: 400px; width: auto; height: auto;" />
                    <p style="margin-top: 5px; color: #666;">ابعاد تصویر: {}x{} پیکسل</p>
                </div>
            ''', obj.image.url, obj.image.width, obj.image.height)
        return "تصویری انتخاب نشده است."

    preview_image.short_description = "پیش‌نمایش تصویر (اندازه واقعی)"

====== FILE: pages/models.py ======

from django.db import models
from django.utils.translation import gettext_lazy as _
from PIL import Image
import os


class Slider(models.Model):
    title = models.CharField(_('عنوان'), max_length=200)
    subtitle = models.CharField(_('زیرعنوان'), max_length=300, blank=True)
    image = models.ImageField(
        _('تصویر'),
        upload_to='sliders/',
        help_text=_('فرمت‌های مجاز: JPG, JPEG, PNG, GIF, WebP')
    )
    link = models.URLField(_('لینک'), blank=True)
    is_active = models.BooleanField(_('فعال'), default=True)
    order = models.PositiveIntegerField(_('ترتیب'), default=0)
    created_at = models.DateTimeField(_('تاریخ ایجاد'), auto_now_add=True)
    updated_at = models.DateTimeField(_('تاریخ بروزرسانی'), auto_now=True)

    class Meta:
        verbose_name = _('اسلایدر')
        verbose_name_plural = _('اسلایدرها')
        ordering = ['order', '-created_at']

    def __str__(self):
        return self.title

    def save(self, *args, **kwargs):
        super().save(*args, **kwargs)

        if self.image:
            img_path = self.image.path
            img = Image.open(img_path)

            width, height = img.size
            target_ratio = 16 / 9
            current_ratio = width / height

            if current_ratio > target_ratio:  # تصویر عریض‌تر از نسبت هدف
                new_height = height
                new_width = int(height * target_ratio)
                new_img = Image.new('RGB', (new_width, new_height), (0, 0, 0))
                paste_x = (new_width - width) // 2
                new_img.paste(img, (paste_x, 0))
            elif current_ratio < target_ratio:  # تصویر بلندتر از نسبت هدف
                new_width = width
                new_height = int(width / target_ratio)
                new_img = Image.new('RGB', (new_width, new_height), (0, 0, 0))
                paste_y = (new_height - height) // 2
                new_img.paste(img, (0, paste_y))
            else:
                new_img = img

            new_img.save(img_path, quality=95, optimize=True)

====== FILE: pages/apps.py ======

from django.apps import AppConfig


class PagesConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'pages'


====== FILE: pages/views.py ======

from django.shortcuts import render
from django.shortcuts import render
from .models import Slider
from products.models import Product, Banner, Category


def home(request):
    sliders = Slider.objects.filter(is_active=True).order_by('order')

    main_categories = {
        'mens': Category.objects.filter(slug='mens-clothing').first(),
        'womens': Category.objects.filter(slug='womens-clothing').first(),
        'boys': Category.objects.filter(slug='boys-clothing').first(),
        'girls': Category.objects.filter(slug='girls-clothing').first(),
    }
    featured_products = Product.objects.filter(is_active=True, is_featured=True).order_by('-created_at')[:8]

    new_products = Product.objects.filter(is_active=True).order_by('-created_at')[:8]

    top_banners = Banner.objects.filter(is_active=True, position='home_top').order_by('order')
    middle_banners = Banner.objects.filter(is_active=True, position='home_middle').order_by('order')
    bottom_banners = Banner.objects.filter(is_active=True, position='home_bottom').order_by('order')
    sidebar_banners = Banner.objects.filter(is_active=True, position='sidebar').order_by('order')  # اضافه شد

    context = {
        'sliders': sliders,
        'featured_products': featured_products,
        'new_products': new_products,
        'top_banners': top_banners,
        'middle_banners': middle_banners,
        'bottom_banners': bottom_banners,
        'sidebar_banners': sidebar_banners,  # اضافه شد
        'main_categories': main_categories,
    }
    return render(request, 'pages/home.html', context)


def about(request):
    """صفحه درباره ما"""
    return render(request, 'pages/about.html')


def contact(request):
    """صفحه تماس با ما"""
    return render(request, 'pages/contact.html')


def faq(request):
    """صفحه سوالات متداول"""
    return render(request, 'pages/faq.html')


def privacy(request):
    """صفحه حریم خصوصی"""
    return render(request, 'pages/privacy.html')


def terms(request):
    """صفحه قوانین و مقررات"""
    return render(request, 'pages/terms.html')


def shipping(request):
    """صفحه شیوه‌های ارسال"""
    return render(request, 'pages/shipping.html')


def returns(request):
    """صفحه شرایط بازگشت کالا"""
    return render(request, 'pages/returns.html')


def newsletter(request):
    """عضویت در خبرنامه"""
    if request.method == 'POST':
        email = request.POST.get('email')
        from django.contrib import messages
        messages.success(request, 'ایمیل شما با موفقیت در خبرنامه ثبت شد.')

    from django.shortcuts import redirect
    return redirect(request.META.get('HTTP_REFERER', 'home'))

def size_guide_view(request):
    """
    Renders the Zima size guide page.
    """
    return render(request, 'pages/size_guide.html')


def shopping_guide_view(request):
    return render(request, 'pages/shopping_guide.html')

def shipping_conditions_view(request):
    # می‌توانید اطلاعات پویا را از دیتابیس اینجا لود کنید
    # مثلاً: shipping_methods = ShippingMethod.objects.all()
    # و سپس به context اضافه کنید
    context = {}
    return render(request, 'pages/shipping_conditions.html', context)

def product_quality_view(request):
    return render(request, 'pages/product_quality.html')

def returns_policy_view(request):
    return render(request, 'pages/returns_policy.html')

def privacy_policy_view(request):
    return render(request, 'pages/privacy_policy.html')

====== FILE: pages/urls.py ======

from django.urls import path
from . import views

app_name = 'pages'

urlpatterns = [
    path('', views.home, name='home'),
    path('about/', views.about, name='about'),
    path('contact/', views.contact, name='contact'),
    path('faq/', views.faq, name='faq'),
    path('terms/', views.terms, name='terms'),
    path('newsletter/', views.newsletter, name='newsletter'),
    path('privacy/', views.privacy, name='privacy'),
    path('returns/', views.returns, name='returns'),
    path('size-guide/', views.size_guide_view, name='size-guide'),
    path('shopping-guide/', views.shopping_guide_view, name='shopping_guide'),
    path('shipping-conditions/', views.shipping_conditions_view, name='shipping_conditions'),
    path('shipping/', views.shipping, name='shipping'),
    path('product-quality/', views.product_quality_view, name='product_quality'),
    path('returns-policy/', views.returns_policy_view, name='returns_policy'),
    path('privacy-policy/', views.privacy_policy_view, name='privacy_policy'),

]


====== FILE: pages/tests.py ======

from django.test import TestCase

# Create your tests here.


====== FILE: pages/migrations/__init__.py ======



====== FILE: pages/migrations/0001_initial.py ======

# Generated by Django 5.1.5 on 2025-05-17 09:09

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Slider',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='عنوان')),
                ('subtitle', models.CharField(blank=True, max_length=300, verbose_name='زیرعنوان')),
                ('image', models.ImageField(help_text='فرمت\u200cهای مجاز: JPG, JPEG, PNG, GIF, WebP', upload_to='sliders/', verbose_name='تصویر')),
                ('link', models.URLField(blank=True, verbose_name='لینک')),
                ('is_active', models.BooleanField(default=True, verbose_name='فعال')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='ترتیب')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='تاریخ ایجاد')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='تاریخ بروزرسانی')),
            ],
            options={
                'verbose_name': 'اسلایدر',
                'verbose_name_plural': 'اسلایدرها',
                'ordering': ['order', '-created_at'],
            },
        ),
    ]


====== FILE: cart/__init__.py ======



====== FILE: cart/admin.py ======

from django.contrib import admin
from .models import CartItem, Coupon, WishlistItem

@admin.register(CartItem)
class CartItemAdmin(admin.ModelAdmin):
    list_display = ('user', 'product', 'size', 'color', 'quantity', 'discount', 'get_total_price', 'get_final_price', 'created_at')
    list_filter = ('created_at', 'discount')
    search_fields = ('user__username', 'product__name')
    date_hierarchy = 'created_at'
    raw_id_fields = ('user', 'product')

@admin.register(Coupon)
class CouponAdmin(admin.ModelAdmin):
    list_display = ('code', 'discount_percent', 'valid_from', 'valid_to', 'active', 'created_at')
    list_filter = ('active', 'valid_from', 'valid_to')
    search_fields = ('code', 'description')
    date_hierarchy = 'created_at'
    filter_horizontal = ('users',)

@admin.register(WishlistItem)
class WishlistItemAdmin(admin.ModelAdmin):
    list_display = ('user', 'product', 'created_at')
    list_filter = ('created_at',)
    search_fields = ('user__username', 'product__name')
    date_hierarchy = 'created_at'
    raw_id_fields = ('user', 'product')

====== FILE: cart/forms.py ======

from django import forms

class AddToCartForm(forms.Form):
    """فرم افزودن محصول به سبد خرید"""
    size = forms.CharField(required=True)
    color = forms.CharField(required=True)
    quantity = forms.IntegerField(min_value=1, initial=1)

class CouponForm(forms.Form):
    """فرم اعمال کد تخفیف"""
    code = forms.CharField(max_length=50, required=True)

====== FILE: cart/models.py ======

from django.db import models
from django.conf import settings
from django.utils import timezone
from products.models import Product, ProductInventory


class CartItem(models.Model):
    """مدل آیتم سبد خرید"""
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='cart_items')
    product = models.ForeignKey(Product, on_delete=models.CASCADE)
    size = models.CharField(max_length=10)
    color = models.CharField(max_length=50)
    quantity = models.PositiveIntegerField(default=1)
    discount = models.PositiveIntegerField(default=0)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    inventory = models.ForeignKey(ProductInventory, on_delete=models.SET_NULL, null=True, blank=True)

    class Meta:
        ordering = ['-created_at']
        verbose_name = 'آیتم سبد خرید'
        verbose_name_plural = 'آیتم‌های سبد خرید'
        unique_together = ['user', 'product', 'size', 'color']

    def __str__(self):
        return f"{self.quantity} عدد {self.product.name} ({self.size}, {self.color}) - کاربر: {self.user.username}"

    def get_unit_price(self):
        """قیمت واحد محصول (با احتساب تخفیف محصول)"""
        if self.product.has_discount():
            return self.product.get_discount_price()
        return self.product.price

    def get_original_total_price(self):
        """قیمت کل اصلی (بدون تخفیف)"""
        return self.product.price * self.quantity

    def get_color_object(self):
        """بازگرداندن object رنگ برای نمایش hex_code"""
        try:
            from products.models import Color
            return Color.objects.get(name=self.color)
        except:
            return None

    def get_size_object(self):
        """بازگرداندن object سایز"""
        try:
            from products.models import Size
            return Size.objects.get(name=self.size)
        except:
            return None

    def get_product_discount_amount(self):
        """مبلغ تخفیف محصول"""
        if self.product.has_discount():
            original_price = self.product.price * self.quantity
            discounted_price = self.product.get_discount_price() * self.quantity
            return original_price - discounted_price
        return 0

    def get_total_price(self):
        """قیمت کل آیتم (با احتساب تخفیف محصول، بدون تخفیف کوپن)"""
        return self.get_unit_price() * self.quantity

    def get_coupon_discount_amount(self):
        """مبلغ تخفیف کوپن"""
        if self.discount > 0:
            return (self.get_total_price() * self.discount) / 100
        return 0

    def get_total_discount_amount(self):
        """مجموع تخفیفات (محصول + کوپن)"""
        return self.get_product_discount_amount() + self.get_coupon_discount_amount()

    def get_final_price(self):
        """قیمت نهایی آیتم (با اعمال همه تخفیفات)"""
        return self.get_total_price() - self.get_coupon_discount_amount()

    def get_savings(self):
        """مجموع صرفه‌جویی"""
        return self.get_total_discount_amount()


class Coupon(models.Model):
    """مدل کد تخفیف"""
    code = models.CharField(max_length=50, unique=True, verbose_name='کد تخفیف')
    description = models.TextField(blank=True, null=True, verbose_name='توضیحات')
    discount_percent = models.PositiveIntegerField(verbose_name='درصد تخفیف')
    valid_from = models.DateTimeField(verbose_name='تاریخ شروع اعتبار')
    valid_to = models.DateTimeField(verbose_name='تاریخ پایان اعتبار')
    min_purchase = models.PositiveIntegerField(default=0, verbose_name='حداقل مبلغ خرید')
    max_discount = models.PositiveIntegerField(default=0, verbose_name='حداکثر مبلغ تخفیف')
    users = models.ManyToManyField(settings.AUTH_USER_MODEL, blank=True, related_name='coupons',
                                   verbose_name='کاربران استفاده کننده')
    active = models.BooleanField(default=True, verbose_name='فعال')
    created_at = models.DateTimeField(auto_now_add=True, verbose_name='تاریخ ایجاد')

    class Meta:
        ordering = ['-created_at']
        verbose_name = 'کد تخفیف'
        verbose_name_plural = 'کدهای تخفیف'

    def __str__(self):
        return f"{self.code} - {self.discount_percent}%"

    def is_valid(self):
        """بررسی معتبر بودن کد تخفیف"""
        now = timezone.now()
        return self.active and self.valid_from <= now <= self.valid_to

    def is_valid_for_user(self, user):
        """بررسی اینکه آیا کاربر می‌تواند از این کد تخفیف استفاده کند"""
        # اگر کاربر قبلاً از این کد استفاده کرده باشد
        if self.users.filter(id=user.id).exists():
            return False
        return True

    def calculate_discount(self, total_amount):
        """محاسبه مبلغ تخفیف بر اساس مبلغ کل خرید"""
        if total_amount < self.min_purchase:
            return 0

        discount_amount = (total_amount * self.discount_percent) / 100

        # اعمال محدودیت حداکثر مبلغ تخفیف
        if self.max_discount > 0 and discount_amount > self.max_discount:
            discount_amount = self.max_discount

        return discount_amount


class WishlistItem(models.Model):
    """مدل آیتم لیست علاقه‌مندی‌ها"""
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='wishlist_items')
    product = models.ForeignKey(Product, on_delete=models.CASCADE)
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        ordering = ['-created_at']
        verbose_name = 'آیتم لیست علاقه‌مندی‌ها'
        verbose_name_plural = 'آیتم‌های لیست علاقه‌مندی‌ها'
        unique_together = ['user', 'product']  # هر محصول فقط یکبار در لیست علاقه‌مندی‌های کاربر باشد

    def __str__(self):
        return f"{self.product.name} - کاربر: {self.user.username}"

====== FILE: cart/apps.py ======

from django.apps import AppConfig


class CartConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'cart'


====== FILE: cart/views.py ======

from collections.abc import Sized

from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.http import JsonResponse
from django.views.decorators.http import require_POST
from django.views.decorators.csrf import csrf_protect
import json
from products.models import Product, ProductInventory, Color, Size
from .models import CartItem, Coupon
from django.utils import timezone


@login_required
def cart_summary(request):
    """نمایش سبد خرید - تغییر نام از cart_summary به cart برای همخوانی با template"""
    cart_items = CartItem.objects.filter(user=request.user)

    # محاسبه مجموع قیمت‌ها
    original_subtotal = sum(item.get_original_total_price() for item in cart_items)  # قیمت اصلی
    subtotal = sum(item.get_total_price() for item in cart_items)  # قیمت با تخفیف محصولات
    product_discount = sum(item.get_product_discount_amount() for item in cart_items)  # تخفیف محصولات
    coupon_discount = sum(item.get_coupon_discount_amount() for item in cart_items)  # تخفیف کوپن
    total_discount = product_discount + coupon_discount  # مجموع تخفیفات

    # هزینه حمل و نقل
    shipping_cost = 30000 if subtotal < 300000 and subtotal > 0 else 0

    # قیمت نهایی
    total = subtotal - coupon_discount + shipping_cost

    # محاسبه مبلغ باقی‌مانده برای ارسال رایگان
    free_shipping_remaining = max(0, 300000 - subtotal) if subtotal > 0 and subtotal < 300000 else 0

    # بررسی کوپن اعمال شده
    applied_coupon = None
    if cart_items.exists() and cart_items.first().discount > 0:
        # پیدا کردن کوپن اعمال شده
        try:
            applied_coupon = Coupon.objects.filter(
                discount_percent=cart_items.first().discount,
                users=request.user
            ).first()
        except:
            applied_coupon = None

    cart_total = {
        'total_items': sum(item.quantity for item in cart_items),
        'original_subtotal': original_subtotal,  # قیمت اصلی
        'subtotal': subtotal,  # قیمت با تخفیف محصولات
        'product_discount': product_discount,  # تخفیف محصولات
        'coupon_discount': coupon_discount,  # تخفیف کوپن
        'total_discount': total_discount,  # مجموع تخفیفات
        'shipping_cost': shipping_cost,
        'total': total,  # قیمت نهایی
        'total_savings': total_discount,  # مجموع صرفه‌جویی
        'free_shipping_remaining': free_shipping_remaining,  # مبلغ باقی‌مانده برای ارسال رایگان
        'tax_amount': 0,  # مالیات (در صورت نیاز)
    }

    context = {
        'cart_items': cart_items,
        'cart_total': cart_total,
        'applied_coupon': applied_coupon,
    }

    # تغییر template به cart.html
    return render(request, 'cart/cart.html', context)


@require_POST
@csrf_protect
def add_to_cart(request):
    try:
        data = json.loads(request.body)
        product_id = data.get('product_id')
        quantity = int(data.get('quantity', 1))
        color_id = data.get('color_id')
        size_id = data.get('size_id')
        inventory_id = data.get('inventory_id')

        product = Product.objects.get(id=product_id, is_active=True)

        if not request.user.is_authenticated:
            return JsonResponse(
                {'success': False, 'error': 'لطفاً ابتدا وارد حساب کاربری خود شوید.', 'redirect': '/users/login/'})

        color_name = None
        size_name = None

        if inventory_id:
            inventory = ProductInventory.objects.get(id=inventory_id)
            color_name = inventory.color.name
            size_name = inventory.size.name

            if quantity > inventory.quantity:
                return JsonResponse({'success': False, 'error': 'موجودی کافی نیست.'})
        else:
            if color_id:
                color = Color.objects.get(id=color_id)
                color_name = color.name

            if size_id:
                size = Size.objects.get(id=size_id)
                size_name = size.name

            if quantity > product.stock:
                return JsonResponse({'success': False, 'error': 'موجودی کافی نیست.'})

        cart_item, created = CartItem.objects.get_or_create(
            user=request.user,
            product=product,
            color=color_name,
            size=size_name,
            defaults={'quantity': quantity, 'inventory_id': inventory_id}
        )

        if not created:
            cart_item.quantity += quantity
            cart_item.save()

        cart_items_count = CartItem.objects.filter(user=request.user).count()

        return JsonResponse({
            'success': True,
            'message': 'محصول با موفقیت به سبد خرید اضافه شد.',
            'cart_items_count': cart_items_count
        })

    except Product.DoesNotExist:
        return JsonResponse({'success': False, 'error': 'محصول یافت نشد.'})
    except ProductInventory.DoesNotExist:
        return JsonResponse({'success': False, 'error': 'موجودی با مشخصات انتخاب شده یافت نشد.'})
    except Exception as e:
        return JsonResponse({'success': False, 'error': str(e)})


@login_required
def update_cart(request, item_id):
    cart_item = get_object_or_404(CartItem, id=item_id, user=request.user)

    if request.method == 'POST':
        # بررسی درخواست Ajax برای تغییر مستقیم quantity
        if request.content_type == 'application/json':
            try:
                data = json.loads(request.body)
                action = data.get('action')

                if action == 'set_quantity':
                    new_quantity = int(data.get('quantity', 1))
                    if 1 <= new_quantity <= 10:  # محدودیت quantity
                        # بررسی موجودی
                        max_quantity = cart_item.inventory.quantity if cart_item.inventory else cart_item.product.stock
                        if new_quantity <= max_quantity:
                            cart_item.quantity = new_quantity
                            cart_item.save()
                            return JsonResponse({'success': True})
                        else:
                            return JsonResponse({'success': False, 'error': 'موجودی کافی نیست'})
                    else:
                        return JsonResponse({'success': False, 'error': 'تعداد نامعتبر'})

            except Exception as e:
                return JsonResponse({'success': False, 'error': str(e)})

        # درخواست معمولی form
        action = request.POST.get('action')

        if action == 'increase':
            max_quantity = cart_item.inventory.quantity if cart_item.inventory else cart_item.product.stock
            if cart_item.quantity < max_quantity:
                cart_item.quantity += 1
                cart_item.save()
                messages.success(request, 'تعداد محصول افزایش یافت.')
        elif action == 'decrease':
            if cart_item.quantity > 1:
                cart_item.quantity -= 1
                cart_item.save()
                messages.success(request, 'تعداد محصول کاهش یافت.')
            else:
                cart_item.delete()
                messages.success(request, 'محصول از سبد خرید حذف شد.')

    return redirect('cart:cart')


@login_required
def remove_from_cart(request, item_id):
    cart_item = get_object_or_404(CartItem, id=item_id, user=request.user)

    if request.method == 'POST':
        product_name = cart_item.product.name
        cart_item.delete()
        messages.success(request, f'محصول "{product_name}" از سبد خرید حذف شد.')

    return redirect('cart:cart')


@login_required
def clear_cart(request):
    if request.method == 'POST':
        cart_count = CartItem.objects.filter(user=request.user).count()
        CartItem.objects.filter(user=request.user).delete()
        messages.success(request, f'{cart_count} محصول از سبد خرید حذف شد.')

    return redirect('cart:cart')


@login_required
def apply_coupon(request):
    if request.method == 'POST':
        code = request.POST.get('code', '').strip().upper()

        if not code:
            messages.error(request, 'لطفاً کد تخفیف را وارد کنید.')
            return redirect('cart:cart')

        try:
            coupon = Coupon.objects.get(
                code=code,
                valid_from__lte=timezone.now(),
                valid_to__gte=timezone.now(),
                active=True
            )

            # بررسی استفاده قبلی
            if coupon.users.filter(id=request.user.id).exists():
                messages.error(request, 'شما قبلاً از این کد تخفیف استفاده کرده‌اید.')
                return redirect('cart:cart')

            # بررسی حداقل مبلغ خرید
            cart_items = CartItem.objects.filter(user=request.user)
            if not cart_items.exists():
                messages.error(request, 'سبد خرید شما خالی است.')
                return redirect('cart:cart')

            subtotal = sum(item.get_total_price() for item in cart_items)

            if subtotal < coupon.min_purchase:
                messages.error(request, f'حداقل مبلغ خرید برای این کد تخفیف {coupon.min_purchase:,} تومان است.')
                return redirect('cart:cart')

            # اعمال کد تخفیف به تمام آیتم‌های سبد
            for item in cart_items:
                item.discount = coupon.discount_percent
                item.save()

            coupon.users.add(request.user)
            messages.success(request, f'کد تخفیف {coupon.discount_percent}% با موفقیت اعمال شد.')

        except Coupon.DoesNotExist:
            messages.error(request, 'کد تخفیف نامعتبر یا منقضی شده است.')

    return redirect('cart:cart')


@login_required
def remove_coupon(request):
    """حذف کد تخفیف اعمال شده"""
    if request.method == 'POST':
        cart_items = CartItem.objects.filter(user=request.user)

        if cart_items.exists():
            # حذف تخفیف از تمام آیتم‌ها
            for item in cart_items:
                if item.discount > 0:
                    item.discount = 0
                    item.save()

            messages.success(request, 'کد تخفیف با موفقیت حذف شد.')
        else:
            messages.error(request, 'سبد خرید شما خالی است.')

    return redirect('cart:cart')


@login_required
def save_for_later(request, item_id):
    """ذخیره محصول برای بعد (انتقال به wishlist)"""
    if request.method == 'POST':
        cart_item = get_object_or_404(CartItem, id=item_id, user=request.user)

        try:
            from .models import WishlistItem

            # بررسی اینکه محصول قبلاً در wishlist نباشد
            wishlist_item, created = WishlistItem.objects.get_or_create(
                user=request.user,
                product=cart_item.product
            )

            if created:
                # حذف از سبد خرید
                product_name = cart_item.product.name
                cart_item.delete()

                if request.content_type == 'application/json':
                    return JsonResponse({
                        'success': True,
                        'message': f'محصول "{product_name}" برای بعد ذخیره شد.'
                    })
                else:
                    messages.success(request, f'محصول "{product_name}" برای بعد ذخیره شد.')
            else:
                if request.content_type == 'application/json':
                    return JsonResponse({
                        'success': False,
                        'message': 'این محصول قبلاً در لیست علاقه‌مندی‌های شما موجود است.'
                    })
                else:
                    messages.info(request, 'این محصول قبلاً در لیست علاقه‌مندی‌های شما موجود است.')

        except Exception as e:
            if request.content_type == 'application/json':
                return JsonResponse({
                    'success': False,
                    'message': 'خطا در ذخیره محصول.'
                })
            else:
                messages.error(request, 'خطا در ذخیره محصول.')

    return redirect('cart:cart')

====== FILE: cart/urls.py ======

from django.urls import path
from . import views

app_name = 'cart'

urlpatterns = [
    # تغییر نام route اصلی
    path('', views.cart_summary, name='cart'),  # تغییر از 'summary' به 'cart'
    path('summary/', views.cart_summary, name='summary'),  # نگه داشتن route قدیمی برای سازگاری

    # اضافه کردن توابع جدید
    path('add/', views.add_to_cart, name='add_to_cart'),
    path('add/<int:product_id>/', views.add_to_cart, name='add'),
    path('update/<int:item_id>/', views.update_cart, name='update_cart'),
    path('remove/<int:item_id>/', views.remove_from_cart, name='remove_from_cart'),
    path('clear/', views.clear_cart, name='clear_cart'),
    path('apply-coupon/', views.apply_coupon, name='apply_coupon'),
    path('remove-coupon/', views.remove_coupon, name='remove_coupon'),  # اضافه شده
    path('save-for-later/<int:item_id>/', views.save_for_later, name='save_for_later'),  # اضافه شده
]

====== FILE: cart/tests.py ======

from django.test import TestCase

# Create your tests here.


====== FILE: cart/context_processors.py ======

# cart/context_processors.py
from products.models import Banner


def cart_items_count(request):
    """تعداد آیتم‌های سبد خرید را برمی‌گرداند"""
    if request.user.is_authenticated:
        count = request.user.cart_items.count()
    else:
        count = 0

    return {'cart_items_count': count}

def banners(request):
    """اضافه کردن بنرها به تمام صفحات"""
    return {
        'global_top_banners': Banner.objects.filter(position='home_top', is_active=True).order_by('order'),
        'global_middle_banners': Banner.objects.filter(position='home_middle', is_active=True).order_by('order'),
        'global_bottom_banners': Banner.objects.filter(position='home_bottom', is_active=True).order_by('order'),
    }

====== FILE: cart/migrations/__init__.py ======



====== FILE: cart/migrations/0004_cartitem_inventory.py ======

# Generated by Django 5.1.5 on 2025-05-20 09:18

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cart', '0003_initial'),
        ('products', '0005_alter_size_options_remove_color_code_and_more'),
    ]

    operations = [
        migrations.AddField(
            model_name='cartitem',
            name='inventory',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='products.productinventory'),
        ),
    ]


====== FILE: cart/migrations/0003_initial.py ======

# Generated by Django 5.1.5 on 2025-05-16 13:09

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('cart', '0002_initial'),
        ('products', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name='cartitem',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cart_items', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='coupon',
            name='users',
            field=models.ManyToManyField(blank=True, related_name='coupons', to=settings.AUTH_USER_MODEL, verbose_name='کاربران استفاده کننده'),
        ),
        migrations.AddField(
            model_name='wishlistitem',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.product'),
        ),
        migrations.AddField(
            model_name='wishlistitem',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wishlist_items', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='cartitem',
            unique_together={('user', 'product', 'size', 'color')},
        ),
        migrations.AlterUniqueTogether(
            name='wishlistitem',
            unique_together={('user', 'product')},
        ),
    ]


====== FILE: cart/migrations/0001_initial.py ======

# Generated by Django 5.1.5 on 2025-05-16 13:09

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CartItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('size', models.CharField(max_length=10)),
                ('color', models.CharField(max_length=50)),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('discount', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'آیتم سبد خرید',
                'verbose_name_plural': 'آیتم\u200cهای سبد خرید',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Coupon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=50, unique=True, verbose_name='کد تخفیف')),
                ('description', models.TextField(blank=True, null=True, verbose_name='توضیحات')),
                ('discount_percent', models.PositiveIntegerField(verbose_name='درصد تخفیف')),
                ('valid_from', models.DateTimeField(verbose_name='تاریخ شروع اعتبار')),
                ('valid_to', models.DateTimeField(verbose_name='تاریخ پایان اعتبار')),
                ('min_purchase', models.PositiveIntegerField(default=0, verbose_name='حداقل مبلغ خرید')),
                ('max_discount', models.PositiveIntegerField(default=0, verbose_name='حداکثر مبلغ تخفیف')),
                ('active', models.BooleanField(default=True, verbose_name='فعال')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='تاریخ ایجاد')),
            ],
            options={
                'verbose_name': 'کد تخفیف',
                'verbose_name_plural': 'کدهای تخفیف',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='WishlistItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'آیتم لیست علاقه\u200cمندی\u200cها',
                'verbose_name_plural': 'آیتم\u200cهای لیست علاقه\u200cمندی\u200cها',
                'ordering': ['-created_at'],
            },
        ),
    ]


====== FILE: cart/migrations/0002_initial.py ======

# Generated by Django 5.1.5 on 2025-05-16 13:09

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('cart', '0001_initial'),
        ('products', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='cartitem',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.product'),
        ),
    ]


====== FILE: users/__init__.py ======



====== FILE: users/admin.py ======

from django.contrib import admin
from django.contrib.auth.admin import UserAdmin
from .models import CustomUser, Address, UserActivity, Newsletter


@admin.register(CustomUser)
class CustomUserAdmin(UserAdmin):
    list_display = (
    'username', 'email', 'phone_number', 'first_name', 'last_name', 'is_staff', 'date_joined', 'last_visit')
    list_filter = ('is_staff', 'is_superuser', 'is_active', 'date_joined')
    search_fields = ('username', 'email', 'phone_number', 'first_name', 'last_name')
    fieldsets = UserAdmin.fieldsets + (
        ('اطلاعات تکمیلی', {'fields': ('phone_number', 'national_id', 'birth_date')}),
        ('تنظیمات اطلاع‌رسانی', {'fields': ('receive_sms', 'receive_email')}),
        ('فعالیت', {'fields': ('last_visit',)}),
    )
    add_fieldsets = UserAdmin.add_fieldsets + (
        ('اطلاعات تکمیلی', {'fields': ('email', 'phone_number')}),
    )


@admin.register(Address)
class AddressAdmin(admin.ModelAdmin):
    list_display = ('user', 'title', 'province', 'city', 'is_default', 'created_at')
    list_filter = ('province', 'is_default', 'created_at')
    search_fields = ('user__username', 'receiver_full_name', 'city', 'full_address')
    raw_id_fields = ('user',)
    list_editable = ('is_default',)


@admin.register(UserActivity)
class UserActivityAdmin(admin.ModelAdmin):
    list_display = ('user', 'activity_type', 'ip_address', 'timestamp')
    list_filter = ('activity_type', 'timestamp')
    search_fields = ('user__username', 'ip_address')
    readonly_fields = ('user', 'activity_type', 'ip_address', 'user_agent', 'timestamp', 'details')

    def has_add_permission(self, request):
        return False

    def has_change_permission(self, request, obj=None):
        return False


@admin.register(Newsletter)
class NewsletterAdmin(admin.ModelAdmin):
    list_display = ('email', 'user', 'is_active', 'created_at')
    list_filter = ('is_active', 'created_at')
    search_fields = ('email', 'user__username')
    raw_id_fields = ('user',)
    list_editable = ('is_active',)

====== FILE: users/forms.py ======

from django import forms
from django.contrib.auth.forms import UserCreationForm
from django.core.validators import RegexValidator
from .models import CustomUser


class SignUpForm(UserCreationForm):
    """فرم ثبت‌نام کاربر"""
    phone_number = forms.CharField(
        max_length=11,
        validators=[
            RegexValidator(
                regex=r'^09\d{9}$',
                message='شماره موبایل باید با 09 شروع شده و 11 رقم باشد.'
            )
        ],
        required=True,
        help_text='مثال: 09123456789'
    )

    terms = forms.BooleanField(
        required=True,
        error_messages={'required': 'پذیرش قوانین و مقررات الزامی است.'}
    )

    class Meta:
        model = CustomUser
        fields = ('username', 'email', 'phone_number', 'password1', 'password2')

    def save(self, commit=True):
        user = super().save(commit=False)
        user.phone_number = self.cleaned_data.get('phone_number')

        if commit:
            user.save()
        return user

class LoginForm(forms.Form):
    """فرم ورود کاربر"""
    username = forms.CharField(max_length=150)
    password = forms.CharField(widget=forms.PasswordInput)
    remember = forms.BooleanField(required=False)


class UserProfileForm(forms.ModelForm):
    """فرم ویرایش پروفایل کاربر"""

    class Meta:
        model = CustomUser
        fields = ('email', 'phone_number')

====== FILE: users/models.py ======

from django.db import models
from django.contrib.auth.models import AbstractUser
from django.core.validators import RegexValidator
from django.utils.translation import gettext_lazy as _
from django.conf import settings


class CustomUser(AbstractUser):
    """مدل کاربر سفارشی با فیلدهای اضافی"""
    phone_number = models.CharField(
        max_length=11,
        validators=[
            RegexValidator(
                regex=r'^09\d{9}$',
                message='شماره موبایل باید با 09 شروع شده و 11 رقم باشد.'
            )
        ],
        verbose_name='شماره موبایل',
        unique=True,
        null=True,
        blank=True
    )
    email = models.EmailField(_('email address'), unique=True)
    national_id = models.CharField(
        max_length=10,
        validators=[
            RegexValidator(
                regex=r'^\d{10}$',
                message='کد ملی باید 10 رقم باشد.'
            )
        ],
        verbose_name='کد ملی',
        null=True,
        blank=True
    )
    birth_date = models.DateField(null=True, blank=True, verbose_name='تاریخ تولد')

    # تنظیمات اطلاع‌رسانی
    receive_sms = models.BooleanField(default=True, verbose_name='دریافت پیامک')
    receive_email = models.BooleanField(default=True, verbose_name='دریافت ایمیل')

    # تاریخ عضویت و آخرین بازدید
    date_modified = models.DateTimeField(auto_now=True, verbose_name='تاریخ آخرین بروزرسانی')
    last_visit = models.DateTimeField(null=True, blank=True, verbose_name='آخرین بازدید')

    class Meta:
        verbose_name = 'کاربر'
        verbose_name_plural = 'کاربران'

    def __str__(self):
        return self.username

    def get_full_name(self):
        """نام و نام خانوادگی کاربر"""
        full_name = f"{self.first_name} {self.last_name}".strip()
        return full_name if full_name else self.username

    def has_complete_profile(self):
        """بررسی تکمیل بودن پروفایل کاربر"""
        return bool(self.first_name and self.last_name and self.phone_number and self.email)


class Address(models.Model):
    """مدل آدرس کاربر"""
    PROVINCE_CHOICES = [
        ('تهران', 'تهران'),
        ('اصفهان', 'اصفهان'),
        ('فارس', 'فارس'),
        ('خراسان رضوی', 'خراسان رضوی'),
        ('آذربایجان شرقی', 'آذربایجان شرقی'),
        ('آذربایجان غربی', 'آذربایجان غربی'),
        ('کرمان', 'کرمان'),
        ('خوزستان', 'خوزستان'),
        ('هرمزگان', 'هرمزگان'),
        ('سیستان و بلوچستان', 'سیستان و بلوچستان'),
        ('کردستان', 'کردستان'),
        ('همدان', 'همدان'),
        ('کرمانشاه', 'کرمانشاه'),
        ('گیلان', 'گیلان'),
        ('مازندران', 'مازندران'),
        ('زنجان', 'زنجان'),
        ('گلستان', 'گلستان'),
        ('اردبیل', 'اردبیل'),
        ('قزوین', 'قزوین'),
        ('لرستان', 'لرستان'),
        ('بوشهر', 'بوشهر'),
        ('کهگیلویه و بویراحمد', 'کهگیلویه و بویراحمد'),
        ('مرکزی', 'مرکزی'),
        ('ایلام', 'ایلام'),
        ('چهارمحال و بختیاری', 'چهارمحال و بختیاری'),
        ('یزد', 'یزد'),
        ('قم', 'قم'),
        ('سمنان', 'سمنان'),
        ('البرز', 'البرز'),
        ('خراسان شمالی', 'خراسان شمالی'),
        ('خراسان جنوبی', 'خراسان جنوبی'),
    ]

    user = models.ForeignKey(CustomUser, on_delete=models.CASCADE, related_name='addresses', verbose_name='کاربر')
    title = models.CharField(max_length=100, verbose_name='عنوان آدرس', help_text='مثال: خانه، محل کار و...')
    receiver_full_name = models.CharField(max_length=150, verbose_name='نام و نام خانوادگی گیرنده')
    receiver_phone = models.CharField(
        max_length=11,
        validators=[
            RegexValidator(
                regex=r'^09\d{9}$',
                message='شماره موبایل باید با 09 شروع شده و 11 رقم باشد.'
            )
        ],
        verbose_name='شماره موبایل گیرنده'
    )
    province = models.CharField(max_length=50, choices=PROVINCE_CHOICES, verbose_name='استان')
    city = models.CharField(max_length=50, verbose_name='شهر')
    postal_code = models.CharField(
        max_length=10,
        validators=[
            RegexValidator(
                regex=r'^\d{10}$',
                message='کد پستی باید 10 رقم باشد.'
            )
        ],
        verbose_name='کد پستی'
    )
    full_address = models.TextField(verbose_name='آدرس کامل')
    is_default = models.BooleanField(default=False, verbose_name='آدرس پیش‌فرض')
    created_at = models.DateTimeField(auto_now_add=True, verbose_name='تاریخ ایجاد')
    updated_at = models.DateTimeField(auto_now=True, verbose_name='تاریخ بروزرسانی')

    class Meta:
        verbose_name = 'آدرس'
        verbose_name_plural = 'آدرس‌ها'
        ordering = ['-is_default', '-created_at']

    def __str__(self):
        return f"{self.title} - {self.province}, {self.city}"

    def save(self, *args, **kwargs):
        """اگر این آدرس به عنوان پیش‌فرض انتخاب شده، سایر آدرس‌های کاربر از حالت پیش‌فرض خارج شوند"""
        if self.is_default:
            Address.objects.filter(user=self.user, is_default=True).update(is_default=False)
        super().save(*args, **kwargs)


class UserActivity(models.Model):
    """مدل فعالیت‌های کاربر"""
    ACTIVITY_TYPES = [
        ('login', 'ورود به سیستم'),
        ('logout', 'خروج از سیستم'),
        ('register', 'ثبت‌نام'),
        ('profile_update', 'بروزرسانی پروفایل'),
        ('password_change', 'تغییر رمز عبور'),
        ('order_placed', 'ثبت سفارش'),
        ('review_added', 'ثبت نظر'),
    ]

    user = models.ForeignKey(CustomUser, on_delete=models.CASCADE, related_name='activities', verbose_name='کاربر')
    activity_type = models.CharField(max_length=20, choices=ACTIVITY_TYPES, verbose_name='نوع فعالیت')
    ip_address = models.GenericIPAddressField(null=True, blank=True, verbose_name='آدرس IP')
    user_agent = models.TextField(null=True, blank=True, verbose_name='مرورگر کاربر')
    timestamp = models.DateTimeField(auto_now_add=True, verbose_name='زمان فعالیت')
    details = models.JSONField(null=True, blank=True, verbose_name='جزئیات')

    class Meta:
        verbose_name = 'فعالیت کاربر'
        verbose_name_plural = 'فعالیت‌های کاربران'
        ordering = ['-timestamp']

    def __str__(self):
        return f"{self.user.username} - {self.get_activity_type_display()} - {self.timestamp}"


class Newsletter(models.Model):
    """مدل خبرنامه"""
    email = models.EmailField(unique=True, verbose_name='ایمیل')
    user = models.ForeignKey(CustomUser, on_delete=models.SET_NULL, null=True, blank=True, related_name='newsletters',
                             verbose_name='کاربر')
    is_active = models.BooleanField(default=True, verbose_name='فعال')
    created_at = models.DateTimeField(auto_now_add=True, verbose_name='تاریخ عضویت')

    class Meta:
        verbose_name = 'خبرنامه'
        verbose_name_plural = 'خبرنامه‌ها'
        ordering = ['-created_at']

    def __str__(self):
        return self.email


class Favorite(models.Model):
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='favorites')
    product = models.ForeignKey('products.Product', on_delete=models.CASCADE)
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        unique_together = ('user', 'product')
        verbose_name = 'علاقه‌مندی'
        verbose_name_plural = 'علاقه‌مندی‌ها'
        ordering = ['-created_at']

    def __str__(self):
        return f'{self.user.username} - {self.product.name}'

====== FILE: users/apps.py ======

from django.apps import AppConfig


class UsersConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'users'


====== FILE: users/views.py ======

from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth import login, authenticate, logout
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.views.decorators.csrf import ensure_csrf_cookie
from django.views.decorators.http import require_POST
from django.conf import settings # ✅ این خط را اضافه کنید

from .forms import SignUpForm, LoginForm, UserProfileForm
from .models import Address, Favorite
from django.http import JsonResponse  # این خط را به ابتدای فایل اضافه کنید


@ensure_csrf_cookie
def signup(request):
    """ثبت‌نام کاربر جدید"""
    if request.user.is_authenticated:
        return redirect('home')

    if request.method == 'POST':
        form = SignUpForm(request.POST)
        print("Form data:", request.POST)

        if form.is_valid():
            print("Form is valid")
            try:
                user = form.save()
                login(request, user)
                messages.success(request, 'ثبت‌نام با موفقیت انجام شد.')
                return redirect('home')
            except Exception as e:
                print(f"Error saving form: {e}")
                messages.error(request, f'خطا در ثبت نام: {e}')
        else:
            print("Form errors:", form.errors)
            for field, errors in form.errors.items():
                for error in errors:
                    messages.error(request, f"{field}: {error}")
    else:
        form = SignUpForm()

    return render(request, 'users/signup.html', {'form': form})

def login_view(request):
    """ورود کاربر"""
    if request.user.is_authenticated:
        return redirect('home')

    if request.method == 'POST':
        form = LoginForm(request.POST)
        if form.is_valid():
            username = form.cleaned_data['username']
            password = form.cleaned_data['password']
            user = authenticate(username=username, password=password)
            if user is not None:
                login(request, user)
                if request.POST.get('remember_me'):
                    request.session.set_expiry(settings.SESSION_COOKIE_AGE)
                else:
                    request.session.set_expiry(0)  # 0 به معنای "expire at browser close" است
                next_url = request.POST.get('next', 'home')
                return redirect(next_url)
            else:
                messages.error(request, 'نام کاربری یا رمز عبور اشتباه است.')
    else:
        form = LoginForm()

    return render(request, 'users/login.html', {
        'form': form,
        'next': request.GET.get('next', '')
    })


@login_required
def logout_view(request):
    """خروج کاربر"""
    logout(request)
    messages.success(request, 'با موفقیت خارج شدید.')
    return redirect('home')


@login_required
def profile(request):
    """نمایش و ویرایش پروفایل کاربر"""
    if request.method == 'POST':
        form = UserProfileForm(request.POST, instance=request.user)
        if form.is_valid():
            form.save()
            messages.success(request, 'اطلاعات حساب کاربری با موفقیت به‌روزرسانی شد.')
            return redirect('users:profile')
    else:
        form = UserProfileForm(instance=request.user)

    return render(request, 'users/profile.html', {'form': form})


from django.contrib.auth import update_session_auth_hash


@login_required
def change_password(request):
    """تغییر رمز عبور"""
    if request.method == 'POST':
        current_password = request.POST.get('current_password')
        new_password = request.POST.get('new_password')
        confirm_password = request.POST.get('confirm_password')

        # بررسی صحت رمز فعلی
        if not request.user.check_password(current_password):
            messages.error(request, 'رمز عبور فعلی اشتباه است.')
            return redirect('users:change_password')

        # بررسی یکسان بودن رمز جدید و تکرار آن
        if new_password != confirm_password:
            messages.error(request, 'رمز عبور جدید و تکرار آن یکسان نیستند.')
            return redirect('users:change_password')

        # بررسی طول رمز عبور
        if len(new_password) < 8:
            messages.error(request, 'رمز عبور باید حداقل ۸ کاراکتر باشد.')
            return redirect('users:change_password')

        # تغییر رمز عبور
        request.user.set_password(new_password)
        request.user.save()

        # به روزرسانی نشست برای جلوگیری از خروج کاربر
        update_session_auth_hash(request, request.user)

        messages.success(request, 'رمز عبور با موفقیت تغییر یافت.')
        return redirect('users:profile')

    return render(request, 'users/change_password.html')

@login_required
def addresses(request):
    """مدیریت آدرس‌های کاربر"""
    addresses = Address.objects.filter(user=request.user)
    return render(request, 'users/addresses.html', {'addresses': addresses})


@login_required
def add_address(request):
    """افزودن آدرس جدید"""
    if request.method == 'POST':
        full_address = request.POST.get('full_address')
        postal_code = request.POST.get('postal_code')

        Address.objects.create(
            user=request.user,
            full_address=full_address,
            postal_code=postal_code
        )

        messages.success(request, 'آدرس جدید با موفقیت اضافه شد.')

    return redirect('users:addresses')


@login_required
def edit_address(request, address_id):
    """ویرایش آدرس"""
    address = get_object_or_404(Address, id=address_id, user=request.user)

    if request.method == 'POST':
        full_address = request.POST.get('full_address')
        postal_code = request.POST.get('postal_code')

        address.full_address = full_address
        address.postal_code = postal_code
        address.save()

        messages.success(request, 'آدرس با موفقیت ویرایش شد.')

    return redirect('users:addresses')


@login_required
def delete_address(request, address_id):
    """حذف آدرس"""
    address = get_object_or_404(Address, id=address_id, user=request.user)

    if request.method == 'POST':
        address.delete()
        messages.success(request, 'آدرس با موفقیت حذف شد.')

    return redirect('users:addresses')


@login_required
def favorites_view(request):
    """نمایش لیست علاقه‌مندی‌های کاربر"""
    favorites = Favorite.objects.filter(user=request.user).select_related('product')
    return render(request, 'users/favorites.html', {'favorites': favorites})


@login_required
@require_POST
def add_favorite(request, product_id):
    """اضافه کردن محصول به علاقه‌مندی‌ها"""
    try:
        from products.models import Product
        product = Product.objects.get(id=product_id)
        favorite, created = Favorite.objects.get_or_create(
            user=request.user,
            product=product
        )

        if created:
            return JsonResponse({
                'success': True,
                'message': 'محصول به علاقه‌مندی‌ها اضافه شد',
                'action': 'added'
            })
        else:
            return JsonResponse({
                'success': True,
                'message': 'محصول قبلاً در علاقه‌مندی‌ها موجود است',
                'action': 'exists'
            })
    except Product.DoesNotExist:
        return JsonResponse({
            'success': False,
            'message': 'محصول یافت نشد'
        })
    except Exception as e:
        return JsonResponse({
            'success': False,
            'message': 'خطا در افزودن به علاقه‌مندی‌ها'
        })


@login_required
@require_POST
def remove_favorite(request, product_id):
    """حذف محصول از علاقه‌مندی‌ها"""
    try:
        favorite = Favorite.objects.get(
            user=request.user,
            product_id=product_id
        )
        favorite.delete()
        return JsonResponse({
            'success': True,
            'message': 'محصول از علاقه‌مندی‌ها حذف شد'
        })
    except Favorite.DoesNotExist:
        return JsonResponse({
            'success': False,
            'message': 'محصول در علاقه‌مندی‌ها یافت نشد'
        })
    except Exception as e:
        return JsonResponse({
            'success': False,
            'message': 'خطا در حذف از علاقه‌مندی‌ها'
        })

====== FILE: users/urls.py ======

from django.urls import path
from . import views
from django.contrib.auth import views as auth_views
from django.urls import reverse_lazy

app_name = 'users'

urlpatterns = [
    # Authentication URLs
    path('signup/', views.signup, name='signup'),
    path('login/', views.login_view, name='login'),
    path('logout/', views.logout_view, name='logout'),

    # Profile Management URLs
    path('profile/', views.profile, name='profile'),
    path('change-password/', views.change_password, name='change_password'),

    # Address Management URLs
    path('addresses/', views.addresses, name='addresses'),
    path('addresses/add/', views.add_address, name='add_address'),
    path('addresses/<int:address_id>/edit/', views.edit_address, name='edit_address'),
    path('addresses/<int:address_id>/delete/', views.delete_address, name='delete_address'),

    # Favorites URLs
    path('favorites/', views.favorites_view, name='favorites'),
    path('favorites/add/<int:product_id>/', views.add_favorite, name='add_favorite'),
    path('favorites/remove/<int:product_id>/', views.remove_favorite, name='remove_favorite'),

    # Password Reset URLs
    path('password-reset/', auth_views.PasswordResetView.as_view(
        template_name='users/password_reset_form.html',
        email_template_name='users/password_reset_email.html',
        html_email_template_name='users/password_reset_email.html',  # این خط اضافه شده
        subject_template_name='users/password_reset_subject.txt',
        success_url=reverse_lazy('users:password_reset_done')
    ), name='password_reset'),

    path('password-reset/done/', auth_views.PasswordResetDoneView.as_view(
        template_name='users/password_reset_done.html'
    ), name='password_reset_done'),

    path('password-reset-confirm/<uidb64>/<token>/', auth_views.PasswordResetConfirmView.as_view(
        template_name='users/password_reset_confirm.html',
        success_url=reverse_lazy('users:password_reset_complete')
    ), name='password_reset_confirm'),

    path('password-reset-complete/', auth_views.PasswordResetCompleteView.as_view(
        template_name='users/password_reset_complete.html'
    ), name='password_reset_complete'),
]

====== FILE: users/serializers.py ======

from rest_framework import serializers
from .models import User, Address


class UserSignupSerializer(serializers.ModelSerializer):
    password = serializers.CharField(write_only=True)
    phone_number = serializers.CharField(required=True)

    class Meta:
        model = User
        fields = ['username', 'password', 'email', 'phone_number']

    def validate_email(self, value):
        if User.objects.filter(email=value).exists():
            raise serializers.ValidationError("This email is already registered.")
        return value

    def validate_phone_number(self, value):
        if User.objects.filter(phone_number=value).exists():
            raise serializers.ValidationError("This phone number is already registered.")
        return value

    def create(self, validated_data):
        user = User.objects.create_user(
            username=validated_data['username'],
            password=validated_data['password'],
            email=validated_data.get('email', ''),
            phone_number=validated_data.get('phone_number', '')
        )
        return user

class AddressSerializer(serializers.ModelSerializer):
    class Meta:
        model = Address
        fields = ['id', 'full_address', 'postal_code', 'created_at']
        read_only_fields = ['id', 'created_at']


class UserProfileSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ['username', 'email', 'phone_number']
        read_only_fields = ['username']

====== FILE: users/tests.py ======

from django.test import TestCase

# Create your tests here.


====== FILE: users/templates/users/password_reset_complete.html ======

{% extends 'base/base.html' %}
{% load static %}

{% block title %}تغییر رمز عبور موفقیت‌آمیز | زیما{% endblock %}

{% block content %}
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white text-center py-3">
                    <h4 class="mb-0">تغییر رمز عبور موفقیت‌آمیز</h4>
                </div>
                <div class="card-body p-4">
                    <div class="alert alert-success">
                        <p>رمز عبور شما با موفقیت تغییر یافت.</p>
                        <p>اکنون می‌توانید با رمز عبور جدید وارد شوید.</p>
                    </div>
                    
                    <div class="text-center mt-3">
                        <a href="{% url 'users:login' %}" class="btn btn-primary">ورود به حساب کاربری</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

====== FILE: users/templates/users/password_reset_confirm.html ======

{% extends 'base/base.html' %}
{% load static %}

{% block title %}تنظیم رمز عبور جدید | زیما{% endblock %}

{% block content %}
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white text-center py-3">
                    <h4 class="mb-0">تنظیم رمز عبور جدید</h4>
                </div>
                <div class="card-body p-4">
                    {% if validlink %}
                        <p class="mb-3">لطفاً رمز عبور جدید خود را وارد کنید.</p>
                        
                        <form method="post">
                            {% csrf_token %}
                            
                            {% if form.non_field_errors %}
                                <div class="alert alert-danger">
                                    {% for error in form.non_field_errors %}
                                        {{ error }}
                                    {% endfor %}
                                </div>
                            {% endif %}
                            
                            <div class="mb-3">
                                <label for="id_new_password1" class="form-label">رمز عبور جدید</label>
                                <input type="password" name="new_password1" id="id_new_password1" class="form-control {% if form.new_password1.errors %}is-invalid{% endif %}" required>
                                {% if form.new_password1.errors %}
                                    <div class="invalid-feedback">
                                        {% for error in form.new_password1.errors %}
                                            {{ error }}
                                        {% endfor %}
                                    </div>
                                {% endif %}
                                {% if form.new_password1.help_text %}
                                    <div class="form-text small">
                                        {{ form.new_password1.help_text|safe }}
                                    </div>
                                {% endif %}
                            </div>
                            
                            <div class="mb-3">
                                <label for="id_new_password2" class="form-label">تأیید رمز عبور جدید</label>
                                <input type="password" name="new_password2" id="id_new_password2" class="form-control {% if form.new_password2.errors %}is-invalid{% endif %}" required>
                                {% if form.new_password2.errors %}
                                    <div class="invalid-feedback">
                                        {% for error in form.new_password2.errors %}
                                            {{ error }}
                                        {% endfor %}
                                    </div>
                                {% endif %}
                            </div>
                            
                            <div class="d-grid gap-2">
                                <button type="submit" class="btn btn-primary">تغییر رمز عبور</button>
                            </div>
                        </form>
                    {% else %}
                        <div class="alert alert-danger">
                            <p>لینک بازیابی رمز عبور نامعتبر است یا قبلاً استفاده شده است.</p>
                            <p>لطفاً درخواست بازیابی رمز عبور جدیدی ارسال کنید.</p>
                        </div>
                        
                        <div class="text-center mt-3">
                            <a href="{% url 'users:password_reset' %}" class="btn btn-outline-primary">درخواست بازیابی جدید</a>
                        </div>
                    {% endif %}
                </div>
            </div>
        </div>
    </div>
{% endblock %}

====== FILE: users/templates/users/password_reset_subject.txt ======

بازیابی رمز عبور در سایت زیما


====== FILE: users/templates/users/password_reset.html ======

{% extends 'base/base.html' %}
{% load static %}

{% block title %}بازیابی رمز عبور | زیما{% endblock %}

{% block content %}
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white text-center py-3">
                    <h4 class="mb-0">بازیابی رمز عبور</h4>
                </div>
                <div class="card-body p-4">
                    <p class="mb-3">ایمیل خود را وارد کنید تا لینک بازیابی رمز عبور برای شما ارسال شود.</p>
                    
                    <form method="post">
                        {% csrf_token %}
                        
                        {% if form.non_field_errors %}
                            <div class="alert alert-danger">
                                {% for error in form.non_field_errors %}
                                    {{ error }}
                                {% endfor %}
                            </div>
                        {% endif %}
                        
                        <div class="mb-3">
                            <label for="id_email" class="form-label">ایمیل</label>
                            <input type="email" name="email" id="id_email" class="form-control {% if form.email.errors %}is-invalid{% endif %}" required>
                            {% if form.email.errors %}
                                <div class="invalid-feedback">
                                    {% for error in form.email.errors %}
                                        {{ error }}
                                    {% endfor %}
                                </div>
                            {% endif %}
                        </div>
                        
                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary">ارسال لینک بازیابی</button>
                        </div>
                    </form>
                    
                    <hr>
                    
                    <div class="text-center">
                        <a href="{% url 'users:login' %}" class="btn btn-outline-primary">بازگشت به صفحه ورود</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

====== FILE: users/templates/users/password_reset_email.html ======

{% load i18n %}{% autoescape off %}
{% blocktranslate %}سلام،

شما این ایمیل را دریافت کرده‌اید چون درخواست بازیابی رمز عبور برای حساب کاربری خود در سایت زیما کرده‌اید.

لطفاً روی لینک زیر کلیک کنید تا رمز عبور جدیدی تنظیم کنید:{% endblocktranslate %}

{{ protocol }}://{{ domain }}{% url 'users:password_reset_confirm' uidb64=uid token=token %}

{% translate "نام کاربری شما:" %} {{ user.get_username }}

{% blocktranslate %}با تشکر،
تیم پشتیبانی زیما{% endblocktranslate %}

{% endautoescape %}

====== FILE: users/templates/users/password_reset_done.html ======

{% extends 'base/base.html' %}
{% load static %}

{% block title %}ارسال ایمیل بازیابی | زیما{% endblock %}

{% block content %}
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white text-center py-3">
                    <h4 class="mb-0">ارسال ایمیل بازیابی</h4>
                </div>
                <div class="card-body p-4">
                    <div class="alert alert-success">
                        <p>ایمیل حاوی دستورالعمل‌های بازیابی رمز عبور برای شما ارسال شد.</p>
                        <p>اگر حساب کاربری با ایمیل وارد شده وجود داشته باشد، به زودی ایمیلی دریافت خواهید کرد.</p>
                        <p>لطفاً صندوق ورودی و پوشه اسپم خود را بررسی کنید.</p>
                    </div>
                    
                    <div class="text-center mt-3">
                        <a href="{% url 'users:login' %}" class="btn btn-outline-primary">بازگشت به صفحه ورود</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

====== FILE: users/migrations/__init__.py ======



====== FILE: users/migrations/0002_customuser_is_online.py ======

# Generated by Django 5.1.5 on 2025-06-09 08:58

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('users', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='customuser',
            name='is_online',
            field=models.BooleanField(default=False),
        ),
    ]


====== FILE: users/migrations/0003_remove_customuser_is_online.py ======

# Generated by Django 5.1.5 on 2025-06-09 13:29

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('users', '0002_customuser_is_online'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='customuser',
            name='is_online',
        ),
    ]


====== FILE: users/migrations/0004_favorite.py ======

# Generated by Django 5.1.5 on 2025-09-03 09:29

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ('users', '0003_remove_customuser_is_online'),
        # این خط را حذف کنید یا تغییر دهید
        # ('products', '0007_remove_product_color_codes_remove_product_colors_and_more'),
        ('products', '0006_productinventory_dimensions_productinventory_weight'),  # به جای 0007، از 0006 استفاده کنید
    ]

    operations = [
        migrations.CreateModel(
            name='Favorite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.product')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorites', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'علاقه\u200cمندی',
                'verbose_name_plural': 'علاقه\u200cمندی\u200cها',
                'ordering': ['-created_at'],
                'unique_together': {('user', 'product')},
            },
        ),
    ]


====== FILE: users/migrations/0001_initial.py ======

# Generated by Django 5.1.5 on 2025-05-16 13:09

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone_number', models.CharField(blank=True, max_length=11, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='شماره موبایل باید با 09 شروع شده و 11 رقم باشد.', regex='^09\\d{9}$')], verbose_name='شماره موبایل')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('national_id', models.CharField(blank=True, max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='کد ملی باید 10 رقم باشد.', regex='^\\d{10}$')], verbose_name='کد ملی')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='تاریخ تولد')),
                ('receive_sms', models.BooleanField(default=True, verbose_name='دریافت پیامک')),
                ('receive_email', models.BooleanField(default=True, verbose_name='دریافت ایمیل')),
                ('date_modified', models.DateTimeField(auto_now=True, verbose_name='تاریخ آخرین بروزرسانی')),
                ('last_visit', models.DateTimeField(blank=True, null=True, verbose_name='آخرین بازدید')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'کاربر',
                'verbose_name_plural': 'کاربران',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='مثال: خانه، محل کار و...', max_length=100, verbose_name='عنوان آدرس')),
                ('receiver_full_name', models.CharField(max_length=150, verbose_name='نام و نام خانوادگی گیرنده')),
                ('receiver_phone', models.CharField(max_length=11, validators=[django.core.validators.RegexValidator(message='شماره موبایل باید با 09 شروع شده و 11 رقم باشد.', regex='^09\\d{9}$')], verbose_name='شماره موبایل گیرنده')),
                ('province', models.CharField(choices=[('تهران', 'تهران'), ('اصفهان', 'اصفهان'), ('فارس', 'فارس'), ('خراسان رضوی', 'خراسان رضوی'), ('آذربایجان شرقی', 'آذربایجان شرقی'), ('آذربایجان غربی', 'آذربایجان غربی'), ('کرمان', 'کرمان'), ('خوزستان', 'خوزستان'), ('هرمزگان', 'هرمزگان'), ('سیستان و بلوچستان', 'سیستان و بلوچستان'), ('کردستان', 'کردستان'), ('همدان', 'همدان'), ('کرمانشاه', 'کرمانشاه'), ('گیلان', 'گیلان'), ('مازندران', 'مازندران'), ('زنجان', 'زنجان'), ('گلستان', 'گلستان'), ('اردبیل', 'اردبیل'), ('قزوین', 'قزوین'), ('لرستان', 'لرستان'), ('بوشهر', 'بوشهر'), ('کهگیلویه و بویراحمد', 'کهگیلویه و بویراحمد'), ('مرکزی', 'مرکزی'), ('ایلام', 'ایلام'), ('چهارمحال و بختیاری', 'چهارمحال و بختیاری'), ('یزد', 'یزد'), ('قم', 'قم'), ('سمنان', 'سمنان'), ('البرز', 'البرز'), ('خراسان شمالی', 'خراسان شمالی'), ('خراسان جنوبی', 'خراسان جنوبی')], max_length=50, verbose_name='استان')),
                ('city', models.CharField(max_length=50, verbose_name='شهر')),
                ('postal_code', models.CharField(max_length=10, validators=[django.core.validators.RegexValidator(message='کد پستی باید 10 رقم باشد.', regex='^\\d{10}$')], verbose_name='کد پستی')),
                ('full_address', models.TextField(verbose_name='آدرس کامل')),
                ('is_default', models.BooleanField(default=False, verbose_name='آدرس پیش\u200cفرض')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='تاریخ ایجاد')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='تاریخ بروزرسانی')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='addresses', to=settings.AUTH_USER_MODEL, verbose_name='کاربر')),
            ],
            options={
                'verbose_name': 'آدرس',
                'verbose_name_plural': 'آدرس\u200cها',
                'ordering': ['-is_default', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Newsletter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='ایمیل')),
                ('is_active', models.BooleanField(default=True, verbose_name='فعال')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='تاریخ عضویت')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='newsletters', to=settings.AUTH_USER_MODEL, verbose_name='کاربر')),
            ],
            options={
                'verbose_name': 'خبرنامه',
                'verbose_name_plural': 'خبرنامه\u200cها',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity_type', models.CharField(choices=[('login', 'ورود به سیستم'), ('logout', 'خروج از سیستم'), ('register', 'ثبت\u200cنام'), ('profile_update', 'بروزرسانی پروفایل'), ('password_change', 'تغییر رمز عبور'), ('order_placed', 'ثبت سفارش'), ('review_added', 'ثبت نظر')], max_length=20, verbose_name='نوع فعالیت')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='آدرس IP')),
                ('user_agent', models.TextField(blank=True, null=True, verbose_name='مرورگر کاربر')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='زمان فعالیت')),
                ('details', models.JSONField(blank=True, null=True, verbose_name='جزئیات')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activities', to=settings.AUTH_USER_MODEL, verbose_name='کاربر')),
            ],
            options={
                'verbose_name': 'فعالیت کاربر',
                'verbose_name_plural': 'فعالیت\u200cهای کاربران',
                'ordering': ['-timestamp'],
            },
        ),
    ]


====== FILE: users/management/commands/create_initial_data.py ======

from django.core.management.base import BaseCommand
from users.models import CustomUser
from products.models import Category, Product


class Command(BaseCommand):
    help = 'Creates initial data for the project'

    def handle(self, *args, **kwargs):
        self.stdout.write('Creating initial data...')

        # ایجاد دسته‌بندی‌ها
        cat1 = Category.objects.create(name='لباس مردانه', slug='mens-clothing')
        cat2 = Category.objects.create(name='لباس زنانه', slug='womens-clothing')

        # ایجاد محصولات
        Product.objects.create(
            name='تیشرت مردانه',
            slug='mens-tshirt',
            category=cat1,
            brand='برند نمونه',
            gender='men',
            description='توضیحات محصول',
            price=150000,
            stock=10
        )

        Product.objects.create(
            name='بلوز زنانه',
            slug='womens-blouse',
            category=cat2,
            brand='برند نمونه',
            gender='women',
            description='توضیحات محصول',
            price=180000,
            stock=8
        )

        self.stdout.write(self.style.SUCCESS('Initial data created successfully!'))

====== FILE: orders/__init__.py ======



====== FILE: orders/admin.py ======

from django.contrib import admin
from .models import Order, OrderItem, Payment, Shipment


class OrderItemInline(admin.TabularInline):
    model = OrderItem
    extra = 0
    readonly_fields = (
        'product', 'quantity', 'price', 'discount', 'size', 'color', 'get_total_price', 'get_discount_amount',
        'get_final_price'
    )
    can_delete = False

    def has_add_permission(self, request, obj=None):
        return False


class PaymentInline(admin.TabularInline):
    model = Payment
    extra = 0
    readonly_fields = ('amount', 'status', 'gateway', 'transaction_id', 'reference_id', 'created_at')
    can_delete = False

    def has_add_permission(self, request, obj=None):
        return False


class ShipmentInline(admin.TabularInline):
    model = Shipment
    extra = 0
    readonly_fields = ('status', 'carrier', 'tracking_code', 'shipping_date', 'delivery_date', 'created_at')
    can_delete = False

    def has_add_permission(self, request, obj=None):
        return False


@admin.register(Order)
class OrderAdmin(admin.ModelAdmin):
    list_display = ('id', 'user', 'status', 'total_price', 'payment_method', 'created_at')
    list_filter = ('status', 'payment_method', 'shipping_method', 'created_at')
    search_fields = ('id', 'user__username', 'user__email', 'tracking_code', 'transaction_id')
    readonly_fields = ('created_at', 'updated_at')
    raw_id_fields = ('user', 'address')
    inlines = [OrderItemInline, PaymentInline, ShipmentInline]
    fieldsets = (
        ('اطلاعات اصلی', {
            'fields': ('user', 'address', 'status', 'tracking_code')
        }),
        ('اطلاعات مالی', {
            'fields': (
                'subtotal', 'discount', 'shipping_cost', 'total_price', 'payment_method', 'transaction_id', 'payment_date'
            )
        }),
        ('اطلاعات ارسال', {
            'fields': ('shipping_method', 'shipping_date', 'delivery_date')
        }),
        ('توضیحات', {
            'fields': ('description', 'admin_note')
        }),
        ('اطلاعات سیستمی', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )

    def get_readonly_fields(self, request, obj=None):
        readonly_fields = list(self.readonly_fields)
        if obj:  # اگر در حال ویرایش یک سفارش موجود هستیم
            readonly_fields.extend(['user', 'subtotal', 'total_price'])
        return readonly_fields


@admin.register(Payment)
class PaymentAdmin(admin.ModelAdmin):
    list_display = ('order', 'amount', 'status', 'gateway', 'transaction_id', 'created_at')
    list_filter = ('status', 'gateway', 'created_at')
    search_fields = ('order__id', 'transaction_id', 'reference_id')
    raw_id_fields = ('order',)
    readonly_fields = ('created_at', 'updated_at')


@admin.register(Shipment)
class ShipmentAdmin(admin.ModelAdmin):
    list_display = ('order', 'status', 'carrier', 'tracking_code', 'shipping_date', 'delivery_date')
    list_filter = ('status', 'carrier', 'shipping_date', 'delivery_date')
    search_fields = ('order__id', 'tracking_code')
    raw_id_fields = ('order',)
    readonly_fields = ('created_at', 'updated_at')

====== FILE: orders/models.py ======

from django.db import models
from django.conf import settings
from products.models import Product
from users.models import Address


class Order(models.Model):
    """مدل سفارش"""
    STATUS_CHOICES = [
        ('pending', 'در انتظار پرداخت'),
        ('paid', 'پرداخت شده'),
        ('processing', 'در حال پردازش'),
        ('shipped', 'ارسال شده'),
        ('delivered', 'تحویل داده شده'),
        ('cancelled', 'لغو شده'),
        ('refunded', 'مسترد شده'),
    ]

    SHIPPING_CHOICES = [
        ('standard', 'ارسال عادی'),
        ('express', 'ارسال سریع'),
    ]

    PAYMENT_CHOICES = [
        ('online', 'پرداخت آنلاین'),
        ('cash', 'پرداخت در محل'),
    ]

    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='orders',
                             verbose_name='کاربر')
    address = models.ForeignKey(Address, on_delete=models.PROTECT, related_name='orders', verbose_name='آدرس تحویل')

    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending', verbose_name='وضعیت سفارش')
    shipping_method = models.CharField(max_length=20, choices=SHIPPING_CHOICES, default='standard',
                                       verbose_name='روش ارسال')
    payment_method = models.CharField(max_length=20, choices=PAYMENT_CHOICES, default='online',
                                      verbose_name='روش پرداخت')

    subtotal = models.PositiveIntegerField(verbose_name='مجموع قیمت محصولات')
    discount = models.PositiveIntegerField(default=0, verbose_name='تخفیف')
    shipping_cost = models.PositiveIntegerField(default=0, verbose_name='هزینه ارسال')
    total_price = models.PositiveIntegerField(verbose_name='مبلغ کل')

    tracking_code = models.CharField(max_length=50, blank=True, null=True, verbose_name='کد پیگیری')
    transaction_id = models.CharField(max_length=100, blank=True, null=True, verbose_name='شناسه تراکنش')

    description = models.TextField(blank=True, verbose_name='توضیحات سفارش')
    admin_note = models.TextField(blank=True, verbose_name='یادداشت مدیر')

    created_at = models.DateTimeField(auto_now_add=True, verbose_name='تاریخ ایجاد')
    updated_at = models.DateTimeField(auto_now=True, verbose_name='تاریخ بروزرسانی')
    payment_date = models.DateTimeField(null=True, blank=True, verbose_name='تاریخ پرداخت')
    shipping_date = models.DateTimeField(null=True, blank=True, verbose_name='تاریخ ارسال')
    delivery_date = models.DateTimeField(null=True, blank=True, verbose_name='تاریخ تحویل')

    class Meta:
        verbose_name = 'سفارش'
        verbose_name_plural = 'سفارش‌ها'
        ordering = ['-created_at']

    def __str__(self):
        return f"سفارش #{self.id} - {self.user.username}"

    def get_total_items(self):
        """تعداد کل آیتم‌های سفارش"""
        return sum(item.quantity for item in self.items.all())

    def is_paid(self):
        """آیا سفارش پرداخت شده است"""
        return self.status in ['paid', 'processing', 'shipped', 'delivered']

    def can_cancel(self):
        """آیا امکان لغو سفارش وجود دارد"""
        return self.status in ['pending', 'paid', 'processing']


class OrderItem(models.Model):
    """مدل آیتم‌های سفارش"""
    order = models.ForeignKey(Order, on_delete=models.CASCADE, related_name='items', verbose_name='سفارش')
    product = models.ForeignKey(Product, on_delete=models.PROTECT, related_name='order_items', verbose_name='محصول')

    quantity = models.PositiveIntegerField(default=1, verbose_name='تعداد')
    price = models.PositiveIntegerField(verbose_name='قیمت واحد')
    discount = models.PositiveIntegerField(default=0, verbose_name='درصد تخفیف')

    size = models.CharField(max_length=10, verbose_name='سایز')
    color = models.CharField(max_length=50, verbose_name='رنگ')

    class Meta:
        verbose_name = 'آیتم سفارش'
        verbose_name_plural = 'آیتم‌های سفارش'

    def __str__(self):
        return f"{self.quantity} عدد {self.product.name} - سفارش #{self.order.id}"

    def get_total_price(self):
        """محاسبه قیمت کل آیتم (بدون اعمال تخفیف)"""
        return self.price * self.quantity

    def get_discount_amount(self):
        """محاسبه مبلغ تخفیف"""
        if self.discount > 0:
            return (self.price * self.quantity * self.discount) / 100
        return 0

    def get_final_price(self):
        """محاسبه قیمت نهایی آیتم (با اعمال تخفیف)"""
        return self.get_total_price() - self.get_discount_amount()


class Payment(models.Model):
    """مدل پرداخت‌های سفارش"""
    STATUS_CHOICES = [
        ('pending', 'در انتظار پرداخت'),
        ('successful', 'موفق'),
        ('failed', 'ناموفق'),
        ('refunded', 'مسترد شده'),
    ]

    order = models.ForeignKey(Order, on_delete=models.CASCADE, related_name='payments', verbose_name='سفارش')
    amount = models.PositiveIntegerField(verbose_name='مبلغ پرداختی')
    transaction_id = models.CharField(max_length=100, blank=True, null=True, verbose_name='شناسه تراکنش')
    reference_id = models.CharField(max_length=100, blank=True, null=True, verbose_name='شناسه مرجع')

    gateway = models.CharField(max_length=50, verbose_name='درگاه پرداخت')
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending', verbose_name='وضعیت پرداخت')

    created_at = models.DateTimeField(auto_now_add=True, verbose_name='تاریخ ایجاد')
    updated_at = models.DateTimeField(auto_now=True, verbose_name='تاریخ بروزرسانی')

    class Meta:
        verbose_name = 'پرداخت'
        verbose_name_plural = 'پرداخت‌ها'
        ordering = ['-created_at']

    def __str__(self):
        return f"پرداخت {self.amount} تومان - سفارش #{self.order.id}"


class Shipment(models.Model):
    """مدل اطلاعات ارسال سفارش"""
    STATUS_CHOICES = [
        ('processing', 'در حال آماده‌سازی'),
        ('shipped', 'ارسال شده'),
        ('delivered', 'تحویل داده شده'),
        ('returned', 'مرجوع شده'),
    ]

    order = models.ForeignKey(Order, on_delete=models.CASCADE, related_name='shipments', verbose_name='سفارش')
    tracking_code = models.CharField(max_length=50, blank=True, null=True, verbose_name='کد پیگیری')
    carrier = models.CharField(max_length=100, verbose_name='شرکت حمل و نقل')
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='processing', verbose_name='وضعیت ارسال')

    shipping_date = models.DateTimeField(null=True, blank=True, verbose_name='تاریخ ارسال')
    estimated_delivery = models.DateTimeField(null=True, blank=True, verbose_name='تاریخ تخمینی تحویل')
    delivery_date = models.DateTimeField(null=True, blank=True, verbose_name='تاریخ تحویل')

    created_at = models.DateTimeField(auto_now_add=True, verbose_name='تاریخ ایجاد')
    updated_at = models.DateTimeField(auto_now=True, verbose_name='تاریخ بروزرسانی')

    class Meta:
        verbose_name = 'اطلاعات ارسال'
        verbose_name_plural = 'اطلاعات ارسال‌ها'
        ordering = ['-created_at']

    def __str__(self):
        return f"ارسال سفارش #{self.order.id} - {self.get_status_display()}"

====== FILE: orders/apps.py ======

from django.apps import AppConfig


class OrdersConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'orders'


====== FILE: orders/views.py ======

from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.utils import timezone
from cart.models import CartItem
from users.models import Address
from .models import Order, OrderItem
from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from django.http import JsonResponse
from django.views.decorators.http import require_POST
from django.contrib import messages
from .models import Order, OrderItem

# @login_required
# def checkout(request):
#     """صفحه تکمیل سفارش"""
#     cart_items = CartItem.objects.filter(user=request.user)
#     addresses = Address.objects.filter(user=request.user)
#
#     # بررسی خالی نبودن سبد خرید
#     if not cart_items.exists():
#         messages.error(request, 'سبد خرید شما خالی است.')
#         return redirect('cart:summary')
#
#     # محاسبه مجموع قیمت‌ها
#     subtotal = sum(item.get_total_price() for item in cart_items)
#     discount = sum(item.get_discount_amount() for item in cart_items)
#
#     # محاسبه هزینه ارسال
#     shipping_cost = 30000 if subtotal < 300000 else 0
#
#     # محاسبه مبلغ نهایی
#     total = subtotal - discount + shipping_cost
#
#     cart_total = {
#         'total_items': sum(item.quantity for item in cart_items),
#         'subtotal': subtotal,
#         'discount': discount,
#         'shipping_cost': shipping_cost,
#         'total': total
#     }
#
#     if request.method == 'POST':
#         # دریافت اطلاعات سفارش
#         address_id = request.POST.get('address_id')
#         shipping_method = request.POST.get('shipping_method')
#         payment_method = request.POST.get('payment_method')
#         description = request.POST.get('description', '')
#
#         # بررسی انتخاب آدرس
#         if not address_id:
#             messages.error(request, 'لطفاً یک آدرس انتخاب کنید.')
#             return redirect('orders:checkout')
#
#         address = get_object_or_404(Address, id=address_id, user=request.user)
#
#         # محاسبه هزینه ارسال بر اساس روش ارسال
#         if shipping_method == 'express':
#             shipping_cost = 50000
#         else:  # standard
#             shipping_cost = 30000 if subtotal < 300000 else 0
#
#         # ایجاد سفارش جدید
#         order = Order.objects.create(
#             user=request.user,
#             address=address,
#             shipping_method=shipping_method,
#             payment_method=payment_method,
#             description=description,
#             subtotal=subtotal,
#             discount=discount,
#             shipping_cost=shipping_cost,
#             total_price=subtotal - discount + shipping_cost
#         )
#
#         # ایجاد آیتم‌های سفارش
#         for cart_item in cart_items:
#             OrderItem.objects.create(
#                 order=order,
#                 product=cart_item.product,
#                 size=cart_item.size,
#                 color=cart_item.color,
#                 quantity=cart_item.quantity,
#                 price=cart_item.product.price,
#                 discount=cart_item.discount
#             )
#
#         # خالی کردن سبد خرید
#         cart_items.delete()
#
#         # هدایت به صفحه پرداخت یا تأیید سفارش
#         if payment_method == 'online':
#             return redirect('orders:payment', order_id=order.id)
#         else:  # cash
#             order.status = 'confirmed'
#             order.save()
#             messages.success(request, 'سفارش شما با موفقیت ثبت شد.')
#             return redirect('orders:confirmation', order_id=order.id)
#
#     context = {
#         'cart_items': cart_items,
#         'cart_total': cart_total,
#         'addresses': addresses,
#     }
#
#     return render(request, 'orders/checkout.html', context)
#
#
# @login_required
# def payment(request, order_id):
#     """صفحه پرداخت"""
#     order = get_object_or_404(Order, id=order_id, user=request.user)
#
#     # اگر سفارش قبلاً پرداخت شده باشد
#     if order.status != 'pending':
#         messages.warning(request, 'این سفارش قبلاً پرداخت شده است.')
#         return redirect('orders:list')
#
#     # در اینجا اتصال به درگاه پرداخت انجام می‌شود
#     # ...
#
#     # برای نمونه، فرض می‌کنیم پرداخت موفق بوده است
#     if request.method == 'POST':
#         order.status = 'paid'
#         order.payment_date = timezone.now()
#         order.save()
#
#         messages.success(request, 'پرداخت با موفقیت انجام شد.')
#         return redirect('orders:confirmation', order_id=order.id)
#
#     return render(request, 'orders/payment.html', {'order': order})
#
#
# @login_required
# def order_confirmation(request, order_id):
#     """صفحه تأیید سفارش"""
#     order = get_object_or_404(Order, id=order_id, user=request.user)
#     return render(request, 'orders/confirmation.html', {'order': order})
#
#
# @login_required
# def order_list(request):
#     """لیست سفارشات کاربر"""
#     orders = Order.objects.filter(user=request.user).order_by('-created_at')
#     return render(request, 'orders/list.html', {'orders': orders})
#
#
# @login_required
# def order_detail(request, order_id):
#     """جزئیات سفارش"""
#     order = get_object_or_404(Order, id=order_id, user=request.user)
#     return render(request, 'orders/detail.html', {'order': order})


@login_required
def order_list(request):
    orders = Order.objects.filter(user=request.user).prefetch_related('items__product')
    return render(request, 'orders/list.html', {'orders': orders})

@login_required
def order_detail(request, order_id):
    order = get_object_or_404(Order, id=order_id, user=request.user)
    return render(request, 'orders/detail.html', {'order': order})

@login_required
@require_POST
def cancel_order(request, order_id):
    try:
        order = Order.objects.get(id=order_id, user=request.user)
        if order.status == 'pending':
            order.status = 'cancelled'
            order.save()
            return JsonResponse({'success': True})
        else:
            return JsonResponse({'success': False, 'message': 'این سفارش قابل لغو نیست'})
    except Order.DoesNotExist:
        return JsonResponse({'success': False, 'message': 'سفارش یافت نشد'})

@login_required
@require_POST
def reorder(request, order_id):
    try:
        order = Order.objects.get(id=order_id, user=request.user)
        # اینجا منطق افزودن مجدد آیتم‌ها به سبد خرید
        # فعلاً فقط پیام موفقیت برمی‌گردانیم
        return JsonResponse({'success': True})
    except Order.DoesNotExist:
        return JsonResponse({'success': False, 'message': 'سفارش یافت نشد'})

====== FILE: orders/urls.py ======

from django.urls import path
from . import views

app_name = 'orders'

urlpatterns = [
    path('', views.order_list, name='list'),
    path('<int:order_id>/', views.order_detail, name='detail'),
    path('cancel/<int:order_id>/', views.cancel_order, name='cancel'),
    path('reorder/<int:order_id>/', views.reorder, name='reorder'),
]

====== FILE: orders/tasks.py ======

from django.utils.timezone import now

from cart.models import CartItem


def delete_expired_cart_items():
    expired_items = CartItem.objects.filter(expires_at__lt=now())
    expired_items.delete()

====== FILE: orders/serializers.py ======

from rest_framework import serializers
from .models import Order, CartItem


class OrderSerializer(serializers.ModelSerializer):
    class Meta:
        model = Order
        fields = '__all__'


class CartItemSerializer(serializers.ModelSerializer):
    total_price = serializers.ReadOnlyField()

    class Meta:
        model = CartItem
        fields = ['id', 'user', 'product', 'quantity', 'total_price']

====== FILE: orders/tests.py ======

from django.test import TestCase

# Create your tests here.


====== FILE: orders/migrations/__init__.py ======



====== FILE: orders/migrations/0001_initial.py ======

# Generated by Django 5.1.5 on 2025-05-20 07:44

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('products', '0004_color_size_product_inventory_and_more'),
        ('users', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'در انتظار پرداخت'), ('paid', 'پرداخت شده'), ('processing', 'در حال پردازش'), ('shipped', 'ارسال شده'), ('delivered', 'تحویل داده شده'), ('cancelled', 'لغو شده'), ('refunded', 'مسترد شده')], default='pending', max_length=20, verbose_name='وضعیت سفارش')),
                ('shipping_method', models.CharField(choices=[('standard', 'ارسال عادی'), ('express', 'ارسال سریع')], default='standard', max_length=20, verbose_name='روش ارسال')),
                ('payment_method', models.CharField(choices=[('online', 'پرداخت آنلاین'), ('cash', 'پرداخت در محل')], default='online', max_length=20, verbose_name='روش پرداخت')),
                ('subtotal', models.PositiveIntegerField(verbose_name='مجموع قیمت محصولات')),
                ('discount', models.PositiveIntegerField(default=0, verbose_name='تخفیف')),
                ('shipping_cost', models.PositiveIntegerField(default=0, verbose_name='هزینه ارسال')),
                ('total_price', models.PositiveIntegerField(verbose_name='مبلغ کل')),
                ('tracking_code', models.CharField(blank=True, max_length=50, null=True, verbose_name='کد پیگیری')),
                ('transaction_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='شناسه تراکنش')),
                ('description', models.TextField(blank=True, verbose_name='توضیحات سفارش')),
                ('admin_note', models.TextField(blank=True, verbose_name='یادداشت مدیر')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='تاریخ ایجاد')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='تاریخ بروزرسانی')),
                ('payment_date', models.DateTimeField(blank=True, null=True, verbose_name='تاریخ پرداخت')),
                ('shipping_date', models.DateTimeField(blank=True, null=True, verbose_name='تاریخ ارسال')),
                ('delivery_date', models.DateTimeField(blank=True, null=True, verbose_name='تاریخ تحویل')),
                ('address', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='orders', to='users.address', verbose_name='آدرس تحویل')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to=settings.AUTH_USER_MODEL, verbose_name='کاربر')),
            ],
            options={
                'verbose_name': 'سفارش',
                'verbose_name_plural': 'سفارش\u200cها',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1, verbose_name='تعداد')),
                ('price', models.PositiveIntegerField(verbose_name='قیمت واحد')),
                ('discount', models.PositiveIntegerField(default=0, verbose_name='درصد تخفیف')),
                ('size', models.CharField(max_length=10, verbose_name='سایز')),
                ('color', models.CharField(max_length=50, verbose_name='رنگ')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='orders.order', verbose_name='سفارش')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='order_items', to='products.product', verbose_name='محصول')),
            ],
            options={
                'verbose_name': 'آیتم سفارش',
                'verbose_name_plural': 'آیتم\u200cهای سفارش',
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.PositiveIntegerField(verbose_name='مبلغ پرداختی')),
                ('transaction_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='شناسه تراکنش')),
                ('reference_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='شناسه مرجع')),
                ('gateway', models.CharField(max_length=50, verbose_name='درگاه پرداخت')),
                ('status', models.CharField(choices=[('pending', 'در انتظار پرداخت'), ('successful', 'موفق'), ('failed', 'ناموفق'), ('refunded', 'مسترد شده')], default='pending', max_length=20, verbose_name='وضعیت پرداخت')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='تاریخ ایجاد')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='تاریخ بروزرسانی')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='orders.order', verbose_name='سفارش')),
            ],
            options={
                'verbose_name': 'پرداخت',
                'verbose_name_plural': 'پرداخت\u200cها',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Shipment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tracking_code', models.CharField(blank=True, max_length=50, null=True, verbose_name='کد پیگیری')),
                ('carrier', models.CharField(max_length=100, verbose_name='شرکت حمل و نقل')),
                ('status', models.CharField(choices=[('processing', 'در حال آماده\u200cسازی'), ('shipped', 'ارسال شده'), ('delivered', 'تحویل داده شده'), ('returned', 'مرجوع شده')], default='processing', max_length=20, verbose_name='وضعیت ارسال')),
                ('shipping_date', models.DateTimeField(blank=True, null=True, verbose_name='تاریخ ارسال')),
                ('estimated_delivery', models.DateTimeField(blank=True, null=True, verbose_name='تاریخ تخمینی تحویل')),
                ('delivery_date', models.DateTimeField(blank=True, null=True, verbose_name='تاریخ تحویل')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='تاریخ ایجاد')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='تاریخ بروزرسانی')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shipments', to='orders.order', verbose_name='سفارش')),
            ],
            options={
                'verbose_name': 'اطلاعات ارسال',
                'verbose_name_plural': 'اطلاعات ارسال\u200cها',
                'ordering': ['-created_at'],
            },
        ),
    ]


====== FILE: products/__init__.py ======



====== FILE: products/admin.py ======

from django.contrib import admin
from django.utils.html import format_html
from .models import Category, Product, ProductImage, Tag, Review, ProductInventory, Color, Size, ProductFeature, Banner


class ProductImageInline(admin.TabularInline):
    model = ProductImage
    extra = 1
    fields = ('image', 'alt_text', 'is_main', 'display_image')
    readonly_fields = ('display_image',)

    def display_image(self, obj):
        if obj.image:
            return format_html('<img src="{}" width="100" />', obj.image.url)
        return "بدون تصویر"

    display_image.short_description = "پیش‌نمایش"


class ProductInventoryInline(admin.TabularInline):
    model = ProductInventory
    extra = 1
    fields = ('color', 'size', 'quantity')


class ProductFeatureInline(admin.TabularInline):
    model = ProductFeature
    extra = 1
    fields = ('name', 'value')


@admin.register(Product)
class ProductAdmin(admin.ModelAdmin):
    list_display = (
        'display_image', 'name', 'price', 'get_discount_price',
        'total_stock', 'is_active', 'is_featured', 'created_at'
    )
    list_filter = ('is_active', 'is_featured', 'categories', 'brand', 'gender', 'created_at')
    search_fields = ('name', 'description', 'brand')
    prepopulated_fields = {'slug': ('name',)}
    filter_horizontal = ('categories',) # نمایش دسته‌بندی‌ها به صورت رابط کاربری بهتر (Multiple Select)
    list_editable = ('is_active', 'is_featured')
    inlines = [ProductImageInline, ProductFeatureInline, ProductInventoryInline]

    fieldsets = (
        ('اطلاعات اصلی', {
            'fields': ('name', 'slug', 'categories', 'brand', 'gender', 'is_active', 'is_featured')
        }),
        ('توضیحات', {
            'fields': ('description', 'short_description')
        }),
        ('قیمت‌گذاری', {
            'fields': ('price', 'discount_percent')
        }),
        ('ویژگی‌های فیزیکی', {
            'fields': ('weight',)
        }),
        ('مشخصات فیزیکی', {
            'fields': ('dimensions',),
            'description': 'ابعاد محصول را وارد کنید. مثال: عرض شانه: 45 سانتی‌متر، قد: 70 سانتی‌متر'
        }),
        ('سئو', {
            'fields': ('meta_title', 'meta_description', 'meta_keywords'),
            'classes': ('collapse',)
        }),
    )

    def get_discount_price(self, obj):
        return obj.get_discount_price()

    get_discount_price.short_description = "قیمت با تخفیف"

    def total_stock(self, obj):
        return obj.total_stock

    total_stock.short_description = "موجودی کل"

    def display_categories(self, obj):
        # ✅ متد کمکی برای نمایش دسته‌بندی‌ها در لیست ادمین
        return ", ".join([category.name for category in obj.categories.all()])

    display_categories.short_description = "دسته‌بندی‌ها"

    def display_image(self, obj):
        main_image = obj.get_main_image()
        if main_image and main_image.image:
            return format_html('<img src="{}" width="50" height="50" style="object-fit: cover;" />',
                               main_image.image.url)
        return "بدون تصویر"

    display_image.short_description = "تصویر"


@admin.register(Category)
class CategoryAdmin(admin.ModelAdmin):
    list_display = ('display_image', 'name', 'parent', 'is_active', 'get_products_count')
    list_filter = ('is_active', 'parent')
    search_fields = ('name', 'description')
    prepopulated_fields = {'slug': ('name',)}
    readonly_fields = ('created_at', 'updated_at')

    def get_products_count(self, obj):
        return obj.get_products_count

    get_products_count.short_description = "تعداد محصولات"

    def display_image(self, obj):
        if obj.image:
            return format_html('<img src="{}" width="50" height="50" style="object-fit: cover;" />', obj.image.url)
        return "بدون تصویر"

    display_image.short_description = "تصویر"


@admin.register(ProductImage)
class ProductImageAdmin(admin.ModelAdmin):
    list_display = ('product', 'display_image', 'is_main', 'alt_text')
    list_filter = ('is_main', 'product')
    search_fields = ('product__name', 'alt_text')

    def display_image(self, obj):
        if obj.image:
            return format_html('<img src="{}" width="100" />', obj.image.url)
        return "بدون تصویر"

    display_image.short_description = "پیش‌نمایش"


@admin.register(Review)
class ReviewAdmin(admin.ModelAdmin):
    list_display = ('product', 'user', 'rating', 'created_at', 'is_approved')
    list_filter = ('is_approved', 'rating', 'created_at')
    search_fields = ('product__name', 'user__username', 'comment')
    list_editable = ('is_approved',)


@admin.register(Color)
class ColorAdmin(admin.ModelAdmin):
    list_display = ['name', 'color_preview']
    search_fields = ['name']
    ordering = ['name']

    def color_preview(self, obj):
        return format_html(
            '<div style="width: 25px; height: 25px; background-color: {}; border-radius: 50%; border: 1px solid #ccc;"></div>',
            obj.hex_code,
        )
    color_preview.short_description = 'پیش‌نمایش'

@admin.register(Size)
class SizeAdmin(admin.ModelAdmin):
    list_display = ['name', 'id']
    search_fields = ['name']
    ordering = ['name']


@admin.register(ProductInventory)
class ProductInventoryAdmin(admin.ModelAdmin):
    list_display = ('product', 'color', 'size', 'quantity', 'weight', 'dimensions')
    list_filter = ('product', 'color', 'size')
    search_fields = ('product__name', 'color__name', 'size__name')

    fieldsets = (
        ('اطلاعات اصلی', {
            'fields': ('product', 'color', 'size', 'quantity')
        }),
        ('مشخصات فیزیکی', {
            'fields': ('weight', 'dimensions'),
            'classes': ('collapse',),
            'description': 'مشخصات فیزیکی مختص این سایز و رنگ را وارد کنید.'
        }),
    )


@admin.register(Tag)
class TagAdmin(admin.ModelAdmin):
    list_display = ('name', 'slug')
    search_fields = ('name',)
    prepopulated_fields = {'slug': ('name',)}
    filter_horizontal = ('products',)


@admin.register(Banner)
class BannerAdmin(admin.ModelAdmin):
    list_display = ('display_image', 'title', 'position', 'order', 'is_active')
    list_filter = ('position', 'is_active')
    search_fields = ('title', 'subtitle')
    list_editable = ('is_active', 'order')

    def display_image(self, obj):
        if obj.image:
            return format_html('<img src="{}" width="50" height="50" style="object-fit: cover;" />', obj.image.url)
        return "بدون تصویر"

    display_image.short_description = "تصویر"


@admin.register(ProductFeature)
class ProductFeatureAdmin(admin.ModelAdmin):
    list_display = ('product', 'name', 'value')
    list_filter = ('product',)
    search_fields = ('product__name', 'name', 'value')

====== FILE: products/forms.py ======

from django import forms
from .models import Review

class ReviewForm(forms.ModelForm):
    """فرم ثبت نظر برای محصول"""
    class Meta:
        model = Review
        fields = ('rating', 'comment')
        widgets = {
            'comment': forms.Textarea(attrs={'rows': 3}),
        }

====== FILE: products/models.py ======

from django.db import models
from django.db.models import Sum
from django.utils.text import slugify
from django.conf import settings
from django.core.validators import MinValueValidator, MaxValueValidator
from django.utils.translation import gettext_lazy as _
import uuid
import os
from django.contrib.humanize.templatetags.humanize import intcomma # ✅ این خط را اضافه کنید


def get_product_image_path(instance, filename):
    ext = filename.split('.')[-1].lower()
    filename = f"{uuid.uuid4()}.{ext}"
    return os.path.join('products', str(instance.product.id), filename)


def get_category_image_path(instance, filename):
    ext = filename.split('.')[-1].lower()
    filename = f"{uuid.uuid4()}.{ext}"
    return os.path.join('categories', filename)


class Category(models.Model):
    name = models.CharField(max_length=100, verbose_name='نام دسته‌بندی')
    slug = models.SlugField(max_length=120, unique=True, verbose_name='اسلاگ')
    parent = models.ForeignKey('self', on_delete=models.CASCADE, null=True, blank=True,
                               related_name='children', verbose_name='دسته‌بندی والد')
    description = models.TextField(blank=True, verbose_name='توضیحات')
    image = models.ImageField(
        upload_to=get_category_image_path,
        blank=True,
        verbose_name='تصویر',
        help_text=_('فرمت‌های مجاز: JPG, JPEG, PNG, GIF, WebP')
    )
    is_active = models.BooleanField(default=True, verbose_name='فعال')
    created_at = models.DateTimeField(auto_now_add=True, verbose_name='تاریخ ایجاد')
    updated_at = models.DateTimeField(auto_now=True, verbose_name='تاریخ بروزرسانی')

    class Meta:
        verbose_name = 'دسته‌بندی'
        verbose_name_plural = 'دسته‌بندی‌ها'
        ordering = ['name']

    def __str__(self):
        full_path = [self.name]
        parent = self.parent

        while parent is not None:
            full_path.append(parent.name)
            parent = parent.parent

        return ' > '.join(full_path[::-1])

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.name)
        super().save(*args, **kwargs)

    def get_absolute_url(self):
        from django.urls import reverse
        return reverse('products:product_detail', kwargs={'slug': self.slug})

    def get_all_sizes(self):
        product_ids = self.products.filter(is_active=True).values_list('id', flat=True)
        return Size.objects.filter(
            productinventory__product_id__in=product_ids,
            productinventory__quantity__gt=0
        ).distinct().order_by('name')

    def get_all_colors(self):
        product_ids = self.products.filter(is_active=True).values_list('id', flat=True)
        return Color.objects.filter(
            productinventory__product_id__in=product_ids,
            productinventory__quantity__gt=0
        ).distinct().order_by('name')

    @property
    def get_products_count(self):
        return self.products.filter(is_active=True).count()



class Product(models.Model):
    """مدل محصولات"""
    GENDER_CHOICES = [
        ('men', 'مردانه'),
        ('women', 'زنانه'),
        ('unisex', 'یونیسکس'),
    ]

    name = models.CharField(max_length=200, verbose_name='نام محصول')
    slug = models.SlugField(max_length=220, unique=True, verbose_name='اسلاگ')
    categories = models.ManyToManyField(Category, related_name='products', verbose_name='دسته‌بندی')
    brand = models.CharField(max_length=100, verbose_name='برند')
    gender = models.CharField(max_length=10, choices=GENDER_CHOICES, verbose_name='جنسیت')

    description = models.TextField(verbose_name='توضیحات')
    short_description = models.TextField(blank=True, verbose_name='توضیحات کوتاه')

    price = models.PositiveIntegerField(verbose_name='قیمت (تومان)')
    discount_percent = models.PositiveIntegerField(default=0, validators=[MaxValueValidator(100)],
                                                   verbose_name='درصد تخفیف')

    is_active = models.BooleanField(default=True, verbose_name='فعال')
    is_featured = models.BooleanField(default=False, verbose_name='محصول ویژه')

    sizes = models.JSONField(default=list, verbose_name='سایزها',
                             help_text='به صورت آرایه‌ای از سایزها مانند ["S", "M", "L"]')
    colors = models.JSONField(default=list, verbose_name='رنگ‌ها',
                              help_text='به صورت آرایه‌ای از رنگ‌ها مانند ["سفید", "مشکی", "آبی"]')
    color_codes = models.JSONField(default=list, verbose_name='کد رنگ‌ها',
                                   help_text='به صورت آرایه‌ای از کدهای رنگ مانند ["#FFFFFF", "#000000", "#0000FF"]')

    inventory = models.JSONField(default=dict, verbose_name='موجودی بر اساس رنگ و سایز',
                                 help_text='دیکشنری از موجودی هر ترکیب رنگ و سایز مانند {"S-سفید": 10, "M-سفید": 5}')

    price_adjustments = models.JSONField(default=dict, verbose_name='تغییرات قیمت',
                                         help_text='دیکشنری از تغییرات قیمت مانند {"S": 0, "M": 10000, "L": 20000}')

    weight = models.PositiveIntegerField(default=0, verbose_name='وزن (گرم)')
    dimensions = models.CharField(max_length=100, blank=True, verbose_name='ابعاد',
                                  help_text='مثال: 30x20x10 سانتی‌متر')

    meta_title = models.CharField(max_length=200, blank=True, verbose_name='عنوان متا')
    meta_description = models.TextField(blank=True, verbose_name='توضیحات متا')
    meta_keywords = models.CharField(max_length=300, blank=True, verbose_name='کلمات کلیدی متا')

    created_at = models.DateTimeField(auto_now_add=True, verbose_name='تاریخ ایجاد')
    updated_at = models.DateTimeField(auto_now=True, verbose_name='تاریخ بروزرسانی')

    total_sales = models.PositiveIntegerField(default=0, verbose_name='تعداد فروش')

    class Meta:
        verbose_name = 'محصول'
        verbose_name_plural = 'محصولات'
        ordering = ['-created_at']

    def __str__(self):
        return self.name

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.name)
        if not self.meta_title:
            self.meta_title = self.name
        if not self.meta_description:
            self.meta_description = self.short_description or self.description[:160]
        super().save(*args, **kwargs)

    def get_absolute_url(self):
        from django.urls import reverse
        return reverse('products:detail', kwargs={'product_id': self.id})

    def get_display_price(self):
        """قیمت نمایشی محصول (با احتساب تخفیف)"""
        return self.get_discount_price()

    def get_available_sizes_display(self):
        """نمایش سایزهای موجود به صورت رشته"""
        sizes = self.get_available_sizes()
        return '-'.join([size.name for size in sizes]) if sizes else 'ناموجود'

    @property
    def stock(self):
        """برای سازگاری با کدهای قدیمی - همان total_stock"""
        return self.total_stock

    @property
    def is_new(self):
        """بررسی اینکه محصول جدید است یا نه (کمتر از 30 روز)"""
        from django.utils import timezone
        from datetime import timedelta
        return self.created_at >= timezone.now() - timedelta(days=30)


    def get_discount_price(self):
        if self.discount_percent > 0:
            discount_amount = (self.price * self.discount_percent) / 100
            return int(self.price - discount_amount)
        return self.price

    # ✅✅✅ متدهای جدید به اینجا (خارج از متد قبلی) منتقل شدند ✅✅✅
    def get_formatted_price(self):
        """قیمت اصلی محصول را با استفاده از فرمت‌بندی استاندارد پایتون کاماگذاری می‌کند."""
        try:
            price_int = int(self.price)
            # این روش به تنظیمات locale جنگو احترام می‌گذارد و جداکننده صحیح را استفاده می‌کند
            return f"{price_int:,}"
        except (ValueError, TypeError):
            return self.price

    def get_formatted_display_price(self):
        """قیمت نهایی (با تخفیف) را با استفاده از فرمت‌بندی استاندارد پایتون کاماگذاری می‌کند."""
        try:
            display_price_int = int(self.get_discount_price())
            # این روش به تنظیمات locale جنگو احترام می‌گذارد و جداکننده صحیح را استفاده می‌کند
            return f"{display_price_int:,}"
        except (ValueError, TypeError):
            return self.get_discount_price()


    def get_available_colors(self):
        from django.db.models import Q
        return Color.objects.filter(
            Q(productinventory__product=self) &
            Q(productinventory__quantity__gt=0)
        ).distinct()

    def get_available_sizes(self):
        from django.db.models import Q
        return Size.objects.filter(
            Q(productinventory__product=self) &
            Q(productinventory__quantity__gt=0)
        ).distinct()

    def get_inventory_for_color_size(self, color_id, size_id):
        try:
            return self.inventories.get(color_id=color_id, size_id=size_id)
        except ProductInventory.DoesNotExist:
            return None

    def get_price(self):
        return self.get_discount_price()

    def has_discount(self):
        return self.discount_percent > 0

    def in_stock(self):
        return self.is_in_stock

    def get_stock_for_variant(self, size, color):
        key = f"{size}-{color}"
        return self.inventory.get(key, 0)

    def get_price_for_size(self, size):
        base_price = self.get_discount_price()
        adjustment = self.price_adjustments.get(size, 0)
        return base_price + adjustment

    def get_color_info(self):
        result = []
        for i, color in enumerate(self.colors):
            code = self.color_codes[i] if i < len(self.color_codes) else "#000000"
            result.append({
                'name': color,
                'code': code
            })
        return result

    def get_main_image(self):
        main_image = self.images.filter(is_main=True).first()
        if main_image:
            return main_image
        return self.images.first()  # اگر تصویر اصلی نداشت، اولین تصویر را برگردان

    @property
    def total_stock(self):
        """موجودی کل محصول را از جمع موجودی‌های ProductInventory محاسبه می‌کند"""
        stock_sum = self.inventories.aggregate(total=Sum('quantity'))['total']
        return stock_sum or 0

    @property
    def is_in_stock(self):
        """بررسی می‌کند که آیا محصول بر اساس موجودی‌های رنگ و سایز، موجود است یا خیر"""
        return self.total_stock > 0

    def get_average_rating(self):
        from django.db.models import Avg
        avg_rating = self.reviews.aggregate(avg=Avg('rating'))['avg']
        return round(avg_rating, 1) if avg_rating else 0

    def get_rating_count(self):
        return self.reviews.count()


class ProductImage(models.Model):
    product = models.ForeignKey(Product, on_delete=models.CASCADE, related_name='images', verbose_name='محصول')
    image = models.ImageField(
        upload_to=get_product_image_path,
        verbose_name='تصویر',
        help_text=_('فرمت‌های مجاز: JPG, JPEG, PNG, GIF, WebP')
    )
    alt_text = models.CharField(max_length=200, blank=True, verbose_name='متن جایگزین')
    is_main = models.BooleanField(default=False, verbose_name='تصویر اصلی')
    created_at = models.DateTimeField(auto_now_add=True, verbose_name='تاریخ ایجاد')

    class Meta:
        verbose_name = 'تصویر محصول'
        verbose_name_plural = 'تصاویر محصول'
        ordering = ['-is_main', 'created_at']

    def __str__(self):
        return f"تصویر {self.product.name} - {self.id}"

    def save(self, *args, **kwargs):
        if not self.alt_text:
            self.alt_text = self.product.name

        if self.is_main:
            ProductImage.objects.filter(product=self.product, is_main=True).update(is_main=False)

        super().save(*args, **kwargs)


class ProductFeature(models.Model):
    product = models.ForeignKey(Product, on_delete=models.CASCADE, related_name='features', verbose_name='محصول')
    name = models.CharField(max_length=100, verbose_name='نام ویژگی')
    value = models.CharField(max_length=255, verbose_name='مقدار ویژگی')

    class Meta:
        verbose_name = 'ویژگی محصول'
        verbose_name_plural = 'ویژگی‌های محصول'
        unique_together = ['product', 'name']

    def __str__(self):
        return f"{self.name}: {self.value}"


class Review(models.Model):
    product = models.ForeignKey(Product, on_delete=models.CASCADE, related_name='reviews', verbose_name='محصول')
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='reviews',
                             verbose_name='کاربر')
    rating = models.PositiveSmallIntegerField(validators=[MinValueValidator(1), MaxValueValidator(5)],
                                              verbose_name='امتیاز')
    comment = models.TextField(verbose_name='نظر')
    created_at = models.DateTimeField(auto_now_add=True, verbose_name='تاریخ ثبت')
    updated_at = models.DateTimeField(auto_now=True, verbose_name='تاریخ بروزرسانی')
    is_approved = models.BooleanField(default=False, verbose_name='تایید شده')

    class Meta:
        verbose_name = 'نظر'
        verbose_name_plural = 'نظرات'
        ordering = ['-created_at']
        unique_together = ['product', 'user']  # هر کاربر فقط یک نظر می‌تواند برای هر محصول ثبت کند

    def __str__(self):
        return f"{self.user.username} - {self.product.name} - {self.rating} ستاره"


class Tag(models.Model):
    name = models.CharField(max_length=100, unique=True, verbose_name='نام تگ')
    slug = models.SlugField(max_length=120, unique=True, verbose_name='اسلاگ')
    products = models.ManyToManyField(Product, related_name='tags', blank=True, verbose_name='محصولات')

    class Meta:
        verbose_name = 'تگ'
        verbose_name_plural = 'تگ‌ها'
        ordering = ['name']

    def __str__(self):
        return self.name

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.name)
        super().save(*args, **kwargs)

    def get_absolute_url(self):
        from django.urls import reverse
        return reverse('products:tag', kwargs={'tag_slug': self.slug})


class Banner(models.Model):
    POSITION_CHOICES = [
        ('home_slider', 'اسلایدر صفحه اصلی'),
        ('home_top', 'بالای صفحه اصلی'),
        ('home_middle', 'وسط صفحه اصلی'),
        ('home_bottom', 'پایین صفحه اصلی'),
        ('category_top', 'بالای صفحه دسته‌بندی'),
        ('sidebar', 'ستون کناری'),
    ]

    title = models.CharField(max_length=200, verbose_name='عنوان')
    subtitle = models.CharField(max_length=300, blank=True, verbose_name='زیرعنوان')
    image = models.ImageField(
        upload_to='banners/',
        verbose_name='تصویر',
        help_text=_('فرمت‌های مجاز: JPG, JPEG, PNG, GIF, WebP')
    )
    url = models.URLField(verbose_name='لینک')
    position = models.CharField(max_length=20, choices=POSITION_CHOICES, verbose_name='موقعیت')
    order = models.PositiveSmallIntegerField(default=0, verbose_name='ترتیب نمایش')
    is_active = models.BooleanField(default=True, verbose_name='فعال')
    start_date = models.DateTimeField(null=True, blank=True, verbose_name='تاریخ شروع نمایش')
    end_date = models.DateTimeField(null=True, blank=True, verbose_name='تاریخ پایان نمایش')
    created_at = models.DateTimeField(auto_now_add=True, verbose_name='تاریخ ایجاد')
    updated_at = models.DateTimeField(auto_now=True, verbose_name='تاریخ بروزرسانی')

    class Meta:
        verbose_name = 'بنر تبلیغاتی'
        verbose_name_plural = 'بنرهای تبلیغاتی'
        ordering = ['position', 'order', '-created_at']

    def __str__(self):
        return f"{self.title} - {self.get_position_display()}"

    def is_visible(self):
        from django.utils import timezone
        now = timezone.now()

        if not self.is_active:
            return False

        if self.start_date and self.start_date > now:
            return False

        if self.end_date and self.end_date < now:
            return False

        return True


class Color(models.Model):
    name = models.CharField(max_length=50, unique=True, verbose_name='نام رنگ')
    hex_code = models.CharField(max_length=7, verbose_name='کد رنگ',
                                help_text='کد هگزادسیمال رنگ مثل #FF0000')
    is_active = models.BooleanField(default=True, verbose_name='فعال')
    created_at = models.DateTimeField(auto_now_add=True, verbose_name='تاریخ ایجاد', null=True, blank=True)
    updated_at = models.DateTimeField(auto_now=True, verbose_name='تاریخ بروزرسانی', null=True, blank=True)
    class Meta:
        verbose_name = 'رنگ'
        verbose_name_plural = 'رنگ‌ها'
        ordering = ['name']

    def __str__(self):
        return self.name

    def clean(self):
        from django.core.exceptions import ValidationError
        import re

        # بررسی فرمت hex_code
        if not re.match(r'^#[0-9A-Fa-f]{6}$', self.hex_code):
            raise ValidationError({'hex_code': 'کد رنگ باید به فرمت #RRGGBB باشد (مثل #FF0000)'})

    def save(self, *args, **kwargs):
        # تبدیل hex_code به حروف بزرگ
        if self.hex_code:
            self.hex_code = self.hex_code.upper()
        super().save(*args, **kwargs)

class Size(models.Model):
    name = models.CharField(max_length=20, verbose_name='نام سایز')

    class Meta:
        verbose_name = 'سایز'
        verbose_name_plural = 'سایزها'

    def __str__(self):
        return self.name


class ProductInventory(models.Model):
    product = models.ForeignKey(Product, on_delete=models.CASCADE, related_name='inventories', verbose_name='محصول')
    color = models.ForeignKey(Color, on_delete=models.CASCADE, verbose_name='رنگ')
    size = models.ForeignKey(Size, on_delete=models.CASCADE, verbose_name='سایز')
    quantity = models.PositiveIntegerField(default=0, verbose_name='موجودی')
    weight = models.PositiveIntegerField(default=0, help_text="وزن به گرم")
    dimensions = models.CharField(max_length=100, blank=True, help_text="ابعاد (مثال: 30x40x10)")

    class Meta:
        verbose_name = 'موجودی محصول'
        verbose_name_plural = 'موجودی محصولات'
        unique_together = ('product', 'color', 'size')

    def __str__(self):
        return f"{self.product.name} - {self.color.name} - {self.size.name} ({self.quantity})"

    def to_dict(self):
        return {
            'id': self.id,
            'product_id': self.product_id,
            'color_id': self.color_id,
            'color_name': self.color.name,
            'size_id': self.size_id,
            'size_name': self.size.name,
            'quantity': self.quantity
        }

====== FILE: products/apps.py ======

from django.apps import AppConfig


class ProductsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'products'


====== FILE: products/views.py ======

from django.shortcuts import render, get_object_or_404, redirect
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
from django.db.models import Q, Avg, Count, Min, Max, Value, BooleanField, Sum
from django.http import JsonResponse
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_POST
import json
import logging

from cart.models import WishlistItem, CartItem
from .models import Product, Category, Color, Size, ProductInventory, ProductImage, Review

logger = logging.getLogger(__name__)

def _apply_filters_and_sort(request, products_queryset):
    """اعمال فیلترها و مرتب‌سازی بر روی کوئری محصولات"""
    query = request.GET.get('q', '')
    categories_ids = request.GET.getlist('categories')
    sizes_ids = request.GET.getlist('sizes')
    colors_ids = request.GET.getlist('colors')
    min_price = request.GET.get('min_price')
    max_price = request.GET.get('max_price')
    sort_by = request.GET.get('sort', 'newest')
    brands = request.GET.getlist('brand')

    if query:
        products_queryset = products_queryset.filter(
            Q(name__icontains=query) | Q(description__icontains=query) |
            Q(categories__name__icontains=query) |
            Q(brand__icontains=brands)
        ).distinct()

    if categories_ids:
        products_queryset = products_queryset.filter(categories__id__in=categories_ids).distinct()

    if sizes_ids:
        products_queryset = products_queryset.filter(inventories__size__id__in=sizes_ids).distinct()
    if colors_ids:
        products_queryset = products_queryset.filter(inventories__color__id__in=colors_ids).distinct()

    if min_price:
        try:
            min_price = float(min_price)
            products_queryset = products_queryset.filter(price__gte=min_price)
        except ValueError:
            pass

    if max_price:
        try:
            max_price = float(max_price)
            products_queryset = products_queryset.filter(price__lte=max_price)
        except ValueError:
            pass

    if brands:
        products_queryset = products_queryset.filter(brand__in=brands)

    # مرتب‌سازی
    if sort_by == 'newest':
        products_queryset = products_queryset.order_by('-created_at')
    elif sort_by == 'popular':
        products_queryset = products_queryset.annotate(sales_count=Count('total_sales')).order_by('-total_sales')
    elif sort_by == 'price_low':
        products_queryset = products_queryset.order_by('price')
    elif sort_by == 'price_high':
        products_queryset = products_queryset.order_by('-price')
    elif sort_by == 'rating':
        products_queryset = products_queryset.annotate(avg_rating=Avg('reviews__rating')).order_by('-avg_rating')
    elif sort_by == 'discount':
        products_queryset = products_queryset.filter(discount_percent__gt=0).order_by('-discount_percent')

    return products_queryset, {
        'q': query,
        'categories': categories_ids,
        'sizes': sizes_ids,
        'colors': colors_ids,
        'min_price': min_price,
        'max_price': max_price,
        'brand': brands,
        'sort': sort_by,
    }


def product_list(request):
    """لیست همه محصولات"""
    products_queryset = Product.objects.filter(is_active=True).prefetch_related('images', 'inventories__color',
                                                                                'inventories__size')

    if request.user.is_authenticated:
        products_queryset = products_queryset.annotate(
            is_favorited=Count('wishlistitem', filter=Q(wishlistitem__user=request.user))
        )
    else:
        products_queryset = products_queryset.annotate(is_favorited=Value(0, output_field=BooleanField()))

    products_queryset, current_filters = _apply_filters_and_sort(request, products_queryset)

    # صفحه‌بندی
    paginator = Paginator(products_queryset, 9)
    page_number = request.GET.get('page')
    try:
        products = paginator.page(page_number)
    except PageNotAnInteger:
        products = paginator.page(1)
    except EmptyPage:
        products = paginator.page(paginator.num_pages)

    # دسته‌بندی‌ها
    all_categories = Category.objects.annotate(product_count=Count('products')).filter(product_count__gt=0)

    available_inventory = ProductInventory.objects.filter(
        product__in=products_queryset,
        quantity__gt=0
    )
    available_color_ids = available_inventory.values_list('color_id', flat=True).distinct()
    available_size_ids = available_inventory.values_list('size_id', flat=True).distinct()

    # دریافت آبجکت‌های رنگ و سایز موجود
    all_colors = Color.objects.filter(id__in=available_color_ids).order_by('name')
    all_sizes = Size.objects.filter(id__in=available_size_ids).order_by('name')

    all_brands = products_queryset.values_list('brand', flat=True).distinct().order_by('brand')

    # محدوده قیمت
    price_range_qs = Product.objects.filter(is_active=True)
    min_overall_price = price_range_qs.aggregate(min_price=Min('price'))['min_price']
    max_overall_price = price_range_qs.aggregate(max_price=Max('price'))['max_price']

    price_range = {
        'min_price': min_overall_price if min_overall_price is not None else 0,
        'max_price': max_overall_price if max_overall_price is not None else 10000000,
    }

    context = {
        'page_title': 'همه محصولات',
        'products': products,
        'results_count': products_queryset.count(),
        'all_categories': all_categories,
        'all_sizes': all_sizes,
        'all_colors': all_colors,
        'all_brands': all_brands,
        'price_range': price_range,
        'current_filters': current_filters,
    }
    return render(request, 'products/product_list.html', context)


def category_list(request, category_slug):
    """لیست محصولات یک دسته‌بندی خاص"""
    category = get_object_or_404(Category, slug=category_slug)
    products_queryset = Product.objects.filter(is_active=True).filter(
        Q(categories=category) | Q(categories__parent=category)
    ).prefetch_related('images')

    if request.user.is_authenticated:
        products_queryset = products_queryset.annotate(
            is_favorited=Count('wishlistitem', filter=Q(wishlistitem__user=request.user))
        )
    else:
        products_queryset = products_queryset.annotate(is_favorited=Value(0, output_field=BooleanField()))

    products_queryset, current_filters = _apply_filters_and_sort(request, products_queryset)

    # صفحه‌بندی
    paginator = Paginator(products_queryset, 9)
    page_number = request.GET.get('page')
    try:
        products = paginator.page(page_number)
    except PageNotAnInteger:
        products = paginator.page(1)
    except EmptyPage:
        products = paginator.page(paginator.num_pages)

    # زیردسته‌ها
    subcategories = category.children.annotate(product_count=Count('products')).filter(product_count__gt=0)

    available_inventory = ProductInventory.objects.filter(
        product__in=products_queryset,
        quantity__gt=0
    )
    available_color_ids = available_inventory.values_list('color_id', flat=True).distinct()
    available_size_ids = available_inventory.values_list('size_id', flat=True).distinct()

    # دریافت آبجکت‌های رنگ و سایز موجود
    all_colors = Color.objects.filter(id__in=available_color_ids).order_by('name')
    all_sizes = Size.objects.filter(id__in=available_size_ids).order_by('name')

    all_brands = products_queryset.values_list('brand', flat=True).distinct().order_by('brand')

    # محدوده قیمت برای این دسته‌بندی
    price_range_qs = Product.objects.filter(is_active=True, categories=category)
    min_overall_price = price_range_qs.aggregate(min_price=Min('price'))['min_price']
    max_overall_price = price_range_qs.aggregate(max_price=Max('price'))['max_price']
    price_range = {
        'min_price': min_overall_price if min_overall_price is not None else 0,
        'max_price': max_overall_price if max_overall_price is not None else 10000000,
    }

    context = {
        'page_title': category.name,
        'products': products,
        'categories': category,
        'subcategories': subcategories,
        'results_count': products_queryset.count(),
        'all_sizes': all_sizes,
        'all_colors': all_colors,
        'all_brands': all_brands,
        'price_range': price_range,
        'current_filters': current_filters,
    }
    return render(request, 'products/category_detail.html', context)


def search_results(request):
    """نتایج جستجو"""
    products_queryset = Product.objects.filter(is_active=True).prefetch_related('images')

    if request.user.is_authenticated:
        products_queryset = products_queryset.annotate(
            is_favorited=Count('wishlistitem', filter=Q(wishlistitem__user=request.user))
        )
    else:
        products_queryset = products_queryset.annotate(is_favorited=Value(0, output_field=BooleanField()))

    products_queryset, current_filters = _apply_filters_and_sort(request, products_queryset)
    query = request.GET.get('q', '')

    # صفحه‌بندی
    paginator = Paginator(products_queryset, 9)
    page_number = request.GET.get('page')
    try:
        products = paginator.page(page_number)
    except PageNotAnInteger:
        products = paginator.page(1)
    except EmptyPage:
        products = paginator.page(paginator.num_pages)

    # دسته‌بندی‌ها
    all_categories = Category.objects.annotate(product_count=Count('products')).filter(product_count__gt=0)

    available_inventory = ProductInventory.objects.filter(
        product__in=products_queryset,
        quantity__gt=0
    )
    available_color_ids = available_inventory.values_list('color_id', flat=True).distinct()
    available_size_ids = available_inventory.values_list('size_id', flat=True).distinct()

    # دریافت آبجکت‌های رنگ و سایز موجود
    all_colors = Color.objects.filter(id__in=available_color_ids).order_by('name')
    all_sizes = Size.objects.filter(id__in=available_size_ids).order_by('name')

    all_brands = products_queryset.values_list('brand', flat=True).distinct().order_by('brand')

    # محدوده قیمت
    price_range_qs = Product.objects.filter(is_active=True)
    min_overall_price = price_range_qs.aggregate(min_price=Min('price'))['min_price']
    max_overall_price = price_range_qs.aggregate(max_price=Max('price'))['max_price']
    price_range = {
        'min_price': min_overall_price if min_overall_price is not None else 0,
        'max_price': max_overall_price if max_overall_price is not None else 10000000,
    }

    context = {
        'page_title': f'نتایج جستجو برای: "{query}"',
        'query': query,
        'products': products,
        'results_count': products_queryset.count(),
        'all_categories': all_categories,
        'all_sizes': all_sizes,
        'all_colors': all_colors,
        'all_brands': all_brands,
        'price_range': price_range,
        'current_filters': current_filters,
    }
    return render(request, 'products/search_results.html', context)


def product_detail(request, product_id):
    """نمایش جزئیات محصول"""
    product = get_object_or_404(Product, id=product_id, is_active=True)

    # دریافت موجودی‌های محصول با رنگ و سایز
    inventories = ProductInventory.objects.filter(
        product=product,
        quantity__gt=0
    ).select_related('color', 'size')

    # محاسبه کل موجودی
    total_stock = sum(inv.quantity for inv in inventories)

    # دریافت رنگ‌ها و سایزهای موجود
    available_colors = Color.objects.filter(
        id__in=inventories.values_list('color_id', flat=True).distinct()
    ).distinct()

    available_sizes = Size.objects.filter(
        id__in=inventories.values_list('size_id', flat=True).distinct()
    ).distinct()

    # ایجاد mapping برای JavaScript
    inventory_mapping = {}
    for inv in inventories:
        color_id = str(inv.color.id) if inv.color else 'null'
        size_id = str(inv.size.id) if inv.size else 'null'

        if color_id not in inventory_mapping:
            inventory_mapping[color_id] = {}

        inventory_mapping[color_id][size_id] = {
            'quantity': inv.quantity,
            'size_name': inv.size.name if inv.size else '',
            'color_name': inv.color.name if inv.color else ''
        }

    # محصولات مشابه
    related_products = Product.objects.filter(
        categories__in=product.categories.all(),  # ✅ تغییر اصلی اینجا است
        is_active=True
    ).exclude(id=product.id).distinct()[:8]

    # اگر محصولات مشابه کم بود، از دسته‌های مرتبط هم بگیر
    if related_products.count() < 4:
        related_products = Product.objects.filter(
            Q(categories__in=product.categories.all()) |  # ✅ اینجا هم باید تغییر کند
            Q(brand=product.brand),  # فرض بر این است که brand یک CharField یا ForeignKey است
            is_active=True
        ).exclude(id=product.id).distinct()[:8]

    # بررسی اینکه کاربر این محصول را خریداری کرده یا نه
    has_purchased = False
    if request.user.is_authenticated:
        # فرض می‌کنیم مدل Order و OrderItem دارید
        # has_purchased = OrderItem.objects.filter(
        #     order__user=request.user,
        #     product=product,
        #     order__status='completed'
        # ).exists()
        pass

    context = {
        'product': product,
        'related_products': related_products,
        'available_colors': available_colors,
        'available_sizes': available_sizes,
        'total_stock': total_stock,
        'inventory_mapping': json.dumps(inventory_mapping),
        'has_purchased': has_purchased,
    }

    return render(request, 'products/product_detail.html', context)


@require_POST
def add_review(request, product_id):
    """افزودن نظر به محصول"""
    if not request.user.is_authenticated:
        return JsonResponse({
            'success': False,
            'message': 'برای ثبت نظر ابتدا وارد حساب کاربری خود شوید.',
            'redirect': '/accounts/login/'
        })

    product = get_object_or_404(Product, id=product_id)

    # بررسی اینکه کاربر این محصول را خریداری کرده یا نه
    # has_purchased = OrderItem.objects.filter(
    #     order__user=request.user,
    #     product=product,
    #     order__status='completed'
    # ).exists()

    # فعلاً این بررسی را غیرفعال می‌کنیم
    has_purchased = True

    if not has_purchased:
        return JsonResponse({
            'success': False,
            'message': 'فقط کاربرانی که این محصول را خریداری کرده‌اند می‌توانند نظر ثبت کنند.'
        })

    try:
        rating = int(request.POST.get('rating', 5))
        comment = request.POST.get('comment', '')

        if not comment.strip():
            return JsonResponse({
                'success': False,
                'message': 'لطفاً متن نظر خود را وارد کنید.'
            })

        # بررسی اینکه کاربر قبلاً نظر داده یا نه
        existing_review, created = Review.objects.get_or_create(
            product=product,
            user=request.user,
            defaults={'rating': rating, 'comment': comment}
        )

        if not created:
            existing_review.rating = rating
            existing_review.comment = comment
            existing_review.save()
            message = 'نظر شما با موفقیت به‌روزرسانی شد.'
        else:
            message = 'نظر شما با موفقیت ثبت شد.'

        return JsonResponse({
            'success': True,
            'message': message
        })

    except Exception as e:
        return JsonResponse({
            'success': False,
            'message': 'خطا در ثبت نظر. لطفاً دوباره تلاش کنید.'
        })


def quick_view(request, product_id):
    try:
        logger.info(f"Quick view requested for product {product_id}")

        # دریافت محصول
        product = get_object_or_404(Product, id=product_id, is_active=True)
        logger.info(f"Product found: {product.name}")

        # دریافت موجودی‌ها
        inventories = ProductInventory.objects.select_related('color', 'size').filter(
            product=product,
            quantity__gt=0  # فقط موجودی‌های بیشتر از صفر
        ).order_by('color__name', 'size__name')

        logger.info(f"Found {inventories.count()} inventory records")

        # محاسبه موجودی کل - استفاده از property total_stock
        total_stock = product.total_stock

        # ساخت inventory mapping و جمع‌آوری رنگ‌ها و سایزها
        inventory_mapping = {}
        colors_dict = {}
        sizes_dict = {}

        for inv in inventories:
            if not inv.color or not inv.size:
                continue  # Skip if color or size is None

            color_key = str(inv.color.id)
            size_key = str(inv.size.id)

            # اضافه کردن به inventory mapping
            if color_key not in inventory_mapping:
                inventory_mapping[color_key] = {}

            inventory_mapping[color_key][size_key] = {
                'quantity': inv.quantity,
                'color_name': inv.color.name,
                'color_hex': getattr(inv.color, 'hex_code', '#CCCCCC') or '#CCCCCC',
                'size_name': inv.size.name
            }

            # جمع‌آوری رنگ‌ها و سایزها
            if inv.color.id not in colors_dict:
                colors_dict[inv.color.id] = {
                    'id': inv.color.id,
                    'name': inv.color.name,
                    'hex_code': getattr(inv.color, 'hex_code', '#CCCCCC') or '#CCCCCC'
                }

            if inv.size.id not in sizes_dict:
                sizes_dict[inv.size.id] = {
                    'id': inv.size.id,
                    'name': inv.size.name
                }

        # تبدیل dict به list و مرتب‌سازی
        available_colors = list(colors_dict.values())
        available_sizes = list(sizes_dict.values())

        available_colors.sort(key=lambda x: x['name'])
        available_sizes.sort(key=lambda x: x['name'])

        logger.info(f"Available colors: {len(available_colors)}")
        logger.info(f"Available sizes: {len(available_sizes)}")
        logger.info(f"Total stock: {total_stock}")

        # بررسی وضعیت علاقه‌مندی
        is_favorited = False
        if request.user.is_authenticated:
            try:
                from cart.models import WishlistItem
                is_favorited = WishlistItem.objects.filter(
                    user=request.user,
                    product=product
                ).exists()
            except Exception:
                is_favorited = False

        context = {
            'product': product,
            'total_stock': total_stock,  # استفاده از total_stock
            'available_colors': available_colors,
            'available_sizes': available_sizes,
            'inventory_mapping': json.dumps(inventory_mapping, ensure_ascii=False, separators=(',', ':')),
            'is_favorited': is_favorited,
        }

        logger.info("Context prepared successfully, rendering template")
        return render(request, 'products/quick_view_modal_content.html', context)

    except Product.DoesNotExist:
        logger.error(f"Product with id {product_id} not found")
        return JsonResponse({
            'error': 'محصول مورد نظر یافت نشد'
        }, status=404)

    except Exception as e:
        logger.error(f"Error in quick_view: {str(e)}", exc_info=True)
        return JsonResponse({
            'error': f'خطا در بارگذاری اطلاعات محصول: {str(e)}'
        }, status=500)
@require_POST
@csrf_exempt
def toggle_wishlist(request):
    """اضافه/حذف محصول از علاقه‌مندی‌ها"""
    if not request.user.is_authenticated:
        return JsonResponse({
            'success': False,
            'message': 'برای این عمل باید وارد شوید'
        })

    try:
        data = json.loads(request.body)
        product_id = data.get('product_id')
        product = get_object_or_404(Product, id=product_id)

        wishlist_item, created = WishlistItem.objects.get_or_create(
            user=request.user,
            product=product
        )

        if not created:
            wishlist_item.delete()
            is_favorited = False
        else:
            is_favorited = True

        return JsonResponse({
            'success': True,
            'is_favorited': is_favorited
        })

    except Exception as e:
        return JsonResponse({
            'success': False,
            'message': 'خطا در عملیات'
        })


@require_POST
def add_to_cart(request):
    try:
        data = json.loads(request.body)
        product_id = data.get('product_id')
        quantity = int(data.get('quantity', 1))
        color_id = data.get('color_id')
        size_id = data.get('size_id')

        product = Product.objects.get(id=product_id, is_active=True)

        if not request.user.is_authenticated:
            return JsonResponse({
                'success': False,
                'error': 'لطفاً ابتدا وارد حساب کاربری خود شوید.',
                'redirect': '/users/login/'
            })

        # تعیین نام رنگ و سایز
        color_name = None
        size_name = None
        inventory = None

        # پیدا کردن inventory مناسب
        if color_id and size_id:
            try:
                color = Color.objects.get(id=color_id)
                size = Size.objects.get(id=size_id)
                color_name = color.name
                size_name = size.name

                # پیدا کردن inventory
                inventory = ProductInventory.objects.get(
                    product=product,
                    color=color,
                    size=size
                )

                # بررسی موجودی
                if quantity > inventory.quantity:
                    return JsonResponse({
                        'success': False,
                        'error': f'تنها {inventory.quantity} عدد از این ترکیب موجود است.'
                    })

            except Color.DoesNotExist:
                return JsonResponse({'success': False, 'error': 'رنگ انتخاب شده یافت نشد.'})
            except Size.DoesNotExist:
                return JsonResponse({'success': False, 'error': 'سایز انتخاب شده یافت نشد.'})
            except ProductInventory.DoesNotExist:
                return JsonResponse({'success': False, 'error': 'این ترکیب رنگ و سایز موجود نیست.'})

        elif color_id:
            try:
                color = Color.objects.get(id=color_id)
                color_name = color.name
            except Color.DoesNotExist:
                return JsonResponse({'success': False, 'error': 'رنگ انتخاب شده یافت نشد.'})

        elif size_id:
            try:
                size = Size.objects.get(id=size_id)
                size_name = size.name
            except Size.DoesNotExist:
                return JsonResponse({'success': False, 'error': 'سایز انتخاب شده یافت نشد.'})

        # بررسی موجودی کل محصول اگر inventory خاص نداریم
        if not inventory:
            total_stock = product.total_stock  # استفاده از property total_stock
            if quantity > total_stock:
                return JsonResponse({
                    'success': False,
                    'error': f'تنها {total_stock} عدد از این محصول موجود است.'
                })

        # ایجاد یا به‌روزرسانی CartItem
        cart_item, created = CartItem.objects.get_or_create(
            user=request.user,
            product=product,
            color=color_name or '',
            size=size_name or '',
            defaults={
                'quantity': quantity,
                'inventory': inventory
            }
        )

        if not created:
            # بررسی موجودی برای quantity جدید
            new_quantity = cart_item.quantity + quantity
            max_quantity = inventory.quantity if inventory else product.total_stock

            if new_quantity > max_quantity:
                return JsonResponse({
                    'success': False,
                    'error': f'تنها {max_quantity} عدد از این محصول موجود است. شما {cart_item.quantity} عدد در سبد دارید.'
                })

            cart_item.quantity = new_quantity
            cart_item.save()

        # محاسبه تعداد کل آیتم‌های سبد
        cart_items_count = CartItem.objects.filter(user=request.user).count()

        return JsonResponse({
            'success': True,
            'message': 'محصول با موفقیت به سبد خرید اضافه شد.',
            'cart_items_count': cart_items_count
        })

    except Product.DoesNotExist:
        return JsonResponse({'success': False, 'error': 'محصول یافت نشد.'})
    except Exception as e:
        return JsonResponse({'success': False, 'error': f'خطا در افزودن به سبد خرید: {str(e)}'})

====== FILE: products/urls.py ======

from django.urls import path
from . import views

app_name = 'products'

urlpatterns = [
 # لیست همه محصولات - نام‌های مختلف برای سازگاری
 path('', views.product_list, name='list'),
 path('', views.product_list, name='product_list'),

 # نتایج جستجو
 path('search/', views.search_results, name='search'),

 # لیست محصولات بر اساس دسته‌بندی
 path('category/<slug:category_slug>/', views.category_list, name='category_list'),

 # افزودن/حذف محصول از علاقه‌مندی‌ها
 path('toggle-wishlist/', views.toggle_wishlist, name='toggle_wishlist'),
 # path('get-inventory/<int:product_id>/', views.get_inventory_data, name='get_inventory'),

 # افزودن محصول به سبد خرید
 path('add-to-cart/', views.add_to_cart, name='add_to_cart'),

 # افزودن نظر
 path('add-review/<int:product_id>/', views.add_review, name='add_review'),

 # Quick View محصول
 path('<int:product_id>/quick-view/', views.quick_view, name='quick_view'),

 # جزئیات یک محصول خاص - نام‌های مختلف برای سازگاری
 path('<int:product_id>/', views.product_detail, name='detail'),
 path('<int:product_id>/', views.product_detail, name='product_detail'),

    # ⚠️ توجه: توابع زیر در آخرین کد views.py که من برای شما فرستادم، تعریف نشده‌اند.
    # اگر این توابع را در views.py خود ندارید، باید آن‌ها را پیاده‌سازی کنید
    # تا از خطای "AttributeError" جلوگیری شود.
    # path('men/', views.men_products, name='men'),
    # path('women/', views.women_products, name='women'),
    # path('featured/', views.featured_products, name='featured'),
    # path('latest/', views.latest_products, name='latest'),
    # path('<int:product_id>/add-review/', views.add_review, name='add_review'),
]

====== FILE: products/serializers.py ======

# serializers.py
from rest_framework import serializers
# serializers.pyfrom rest_framework import serializers
from .models import Product, Review, Category, ProductImage

# ==========================================
#  Supporting Serializers
# ==========================================

class ReviewSerializer(serializers.ModelSerializer):
    """Serializer for product reviews."""
    # اضافه کردن نام کاربر (اگر مدل User شما فیلد مناسبی دارد)
    # user_name = serializers.CharField(source='user.get_full_name', read_only=True) # مثال    class Meta:
    model = Review
    fields = [
        'id', 'user', #'user_name',
        'product', 'rating', 'comment', 'created_at'
    ]
    read_only_fields = ['user', 'created_at', 'product'] # معمولا product هم read_only است


class CategorySerializer(serializers.ModelSerializer):
    """Serializer for product categories."""
    class Meta:
        model = Category
        fields = ['id', 'name', 'description', 'slug', 'created_at']
        # Slug معمولا خودکار ساخته می‌شود یا اختیاری است
        extra_kwargs = {
            'slug': {'required': False, 'read_only': True} # اگر خودکار ساخته می‌شود
        }


class ProductImageSerializer(serializers.ModelSerializer):
    image_url = serializers.SerializerMethodField()

    class Meta:
        model = ProductImage
        fields = ['id', 'image_url', 'is_primary', 'image'] # image اصلی را هم نگه می‌داریم (برای مدیریت شاید)
        read_only_fields = ['id', 'image_url']

    def get_image_url(self, obj):
        """Builds the absolute URL for the gallery image."""
        request = self.context.get('request')
        if obj.image and hasattr(obj.image, 'url') and request:
            # استفاده از obj.image.url برای دریافت مسیر نسبی
            # و سپس ساخت URL کامل
            return request.build_absolute_uri(obj.image.url)
        # اگر تصویری نیست یا درخواستی وجود ندارد، null برگردان
        return None

# ==========================================
#  Main Product Serializers
# ==========================================

class BaseProductSerializer(serializers.ModelSerializer):
    """
    Base serializer containing common methods for handling
    colors, sizes, stock, discount price, and image URLs.
    """
    # --- Serializer Method Fields for calculated/formatted data ---
    colors = serializers.SerializerMethodField(method_name='get_colors_list')
    sizes = serializers.SerializerMethodField(method_name='get_sizes_list')
    discount_price = serializers.SerializerMethodField(read_only=True)
    in_stock = serializers.SerializerMethodField(read_only=True)
    image_url = serializers.SerializerMethodField(method_name='get_main_image_url') # برای URL تصویر اصلی

    # --- Helper Methods (used by SerializerMethodFields) ---
    def get_colors_list(self, obj):
        """Converts comma-separated string 'colors' field to a list of strings."""
        if obj.colors and isinstance(obj.colors, str):
            # حذف فضای خالی و موارد خالی بعد از split
            return [color.strip() for color in obj.colors.split(',') if color.strip()]
            return [] # Return empty list if no colors or not a string

    def get_sizes_list(self, obj):
        """Converts comma-separated string 'sizes' field to a list of strings."""
        if obj.sizes and isinstance(obj.sizes, str):
            return [size.strip() for size in obj.sizes.split(',') if size.strip()]
        return []

    def get_discount_price(self, obj):
        """        Calculates the final price after applying the discount.
        Returns the original price if no valid discount exists.
        Ensures the output is always a float.
        """
        try:
            # اطمینان از اینکه قیمت‌ها عددی هستند قبل از محاسبه
            original_price = float(obj.price) if obj.price is not None else 0.0
            # فرض: obj.discount مقدار تخفیف است (نه درصد)
            discount_amount = float(obj.discount) if obj.discount is not None else 0.0

            # اعمال تخفیف فقط اگر معتبر باشد
            if 0 < discount_amount < original_price:
                return original_price - discount_amount
            # در غیر این صورت، قیمت اصلی را برگردان
            return original_price
        except (ValueError, TypeError):
            # اگر تبدیل نوع یا محاسبه با خطا مواجه شد، قیمت اصلی را برگردان
            return float(obj.price) if obj.price is not None else 0.0

    def get_in_stock(self, obj):
        """Checks if the product stock is greater than 0."""
        return obj.stock is not None and obj.stock > 0

    def get_main_image_url(self, obj):
        """Builds the absolute URL for the main product image."""
        request = self.context.get('request')
        # بررسی وجود تصویر و داشتن attribute 'url' (برای FileField/ImageField)
        if obj.image and hasattr(obj.image, 'url') and request:
            return request.build_absolute_uri(obj.image.url)
        return None # یا URL تصویر پیش‌فرض: return request.build_absolute_uri('/static/placeholder.png')

    # --- Representation Override for final type checks ---
    def to_representation(self, instance):
        """Ensures price fields are floats in the final output."""
        representation = super().to_representation(instance)

        # اطمینان از اینکه قیمت اصلی به float تبدیل شده
        if representation.get('price') is not None:
            try:
                representation['price'] = float(representation['price'])
            except (ValueError, TypeError):
                 # اگر قیمت اصلی نامعتبر است، آن را 0 یا None قرار بده
                representation['price'] = 0.0
        else:
             representation['price'] = 0.0 # یا None

        # discount_price قبلاً در get_discount_price به float تبدیل شده،
        # اما برای اطمینان اگر None بود، برابر قیمت اصلی قرار می‌دهیم
        if representation.get('discount_price') is None:             representation['discount_price'] = representation['price']

        # اگر فیلد 'discount' (مقدار تخفیف) را هم ارسال می‌کنید:
        if 'discount' in representation and representation.get('discount') is not None:
             try:
                 representation['discount'] = float(representation['discount'])
             except (ValueError, TypeError):
                 representation['discount'] = 0.0
        elif 'discount' in representation:
             representation['discount'] = 0.0 # یا None

        return representation


class ProductSerializer(BaseProductSerializer):
     """
     Serializer for the Product LIST view.
     Sends only the fields needed by ProductCard.js.
     Inherits common methods from BaseProductSerializer.
     """
     # فیلد مستقیم از مدل (فقط خواندنی برای لیست)
     category_name = serializers.CharField(source='category.name', read_only=True) # تعریف فیلد

     class Meta:
         model = Product
         # لیست دقیق فیلدهایی که ProductCard.js نیاز دارد:
         fields = [
         'id', # Number (برای لینک و key)
         'name', # String
         'brand', # String (اختیاری)
         'image_url', # String (URL کامل تصویر اصلی)
         'price', # Number (قیمت اصلی)
         'discount_price', # Number (قیمت نهایی با تخفیف)
         'colors', # Array of Strings (لیست نام رنگ‌ها)
         'sizes', # Array of Strings (لیست نام سایزها)
         'in_stock', # Boolean
         'category_name', # <<<--- اضافه شد / از کامنت خارج شد
         ]
         # read_only_fields = fields # این خط اختیاری است، چون همه فیلدها در fields هستند

class ProductDetailSerializer(BaseProductSerializer):
    """
    Serializer for the Product DETAIL view.
    Includes more fields like description, gallery, reviews, etc.
    Inherits common methods from BaseProductSerializer.
    """    # فیلدهای مرتبط با استفاده از سریالایزرهای دیگر
    # برای گالری، از source استفاده می‌کنیم که به related_name یا نام فیلد در مدل اشاره دارد
    # فرض می‌کنیم related_name در ProductImage ForeignKey به Product، برابر 'gallery_images' است
    gallery = ProductImageSerializer(many=True, read_only=True, source='gallery_images') # <<< نام source را با مدل خود تطبیق دهید
    reviews = ReviewSerializer(many=True, read_only=True)
    category_name = serializers.CharField(source='category.name', read_only=True)

    class Meta:
        model = Product
        # لیست فیلدها برای صفحه جزئیات محصول
        fields = [
            'id',
            'category', # ID دسته بندی اصلی
            'category_name',
            'name',
            'description',      # توضیحات کامل محصول
            'price',            # قیمت اصلی (Number)
            'discount',         # مقدار تخفیف (Number - اختیاری، اگر می‌خواهید نمایش دهید)
            'discount_price',   # قیمت نهایی (Number)
            'stock',            # تعداد موجودی (Number)
            'in_stock',         # وضعیت موجودی (Boolean)
            'brand',
            'image_url',        # URL تصویر اصلی
            'gallery',          # لیست تصاویر گالری (از ProductImageSerializer)
            'attributes',       # اگر فیلد JSON یا مشابه دارید
            'is_featured',            'created_at',
            'updated_at',
            'colors',           # لیست رنگ‌ها (Array of Strings)
            'sizes',            # لیست سایزها (Array of Strings)
            'reviews'           # لیست نظرات
        ]        # read_only_fields = [...] # در صورت نیاز فیلدهای فقط خواندنی را مشخص کنید

    # نیازی به بازنویسی to_representation نیست چون از BaseProductSerializer ارث‌بری می‌شود
    # و متدهای get_... هم ارث‌بری می‌شوند.








====== FILE: products/tests.py ======

from django.test import TestCase

# Create your tests here.


====== FILE: products/migrations/0004_color_size_product_inventory_and_more.py ======

# Generated by Django 5.1.5 on 2025-05-17 12:48

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('products', '0003_alter_banner_image_alter_category_image_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Color',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='نام رنگ')),
                ('code', models.CharField(help_text='مثال: #FF5733', max_length=10, verbose_name='کد رنگ')),
            ],
            options={
                'verbose_name': 'رنگ',
                'verbose_name_plural': 'رنگ\u200cها',
            },
        ),
        migrations.CreateModel(
            name='Size',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, verbose_name='نام سایز')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='ترتیب')),
            ],
            options={
                'verbose_name': 'سایز',
                'verbose_name_plural': 'سایزها',
                'ordering': ['order', 'name'],
            },
        ),
        migrations.AddField(
            model_name='product',
            name='inventory',
            field=models.JSONField(default=dict, help_text='دیکشنری از موجودی هر ترکیب رنگ و سایز مانند {"S-سفید": 10, "M-سفید": 5}', verbose_name='موجودی بر اساس رنگ و سایز'),
        ),
        migrations.AddField(
            model_name='product',
            name='price_adjustments',
            field=models.JSONField(default=dict, help_text='دیکشنری از تغییرات قیمت مانند {"S": 0, "M": 10000, "L": 20000}', verbose_name='تغییرات قیمت'),
        ),
    ]


====== FILE: products/migrations/0009_remove_product_color_codes_remove_product_colors_and_more.py ======

# Generated by Django 5.1.5 on 2025-09-03 12:05

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('products', '0008_remove_color_hex_code_field_product_color_codes_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.RemoveField(
            model_name='product',
            name='color_codes',
        ),
        migrations.RemoveField(
            model_name='product',
            name='colors',
        ),
        migrations.RemoveField(
            model_name='product',
            name='inventory',
        ),
        migrations.RemoveField(
            model_name='product',
            name='price_adjustments',
        ),
        migrations.RemoveField(
            model_name='product',
            name='sizes',
        ),
        migrations.AddField(
            model_name='color',
            name='hex_code_field',
            field=models.CharField(blank=True, default='#CCCCCC', help_text='مثال: #RRGGBB. اگر خالی باشد، از نام رنگ برای تعیین کد هگز استفاده می\u200cشود.', max_length=7, verbose_name='کد هگزادسیمال (اختیاری)'),
        ),
        migrations.CreateModel(
            name='ProductQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField(verbose_name='متن سوال')),
                ('answer_text', models.TextField(blank=True, null=True, verbose_name='متن پاسخ')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='تاریخ سوال')),
                ('answered_at', models.DateTimeField(blank=True, null=True, verbose_name='تاریخ پاسخ')),
                ('is_answered', models.BooleanField(default=False, verbose_name='پاسخ داده شده')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='products.product', verbose_name='محصول')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to=settings.AUTH_USER_MODEL, verbose_name='کاربر')),
            ],
            options={
                'verbose_name': 'سوال محصول',
                'verbose_name_plural': 'سوالات محصول',
                'ordering': ['-created_at'],
            },
        ),
    ]


====== FILE: products/migrations/0007_remove_product_color_codes_remove_product_colors_and_more.py ======

# Generated by Django 5.1.5 on 2025-09-03 09:29

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('products', '0006_productinventory_dimensions_productinventory_weight'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.RemoveField(
            model_name='product',
            name='color_codes',
        ),
        migrations.RemoveField(
            model_name='product',
            name='colors',
        ),
        migrations.RemoveField(
            model_name='product',
            name='inventory',
        ),
        migrations.RemoveField(
            model_name='product',
            name='price_adjustments',
        ),
        migrations.RemoveField(
            model_name='product',
            name='sizes',
        ),
        migrations.RemoveField(
            model_name='product',
            name='stock',
        ),
        migrations.AddField(
            model_name='color',
            name='hex_code_field',
            field=models.CharField(blank=True, default='#CCCCCC', help_text='مثال: #RRGGBB. اگر خالی باشد، از نام رنگ برای تعیین کد هگز استفاده می\u200cشود.', max_length=7, verbose_name='کد هگزادسیمال (اختیاری)'),
        ),
        migrations.CreateModel(
            name='ProductQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField(verbose_name='متن سوال')),
                ('answer_text', models.TextField(blank=True, null=True, verbose_name='متن پاسخ')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='تاریخ سوال')),
                ('answered_at', models.DateTimeField(blank=True, null=True, verbose_name='تاریخ پاسخ')),
                ('is_answered', models.BooleanField(default=False, verbose_name='پاسخ داده شده')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='products.product', verbose_name='محصول')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to=settings.AUTH_USER_MODEL, verbose_name='کاربر')),
            ],
            options={
                'verbose_name': 'سوال محصول',
                'verbose_name_plural': 'سوالات محصول',
                'ordering': ['-created_at'],
            },
        ),
    ]


====== FILE: products/migrations/0006_productinventory_dimensions_productinventory_weight.py ======

# Generated by Django 5.1.5 on 2025-05-20 11:31

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('products', '0005_alter_size_options_remove_color_code_and_more'),
    ]

    operations = [
        migrations.AddField(
            model_name='productinventory',
            name='dimensions',
            field=models.CharField(blank=True, help_text='ابعاد (مثال: 30x40x10)', max_length=100),
        ),
        migrations.AddField(
            model_name='productinventory',
            name='weight',
            field=models.PositiveIntegerField(default=0, help_text='وزن به گرم'),
        ),
    ]


====== FILE: products/migrations/__init__.py ======



====== FILE: products/migrations/0003_alter_banner_image_alter_category_image_and_more.py ======

# Generated by Django 5.1.5 on 2025-05-17 09:09

import products.models
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('products', '0002_initial'),
    ]

    operations = [
        migrations.AlterField(
            model_name='banner',
            name='image',
            field=models.ImageField(help_text='فرمت\u200cهای مجاز: JPG, JPEG, PNG, GIF, WebP', upload_to='banners/', verbose_name='تصویر'),
        ),
        migrations.AlterField(
            model_name='category',
            name='image',
            field=models.ImageField(blank=True, help_text='فرمت\u200cهای مجاز: JPG, JPEG, PNG, GIF, WebP', upload_to=products.models.get_category_image_path, verbose_name='تصویر'),
        ),
        migrations.AlterField(
            model_name='productimage',
            name='image',
            field=models.ImageField(help_text='فرمت\u200cهای مجاز: JPG, JPEG, PNG, GIF, WebP', upload_to=products.models.get_product_image_path, verbose_name='تصویر'),
        ),
    ]


====== FILE: products/migrations/0010_remove_color_hex_code_field_product_color_codes_and_more.py ======

# Generated by Django 5.1.5 on 2025-09-03 13:14

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('products', '0009_remove_product_color_codes_remove_product_colors_and_more'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='color',
            name='hex_code_field',
        ),
        migrations.AddField(
            model_name='product',
            name='color_codes',
            field=models.JSONField(default=list, help_text='به صورت آرایه\u200cای از کدهای رنگ مانند ["#FFFFFF", "#000000", "#0000FF"]', verbose_name='کد رنگ\u200cها'),
        ),
        migrations.AddField(
            model_name='product',
            name='colors',
            field=models.JSONField(default=list, help_text='به صورت آرایه\u200cای از رنگ\u200cها مانند ["سفید", "مشکی", "آبی"]', verbose_name='رنگ\u200cها'),
        ),
        migrations.AddField(
            model_name='product',
            name='inventory',
            field=models.JSONField(default=dict, help_text='دیکشنری از موجودی هر ترکیب رنگ و سایز مانند {"S-سفید": 10, "M-سفید": 5}', verbose_name='موجودی بر اساس رنگ و سایز'),
        ),
        migrations.AddField(
            model_name='product',
            name='price_adjustments',
            field=models.JSONField(default=dict, help_text='دیکشنری از تغییرات قیمت مانند {"S": 0, "M": 10000, "L": 20000}', verbose_name='تغییرات قیمت'),
        ),
        migrations.AddField(
            model_name='product',
            name='sizes',
            field=models.JSONField(default=list, help_text='به صورت آرایه\u200cای از سایزها مانند ["S", "M", "L"]', verbose_name='سایزها'),
        ),
        migrations.DeleteModel(
            name='ProductQuestion',
        ),
    ]


====== FILE: products/migrations/0008_remove_color_hex_code_field_product_color_codes_and_more.py ======

# Generated by Django 5.1.5 on 2025-09-03 11:36

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('products', '0007_remove_product_color_codes_remove_product_colors_and_more'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='color',
            name='hex_code_field',
        ),
        migrations.AddField(
            model_name='product',
            name='color_codes',
            field=models.JSONField(default=list, help_text='به صورت آرایه\u200cای از کدهای رنگ مانند ["#FFFFFF", "#000000", "#0000FF"]', verbose_name='کد رنگ\u200cها'),
        ),
        migrations.AddField(
            model_name='product',
            name='colors',
            field=models.JSONField(default=list, help_text='به صورت آرایه\u200cای از رنگ\u200cها مانند ["سفید", "مشکی", "آبی"]', verbose_name='رنگ\u200cها'),
        ),
        migrations.AddField(
            model_name='product',
            name='inventory',
            field=models.JSONField(default=dict, help_text='دیکشنری از موجودی هر ترکیب رنگ و سایز مانند {"S-سفید": 10, "M-سفید": 5}', verbose_name='موجودی بر اساس رنگ و سایز'),
        ),
        migrations.AddField(
            model_name='product',
            name='price_adjustments',
            field=models.JSONField(default=dict, help_text='دیکشنری از تغییرات قیمت مانند {"S": 0, "M": 10000, "L": 20000}', verbose_name='تغییرات قیمت'),
        ),
        migrations.AddField(
            model_name='product',
            name='sizes',
            field=models.JSONField(default=list, help_text='به صورت آرایه\u200cای از سایزها مانند ["S", "M", "L"]', verbose_name='سایزها'),
        ),
        migrations.DeleteModel(
            name='ProductQuestion',
        ),
    ]


====== FILE: products/migrations/0005_alter_size_options_remove_color_code_and_more.py ======

# Generated by Django 5.1.5 on 2025-05-20 08:48

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('products', '0004_color_size_product_inventory_and_more'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='size',
            options={'verbose_name': 'سایز', 'verbose_name_plural': 'سایزها'},
        ),
        migrations.RemoveField(
            model_name='color',
            name='code',
        ),
        migrations.RemoveField(
            model_name='size',
            name='order',
        ),
        migrations.CreateModel(
            name='ProductInventory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=0, verbose_name='موجودی')),
                ('color', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.color', verbose_name='رنگ')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventories', to='products.product', verbose_name='محصول')),
                ('size', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.size', verbose_name='سایز')),
            ],
            options={
                'verbose_name': 'موجودی محصول',
                'verbose_name_plural': 'موجودی محصولات',
                'unique_together': {('product', 'color', 'size')},
            },
        ),
    ]



====== FILE: products/templatetags/__init__.py ======



====== FILE: products/templatetags/my_custom_filters.py ======

# pages/templatetags/my_custom_filters.py

from django import template

register = template.Library()

@register.filter
def batch(value, arg):
    """
    Returns a list of lists of the given size. For example:
    {% for row in items|batch:3 %}
        {% for item in row %}
            {{ item }}
        {% endfor %}
    {% endfor %}
    """
    try:
        arg = int(arg)
    except ValueError:
        # اگر ورودی arg عدد نبود، لیست اصلی را برمی‌گردانیم
        return value
    if not value:
        return []
    # لیست را به قطعاتی با اندازه arg تقسیم می‌کند
    return [value[i:i + arg] for i in range(0, len(value), arg)]

====== FILE: products/templatetags/currency_filters.py ======

from django import template

register = template.Library()

@register.filter(name='fa_currency')
def fa_currency(value):
    """
    یک مقدار عددی را به رشته‌ای با جداکننده هزارگان و ارقام فارسی تبدیل می‌کند.
    """
    try:
        # تبدیل مقدار به عدد صحیح برای فرمت‌بندی
        value = int(value)
        # استفاده از f-string برای کاماگذاری خودکار بر اساس locale
        return f"{value:,}"
    except (ValueError, TypeError):
        return value

====== FILE: products/templatetags/product_filters.py ======

# FILE: products/templatetags/product_filters.py
from django import template
from django.http.request import QueryDict

register = template.Library()

@register.simple_tag(takes_context=True)
def url_replace(context, **kwargs):
    """
    Replaces current GET parameters with new ones provided in kwargs.
    Useful for pagination and sorting.
    Example: {% url_replace page=products.next_page_number sort='price_low' %}
    """
    query = context['request'].GET.copy()
    for key, value in kwargs.items():
        if value is None:
            if key in query:
                del query[key]
        else:
            query[key] = value
    return query.urlencode()

@register.filter
def get_item(dictionary, key):
    """
    Allows accessing dictionary items by key in Django templates.
    Example: {{ my_dict|get_item:key_variable }}
    """
    return dictionary.get(key)

@register.filter
def is_string(value):
    return isinstance(value, str)

@register.filter
def is_number(value):
    return isinstance(value, (int, float))

@register.filter
def is_list(value):
    return isinstance(value, list)

@register.filter
def is_queryset(value):
    from django.db.models.query import QuerySet
    return isinstance(value, QuerySet)

====== FILE: products/management/__init__.py ======



====== FILE: products/management/commands/populate_colors.py ======

# management/commands/populate_colors.py
# ابتدا این مسیر را ایجاد کنید: products/management/commands/

from django.core.management.base import BaseCommand
from products.models import Color


class Command(BaseCommand):
    help = 'Populate database with default Iranian colors'

    def handle(self, *args, **options):
        colors_data = [
            # خنثی
            ('سفید', '#FFFFFF'), ('مشکی', '#000000'), ('خاکستری', '#808080'),
            ('نقره‌ای', '#C0C0C0'), ('کرم', '#FFFDD0'), ('بژ', '#F5F5DC'),
            ('طوسی', '#708090'), ('دودی', '#696969'), ('زغالی', '#36454F'),
            ('استخوانی', '#F9F6EE'), ('شیری', '#FDFFF5'), ('خاکستری روشن', '#D3D3D3'),

            # قرمز طیف
            ('قرمز', '#FF0000'), ('زرشکی', '#8B0000'), ('سرخ', '#E30022'),
            ('لاکی', '#D21404'), ('آجری', '#B22222'), ('قرمز آتشین', '#FF4500'),
            ('قرمز گیلاسی', '#D2042D'), ('عنابی', '#722F37'), ('کالباسی', '#F08080'),
            ('قرمز توت فرنگی', '#FC5A8D'), ('جگری', '#800020'), ('آلبالویی', '#8B0000'),
            ('قرمز گوجه‌ای', '#FF6347'), ('شرابی', '#722F37'), ('سرخابی', '#DC143C'),

            # صورتی طیف
            ('صورتی', '#FFC0CB'), ('صورتی کم‌رنگ', '#FFB6C1'), ('صورتی تیره', '#FF69B4'),
            ('رز', '#FF007F'), ('گلی', '#FFB5C5'), ('صورتی پررنگ', '#DE3163'),
            ('صورتی پاستلی', '#F8C8DC'), ('مرجانی', '#FF7F50'), ('رزگلد', '#B76E79'),

            # نارنجی طیف
            ('نارنجی', '#FFA500'), ('هلویی', '#FFE5B4'), ('نارنجی تیره', '#FF8C00'),
            ('نارنجی روشن', '#FFD580'), ('کهربایی', '#FFBF00'), ('پرتقالی', '#FCA510'),
            ('زردآلویی', '#FBCEB1'), ('مسی', '#B87333'), ('نارنجی پرتقالی', '#FF7518'),

            # زرد طیف
            ('زرد', '#FFFF00'), ('طلایی', '#FFD700'), ('لیمویی', '#32CD32'),
            ('زرد کم‌رنگ', '#FFFFE0'), ('زرد آفتابی', '#FFC72C'), ('زرد کانولا', '#FFEF00'),
            ('نباتی', '#F5DEB3'), ('زرد لیمو', '#FFF44F'), ('برنزی', '#CD7F32'),
            ('خردلی', '#FFDB58'), ('زرد قناری', '#FFFF99'), ('کاهی', '#E8DEB5'),
            ('نخودی', '#F2DDA4'),

            # سبز طیف
            ('سبز', '#008000'), ('سبز لجنی', '#556B2F'), ('سبز یشمی', '#00A86B'),
            ('سبز زیتونی', '#808000'), ('سبز تیره', '#006400'), ('سبز روشن', '#90EE90'),
            ('سبز جنگلی', '#228B22'), ('سبز دریایی', '#2E8B57'), ('سبز چمنی', '#7CFC00'),
            ('سبز فسفری', '#7FFF00'), ('سبز نعنایی', '#98FF98'), ('سبز کاج', '#01796F'),
            ('سبز پسته‌ای', '#93C572'), ('سبز ارتشی', '#4B5320'), ('سبزآبی', '#008080'),
            ('سبز زمردی', '#50C878'), ('سبز سیدی', '#32CD32'),

            # آبی طیف
            ('آبی', '#0000FF'), ('آبی آسمانی', '#87CEEB'), ('آبی نفتی', '#000080'),
            ('فیروزه‌ای', '#40E0D0'), ('آبی روشن', '#ADD8E6'), ('آبی تیره', '#00008B'),
            ('آبی دریایی', '#006994'), ('آبی یخی', '#99FFFF'), ('آبی الکتریک', '#7DF9FF'),
            ('آبی کبالت', '#0047AB'), ('سرمه‌ای', '#191970'), ('لاجوردی', '#4169E1'),
            ('آبی پودری', '#B0E0E6'), ('آبی پاستلی', '#A7C7E7'), ('کله غازی', '#008B8B'),
            ('نیلی', '#4B0082'),

            # بنفش طیف
            ('بنفش', '#8A2BE2'), ('یاسی', '#C8A2C8'), ('ارغوانی', '#9932CC'),
            ('بنفش تیره', '#301934'), ('بنفش روشن', '#E6E6FA'), ('بادمجانی', '#483D8B'),
            ('ماژنتا', '#FF00FF'), ('بنفش شاهی', '#800080'), ('بنفش پاستلی', '#B1A2C7'),
            ('ویولت', '#8F00FF'),

            # قهوه‌ای طیف
            ('قهوه‌ای', '#A52A2A'), ('شکلاتی', '#D2691E'), ('قهوه‌ای تیره', '#654321'),
            ('قهوه‌ای روشن', '#C4A484'), ('خاکی', '#C2B280'), ('کاراملی', '#C68E17'),
            ('قهوه‌ای سوخته', '#3B2F2F'), ('عسلی', '#D4AF37'), ('گندمی', '#F5DEB3'),
            ('شنی', '#C2B280'), ('زعفرانی', '#F4C430'), ('حنایی', '#AB274F'),
            ('خرمایی', '#5C4033'), ('نسکافه‌ای', '#826644'), ('دارچینی', '#D2691E'),

            # رنگ‌های خاص
            ('صدفی', '#FAF0E6'), ('مروارید', '#E2DFD2'), ('فیروزه', '#30D5C8'),
            ('بادامی', '#EED9C4'), ('گردویی', '#725C42'), ('انار', '#C0362C'),
            ('انگوری', '#6F2DA8'), ('توتی', '#5A1F3C'), ('نارگیلی', '#965A3E'),
        ]

        created_count = 0
        updated_count = 0

        for name, hex_code in colors_data:
            color, created = Color.objects.get_or_create(
                name=name,
                defaults={'hex_code': hex_code, 'is_active': True}
            )

            if created:
                created_count += 1
                self.stdout.write(
                    self.style.SUCCESS(f'رنگ "{name}" با کد "{hex_code}" ایجاد شد.')
                )
            else:
                # اگر رنگ وجود دارد اما hex_code متفاوت است، آپدیت کن
                if color.hex_code != hex_code:
                    color.hex_code = hex_code
                    color.save()
                    updated_count += 1
                    self.stdout.write(
                        self.style.WARNING(f'کد رنگ "{name}" به "{hex_code}" آپدیت شد.')
                    )

        self.stdout.write(
            self.style.SUCCESS(
                f'\nخلاصه:\n'
                f'- {created_count} رنگ جدید ایجاد شد\n'
                f'- {updated_count} رنگ آپدیت شد\n'
                f'- مجموع رنگ‌های موجود: {Color.objects.count()}'
            )
        )

====== FILE: products/management/commands/__init__.py ======


services:
  postgres:
    image: postgres:15-alpine
    container_name: zima_postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-zima}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-rezazh79}
      DJANGO_ENV: production
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    networks:
      - zima_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-zima}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: zima_redis
    networks:
      - zima_network
    environment:
      DJANGO_ENV: production
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # کانتینر Django جداگانه برای دیباگ و توسعه
  django:
    build:
      context: .
      dockerfile: Dockerfile.gunicorn
    container_name: zima_django
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env.production
    environment:
      - DB_HOST=postgres
      - REDIS_HOST=redis
      - DJANGO_ENV=development
      - SERVICE_TYPE=django
    volumes:
      - ./:/app
      - ./staticfiles:/app/staticfiles
      - ./media:/app/media
      - ./logs:/app/logs
    networks:
      - zima_network
    restart: unless-stopped
    ports:
      - "8001:8000"

  # کانتینر Gunicorn اصلی
  gunicorn:
    build:
      context: .
      dockerfile: Dockerfile.gunicorn
    container_name: zima_gunicorn
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env.production
    environment:
      - DB_HOST=postgres
      - REDIS_HOST=redis
      - DJANGO_ENV=production
      - SERVICE_TYPE=gunicorn
    volumes:
      - ./staticfiles:/app/staticfiles
      - ./media:/app/media
      - ./logs:/app/logs
    networks:
      - zima_network
    restart: unless-stopped
    expose:
      - "8000"

  daphne:
    build:
      context: .
      dockerfile: Dockerfile.gunicorn
    container_name: zima_daphne
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env.production
    environment:
      - DB_HOST=postgres
      - REDIS_HOST=redis
      - DJANGO_ENV=production
      - SERVICE_TYPE=daphne
    volumes:
      - ./staticfiles:/app/staticfiles
      - ./media:/app/media
      - ./logs:/app/logs
    networks:
      - zima_network
    restart: unless-stopped
    expose:
      - "8001"

  # سرویس پاکسازی دیتابیس
  db-cleanup:
    image: postgres:15-alpine
    container_name: zima_db_cleanup
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"
    environment:
      PGPASSWORD: ${DB_PASSWORD:-rezazh79}
    networks:
      - zima_network
    command: >
      sh -c "
        echo 'Waiting for postgres...'
        until pg_isready -h postgres -U ${DB_USER:-postgres} -d ${DB_NAME:-zima}; do
          echo 'Waiting for PostgreSQL...'
          sleep 2
        done
        
        echo 'Cleaning up chat tables if needed...'
        psql -h postgres -U ${DB_USER:-postgres} -d ${DB_NAME:-zima} << 'EOF'
        -- حذف رکوردهای مایگریشن مربوط به chat
        DELETE FROM django_migrations WHERE app='chat';
        
        -- حذف جداول چت
        DROP TABLE IF EXISTS chat_chatroom CASCADE;
        DROP TABLE IF EXISTS chat_chatmessage CASCADE;
        DROP TABLE IF EXISTS chat_deletedchat CASCADE;
        
        -- حذف سایر جداول مرتبط با چت
        DO \$\$
        DECLARE
            r RECORD;
        BEGIN
            FOR r IN (SELECT table_name FROM information_schema.tables WHERE table_name LIKE 'chat_%' AND table_schema='public')
            LOOP
                EXECUTE 'DROP TABLE IF EXISTS ' || quote_ident(r.table_name) || ' CASCADE';
            END LOOP;
        END
        \$\$;
        
        -- حذف نوع‌های مرتبط با چت
        DO \$\$
        DECLARE
            r RECORD;
        BEGIN
            FOR r IN (SELECT typname FROM pg_type WHERE typname LIKE 'chat_%')
            LOOP
                EXECUTE 'DROP TYPE IF EXISTS ' || quote_ident(r.typname) || ' CASCADE';
            END LOOP;
        END
        \$\$;
        EOF
        
        echo 'Cleanup completed!'
      "

  # nginx
  nginx:
    image: nginx:alpine
    container_name: zima_nginx
    depends_on:
      - gunicorn
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./staticfiles:/app/staticfiles:ro
      - ./media:/app/media:ro
    networks:
      - zima_network
    environment:
      - NGINX_SERVER_NAMES_HASH_BUCKET_SIZE=64
    restart: unless-stopped

volumes:
  postgres_data:
    name: zima_postgres_data

networks:
  zima_network:
    name: zima_network
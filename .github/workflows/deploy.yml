name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # کاهش timeout

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Deploy to server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        command_timeout: 20m  # کاهش timeout
        script: |
          #!/bin/bash
          set -e
          
          echo "===== Starting deployment process at $(date) ====="
          
          # تنظیم متغیرهای محیطی برای مدیریت تایم‌اوت‌ها
          export COMPOSE_HTTP_TIMEOUT=120
          export DOCKER_CLIENT_TIMEOUT=120
          
          # تابع تلاش مجدد برای اجرای دستورات
          function retry {
            local retries=$1
            local wait_time=$2
            shift 2
            local count=0
            until "$@"; do
              exit_status=$?
              count=$((count + 1))
              if [ $count -lt $retries ]; then
                echo "Command failed with exit status $exit_status. Retrying in $wait_time seconds..."
                sleep $wait_time
              else
                echo "Command failed after $count attempts. Continuing..."
                return $exit_status
              fi
            done
            return 0
          }
          
          # مرحله 1: آماده‌سازی دایرکتوری پروژه
          echo "===== Stage 1: Preparing project directory ====="
          if [ -d "/var/www/zimabestshop/zima_backend" ]; then
            cd /var/www/zimabestshop/zima_backend
            echo "Resetting any local changes..."
            git reset --hard || echo "Git reset failed, continuing..."
            git clean -fd || echo "Git clean failed, continuing..."
          else
            echo "Directory not found, creating..."
            mkdir -p /var/www/zimabestshop
            cd /var/www/zimabestshop
            retry 3 30 git clone https://github.com/rezazh/zima_backend.git
            cd zima_backend
          fi
          
          # مرحله 2: دریافت آخرین تغییرات
          echo "===== Stage 2: Pulling latest changes from git ====="
          retry 3 15 git pull --ff-only origin main || (
            echo "Fast-forward pull failed, fetching and resetting..."
            retry 2 15 git fetch origin main && 
            git reset --hard origin/main
          )
          
          echo "Recent commits:"
          git log -1 --pretty=format:"%h - %an, %ar : %s"
          
          # مرحله 3: توقف کانتینرها
          echo "===== Stage 3: Stopping containers ====="
          retry 2 15 timeout 120 docker-compose down || echo "Docker-compose down failed, continuing..."
          
          # مرحله 4: پاکسازی تصاویر غیرضروری (اختیاری)
          echo "===== Stage 4: Cleaning up unused images ====="
          docker image prune -f || echo "Image cleanup failed, continuing..."
          
          # مرحله 5: بیلد کانتینرها
          echo "===== Stage 5: Building containers ====="
          export DOCKER_BUILDKIT=1
          export COMPOSE_DOCKER_CLI_BUILD=1
          
          retry 2 30 docker-compose build --parallel || echo "Build failed, continuing with cached images..."
          
          # مرحله 6: راه‌اندازی کانتینرها
          echo "===== Stage 6: Starting containers ====="
          retry 2 20 docker-compose up -d || echo "Failed to start containers..."
          
          # مرحله 7: بررسی وضعیت کانتینرها
          echo "===== Stage 7: Checking container status ====="
          MAX_WAIT=60
          WAIT_INTERVAL=5
          ELAPSED=0
          
          while [ $ELAPSED -lt $MAX_WAIT ]; do
            CONTAINERS_UP=$(docker-compose ps --services --filter "status=running" | wc -l)
            
            if [ "$CONTAINERS_UP" -ge 4 ]; then  # حداقل 4 کانتینر اصلی
              echo "Main containers are up and running!"
              break
            fi
            
            echo "Waiting for containers... ($CONTAINERS_UP running, ${ELAPSED}s elapsed)"
            sleep $WAIT_INTERVAL
            ELAPSED=$((ELAPSED + WAIT_INTERVAL))
          done
          
          echo "Container status:"
          docker-compose ps
          
          # مرحله 8: بررسی نهایی
          echo "===== Stage 8: Final checks ====="
          echo "Checking for errors in logs..."
          docker-compose logs --tail=5 | grep -i "error\|fail" || echo "No immediate errors found"
          
          echo "===== Deployment completed at $(date) ====="
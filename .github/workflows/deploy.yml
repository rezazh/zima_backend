name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          command_timeout: 30m
          debug: true
          script: |
            #!/bin/bash
            # مدیریت خطا به صورت دستی
            set +e
            
            echo "===== Starting deployment at $(date) ====="
            
            # مرحله 1: آماده‌سازی
            echo "===== Stage 1: Preparing ====="
            cd /var/www/zimabestshop/zima_backend || { echo "❌ Failed to access project directory"; exit 1; }
            
            # ذخیره هش کامیت فعلی
            OLD_COMMIT=$(git rev-parse HEAD 2>/dev/null || echo "unknown")
            
            git reset --hard
            git clean -fd
            
            # مرحله 2: دریافت تغییرات
            echo "===== Stage 2: Pulling changes ====="
            git pull origin main
            
            # بررسی ساده برای تغییرات
            NEW_COMMIT=$(git rev-parse HEAD 2>/dev/null || echo "unknown")
            if [ "$OLD_COMMIT" != "$NEW_COMMIT" ]; then
              echo "✅ Changes detected - will rebuild containers"
              NEEDS_REBUILD=true
            else
              echo "ℹ️ No changes detected - will restart containers"
              NEEDS_REBUILD=false
            fi
            
            # مرحله 3: ایجاد پشتیبان از دیتابیس
            echo "===== Stage 3: Database backup ====="
            BACKUP_DIR="/var/www/zimabestshop/backups"
            mkdir -p $BACKUP_DIR
            BACKUP_FILE="$BACKUP_DIR/db_backup_$(date +%Y%m%d_%H%M%S).sql"
            
            # پیدا کردن کانتینر دیتابیس
            DB_CONTAINER=$(docker-compose ps -q postgres 2>/dev/null || docker ps -qf name=zima_postgres 2>/dev/null || echo "")
            
            if [ -n "$DB_CONTAINER" ] && docker inspect $DB_CONTAINER &>/dev/null; then
              echo "Creating database backup..."
              docker exec $DB_CONTAINER pg_dumpall -U postgres > $BACKUP_FILE 2>/dev/null && echo "✅ Backup saved to $BACKUP_FILE" || echo "⚠️ Database backup failed, continuing"
            else
              echo "ℹ️ Database container not running, skipping backup"
            fi
            
            # مرحله 4: توقف کانتینرها
            echo "===== Stage 4: Stopping containers ====="
            docker-compose down --timeout 60 || echo "⚠️ Stop failed, continuing..."
            
            # مرحله 5: بررسی فضای دیسک و پاکسازی در صورت نیاز
            echo "===== Stage 5: Checking disk space ====="
            DISK_SPACE=$(df -h / | tail -1 | awk '{print $5}' | sed 's/%//' || echo "0")
            if [ "$DISK_SPACE" -gt 80 ]; then
              echo "⚠️ Disk space is low ($DISK_SPACE%), cleaning up old images..."
              docker image prune -af --filter "until=24h" || echo "⚠️ Cleanup failed, continuing"
            else
              echo "✅ Disk space is sufficient ($DISK_SPACE%)"
            fi
            
            # مرحله 6: بیلد و راه‌اندازی کانتینرها
            echo "===== Stage 6: Building and starting containers ====="
            
            # دانلود تصاویر مورد نیاز با مکانیزم تلاش مجدد
            echo "Pre-pulling essential images..."
            for IMG in "nginx:alpine" "redis:latest" "postgres:15-alpine" "python:3.11-alpine"; do
              if ! docker image inspect "$IMG" &>/dev/null; then
                echo "Pulling $IMG..."
                for TRY in {1..3}; do
                  docker pull "$IMG" && break || echo "⚠️ Pull attempt $TRY failed"
                  [ $TRY -eq 3 ] && echo "⚠️ Could not pull $IMG, will use cached version if available"
                  sleep 3
                done
              fi
            done
            
            # راه‌اندازی کانتینرها با استراتژی مناسب
            if [ "$NEEDS_REBUILD" = true ]; then
              echo "Performing full rebuild..."
              for TRY in {1..3}; do
                echo "Attempt $TRY to build and start containers..."
                if docker-compose up -d --build; then
                  echo "✅ Containers built and started successfully"
                  break
                else
                  echo "⚠️ Build attempt $TRY failed"
                  [ $TRY -eq 3 ] && echo "⚠️ All build attempts failed, continuing anyway"
                  sleep 5
                fi
              done
            else
              echo "Starting containers without rebuild..."
              for TRY in {1..3}; do
                echo "Attempt $TRY to start containers..."
                if docker-compose up -d; then
                  echo "✅ Containers started successfully"
                  break
                else
                  echo "⚠️ Start attempt $TRY failed"
                  [ $TRY -eq 3 ] && echo "⚠️ All start attempts failed, continuing anyway"
                  sleep 5
                fi
              done
            fi
            
            # مرحله 7: اجرای مایگریشن‌ها
            echo "===== Stage 7: Running migrations ====="
            echo "Waiting for database to be ready..."
            for i in {1..15}; do
              if docker-compose exec -T postgres pg_isready -U postgres &>/dev/null; then
                echo "✅ Database is ready"
                break
              fi
              echo "Waiting for database... ($i/15)"
              [ $i -eq 15 ] && echo "⚠️ Database not ready, but continuing"
              sleep 2
            done
            
            # پیدا کردن کانتینر جنگو
            DJANGO_CONTAINER=""
            for SERVICE in web django app gunicorn; do
              CONTAINER_ID=$(docker-compose ps -q $SERVICE 2>/dev/null || echo "")
              if [ -n "$CONTAINER_ID" ]; then
                DJANGO_CONTAINER=$CONTAINER_ID
                echo "✅ Found Django container: $SERVICE"
                break
              fi
            done
            
            if [ -n "$DJANGO_CONTAINER" ]; then
              echo "Running migrations..."
              docker exec $DJANGO_CONTAINER python manage.py migrate --noinput && echo "✅ Migrations completed" || echo "⚠️ Migration failed"
              
              echo "Collecting static files..."
              docker exec $DJANGO_CONTAINER python manage.py collectstatic --noinput && echo "✅ Static files collected" || echo "⚠️ Static collection failed"
            else
              echo "⚠️ Django container not found, skipping migrations"
            fi
            
            # مرحله 8: بررسی وضعیت سلامت
            echo "===== Stage 8: Health check ====="
            echo "Waiting for services to stabilize..."
            sleep 10
            
            echo "Current containers:"
            docker-compose ps || docker ps
            
            # مرحله 9: پاکسازی کش و فایل‌های موقت
            echo "===== Stage 9: Cleanup ====="
            if [ -n "$DJANGO_CONTAINER" ]; then
              echo "Cleaning up cache files..."
              docker exec $DJANGO_CONTAINER sh -c "find /tmp -type f -name '*.py[co]' -delete 2>/dev/null; find /tmp -type d -name '__pycache__' -delete 2>/dev/null" || echo "⚠️ Cache cleanup failed"
            fi
            
            # حذف بکاپ‌های قدیمی
            echo "Removing backups older than 7 days..."
            find $BACKUP_DIR -name "db_backup_*.sql" -type f -mtime +7 -delete 2>/dev/null || echo "⚠️ Old backup cleanup failed"
            
            # مرحله 10: نمایش لاگ‌های اخیر
            echo "===== Stage 10: Recent logs ====="
            docker-compose logs --tail=20 || echo "⚠️ Could not fetch logs"
            
            echo "===== Deployment completed successfully at $(date) ====="
            
            # نمایش خلاصه تغییرات
            if [ "$OLD_COMMIT" != "$NEW_COMMIT" ] && [ "$OLD_COMMIT" != "unknown" ]; then
              COMMIT_COUNT=$(git log --oneline $OLD_COMMIT..$NEW_COMMIT | wc -l || echo "?")
              echo "📊 Summary: Deployed $COMMIT_COUNT new commit(s)"
              echo "🔄 From: $OLD_COMMIT"
              echo "🔄 To: $NEW_COMMIT"
            else
              echo "📊 Summary: No new changes were deployed"
            fi
            
            exit 0
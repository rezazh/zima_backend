name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          command_timeout: 20m
          script: |
            #!/bin/bash
            set -e  # خروج در صورت بروز خطا
            trap 'echo "❌ Error occurred at line $LINENO. Command: $BASH_COMMAND"' ERR
            
            echo "🚀 Starting deployment: $(date)"
            
            # 1. آماده‌سازی و دریافت تغییرات
            cd /var/www/zimabestshop/zima_backend
            OLD_COMMIT=$(git rev-parse HEAD 2>/dev/null || echo "none")
            git fetch origin main
            git reset --hard origin/main
            NEW_COMMIT=$(git rev-parse HEAD)
            
            # بررسی تغییرات
            if [ "$OLD_COMMIT" = "$NEW_COMMIT" ]; then
              echo "✅ No changes detected. Deployment not needed."
              exit 0
            fi
            
            echo "📦 Changes detected. Deploying commit: ${NEW_COMMIT:0:8}"
            
            # 2. بکاپ دیتابیس (فقط اگر تغییرات مدل وجود داشته باشد)
            if git diff --name-only $OLD_COMMIT $NEW_COMMIT | grep -q "models.py\|migrations/"; then
              echo "🔄 Model changes detected. Creating database backup..."
              BACKUP_DIR="/var/www/zimabestshop/backups"
              mkdir -p $BACKUP_DIR
              BACKUP_FILE="$BACKUP_DIR/db_backup_$(date +%Y%m%d_%H%M%S).sql"
              docker-compose exec -T postgres pg_dumpall -U postgres > $BACKUP_FILE || echo "⚠️ Backup failed but continuing"
            fi
            
            # 3. راه‌اندازی مجدد کانتینرها
            echo "🔄 Restarting containers..."
            docker-compose down
            docker-compose up -d --build
            
            # 4. انتظار برای آماده شدن دیتابیس
            echo "⏳ Waiting for database..."
            for i in {1..10}; do
              if docker-compose exec -T postgres pg_isready -U postgres &>/dev/null; then
                echo "✅ Database is ready"
                break
              fi
              echo "⏳ Waiting... ($i/10)"
              sleep 3
            done
            
            # 5. اجرای مایگریشن‌ها
            echo "🔄 Running migrations..."
            docker-compose exec -T django python manage.py migrate --noinput
            docker-compose exec -T django python manage.py collectstatic --noinput
            
            # 6. پاکسازی
            echo "🧹 Cleaning up..."
            docker image prune -f
            find $BACKUP_DIR -name "db_backup_*.sql" -type f -mtime +7 -delete 2>/dev/null || true
            
            # 7. بررسی وضعیت نهایی
            echo "✅ Deployment completed: $(date)"
            echo "📊 Summary: Deployed changes from ${OLD_COMMIT:0:8} to ${NEW_COMMIT:0:8}"
            docker-compose ps